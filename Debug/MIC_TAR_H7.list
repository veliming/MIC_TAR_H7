
MIC_TAR_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abd8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800ae78  0800ae78  0001ae78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800af60  0800af60  0001af60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800af68  0800af68  0001af68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800af6c  0800af6c  0001af6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800af70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000039c  24000074  0800afe4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000410  0800afe4  00020410  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c9f3  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003550  00000000  00000000  0003ca95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014c8  00000000  00000000  0003ffe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001360  00000000  00000000  000414b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a661  00000000  00000000  00042810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ddeb  00000000  00000000  0007ce71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c886  00000000  00000000  0009ac5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002074e2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ec4  00000000  00000000  00207534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ae60 	.word	0x0800ae60

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800ae60 	.word	0x0800ae60

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_DMA_Init+0x4c>)
 800068c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000690:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <MX_DMA_Init+0x4c>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_DMA_Init+0x4c>)
 800069c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2102      	movs	r1, #2
 80006ac:	200b      	movs	r0, #11
 80006ae:	f001 fa4a 	bl	8001b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006b2:	200b      	movs	r0, #11
 80006b4:	f001 fa61 	bl	8001b7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2102      	movs	r1, #2
 80006bc:	200c      	movs	r0, #12
 80006be:	f001 fa42 	bl	8001b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006c2:	200c      	movs	r0, #12
 80006c4:	f001 fa59 	bl	8001b7a <HAL_NVIC_EnableIRQ>

}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	58024400 	.word	0x58024400

080006d4 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ea:	4b42      	ldr	r3, [pc, #264]	; (80007f4 <MX_GPIO_Init+0x120>)
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f0:	4a40      	ldr	r2, [pc, #256]	; (80007f4 <MX_GPIO_Init+0x120>)
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fa:	4b3e      	ldr	r3, [pc, #248]	; (80007f4 <MX_GPIO_Init+0x120>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	f003 0310 	and.w	r3, r3, #16
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000708:	4b3a      	ldr	r3, [pc, #232]	; (80007f4 <MX_GPIO_Init+0x120>)
 800070a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070e:	4a39      	ldr	r2, [pc, #228]	; (80007f4 <MX_GPIO_Init+0x120>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000718:	4b36      	ldr	r3, [pc, #216]	; (80007f4 <MX_GPIO_Init+0x120>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <MX_GPIO_Init+0x120>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072c:	4a31      	ldr	r2, [pc, #196]	; (80007f4 <MX_GPIO_Init+0x120>)
 800072e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000736:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <MX_GPIO_Init+0x120>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b2b      	ldr	r3, [pc, #172]	; (80007f4 <MX_GPIO_Init+0x120>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074a:	4a2a      	ldr	r2, [pc, #168]	; (80007f4 <MX_GPIO_Init+0x120>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000754:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <MX_GPIO_Init+0x120>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <MX_GPIO_Init+0x120>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	4a22      	ldr	r2, [pc, #136]	; (80007f4 <MX_GPIO_Init+0x120>)
 800076a:	f043 0302 	orr.w	r3, r3, #2
 800076e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_GPIO_Init+0x120>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2108      	movs	r1, #8
 8000784:	481c      	ldr	r0, [pc, #112]	; (80007f8 <MX_GPIO_Init+0x124>)
 8000786:	f003 fc9b 	bl	80040c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000790:	4819      	ldr	r0, [pc, #100]	; (80007f8 <MX_GPIO_Init+0x124>)
 8000792:	f003 fc95 	bl	80040c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000796:	2308      	movs	r3, #8
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4812      	ldr	r0, [pc, #72]	; (80007f8 <MX_GPIO_Init+0x124>)
 80007ae:	f003 fad7 	bl	8003d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007bc:	2302      	movs	r3, #2
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_GPIO_Init+0x128>)
 80007c8:	f003 faca 	bl	8003d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 80007cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_GPIO_Init+0x124>)
 80007e6:	f003 fabb 	bl	8003d60 <HAL_GPIO_Init>

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	58024400 	.word	0x58024400
 80007f8:	58021000 	.word	0x58021000
 80007fc:	58020800 	.word	0x58020800

08000800 <MX_I2S1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_I2S1_Init+0x60>)
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <MX_I2S1_Init+0x64>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_I2S1_Init+0x60>)
 800080c:	2206      	movs	r2, #6
 800080e:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_I2S1_Init+0x60>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_I2S1_Init+0x60>)
 8000818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800081c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_I2S1_Init+0x60>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_I2S1_Init+0x60>)
 8000826:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800082a:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_I2S1_Init+0x60>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_I2S1_Init+0x60>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_I2S1_Init+0x60>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_I2S1_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_ENABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_I2S1_Init+0x60>)
 8000846:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_I2S1_Init+0x60>)
 800084e:	f003 fc51 	bl	80040f4 <HAL_I2S_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000858:	f000 fb16 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	24000090 	.word	0x24000090
 8000864:	40013000 	.word	0x40013000

08000868 <MX_I2S2_Init>:
/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_I2S2_Init+0x60>)
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <MX_I2S2_Init+0x64>)
 8000870:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_I2S2_Init+0x60>)
 8000874:	2206      	movs	r2, #6
 8000876:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_I2S2_Init+0x60>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_I2S2_Init+0x60>)
 8000880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000884:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_I2S2_Init+0x60>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_I2S2_Init+0x60>)
 800088e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000892:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_I2S2_Init+0x60>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_I2S2_Init+0x60>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_I2S2_Init+0x60>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_I2S2_Init+0x60>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_I2S2_Init+0x60>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_I2S2_Init+0x60>)
 80008b4:	f003 fc1e 	bl	80040f4 <HAL_I2S_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2S2_Init+0x5a>
  {
    Error_Handler();
 80008be:	f000 fae3 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	240000e4 	.word	0x240000e4
 80008cc:	40003800 	.word	0x40003800

080008d0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	; 0x30
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a86      	ldr	r2, [pc, #536]	; (8000b08 <HAL_I2S_MspInit+0x238>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d178      	bne.n	80009e4 <HAL_I2S_MspInit+0x114>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008f2:	4b86      	ldr	r3, [pc, #536]	; (8000b0c <HAL_I2S_MspInit+0x23c>)
 80008f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008f8:	4a84      	ldr	r2, [pc, #528]	; (8000b0c <HAL_I2S_MspInit+0x23c>)
 80008fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000902:	4b82      	ldr	r3, [pc, #520]	; (8000b0c <HAL_I2S_MspInit+0x23c>)
 8000904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800090c:	61bb      	str	r3, [r7, #24]
 800090e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b7e      	ldr	r3, [pc, #504]	; (8000b0c <HAL_I2S_MspInit+0x23c>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000916:	4a7d      	ldr	r2, [pc, #500]	; (8000b0c <HAL_I2S_MspInit+0x23c>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000920:	4b7a      	ldr	r3, [pc, #488]	; (8000b0c <HAL_I2S_MspInit+0x23c>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800092e:	2330      	movs	r3, #48	; 0x30
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800093e:	2305      	movs	r3, #5
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4871      	ldr	r0, [pc, #452]	; (8000b10 <HAL_I2S_MspInit+0x240>)
 800094a:	f003 fa09 	bl	8003d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800094e:	2340      	movs	r3, #64	; 0x40
 8000950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000956:	2302      	movs	r3, #2
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800095e:	2305      	movs	r3, #5
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4869      	ldr	r0, [pc, #420]	; (8000b10 <HAL_I2S_MspInit+0x240>)
 800096a:	f003 f9f9 	bl	8003d60 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 800096e:	4b69      	ldr	r3, [pc, #420]	; (8000b14 <HAL_I2S_MspInit+0x244>)
 8000970:	4a69      	ldr	r2, [pc, #420]	; (8000b18 <HAL_I2S_MspInit+0x248>)
 8000972:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000974:	4b67      	ldr	r3, [pc, #412]	; (8000b14 <HAL_I2S_MspInit+0x244>)
 8000976:	2225      	movs	r2, #37	; 0x25
 8000978:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800097a:	4b66      	ldr	r3, [pc, #408]	; (8000b14 <HAL_I2S_MspInit+0x244>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000980:	4b64      	ldr	r3, [pc, #400]	; (8000b14 <HAL_I2S_MspInit+0x244>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000986:	4b63      	ldr	r3, [pc, #396]	; (8000b14 <HAL_I2S_MspInit+0x244>)
 8000988:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800098c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800098e:	4b61      	ldr	r3, [pc, #388]	; (8000b14 <HAL_I2S_MspInit+0x244>)
 8000990:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000994:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000996:	4b5f      	ldr	r3, [pc, #380]	; (8000b14 <HAL_I2S_MspInit+0x244>)
 8000998:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800099c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800099e:	4b5d      	ldr	r3, [pc, #372]	; (8000b14 <HAL_I2S_MspInit+0x244>)
 80009a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009a6:	4b5b      	ldr	r3, [pc, #364]	; (8000b14 <HAL_I2S_MspInit+0x244>)
 80009a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009ac:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009ae:	4b59      	ldr	r3, [pc, #356]	; (8000b14 <HAL_I2S_MspInit+0x244>)
 80009b0:	2204      	movs	r2, #4
 80009b2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009b4:	4b57      	ldr	r3, [pc, #348]	; (8000b14 <HAL_I2S_MspInit+0x244>)
 80009b6:	2203      	movs	r2, #3
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80009ba:	4b56      	ldr	r3, [pc, #344]	; (8000b14 <HAL_I2S_MspInit+0x244>)
 80009bc:	2200      	movs	r2, #0
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80009c0:	4b54      	ldr	r3, [pc, #336]	; (8000b14 <HAL_I2S_MspInit+0x244>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80009c6:	4853      	ldr	r0, [pc, #332]	; (8000b14 <HAL_I2S_MspInit+0x244>)
 80009c8:	f001 f8f2 	bl	8001bb0 <HAL_DMA_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_I2S_MspInit+0x106>
    {
      Error_Handler();
 80009d2:	f000 fa59 	bl	8000e88 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi1_rx);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a4e      	ldr	r2, [pc, #312]	; (8000b14 <HAL_I2S_MspInit+0x244>)
 80009da:	649a      	str	r2, [r3, #72]	; 0x48
 80009dc:	4a4d      	ldr	r2, [pc, #308]	; (8000b14 <HAL_I2S_MspInit+0x244>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80009e2:	e08d      	b.n	8000b00 <HAL_I2S_MspInit+0x230>
  else if(i2sHandle->Instance==SPI2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a4c      	ldr	r2, [pc, #304]	; (8000b1c <HAL_I2S_MspInit+0x24c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	f040 8088 	bne.w	8000b00 <HAL_I2S_MspInit+0x230>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009f0:	4b46      	ldr	r3, [pc, #280]	; (8000b0c <HAL_I2S_MspInit+0x23c>)
 80009f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009f6:	4a45      	ldr	r2, [pc, #276]	; (8000b0c <HAL_I2S_MspInit+0x23c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a00:	4b42      	ldr	r3, [pc, #264]	; (8000b0c <HAL_I2S_MspInit+0x23c>)
 8000a02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	4b3f      	ldr	r3, [pc, #252]	; (8000b0c <HAL_I2S_MspInit+0x23c>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	4a3d      	ldr	r2, [pc, #244]	; (8000b0c <HAL_I2S_MspInit+0x23c>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1e:	4b3b      	ldr	r3, [pc, #236]	; (8000b0c <HAL_I2S_MspInit+0x23c>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <HAL_I2S_MspInit+0x23c>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	4a36      	ldr	r2, [pc, #216]	; (8000b0c <HAL_I2S_MspInit+0x23c>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3c:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <HAL_I2S_MspInit+0x23c>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a52:	2302      	movs	r3, #2
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a5a:	2305      	movs	r3, #5
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	482e      	ldr	r0, [pc, #184]	; (8000b20 <HAL_I2S_MspInit+0x250>)
 8000a66:	f003 f97b 	bl	8003d60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000a6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a7c:	2305      	movs	r3, #5
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4827      	ldr	r0, [pc, #156]	; (8000b24 <HAL_I2S_MspInit+0x254>)
 8000a88:	f003 f96a 	bl	8003d60 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8000a8c:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <HAL_I2S_MspInit+0x258>)
 8000a8e:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <HAL_I2S_MspInit+0x25c>)
 8000a90:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <HAL_I2S_MspInit+0x258>)
 8000a94:	2227      	movs	r2, #39	; 0x27
 8000a96:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <HAL_I2S_MspInit+0x258>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a9e:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <HAL_I2S_MspInit+0x258>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <HAL_I2S_MspInit+0x258>)
 8000aa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aaa:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <HAL_I2S_MspInit+0x258>)
 8000aae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ab2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <HAL_I2S_MspInit+0x258>)
 8000ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aba:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <HAL_I2S_MspInit+0x258>)
 8000abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <HAL_I2S_MspInit+0x258>)
 8000ac6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000aca:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_I2S_MspInit+0x258>)
 8000ace:	2204      	movs	r2, #4
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_I2S_MspInit+0x258>)
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <HAL_I2S_MspInit+0x258>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_I2S_MspInit+0x258>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000ae4:	4810      	ldr	r0, [pc, #64]	; (8000b28 <HAL_I2S_MspInit+0x258>)
 8000ae6:	f001 f863 	bl	8001bb0 <HAL_DMA_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <HAL_I2S_MspInit+0x224>
      Error_Handler();
 8000af0:	f000 f9ca 	bl	8000e88 <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <HAL_I2S_MspInit+0x258>)
 8000af8:	649a      	str	r2, [r3, #72]	; 0x48
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <HAL_I2S_MspInit+0x258>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b00:	bf00      	nop
 8000b02:	3730      	adds	r7, #48	; 0x30
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40013000 	.word	0x40013000
 8000b0c:	58024400 	.word	0x58024400
 8000b10:	58020000 	.word	0x58020000
 8000b14:	24000138 	.word	0x24000138
 8000b18:	40020010 	.word	0x40020010
 8000b1c:	40003800 	.word	0x40003800
 8000b20:	58020800 	.word	0x58020800
 8000b24:	58020400 	.word	0x58020400
 8000b28:	240001b0 	.word	0x240001b0
 8000b2c:	40020028 	.word	0x40020028

08000b30 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8000b38:	1d39      	adds	r1, r7, #4
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4803      	ldr	r0, [pc, #12]	; (8000b50 <__io_putchar+0x20>)
 8000b42:	f008 f917 	bl	8008d74 <HAL_UART_Transmit>
    return ch;
 8000b46:	687b      	ldr	r3, [r7, #4]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2400036c 	.word	0x2400036c

08000b54 <HAL_I2S_RxCpltCallback>:
/*
 * 重写printf
 */

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

	if(hi2s==&hi2s1){
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a2e      	ldr	r2, [pc, #184]	; (8000c18 <HAL_I2S_RxCpltCallback+0xc4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d127      	bne.n	8000bb4 <HAL_I2S_RxCpltCallback+0x60>
		//10 0
		//11 1
		if(hi2s1_Data[0] & 0x800000){//negative
 8000b64:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <HAL_I2S_RxCpltCallback+0xc8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d007      	beq.n	8000b80 <HAL_I2S_RxCpltCallback+0x2c>
			hi2s1_Data_s[0]=(0xff000000 | hi2s1_Data[0]);
 8000b70:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <HAL_I2S_RxCpltCallback+0xc8>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <HAL_I2S_RxCpltCallback+0xcc>)
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	e005      	b.n	8000b8c <HAL_I2S_RxCpltCallback+0x38>
		}else{//positive
			hi2s1_Data_s[0]=0x00ffffff & hi2s1_Data[0];
 8000b80:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <HAL_I2S_RxCpltCallback+0xc8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b88:	4a25      	ldr	r2, [pc, #148]	; (8000c20 <HAL_I2S_RxCpltCallback+0xcc>)
 8000b8a:	6013      	str	r3, [r2, #0]
		}

		if(hi2s1_Data[1] & 0x800000){//negative
 8000b8c:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <HAL_I2S_RxCpltCallback+0xc8>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d007      	beq.n	8000ba8 <HAL_I2S_RxCpltCallback+0x54>
			hi2s1_Data_s[1]=0xff000000 | hi2s1_Data[1];
 8000b98:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <HAL_I2S_RxCpltCallback+0xc8>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <HAL_I2S_RxCpltCallback+0xcc>)
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	e005      	b.n	8000bb4 <HAL_I2S_RxCpltCallback+0x60>
		}else{//positive
			hi2s1_Data_s[1]=0x00ffffff & hi2s1_Data[1];
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <HAL_I2S_RxCpltCallback+0xc8>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <HAL_I2S_RxCpltCallback+0xcc>)
 8000bb2:	6053      	str	r3, [r2, #4]
		}

		}


	if(hi2s==&hi2s2){
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <HAL_I2S_RxCpltCallback+0xd0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d127      	bne.n	8000c0c <HAL_I2S_RxCpltCallback+0xb8>
		//10 0
		//11 1
		if(hi2s2_Data[0] & 0x800000){//negative
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <HAL_I2S_RxCpltCallback+0xd4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d007      	beq.n	8000bd8 <HAL_I2S_RxCpltCallback+0x84>
			hi2s2_Data_s[0]=0xff000000 | hi2s2_Data[0];
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <HAL_I2S_RxCpltCallback+0xd4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_I2S_RxCpltCallback+0xd8>)
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	e005      	b.n	8000be4 <HAL_I2S_RxCpltCallback+0x90>
		}else{//positive
			hi2s2_Data_s[0]=0x00ffffff & hi2s2_Data[0];
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <HAL_I2S_RxCpltCallback+0xd4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000be0:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <HAL_I2S_RxCpltCallback+0xd8>)
 8000be2:	6013      	str	r3, [r2, #0]
		}

		if(hi2s2_Data[1] & 0x800000){//negative
 8000be4:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_I2S_RxCpltCallback+0xd4>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d007      	beq.n	8000c00 <HAL_I2S_RxCpltCallback+0xac>
			hi2s2_Data_s[1]=0xff000000 | hi2s2_Data[1];
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_I2S_RxCpltCallback+0xd4>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_I2S_RxCpltCallback+0xd8>)
 8000bfc:	605a      	str	r2, [r3, #4]
		}

		}


}
 8000bfe:	e005      	b.n	8000c0c <HAL_I2S_RxCpltCallback+0xb8>
			hi2s2_Data_s[1]=0x00ffffff & hi2s2_Data[1];
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_I2S_RxCpltCallback+0xd4>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c08:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <HAL_I2S_RxCpltCallback+0xd8>)
 8000c0a:	6053      	str	r3, [r2, #4]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	24000090 	.word	0x24000090
 8000c1c:	24000228 	.word	0x24000228
 8000c20:	24000238 	.word	0x24000238
 8000c24:	240000e4 	.word	0x240000e4
 8000c28:	24000230 	.word	0x24000230
 8000c2c:	24000240 	.word	0x24000240

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c36:	f000 fe0d 	bl	8001854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3a:	f000 f83f 	bl	8000cbc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c3e:	f000 f8f7 	bl	8000e30 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c42:	f7ff fd47 	bl	80006d4 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000c46:	f000 f925 	bl	8000e94 <MX_SPI4_Init>
  MX_DMA_Init();
 8000c4a:	f7ff fd1b 	bl	8000684 <MX_DMA_Init>
  MX_I2S1_Init();
 8000c4e:	f7ff fdd7 	bl	8000800 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000c52:	f7ff fe09 	bl	8000868 <MX_I2S2_Init>
  MX_TIM1_Init();
 8000c56:	f000 fb61 	bl	800131c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c5a:	f000 fc0b 	bl	8001474 <MX_TIM3_Init>
  MX_UART4_Init();
 8000c5e:	f000 fd1f 	bl	80016a0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000c62:	2100      	movs	r1, #0
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <main+0x6c>)
 8000c66:	f006 ffdb 	bl	8007c20 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  LCD_Test();
//  uint8_t text[20]={0};

  HAL_I2S_Receive_DMA(&hi2s1, (uint16_t*)hi2s1_Data, 2);
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <main+0x70>)
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <main+0x74>)
 8000c70:	f003 fb60 	bl	8004334 <HAL_I2S_Receive_DMA>
  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t*)hi2s2_Data, 2);
 8000c74:	2202      	movs	r2, #2
 8000c76:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <main+0x78>)
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <main+0x7c>)
 8000c7a:	f003 fb5b 	bl	8004334 <HAL_I2S_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf("%d,%d,%d,%d\r\n",hi2s1_Data_s[0],hi2s1_Data_s[1],hi2s2_Data_s[0],hi2s2_Data_s[1]);
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <main+0x80>)
 8000c80:	6819      	ldr	r1, [r3, #0]
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <main+0x80>)
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <main+0x84>)
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <main+0x84>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	4603      	mov	r3, r0
 8000c92:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <main+0x88>)
 8000c94:	f009 f956 	bl	8009f44 <iprintf>
 8000c98:	e7f1      	b.n	8000c7e <main+0x4e>
 8000c9a:	bf00      	nop
 8000c9c:	24000320 	.word	0x24000320
 8000ca0:	24000228 	.word	0x24000228
 8000ca4:	24000090 	.word	0x24000090
 8000ca8:	24000230 	.word	0x24000230
 8000cac:	240000e4 	.word	0x240000e4
 8000cb0:	24000238 	.word	0x24000238
 8000cb4:	24000240 	.word	0x24000240
 8000cb8:	0800ae78 	.word	0x0800ae78

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b09e      	sub	sp, #120	; 0x78
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc6:	224c      	movs	r2, #76	; 0x4c
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f009 f932 	bl	8009f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2220      	movs	r2, #32
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f009 f92b 	bl	8009f34 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cde:	2002      	movs	r0, #2
 8000ce0:	f003 fc34 	bl	800454c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	4b4e      	ldr	r3, [pc, #312]	; (8000e24 <SystemClock_Config+0x168>)
 8000cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cec:	4a4d      	ldr	r2, [pc, #308]	; (8000e24 <SystemClock_Config+0x168>)
 8000cee:	f023 0301 	bic.w	r3, r3, #1
 8000cf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cf4:	4b4b      	ldr	r3, [pc, #300]	; (8000e24 <SystemClock_Config+0x168>)
 8000cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	4b4a      	ldr	r3, [pc, #296]	; (8000e28 <SystemClock_Config+0x16c>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	4a49      	ldr	r2, [pc, #292]	; (8000e28 <SystemClock_Config+0x16c>)
 8000d04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d08:	6193      	str	r3, [r2, #24]
 8000d0a:	4b47      	ldr	r3, [pc, #284]	; (8000e28 <SystemClock_Config+0x16c>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d16:	bf00      	nop
 8000d18:	4b43      	ldr	r3, [pc, #268]	; (8000e28 <SystemClock_Config+0x16c>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d24:	d1f8      	bne.n	8000d18 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b41      	ldr	r3, [pc, #260]	; (8000e2c <SystemClock_Config+0x170>)
 8000d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d2c:	4a3f      	ldr	r2, [pc, #252]	; (8000e2c <SystemClock_Config+0x170>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d36:	4b3d      	ldr	r3, [pc, #244]	; (8000e2c <SystemClock_Config+0x170>)
 8000d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d44:	2300      	movs	r3, #0
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	4b37      	ldr	r3, [pc, #220]	; (8000e28 <SystemClock_Config+0x16c>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a36      	ldr	r2, [pc, #216]	; (8000e28 <SystemClock_Config+0x16c>)
 8000d4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b34      	ldr	r3, [pc, #208]	; (8000e28 <SystemClock_Config+0x16c>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <SystemClock_Config+0x168>)
 8000d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d62:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <SystemClock_Config+0x168>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <SystemClock_Config+0x168>)
 8000d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d76:	bf00      	nop
 8000d78:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <SystemClock_Config+0x16c>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d84:	d1f8      	bne.n	8000d78 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d86:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <SystemClock_Config+0x170>)
 8000d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8a:	f023 0303 	bic.w	r3, r3, #3
 8000d8e:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <SystemClock_Config+0x170>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d96:	2301      	movs	r3, #1
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da0:	2302      	movs	r3, #2
 8000da2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da4:	2302      	movs	r3, #2
 8000da6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000da8:	230a      	movs	r3, #10
 8000daa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000dac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000db0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000db6:	2305      	movs	r3, #5
 8000db8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f003 fbf6 	bl	80045c0 <HAL_RCC_OscConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0x122>
  {
    Error_Handler();
 8000dda:	f000 f855 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dde:	233f      	movs	r3, #63	; 0x3f
 8000de0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de2:	2303      	movs	r3, #3
 8000de4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dea:	2308      	movs	r3, #8
 8000dec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dee:	2340      	movs	r3, #64	; 0x40
 8000df0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000df2:	2340      	movs	r3, #64	; 0x40
 8000df4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dfc:	2340      	movs	r3, #64	; 0x40
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2104      	movs	r1, #4
 8000e06:	4618      	mov	r0, r3
 8000e08:	f004 f808 	bl	8004e1c <HAL_RCC_ClockConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 8000e12:	f000 f839 	bl	8000e88 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000e16:	f004 f9b7 	bl	8005188 <HAL_RCC_EnableCSS>
}
 8000e1a:	bf00      	nop
 8000e1c:	3778      	adds	r7, #120	; 0x78
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	58000400 	.word	0x58000400
 8000e28:	58024800 	.word	0x58024800
 8000e2c:	58024400 	.word	0x58024400

08000e30 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b0b0      	sub	sp, #192	; 0xc0
 8000e34:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	22bc      	movs	r2, #188	; 0xbc
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f009 f879 	bl	8009f34 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
 8000e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e46:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 10;
 8000e48:	230a      	movs	r3, #10
 8000e4a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 16;
 8000e50:	2310      	movs	r3, #16
 8000e52:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000e5c:	2340      	movs	r3, #64	; 0x40
 8000e5e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4618      	mov	r0, r3
 8000e72:	f004 fb6f 	bl	8005554 <HAL_RCCEx_PeriphCLKConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000e7c:	f000 f804 	bl	8000e88 <Error_Handler>
  }
}
 8000e80:	bf00      	nop
 8000e82:	37c0      	adds	r7, #192	; 0xc0
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <Error_Handler+0x8>
	...

08000e94 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000e98:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000e9a:	4a29      	ldr	r2, [pc, #164]	; (8000f40 <MX_SPI4_Init+0xac>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000e9e:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000ea0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ea4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000ea6:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000ea8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000eac:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eae:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eba:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000ec2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ec6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000eca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ece:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000eea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eee:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_SPI4_Init+0xa8>)
 8000f28:	f006 fca0 	bl	800786c <HAL_SPI_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8000f32:	f7ff ffa9 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	24000248 	.word	0x24000248
 8000f40:	40013400 	.word	0x40013400

08000f44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0b8      	sub	sp, #224	; 0xe0
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	22bc      	movs	r2, #188	; 0xbc
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f008 ffe5 	bl	8009f34 <memset>
  if(spiHandle->Instance==SPI4)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a25      	ldr	r2, [pc, #148]	; (8001004 <HAL_SPI_MspInit+0xc0>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d142      	bne.n	8000ffa <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000f74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	4618      	mov	r0, r3
 8000f84:	f004 fae6 	bl	8005554 <HAL_RCCEx_PeriphCLKConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000f8e:	f7ff ff7b 	bl	8000e88 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000f92:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <HAL_SPI_MspInit+0xc4>)
 8000f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f98:	4a1b      	ldr	r2, [pc, #108]	; (8001008 <HAL_SPI_MspInit+0xc4>)
 8000f9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_SPI_MspInit+0xc4>)
 8000fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb0:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_SPI_MspInit+0xc4>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	4a14      	ldr	r2, [pc, #80]	; (8001008 <HAL_SPI_MspInit+0xc4>)
 8000fb8:	f043 0310 	orr.w	r3, r3, #16
 8000fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <HAL_SPI_MspInit+0xc4>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc6:	f003 0310 	and.w	r3, r3, #16
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000fce:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000fe8:	2305      	movs	r3, #5
 8000fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <HAL_SPI_MspInit+0xc8>)
 8000ff6:	f002 feb3 	bl	8003d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	37e0      	adds	r7, #224	; 0xe0
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40013400 	.word	0x40013400
 8001008:	58024400 	.word	0x58024400
 800100c:	58021000 	.word	0x58021000

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <HAL_MspInit+0x34>)
 8001018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800101c:	4a09      	ldr	r2, [pc, #36]	; (8001044 <HAL_MspInit+0x34>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <HAL_MspInit+0x34>)
 8001028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001034:	2004      	movs	r0, #4
 8001036:	f000 fd7b 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	58024400 	.word	0x58024400

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800104c:	e7fe      	b.n	800104c <NMI_Handler+0x4>

0800104e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <MemManage_Handler+0x4>

0800105a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <UsageFault_Handler+0x4>

08001066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001094:	f000 fc50 	bl	8001938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <DMA1_Stream0_IRQHandler+0x10>)
 80010a2:	f001 fb4b 	bl	800273c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	24000138 	.word	0x24000138

080010b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <DMA1_Stream1_IRQHandler+0x10>)
 80010b6:	f001 fb41 	bl	800273c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	240001b0 	.word	0x240001b0

080010c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	e00a      	b.n	80010ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010d6:	f3af 8000 	nop.w
 80010da:	4601      	mov	r1, r0
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	60ba      	str	r2, [r7, #8]
 80010e2:	b2ca      	uxtb	r2, r1
 80010e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dbf0      	blt.n	80010d6 <_read+0x12>
	}

return len;
 80010f4:	687b      	ldr	r3, [r7, #4]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e009      	b.n	8001124 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	60ba      	str	r2, [r7, #8]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fd09 	bl	8000b30 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	dbf1      	blt.n	8001110 <_write+0x12>
	}
	return len;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_close>:

int _close(int file)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
	return -1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800115e:	605a      	str	r2, [r3, #4]
	return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <_isatty>:

int _isatty(int file)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
	return 1;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
	return 0;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <_sbrk+0x5c>)
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <_sbrk+0x60>)
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <_sbrk+0x64>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <_sbrk+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d207      	bcs.n	80011e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d0:	f008 fe86 	bl	8009ee0 <__errno>
 80011d4:	4603      	mov	r3, r0
 80011d6:	220c      	movs	r2, #12
 80011d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	e009      	b.n	80011f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <_sbrk+0x64>)
 80011f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f2:	68fb      	ldr	r3, [r7, #12]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	24080000 	.word	0x24080000
 8001200:	00000400 	.word	0x00000400
 8001204:	240002d0 	.word	0x240002d0
 8001208:	24000410 	.word	0x24000410

0800120c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001210:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <SystemInit+0xe4>)
 8001212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001216:	4a36      	ldr	r2, [pc, #216]	; (80012f0 <SystemInit+0xe4>)
 8001218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800121c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001220:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <SystemInit+0xe8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	2b06      	cmp	r3, #6
 800122a:	d807      	bhi.n	800123c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800122c:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <SystemInit+0xe8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 030f 	bic.w	r3, r3, #15
 8001234:	4a2f      	ldr	r2, [pc, #188]	; (80012f4 <SystemInit+0xe8>)
 8001236:	f043 0307 	orr.w	r3, r3, #7
 800123a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800123c:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <SystemInit+0xec>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a2d      	ldr	r2, [pc, #180]	; (80012f8 <SystemInit+0xec>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <SystemInit+0xec>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <SystemInit+0xec>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4929      	ldr	r1, [pc, #164]	; (80012f8 <SystemInit+0xec>)
 8001254:	4b29      	ldr	r3, [pc, #164]	; (80012fc <SystemInit+0xf0>)
 8001256:	4013      	ands	r3, r2
 8001258:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <SystemInit+0xe8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d007      	beq.n	8001276 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <SystemInit+0xe8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 030f 	bic.w	r3, r3, #15
 800126e:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <SystemInit+0xe8>)
 8001270:	f043 0307 	orr.w	r3, r3, #7
 8001274:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <SystemInit+0xec>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800127c:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <SystemInit+0xec>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <SystemInit+0xec>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <SystemInit+0xec>)
 800128a:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <SystemInit+0xf4>)
 800128c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <SystemInit+0xec>)
 8001290:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <SystemInit+0xf8>)
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <SystemInit+0xec>)
 8001296:	4a1c      	ldr	r2, [pc, #112]	; (8001308 <SystemInit+0xfc>)
 8001298:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <SystemInit+0xec>)
 800129c:	2200      	movs	r2, #0
 800129e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <SystemInit+0xec>)
 80012a2:	4a19      	ldr	r2, [pc, #100]	; (8001308 <SystemInit+0xfc>)
 80012a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <SystemInit+0xec>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <SystemInit+0xec>)
 80012ae:	4a16      	ldr	r2, [pc, #88]	; (8001308 <SystemInit+0xfc>)
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <SystemInit+0xec>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <SystemInit+0xec>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <SystemInit+0xec>)
 80012be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <SystemInit+0xec>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <SystemInit+0x100>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <SystemInit+0x104>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012d6:	d202      	bcs.n	80012de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <SystemInit+0x108>)
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <SystemInit+0x10c>)
 80012e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80012e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00
 80012f4:	52002000 	.word	0x52002000
 80012f8:	58024400 	.word	0x58024400
 80012fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001300:	02020200 	.word	0x02020200
 8001304:	01ff0000 	.word	0x01ff0000
 8001308:	01010280 	.word	0x01010280
 800130c:	5c001000 	.word	0x5c001000
 8001310:	ffff0000 	.word	0xffff0000
 8001314:	51008108 	.word	0x51008108
 8001318:	52004000 	.word	0x52004000

0800131c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b09a      	sub	sp, #104	; 0x68
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
 800134c:	615a      	str	r2, [r3, #20]
 800134e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	222c      	movs	r2, #44	; 0x2c
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f008 fdec 	bl	8009f34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800135c:	4b43      	ldr	r3, [pc, #268]	; (800146c <MX_TIM1_Init+0x150>)
 800135e:	4a44      	ldr	r2, [pc, #272]	; (8001470 <MX_TIM1_Init+0x154>)
 8001360:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24-1;
 8001362:	4b42      	ldr	r3, [pc, #264]	; (800146c <MX_TIM1_Init+0x150>)
 8001364:	2217      	movs	r2, #23
 8001366:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b40      	ldr	r3, [pc, #256]	; (800146c <MX_TIM1_Init+0x150>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <MX_TIM1_Init+0x150>)
 8001370:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001374:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001376:	4b3d      	ldr	r3, [pc, #244]	; (800146c <MX_TIM1_Init+0x150>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800137c:	4b3b      	ldr	r3, [pc, #236]	; (800146c <MX_TIM1_Init+0x150>)
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001382:	4b3a      	ldr	r3, [pc, #232]	; (800146c <MX_TIM1_Init+0x150>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001388:	4838      	ldr	r0, [pc, #224]	; (800146c <MX_TIM1_Init+0x150>)
 800138a:	f006 fb90 	bl	8007aae <HAL_TIM_Base_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001394:	f7ff fd78 	bl	8000e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800139e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013a2:	4619      	mov	r1, r3
 80013a4:	4831      	ldr	r0, [pc, #196]	; (800146c <MX_TIM1_Init+0x150>)
 80013a6:	f006 fe5d 	bl	8008064 <HAL_TIM_ConfigClockSource>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013b0:	f7ff fd6a 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013b4:	482d      	ldr	r0, [pc, #180]	; (800146c <MX_TIM1_Init+0x150>)
 80013b6:	f006 fbd1 	bl	8007b5c <HAL_TIM_PWM_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013c0:	f7ff fd62 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013d4:	4619      	mov	r1, r3
 80013d6:	4825      	ldr	r0, [pc, #148]	; (800146c <MX_TIM1_Init+0x150>)
 80013d8:	f007 fb70 	bl	8008abc <HAL_TIMEx_MasterConfigSynchronization>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013e2:	f7ff fd51 	bl	8000e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e6:	2360      	movs	r3, #96	; 0x60
 80013e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ee:	2300      	movs	r3, #0
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80013f2:	2308      	movs	r3, #8
 80013f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001402:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001406:	2204      	movs	r2, #4
 8001408:	4619      	mov	r1, r3
 800140a:	4818      	ldr	r0, [pc, #96]	; (800146c <MX_TIM1_Init+0x150>)
 800140c:	f006 fd16 	bl	8007e3c <HAL_TIM_PWM_ConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001416:	f7ff fd37 	bl	8000e88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800142e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001432:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800143c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	4619      	mov	r1, r3
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <MX_TIM1_Init+0x150>)
 8001450:	f007 fbc2 	bl	8008bd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800145a:	f7ff fd15 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800145e:	4803      	ldr	r0, [pc, #12]	; (800146c <MX_TIM1_Init+0x150>)
 8001460:	f000 f8ba 	bl	80015d8 <HAL_TIM_MspPostInit>

}
 8001464:	bf00      	nop
 8001466:	3768      	adds	r7, #104	; 0x68
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	240002d4 	.word	0x240002d4
 8001470:	40010000 	.word	0x40010000

08001474 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08e      	sub	sp, #56	; 0x38
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	615a      	str	r2, [r3, #20]
 80014a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a6:	4b2d      	ldr	r3, [pc, #180]	; (800155c <MX_TIM3_Init+0xe8>)
 80014a8:	4a2d      	ldr	r2, [pc, #180]	; (8001560 <MX_TIM3_Init+0xec>)
 80014aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 80014ac:	4b2b      	ldr	r3, [pc, #172]	; (800155c <MX_TIM3_Init+0xe8>)
 80014ae:	22ef      	movs	r2, #239	; 0xef
 80014b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b2:	4b2a      	ldr	r3, [pc, #168]	; (800155c <MX_TIM3_Init+0xe8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 80014b8:	4b28      	ldr	r3, [pc, #160]	; (800155c <MX_TIM3_Init+0xe8>)
 80014ba:	f241 3287 	movw	r2, #4999	; 0x1387
 80014be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b26      	ldr	r3, [pc, #152]	; (800155c <MX_TIM3_Init+0xe8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014c6:	4b25      	ldr	r3, [pc, #148]	; (800155c <MX_TIM3_Init+0xe8>)
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014cc:	4823      	ldr	r0, [pc, #140]	; (800155c <MX_TIM3_Init+0xe8>)
 80014ce:	f006 faee 	bl	8007aae <HAL_TIM_Base_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80014d8:	f7ff fcd6 	bl	8000e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e6:	4619      	mov	r1, r3
 80014e8:	481c      	ldr	r0, [pc, #112]	; (800155c <MX_TIM3_Init+0xe8>)
 80014ea:	f006 fdbb 	bl	8008064 <HAL_TIM_ConfigClockSource>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80014f4:	f7ff fcc8 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014f8:	4818      	ldr	r0, [pc, #96]	; (800155c <MX_TIM3_Init+0xe8>)
 80014fa:	f006 fb2f 	bl	8007b5c <HAL_TIM_PWM_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001504:	f7ff fcc0 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	4811      	ldr	r0, [pc, #68]	; (800155c <MX_TIM3_Init+0xe8>)
 8001518:	f007 fad0 	bl	8008abc <HAL_TIMEx_MasterConfigSynchronization>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001522:	f7ff fcb1 	bl	8000e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001526:	2360      	movs	r3, #96	; 0x60
 8001528:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2500-1;
 800152a:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800152e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	4619      	mov	r1, r3
 800153e:	4807      	ldr	r0, [pc, #28]	; (800155c <MX_TIM3_Init+0xe8>)
 8001540:	f006 fc7c 	bl	8007e3c <HAL_TIM_PWM_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800154a:	f7ff fc9d 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800154e:	4803      	ldr	r0, [pc, #12]	; (800155c <MX_TIM3_Init+0xe8>)
 8001550:	f000 f842 	bl	80015d8 <HAL_TIM_MspPostInit>

}
 8001554:	bf00      	nop
 8001556:	3738      	adds	r7, #56	; 0x38
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	24000320 	.word	0x24000320
 8001560:	40000400 	.word	0x40000400

08001564 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a16      	ldr	r2, [pc, #88]	; (80015cc <HAL_TIM_Base_MspInit+0x68>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d10f      	bne.n	8001596 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <HAL_TIM_Base_MspInit+0x6c>)
 8001578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <HAL_TIM_Base_MspInit+0x6c>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_TIM_Base_MspInit+0x6c>)
 8001588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001594:	e013      	b.n	80015be <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM3)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_TIM_Base_MspInit+0x70>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d10e      	bne.n	80015be <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_TIM_Base_MspInit+0x6c>)
 80015a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_TIM_Base_MspInit+0x6c>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <HAL_TIM_Base_MspInit+0x6c>)
 80015b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40010000 	.word	0x40010000
 80015d0:	58024400 	.word	0x58024400
 80015d4:	40000400 	.word	0x40000400

080015d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a25      	ldr	r2, [pc, #148]	; (800168c <HAL_TIM_MspPostInit+0xb4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d120      	bne.n	800163c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <HAL_TIM_MspPostInit+0xb8>)
 80015fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001600:	4a23      	ldr	r2, [pc, #140]	; (8001690 <HAL_TIM_MspPostInit+0xb8>)
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <HAL_TIM_MspPostInit+0xb8>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001610:	f003 0310 	and.w	r3, r3, #16
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = LCD_LIGHT_Pin;
 8001618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800162a:	2301      	movs	r3, #1
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_LIGHT_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	4817      	ldr	r0, [pc, #92]	; (8001694 <HAL_TIM_MspPostInit+0xbc>)
 8001636:	f002 fb93 	bl	8003d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800163a:	e023      	b.n	8001684 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a15      	ldr	r2, [pc, #84]	; (8001698 <HAL_TIM_MspPostInit+0xc0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d11e      	bne.n	8001684 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_TIM_MspPostInit+0xb8>)
 8001648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164c:	4a10      	ldr	r2, [pc, #64]	; (8001690 <HAL_TIM_MspPostInit+0xb8>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_TIM_MspPostInit+0xb8>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001664:	2310      	movs	r3, #16
 8001666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001674:	2302      	movs	r3, #2
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	4807      	ldr	r0, [pc, #28]	; (800169c <HAL_TIM_MspPostInit+0xc4>)
 8001680:	f002 fb6e 	bl	8003d60 <HAL_GPIO_Init>
}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	; 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40010000 	.word	0x40010000
 8001690:	58024400 	.word	0x58024400
 8001694:	58021000 	.word	0x58021000
 8001698:	40000400 	.word	0x40000400
 800169c:	58020400 	.word	0x58020400

080016a0 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <MX_UART4_Init+0x90>)
 80016a6:	4a23      	ldr	r2, [pc, #140]	; (8001734 <MX_UART4_Init+0x94>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <MX_UART4_Init+0x90>)
 80016ac:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80016b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <MX_UART4_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <MX_UART4_Init+0x90>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <MX_UART4_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_UART4_Init+0x90>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_UART4_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_UART4_Init+0x90>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_UART4_Init+0x90>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_UART4_Init+0x90>)
 80016de:	2200      	movs	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <MX_UART4_Init+0x90>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016e8:	4811      	ldr	r0, [pc, #68]	; (8001730 <MX_UART4_Init+0x90>)
 80016ea:	f007 faf3 	bl	8008cd4 <HAL_UART_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80016f4:	f7ff fbc8 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f8:	2100      	movs	r1, #0
 80016fa:	480d      	ldr	r0, [pc, #52]	; (8001730 <MX_UART4_Init+0x90>)
 80016fc:	f008 fb26 	bl	8009d4c <HAL_UARTEx_SetTxFifoThreshold>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001706:	f7ff fbbf 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800170a:	2100      	movs	r1, #0
 800170c:	4808      	ldr	r0, [pc, #32]	; (8001730 <MX_UART4_Init+0x90>)
 800170e:	f008 fb5b 	bl	8009dc8 <HAL_UARTEx_SetRxFifoThreshold>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001718:	f7ff fbb6 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_UART4_Init+0x90>)
 800171e:	f008 fadc 	bl	8009cda <HAL_UARTEx_DisableFifoMode>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001728:	f7ff fbae 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	2400036c 	.word	0x2400036c
 8001734:	40004c00 	.word	0x40004c00

08001738 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b0b8      	sub	sp, #224	; 0xe0
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	22bc      	movs	r2, #188	; 0xbc
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f008 fbeb 	bl	8009f34 <memset>
  if(uartHandle->Instance==UART4)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a24      	ldr	r2, [pc, #144]	; (80017f4 <HAL_UART_MspInit+0xbc>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d141      	bne.n	80017ec <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001768:	2302      	movs	r3, #2
 800176a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	4618      	mov	r0, r3
 8001778:	f003 feec 	bl	8005554 <HAL_RCCEx_PeriphCLKConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001782:	f7ff fb81 	bl	8000e88 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <HAL_UART_MspInit+0xc0>)
 8001788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800178c:	4a1a      	ldr	r2, [pc, #104]	; (80017f8 <HAL_UART_MspInit+0xc0>)
 800178e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001792:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_UART_MspInit+0xc0>)
 8001798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800179c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <HAL_UART_MspInit+0xc0>)
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017aa:	4a13      	ldr	r2, [pc, #76]	; (80017f8 <HAL_UART_MspInit+0xc0>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_UART_MspInit+0xc0>)
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017c2:	2303      	movs	r3, #3
 80017c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017da:	2308      	movs	r3, #8
 80017dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017e4:	4619      	mov	r1, r3
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <HAL_UART_MspInit+0xc4>)
 80017e8:	f002 faba 	bl	8003d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80017ec:	bf00      	nop
 80017ee:	37e0      	adds	r7, #224	; 0xe0
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40004c00 	.word	0x40004c00
 80017f8:	58024400 	.word	0x58024400
 80017fc:	58020000 	.word	0x58020000

08001800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001838 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001804:	f7ff fd02 	bl	800120c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001808:	480c      	ldr	r0, [pc, #48]	; (800183c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800180a:	490d      	ldr	r1, [pc, #52]	; (8001840 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800180c:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001810:	e002      	b.n	8001818 <LoopCopyDataInit>

08001812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001816:	3304      	adds	r3, #4

08001818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800181c:	d3f9      	bcc.n	8001812 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001820:	4c0a      	ldr	r4, [pc, #40]	; (800184c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001824:	e001      	b.n	800182a <LoopFillZerobss>

08001826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001828:	3204      	adds	r2, #4

0800182a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800182c:	d3fb      	bcc.n	8001826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800182e:	f008 fb5d 	bl	8009eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001832:	f7ff f9fd 	bl	8000c30 <main>
  bx  lr
 8001836:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001838:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800183c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001840:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001844:	0800af70 	.word	0x0800af70
  ldr r2, =_sbss
 8001848:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 800184c:	24000410 	.word	0x24000410

08001850 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC3_IRQHandler>
	...

08001854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185a:	2003      	movs	r0, #3
 800185c:	f000 f968 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001860:	f003 fca2 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8001864:	4602      	mov	r2, r0
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_Init+0x68>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	0a1b      	lsrs	r3, r3, #8
 800186c:	f003 030f 	and.w	r3, r3, #15
 8001870:	4913      	ldr	r1, [pc, #76]	; (80018c0 <HAL_Init+0x6c>)
 8001872:	5ccb      	ldrb	r3, [r1, r3]
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	fa22 f303 	lsr.w	r3, r2, r3
 800187c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <HAL_Init+0x68>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <HAL_Init+0x6c>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
 8001894:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <HAL_Init+0x70>)
 8001896:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001898:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <HAL_Init+0x74>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800189e:	2007      	movs	r0, #7
 80018a0:	f000 f814 	bl	80018cc <HAL_InitTick>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e002      	b.n	80018b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018ae:	f7ff fbaf 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	58024400 	.word	0x58024400
 80018c0:	0800ae88 	.word	0x0800ae88
 80018c4:	24000004 	.word	0x24000004
 80018c8:	24000000 	.word	0x24000000

080018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_InitTick+0x60>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e021      	b.n	8001924 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_InitTick+0x64>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_InitTick+0x60>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f94d 	bl	8001b96 <HAL_SYSTICK_Config>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e00e      	b.n	8001924 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d80a      	bhi.n	8001922 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190c:	2200      	movs	r2, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f000 f917 	bl	8001b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001918:	4a06      	ldr	r2, [pc, #24]	; (8001934 <HAL_InitTick+0x68>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	2400000c 	.word	0x2400000c
 8001930:	24000000 	.word	0x24000000
 8001934:	24000008 	.word	0x24000008

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	2400000c 	.word	0x2400000c
 800195c:	240003fc 	.word	0x240003fc

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	240003fc 	.word	0x240003fc

08001978 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <HAL_GetREVID+0x14>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0c1b      	lsrs	r3, r3, #16
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	5c001000 	.word	0x5c001000

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <__NVIC_SetPriorityGrouping+0x40>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <__NVIC_SetPriorityGrouping+0x40>)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60d3      	str	r3, [r2, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00
 80019d4:	05fa0000 	.word	0x05fa0000

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4907      	ldr	r1, [pc, #28]	; (8001a2c <__NVIC_EnableIRQ+0x38>)
 8001a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001afc:	d301      	bcc.n	8001b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00f      	b.n	8001b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <SysTick_Config+0x40>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0a:	210f      	movs	r1, #15
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f7ff ff8e 	bl	8001a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <SysTick_Config+0x40>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <SysTick_Config+0x40>)
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	e000e010 	.word	0xe000e010

08001b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff29 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff40 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff90 	bl	8001a84 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff5f 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff33 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ffa4 	bl	8001aec <SysTick_Config>
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff fed2 	bl	8001960 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e316      	b.n	80021f6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a66      	ldr	r2, [pc, #408]	; (8001d68 <HAL_DMA_Init+0x1b8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d04a      	beq.n	8001c68 <HAL_DMA_Init+0xb8>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a65      	ldr	r2, [pc, #404]	; (8001d6c <HAL_DMA_Init+0x1bc>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d045      	beq.n	8001c68 <HAL_DMA_Init+0xb8>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a63      	ldr	r2, [pc, #396]	; (8001d70 <HAL_DMA_Init+0x1c0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d040      	beq.n	8001c68 <HAL_DMA_Init+0xb8>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a62      	ldr	r2, [pc, #392]	; (8001d74 <HAL_DMA_Init+0x1c4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d03b      	beq.n	8001c68 <HAL_DMA_Init+0xb8>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a60      	ldr	r2, [pc, #384]	; (8001d78 <HAL_DMA_Init+0x1c8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d036      	beq.n	8001c68 <HAL_DMA_Init+0xb8>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a5f      	ldr	r2, [pc, #380]	; (8001d7c <HAL_DMA_Init+0x1cc>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d031      	beq.n	8001c68 <HAL_DMA_Init+0xb8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a5d      	ldr	r2, [pc, #372]	; (8001d80 <HAL_DMA_Init+0x1d0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d02c      	beq.n	8001c68 <HAL_DMA_Init+0xb8>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a5c      	ldr	r2, [pc, #368]	; (8001d84 <HAL_DMA_Init+0x1d4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d027      	beq.n	8001c68 <HAL_DMA_Init+0xb8>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a5a      	ldr	r2, [pc, #360]	; (8001d88 <HAL_DMA_Init+0x1d8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d022      	beq.n	8001c68 <HAL_DMA_Init+0xb8>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a59      	ldr	r2, [pc, #356]	; (8001d8c <HAL_DMA_Init+0x1dc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d01d      	beq.n	8001c68 <HAL_DMA_Init+0xb8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a57      	ldr	r2, [pc, #348]	; (8001d90 <HAL_DMA_Init+0x1e0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d018      	beq.n	8001c68 <HAL_DMA_Init+0xb8>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a56      	ldr	r2, [pc, #344]	; (8001d94 <HAL_DMA_Init+0x1e4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <HAL_DMA_Init+0xb8>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a54      	ldr	r2, [pc, #336]	; (8001d98 <HAL_DMA_Init+0x1e8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00e      	beq.n	8001c68 <HAL_DMA_Init+0xb8>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a53      	ldr	r2, [pc, #332]	; (8001d9c <HAL_DMA_Init+0x1ec>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d009      	beq.n	8001c68 <HAL_DMA_Init+0xb8>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a51      	ldr	r2, [pc, #324]	; (8001da0 <HAL_DMA_Init+0x1f0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d004      	beq.n	8001c68 <HAL_DMA_Init+0xb8>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a50      	ldr	r2, [pc, #320]	; (8001da4 <HAL_DMA_Init+0x1f4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_DMA_Init+0xbc>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <HAL_DMA_Init+0xbe>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 813b 	beq.w	8001eea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a37      	ldr	r2, [pc, #220]	; (8001d68 <HAL_DMA_Init+0x1b8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d04a      	beq.n	8001d24 <HAL_DMA_Init+0x174>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a36      	ldr	r2, [pc, #216]	; (8001d6c <HAL_DMA_Init+0x1bc>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d045      	beq.n	8001d24 <HAL_DMA_Init+0x174>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a34      	ldr	r2, [pc, #208]	; (8001d70 <HAL_DMA_Init+0x1c0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d040      	beq.n	8001d24 <HAL_DMA_Init+0x174>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a33      	ldr	r2, [pc, #204]	; (8001d74 <HAL_DMA_Init+0x1c4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d03b      	beq.n	8001d24 <HAL_DMA_Init+0x174>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a31      	ldr	r2, [pc, #196]	; (8001d78 <HAL_DMA_Init+0x1c8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d036      	beq.n	8001d24 <HAL_DMA_Init+0x174>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a30      	ldr	r2, [pc, #192]	; (8001d7c <HAL_DMA_Init+0x1cc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d031      	beq.n	8001d24 <HAL_DMA_Init+0x174>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a2e      	ldr	r2, [pc, #184]	; (8001d80 <HAL_DMA_Init+0x1d0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d02c      	beq.n	8001d24 <HAL_DMA_Init+0x174>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a2d      	ldr	r2, [pc, #180]	; (8001d84 <HAL_DMA_Init+0x1d4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d027      	beq.n	8001d24 <HAL_DMA_Init+0x174>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a2b      	ldr	r2, [pc, #172]	; (8001d88 <HAL_DMA_Init+0x1d8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d022      	beq.n	8001d24 <HAL_DMA_Init+0x174>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2a      	ldr	r2, [pc, #168]	; (8001d8c <HAL_DMA_Init+0x1dc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d01d      	beq.n	8001d24 <HAL_DMA_Init+0x174>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a28      	ldr	r2, [pc, #160]	; (8001d90 <HAL_DMA_Init+0x1e0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d018      	beq.n	8001d24 <HAL_DMA_Init+0x174>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a27      	ldr	r2, [pc, #156]	; (8001d94 <HAL_DMA_Init+0x1e4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d013      	beq.n	8001d24 <HAL_DMA_Init+0x174>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a25      	ldr	r2, [pc, #148]	; (8001d98 <HAL_DMA_Init+0x1e8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00e      	beq.n	8001d24 <HAL_DMA_Init+0x174>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a24      	ldr	r2, [pc, #144]	; (8001d9c <HAL_DMA_Init+0x1ec>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_DMA_Init+0x174>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a22      	ldr	r2, [pc, #136]	; (8001da0 <HAL_DMA_Init+0x1f0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d004      	beq.n	8001d24 <HAL_DMA_Init+0x174>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a21      	ldr	r2, [pc, #132]	; (8001da4 <HAL_DMA_Init+0x1f4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d108      	bne.n	8001d36 <HAL_DMA_Init+0x186>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	e007      	b.n	8001d46 <HAL_DMA_Init+0x196>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0201 	bic.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d46:	e02f      	b.n	8001da8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d48:	f7ff fe0a 	bl	8001960 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b05      	cmp	r3, #5
 8001d54:	d928      	bls.n	8001da8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2203      	movs	r2, #3
 8001d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e246      	b.n	80021f6 <HAL_DMA_Init+0x646>
 8001d68:	40020010 	.word	0x40020010
 8001d6c:	40020028 	.word	0x40020028
 8001d70:	40020040 	.word	0x40020040
 8001d74:	40020058 	.word	0x40020058
 8001d78:	40020070 	.word	0x40020070
 8001d7c:	40020088 	.word	0x40020088
 8001d80:	400200a0 	.word	0x400200a0
 8001d84:	400200b8 	.word	0x400200b8
 8001d88:	40020410 	.word	0x40020410
 8001d8c:	40020428 	.word	0x40020428
 8001d90:	40020440 	.word	0x40020440
 8001d94:	40020458 	.word	0x40020458
 8001d98:	40020470 	.word	0x40020470
 8001d9c:	40020488 	.word	0x40020488
 8001da0:	400204a0 	.word	0x400204a0
 8001da4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1c8      	bne.n	8001d48 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4b83      	ldr	r3, [pc, #524]	; (8001fd0 <HAL_DMA_Init+0x420>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001dce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dda:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d107      	bne.n	8001e0c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	4313      	orrs	r3, r2
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001e0c:	4b71      	ldr	r3, [pc, #452]	; (8001fd4 <HAL_DMA_Init+0x424>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b71      	ldr	r3, [pc, #452]	; (8001fd8 <HAL_DMA_Init+0x428>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e18:	d328      	bcc.n	8001e6c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b28      	cmp	r3, #40	; 0x28
 8001e20:	d903      	bls.n	8001e2a <HAL_DMA_Init+0x27a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b2e      	cmp	r3, #46	; 0x2e
 8001e28:	d917      	bls.n	8001e5a <HAL_DMA_Init+0x2aa>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b3e      	cmp	r3, #62	; 0x3e
 8001e30:	d903      	bls.n	8001e3a <HAL_DMA_Init+0x28a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b42      	cmp	r3, #66	; 0x42
 8001e38:	d90f      	bls.n	8001e5a <HAL_DMA_Init+0x2aa>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b46      	cmp	r3, #70	; 0x46
 8001e40:	d903      	bls.n	8001e4a <HAL_DMA_Init+0x29a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b48      	cmp	r3, #72	; 0x48
 8001e48:	d907      	bls.n	8001e5a <HAL_DMA_Init+0x2aa>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b4e      	cmp	r3, #78	; 0x4e
 8001e50:	d905      	bls.n	8001e5e <HAL_DMA_Init+0x2ae>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b52      	cmp	r3, #82	; 0x52
 8001e58:	d801      	bhi.n	8001e5e <HAL_DMA_Init+0x2ae>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_DMA_Init+0x2b0>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e6a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f023 0307 	bic.w	r3, r3, #7
 8001e82:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d117      	bne.n	8001ec6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f001 fdcf 	bl	8003a4c <DMA_CheckFifoParam>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2240      	movs	r2, #64	; 0x40
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e197      	b.n	80021f6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f001 fd0a 	bl	80038e8 <DMA_CalcBaseAndBitshift>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	223f      	movs	r2, #63	; 0x3f
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	e0cd      	b.n	8002086 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a3b      	ldr	r2, [pc, #236]	; (8001fdc <HAL_DMA_Init+0x42c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d022      	beq.n	8001f3a <HAL_DMA_Init+0x38a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a39      	ldr	r2, [pc, #228]	; (8001fe0 <HAL_DMA_Init+0x430>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01d      	beq.n	8001f3a <HAL_DMA_Init+0x38a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a38      	ldr	r2, [pc, #224]	; (8001fe4 <HAL_DMA_Init+0x434>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d018      	beq.n	8001f3a <HAL_DMA_Init+0x38a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a36      	ldr	r2, [pc, #216]	; (8001fe8 <HAL_DMA_Init+0x438>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d013      	beq.n	8001f3a <HAL_DMA_Init+0x38a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a35      	ldr	r2, [pc, #212]	; (8001fec <HAL_DMA_Init+0x43c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d00e      	beq.n	8001f3a <HAL_DMA_Init+0x38a>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a33      	ldr	r2, [pc, #204]	; (8001ff0 <HAL_DMA_Init+0x440>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d009      	beq.n	8001f3a <HAL_DMA_Init+0x38a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a32      	ldr	r2, [pc, #200]	; (8001ff4 <HAL_DMA_Init+0x444>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d004      	beq.n	8001f3a <HAL_DMA_Init+0x38a>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a30      	ldr	r2, [pc, #192]	; (8001ff8 <HAL_DMA_Init+0x448>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d101      	bne.n	8001f3e <HAL_DMA_Init+0x38e>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_DMA_Init+0x390>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 8097 	beq.w	8002074 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <HAL_DMA_Init+0x42c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d021      	beq.n	8001f94 <HAL_DMA_Init+0x3e4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <HAL_DMA_Init+0x430>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d01c      	beq.n	8001f94 <HAL_DMA_Init+0x3e4>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a21      	ldr	r2, [pc, #132]	; (8001fe4 <HAL_DMA_Init+0x434>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d017      	beq.n	8001f94 <HAL_DMA_Init+0x3e4>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1f      	ldr	r2, [pc, #124]	; (8001fe8 <HAL_DMA_Init+0x438>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d012      	beq.n	8001f94 <HAL_DMA_Init+0x3e4>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1e      	ldr	r2, [pc, #120]	; (8001fec <HAL_DMA_Init+0x43c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d00d      	beq.n	8001f94 <HAL_DMA_Init+0x3e4>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <HAL_DMA_Init+0x440>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d008      	beq.n	8001f94 <HAL_DMA_Init+0x3e4>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <HAL_DMA_Init+0x444>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d003      	beq.n	8001f94 <HAL_DMA_Init+0x3e4>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a19      	ldr	r2, [pc, #100]	; (8001ff8 <HAL_DMA_Init+0x448>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_DMA_Init+0x44c>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b40      	cmp	r3, #64	; 0x40
 8001fbc:	d020      	beq.n	8002000 <HAL_DMA_Init+0x450>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b80      	cmp	r3, #128	; 0x80
 8001fc4:	d102      	bne.n	8001fcc <HAL_DMA_Init+0x41c>
 8001fc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fca:	e01a      	b.n	8002002 <HAL_DMA_Init+0x452>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e018      	b.n	8002002 <HAL_DMA_Init+0x452>
 8001fd0:	fe10803f 	.word	0xfe10803f
 8001fd4:	5c001000 	.word	0x5c001000
 8001fd8:	ffff0000 	.word	0xffff0000
 8001fdc:	58025408 	.word	0x58025408
 8001fe0:	5802541c 	.word	0x5802541c
 8001fe4:	58025430 	.word	0x58025430
 8001fe8:	58025444 	.word	0x58025444
 8001fec:	58025458 	.word	0x58025458
 8001ff0:	5802546c 	.word	0x5802546c
 8001ff4:	58025480 	.word	0x58025480
 8001ff8:	58025494 	.word	0x58025494
 8001ffc:	fffe000f 	.word	0xfffe000f
 8002000:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68d2      	ldr	r2, [r2, #12]
 8002006:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002008:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002010:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002018:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002020:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002028:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002030:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4313      	orrs	r3, r2
 8002036:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b6e      	ldr	r3, [pc, #440]	; (8002200 <HAL_DMA_Init+0x650>)
 8002048:	4413      	add	r3, r2
 800204a:	4a6e      	ldr	r2, [pc, #440]	; (8002204 <HAL_DMA_Init+0x654>)
 800204c:	fba2 2303 	umull	r2, r3, r2, r3
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	009a      	lsls	r2, r3, #2
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f001 fc45 	bl	80038e8 <DMA_CalcBaseAndBitshift>
 800205e:	4603      	mov	r3, r0
 8002060:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	2201      	movs	r2, #1
 800206c:	409a      	lsls	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	e008      	b.n	8002086 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2240      	movs	r2, #64	; 0x40
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2203      	movs	r2, #3
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e0b7      	b.n	80021f6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a5f      	ldr	r2, [pc, #380]	; (8002208 <HAL_DMA_Init+0x658>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d072      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a5d      	ldr	r2, [pc, #372]	; (800220c <HAL_DMA_Init+0x65c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d06d      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a5c      	ldr	r2, [pc, #368]	; (8002210 <HAL_DMA_Init+0x660>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d068      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a5a      	ldr	r2, [pc, #360]	; (8002214 <HAL_DMA_Init+0x664>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d063      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a59      	ldr	r2, [pc, #356]	; (8002218 <HAL_DMA_Init+0x668>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d05e      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a57      	ldr	r2, [pc, #348]	; (800221c <HAL_DMA_Init+0x66c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d059      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a56      	ldr	r2, [pc, #344]	; (8002220 <HAL_DMA_Init+0x670>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d054      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a54      	ldr	r2, [pc, #336]	; (8002224 <HAL_DMA_Init+0x674>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d04f      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a53      	ldr	r2, [pc, #332]	; (8002228 <HAL_DMA_Init+0x678>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d04a      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a51      	ldr	r2, [pc, #324]	; (800222c <HAL_DMA_Init+0x67c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d045      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a50      	ldr	r2, [pc, #320]	; (8002230 <HAL_DMA_Init+0x680>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d040      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a4e      	ldr	r2, [pc, #312]	; (8002234 <HAL_DMA_Init+0x684>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d03b      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a4d      	ldr	r2, [pc, #308]	; (8002238 <HAL_DMA_Init+0x688>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d036      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a4b      	ldr	r2, [pc, #300]	; (800223c <HAL_DMA_Init+0x68c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d031      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a4a      	ldr	r2, [pc, #296]	; (8002240 <HAL_DMA_Init+0x690>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d02c      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a48      	ldr	r2, [pc, #288]	; (8002244 <HAL_DMA_Init+0x694>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d027      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a47      	ldr	r2, [pc, #284]	; (8002248 <HAL_DMA_Init+0x698>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d022      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a45      	ldr	r2, [pc, #276]	; (800224c <HAL_DMA_Init+0x69c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d01d      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a44      	ldr	r2, [pc, #272]	; (8002250 <HAL_DMA_Init+0x6a0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d018      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a42      	ldr	r2, [pc, #264]	; (8002254 <HAL_DMA_Init+0x6a4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a41      	ldr	r2, [pc, #260]	; (8002258 <HAL_DMA_Init+0x6a8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00e      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a3f      	ldr	r2, [pc, #252]	; (800225c <HAL_DMA_Init+0x6ac>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d009      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a3e      	ldr	r2, [pc, #248]	; (8002260 <HAL_DMA_Init+0x6b0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d004      	beq.n	8002176 <HAL_DMA_Init+0x5c6>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a3c      	ldr	r2, [pc, #240]	; (8002264 <HAL_DMA_Init+0x6b4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_DMA_Init+0x5ca>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_DMA_Init+0x5cc>
 800217a:	2300      	movs	r3, #0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d032      	beq.n	80021e6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f001 fcdf 	bl	8003b44 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b80      	cmp	r3, #128	; 0x80
 800218c:	d102      	bne.n	8002194 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80021a8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d010      	beq.n	80021d4 <HAL_DMA_Init+0x624>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d80c      	bhi.n	80021d4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f001 fd5c 	bl	8003c78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	e008      	b.n	80021e6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	a7fdabf8 	.word	0xa7fdabf8
 8002204:	cccccccd 	.word	0xcccccccd
 8002208:	40020010 	.word	0x40020010
 800220c:	40020028 	.word	0x40020028
 8002210:	40020040 	.word	0x40020040
 8002214:	40020058 	.word	0x40020058
 8002218:	40020070 	.word	0x40020070
 800221c:	40020088 	.word	0x40020088
 8002220:	400200a0 	.word	0x400200a0
 8002224:	400200b8 	.word	0x400200b8
 8002228:	40020410 	.word	0x40020410
 800222c:	40020428 	.word	0x40020428
 8002230:	40020440 	.word	0x40020440
 8002234:	40020458 	.word	0x40020458
 8002238:	40020470 	.word	0x40020470
 800223c:	40020488 	.word	0x40020488
 8002240:	400204a0 	.word	0x400204a0
 8002244:	400204b8 	.word	0x400204b8
 8002248:	58025408 	.word	0x58025408
 800224c:	5802541c 	.word	0x5802541c
 8002250:	58025430 	.word	0x58025430
 8002254:	58025444 	.word	0x58025444
 8002258:	58025458 	.word	0x58025458
 800225c:	5802546c 	.word	0x5802546c
 8002260:	58025480 	.word	0x58025480
 8002264:	58025494 	.word	0x58025494

08002268 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e226      	b.n	80026d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_DMA_Start_IT+0x2a>
 800228e:	2302      	movs	r3, #2
 8002290:	e21f      	b.n	80026d2 <HAL_DMA_Start_IT+0x46a>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	f040 820a 	bne.w	80026bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a68      	ldr	r2, [pc, #416]	; (800245c <HAL_DMA_Start_IT+0x1f4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d04a      	beq.n	8002356 <HAL_DMA_Start_IT+0xee>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a66      	ldr	r2, [pc, #408]	; (8002460 <HAL_DMA_Start_IT+0x1f8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d045      	beq.n	8002356 <HAL_DMA_Start_IT+0xee>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a65      	ldr	r2, [pc, #404]	; (8002464 <HAL_DMA_Start_IT+0x1fc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d040      	beq.n	8002356 <HAL_DMA_Start_IT+0xee>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a63      	ldr	r2, [pc, #396]	; (8002468 <HAL_DMA_Start_IT+0x200>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d03b      	beq.n	8002356 <HAL_DMA_Start_IT+0xee>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a62      	ldr	r2, [pc, #392]	; (800246c <HAL_DMA_Start_IT+0x204>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d036      	beq.n	8002356 <HAL_DMA_Start_IT+0xee>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a60      	ldr	r2, [pc, #384]	; (8002470 <HAL_DMA_Start_IT+0x208>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d031      	beq.n	8002356 <HAL_DMA_Start_IT+0xee>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a5f      	ldr	r2, [pc, #380]	; (8002474 <HAL_DMA_Start_IT+0x20c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d02c      	beq.n	8002356 <HAL_DMA_Start_IT+0xee>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a5d      	ldr	r2, [pc, #372]	; (8002478 <HAL_DMA_Start_IT+0x210>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d027      	beq.n	8002356 <HAL_DMA_Start_IT+0xee>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a5c      	ldr	r2, [pc, #368]	; (800247c <HAL_DMA_Start_IT+0x214>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d022      	beq.n	8002356 <HAL_DMA_Start_IT+0xee>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a5a      	ldr	r2, [pc, #360]	; (8002480 <HAL_DMA_Start_IT+0x218>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d01d      	beq.n	8002356 <HAL_DMA_Start_IT+0xee>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a59      	ldr	r2, [pc, #356]	; (8002484 <HAL_DMA_Start_IT+0x21c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d018      	beq.n	8002356 <HAL_DMA_Start_IT+0xee>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a57      	ldr	r2, [pc, #348]	; (8002488 <HAL_DMA_Start_IT+0x220>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <HAL_DMA_Start_IT+0xee>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a56      	ldr	r2, [pc, #344]	; (800248c <HAL_DMA_Start_IT+0x224>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00e      	beq.n	8002356 <HAL_DMA_Start_IT+0xee>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a54      	ldr	r2, [pc, #336]	; (8002490 <HAL_DMA_Start_IT+0x228>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d009      	beq.n	8002356 <HAL_DMA_Start_IT+0xee>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a53      	ldr	r2, [pc, #332]	; (8002494 <HAL_DMA_Start_IT+0x22c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d004      	beq.n	8002356 <HAL_DMA_Start_IT+0xee>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a51      	ldr	r2, [pc, #324]	; (8002498 <HAL_DMA_Start_IT+0x230>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d108      	bne.n	8002368 <HAL_DMA_Start_IT+0x100>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0201 	bic.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	e007      	b.n	8002378 <HAL_DMA_Start_IT+0x110>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f001 f906 	bl	8003590 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a34      	ldr	r2, [pc, #208]	; (800245c <HAL_DMA_Start_IT+0x1f4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d04a      	beq.n	8002424 <HAL_DMA_Start_IT+0x1bc>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a33      	ldr	r2, [pc, #204]	; (8002460 <HAL_DMA_Start_IT+0x1f8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d045      	beq.n	8002424 <HAL_DMA_Start_IT+0x1bc>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a31      	ldr	r2, [pc, #196]	; (8002464 <HAL_DMA_Start_IT+0x1fc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d040      	beq.n	8002424 <HAL_DMA_Start_IT+0x1bc>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a30      	ldr	r2, [pc, #192]	; (8002468 <HAL_DMA_Start_IT+0x200>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d03b      	beq.n	8002424 <HAL_DMA_Start_IT+0x1bc>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a2e      	ldr	r2, [pc, #184]	; (800246c <HAL_DMA_Start_IT+0x204>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d036      	beq.n	8002424 <HAL_DMA_Start_IT+0x1bc>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a2d      	ldr	r2, [pc, #180]	; (8002470 <HAL_DMA_Start_IT+0x208>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d031      	beq.n	8002424 <HAL_DMA_Start_IT+0x1bc>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a2b      	ldr	r2, [pc, #172]	; (8002474 <HAL_DMA_Start_IT+0x20c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d02c      	beq.n	8002424 <HAL_DMA_Start_IT+0x1bc>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2a      	ldr	r2, [pc, #168]	; (8002478 <HAL_DMA_Start_IT+0x210>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d027      	beq.n	8002424 <HAL_DMA_Start_IT+0x1bc>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a28      	ldr	r2, [pc, #160]	; (800247c <HAL_DMA_Start_IT+0x214>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d022      	beq.n	8002424 <HAL_DMA_Start_IT+0x1bc>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a27      	ldr	r2, [pc, #156]	; (8002480 <HAL_DMA_Start_IT+0x218>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d01d      	beq.n	8002424 <HAL_DMA_Start_IT+0x1bc>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a25      	ldr	r2, [pc, #148]	; (8002484 <HAL_DMA_Start_IT+0x21c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d018      	beq.n	8002424 <HAL_DMA_Start_IT+0x1bc>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a24      	ldr	r2, [pc, #144]	; (8002488 <HAL_DMA_Start_IT+0x220>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d013      	beq.n	8002424 <HAL_DMA_Start_IT+0x1bc>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a22      	ldr	r2, [pc, #136]	; (800248c <HAL_DMA_Start_IT+0x224>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00e      	beq.n	8002424 <HAL_DMA_Start_IT+0x1bc>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a21      	ldr	r2, [pc, #132]	; (8002490 <HAL_DMA_Start_IT+0x228>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d009      	beq.n	8002424 <HAL_DMA_Start_IT+0x1bc>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a1f      	ldr	r2, [pc, #124]	; (8002494 <HAL_DMA_Start_IT+0x22c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_DMA_Start_IT+0x1bc>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a1e      	ldr	r2, [pc, #120]	; (8002498 <HAL_DMA_Start_IT+0x230>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_DMA_Start_IT+0x1c0>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_DMA_Start_IT+0x1c2>
 8002428:	2300      	movs	r3, #0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d036      	beq.n	800249c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 021e 	bic.w	r2, r3, #30
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0216 	orr.w	r2, r2, #22
 8002440:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	2b00      	cmp	r3, #0
 8002448:	d03e      	beq.n	80024c8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0208 	orr.w	r2, r2, #8
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e035      	b.n	80024c8 <HAL_DMA_Start_IT+0x260>
 800245c:	40020010 	.word	0x40020010
 8002460:	40020028 	.word	0x40020028
 8002464:	40020040 	.word	0x40020040
 8002468:	40020058 	.word	0x40020058
 800246c:	40020070 	.word	0x40020070
 8002470:	40020088 	.word	0x40020088
 8002474:	400200a0 	.word	0x400200a0
 8002478:	400200b8 	.word	0x400200b8
 800247c:	40020410 	.word	0x40020410
 8002480:	40020428 	.word	0x40020428
 8002484:	40020440 	.word	0x40020440
 8002488:	40020458 	.word	0x40020458
 800248c:	40020470 	.word	0x40020470
 8002490:	40020488 	.word	0x40020488
 8002494:	400204a0 	.word	0x400204a0
 8002498:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 020e 	bic.w	r2, r3, #14
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 020a 	orr.w	r2, r2, #10
 80024ae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0204 	orr.w	r2, r2, #4
 80024c6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a83      	ldr	r2, [pc, #524]	; (80026dc <HAL_DMA_Start_IT+0x474>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d072      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a82      	ldr	r2, [pc, #520]	; (80026e0 <HAL_DMA_Start_IT+0x478>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d06d      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a80      	ldr	r2, [pc, #512]	; (80026e4 <HAL_DMA_Start_IT+0x47c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d068      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a7f      	ldr	r2, [pc, #508]	; (80026e8 <HAL_DMA_Start_IT+0x480>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d063      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a7d      	ldr	r2, [pc, #500]	; (80026ec <HAL_DMA_Start_IT+0x484>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d05e      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7c      	ldr	r2, [pc, #496]	; (80026f0 <HAL_DMA_Start_IT+0x488>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d059      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a7a      	ldr	r2, [pc, #488]	; (80026f4 <HAL_DMA_Start_IT+0x48c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d054      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a79      	ldr	r2, [pc, #484]	; (80026f8 <HAL_DMA_Start_IT+0x490>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d04f      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a77      	ldr	r2, [pc, #476]	; (80026fc <HAL_DMA_Start_IT+0x494>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d04a      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a76      	ldr	r2, [pc, #472]	; (8002700 <HAL_DMA_Start_IT+0x498>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d045      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a74      	ldr	r2, [pc, #464]	; (8002704 <HAL_DMA_Start_IT+0x49c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d040      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a73      	ldr	r2, [pc, #460]	; (8002708 <HAL_DMA_Start_IT+0x4a0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d03b      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a71      	ldr	r2, [pc, #452]	; (800270c <HAL_DMA_Start_IT+0x4a4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d036      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a70      	ldr	r2, [pc, #448]	; (8002710 <HAL_DMA_Start_IT+0x4a8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d031      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a6e      	ldr	r2, [pc, #440]	; (8002714 <HAL_DMA_Start_IT+0x4ac>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d02c      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a6d      	ldr	r2, [pc, #436]	; (8002718 <HAL_DMA_Start_IT+0x4b0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d027      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a6b      	ldr	r2, [pc, #428]	; (800271c <HAL_DMA_Start_IT+0x4b4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d022      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a6a      	ldr	r2, [pc, #424]	; (8002720 <HAL_DMA_Start_IT+0x4b8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d01d      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a68      	ldr	r2, [pc, #416]	; (8002724 <HAL_DMA_Start_IT+0x4bc>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d018      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a67      	ldr	r2, [pc, #412]	; (8002728 <HAL_DMA_Start_IT+0x4c0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d013      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a65      	ldr	r2, [pc, #404]	; (800272c <HAL_DMA_Start_IT+0x4c4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00e      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a64      	ldr	r2, [pc, #400]	; (8002730 <HAL_DMA_Start_IT+0x4c8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d009      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a62      	ldr	r2, [pc, #392]	; (8002734 <HAL_DMA_Start_IT+0x4cc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d004      	beq.n	80025b8 <HAL_DMA_Start_IT+0x350>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a61      	ldr	r2, [pc, #388]	; (8002738 <HAL_DMA_Start_IT+0x4d0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d101      	bne.n	80025bc <HAL_DMA_Start_IT+0x354>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <HAL_DMA_Start_IT+0x356>
 80025bc:	2300      	movs	r3, #0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d01a      	beq.n	80025f8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025de:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d007      	beq.n	80025f8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025f6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a37      	ldr	r2, [pc, #220]	; (80026dc <HAL_DMA_Start_IT+0x474>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d04a      	beq.n	8002698 <HAL_DMA_Start_IT+0x430>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a36      	ldr	r2, [pc, #216]	; (80026e0 <HAL_DMA_Start_IT+0x478>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d045      	beq.n	8002698 <HAL_DMA_Start_IT+0x430>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a34      	ldr	r2, [pc, #208]	; (80026e4 <HAL_DMA_Start_IT+0x47c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d040      	beq.n	8002698 <HAL_DMA_Start_IT+0x430>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a33      	ldr	r2, [pc, #204]	; (80026e8 <HAL_DMA_Start_IT+0x480>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d03b      	beq.n	8002698 <HAL_DMA_Start_IT+0x430>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a31      	ldr	r2, [pc, #196]	; (80026ec <HAL_DMA_Start_IT+0x484>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d036      	beq.n	8002698 <HAL_DMA_Start_IT+0x430>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a30      	ldr	r2, [pc, #192]	; (80026f0 <HAL_DMA_Start_IT+0x488>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d031      	beq.n	8002698 <HAL_DMA_Start_IT+0x430>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a2e      	ldr	r2, [pc, #184]	; (80026f4 <HAL_DMA_Start_IT+0x48c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d02c      	beq.n	8002698 <HAL_DMA_Start_IT+0x430>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a2d      	ldr	r2, [pc, #180]	; (80026f8 <HAL_DMA_Start_IT+0x490>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d027      	beq.n	8002698 <HAL_DMA_Start_IT+0x430>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a2b      	ldr	r2, [pc, #172]	; (80026fc <HAL_DMA_Start_IT+0x494>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d022      	beq.n	8002698 <HAL_DMA_Start_IT+0x430>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a2a      	ldr	r2, [pc, #168]	; (8002700 <HAL_DMA_Start_IT+0x498>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d01d      	beq.n	8002698 <HAL_DMA_Start_IT+0x430>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a28      	ldr	r2, [pc, #160]	; (8002704 <HAL_DMA_Start_IT+0x49c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d018      	beq.n	8002698 <HAL_DMA_Start_IT+0x430>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a27      	ldr	r2, [pc, #156]	; (8002708 <HAL_DMA_Start_IT+0x4a0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <HAL_DMA_Start_IT+0x430>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a25      	ldr	r2, [pc, #148]	; (800270c <HAL_DMA_Start_IT+0x4a4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00e      	beq.n	8002698 <HAL_DMA_Start_IT+0x430>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a24      	ldr	r2, [pc, #144]	; (8002710 <HAL_DMA_Start_IT+0x4a8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d009      	beq.n	8002698 <HAL_DMA_Start_IT+0x430>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a22      	ldr	r2, [pc, #136]	; (8002714 <HAL_DMA_Start_IT+0x4ac>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d004      	beq.n	8002698 <HAL_DMA_Start_IT+0x430>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a21      	ldr	r2, [pc, #132]	; (8002718 <HAL_DMA_Start_IT+0x4b0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d108      	bne.n	80026aa <HAL_DMA_Start_IT+0x442>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	e012      	b.n	80026d0 <HAL_DMA_Start_IT+0x468>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0201 	orr.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e009      	b.n	80026d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40020010 	.word	0x40020010
 80026e0:	40020028 	.word	0x40020028
 80026e4:	40020040 	.word	0x40020040
 80026e8:	40020058 	.word	0x40020058
 80026ec:	40020070 	.word	0x40020070
 80026f0:	40020088 	.word	0x40020088
 80026f4:	400200a0 	.word	0x400200a0
 80026f8:	400200b8 	.word	0x400200b8
 80026fc:	40020410 	.word	0x40020410
 8002700:	40020428 	.word	0x40020428
 8002704:	40020440 	.word	0x40020440
 8002708:	40020458 	.word	0x40020458
 800270c:	40020470 	.word	0x40020470
 8002710:	40020488 	.word	0x40020488
 8002714:	400204a0 	.word	0x400204a0
 8002718:	400204b8 	.word	0x400204b8
 800271c:	58025408 	.word	0x58025408
 8002720:	5802541c 	.word	0x5802541c
 8002724:	58025430 	.word	0x58025430
 8002728:	58025444 	.word	0x58025444
 800272c:	58025458 	.word	0x58025458
 8002730:	5802546c 	.word	0x5802546c
 8002734:	58025480 	.word	0x58025480
 8002738:	58025494 	.word	0x58025494

0800273c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002748:	4b67      	ldr	r3, [pc, #412]	; (80028e8 <HAL_DMA_IRQHandler+0x1ac>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a67      	ldr	r2, [pc, #412]	; (80028ec <HAL_DMA_IRQHandler+0x1b0>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0a9b      	lsrs	r3, r3, #10
 8002754:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a5f      	ldr	r2, [pc, #380]	; (80028f0 <HAL_DMA_IRQHandler+0x1b4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d04a      	beq.n	800280e <HAL_DMA_IRQHandler+0xd2>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a5d      	ldr	r2, [pc, #372]	; (80028f4 <HAL_DMA_IRQHandler+0x1b8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d045      	beq.n	800280e <HAL_DMA_IRQHandler+0xd2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a5c      	ldr	r2, [pc, #368]	; (80028f8 <HAL_DMA_IRQHandler+0x1bc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d040      	beq.n	800280e <HAL_DMA_IRQHandler+0xd2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a5a      	ldr	r2, [pc, #360]	; (80028fc <HAL_DMA_IRQHandler+0x1c0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d03b      	beq.n	800280e <HAL_DMA_IRQHandler+0xd2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a59      	ldr	r2, [pc, #356]	; (8002900 <HAL_DMA_IRQHandler+0x1c4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d036      	beq.n	800280e <HAL_DMA_IRQHandler+0xd2>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a57      	ldr	r2, [pc, #348]	; (8002904 <HAL_DMA_IRQHandler+0x1c8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d031      	beq.n	800280e <HAL_DMA_IRQHandler+0xd2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a56      	ldr	r2, [pc, #344]	; (8002908 <HAL_DMA_IRQHandler+0x1cc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d02c      	beq.n	800280e <HAL_DMA_IRQHandler+0xd2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a54      	ldr	r2, [pc, #336]	; (800290c <HAL_DMA_IRQHandler+0x1d0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d027      	beq.n	800280e <HAL_DMA_IRQHandler+0xd2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a53      	ldr	r2, [pc, #332]	; (8002910 <HAL_DMA_IRQHandler+0x1d4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <HAL_DMA_IRQHandler+0xd2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a51      	ldr	r2, [pc, #324]	; (8002914 <HAL_DMA_IRQHandler+0x1d8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01d      	beq.n	800280e <HAL_DMA_IRQHandler+0xd2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a50      	ldr	r2, [pc, #320]	; (8002918 <HAL_DMA_IRQHandler+0x1dc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d018      	beq.n	800280e <HAL_DMA_IRQHandler+0xd2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a4e      	ldr	r2, [pc, #312]	; (800291c <HAL_DMA_IRQHandler+0x1e0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_DMA_IRQHandler+0xd2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a4d      	ldr	r2, [pc, #308]	; (8002920 <HAL_DMA_IRQHandler+0x1e4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_IRQHandler+0xd2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a4b      	ldr	r2, [pc, #300]	; (8002924 <HAL_DMA_IRQHandler+0x1e8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_DMA_IRQHandler+0xd2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a4a      	ldr	r2, [pc, #296]	; (8002928 <HAL_DMA_IRQHandler+0x1ec>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d004      	beq.n	800280e <HAL_DMA_IRQHandler+0xd2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a48      	ldr	r2, [pc, #288]	; (800292c <HAL_DMA_IRQHandler+0x1f0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <HAL_DMA_IRQHandler+0xd6>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_DMA_IRQHandler+0xd8>
 8002812:	2300      	movs	r3, #0
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 842b 	beq.w	8003070 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	f003 031f 	and.w	r3, r3, #31
 8002822:	2208      	movs	r2, #8
 8002824:	409a      	lsls	r2, r3
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80a2 	beq.w	8002974 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a2e      	ldr	r2, [pc, #184]	; (80028f0 <HAL_DMA_IRQHandler+0x1b4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d04a      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x194>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a2d      	ldr	r2, [pc, #180]	; (80028f4 <HAL_DMA_IRQHandler+0x1b8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d045      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x194>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a2b      	ldr	r2, [pc, #172]	; (80028f8 <HAL_DMA_IRQHandler+0x1bc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d040      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x194>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2a      	ldr	r2, [pc, #168]	; (80028fc <HAL_DMA_IRQHandler+0x1c0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d03b      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x194>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a28      	ldr	r2, [pc, #160]	; (8002900 <HAL_DMA_IRQHandler+0x1c4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d036      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x194>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a27      	ldr	r2, [pc, #156]	; (8002904 <HAL_DMA_IRQHandler+0x1c8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d031      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x194>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a25      	ldr	r2, [pc, #148]	; (8002908 <HAL_DMA_IRQHandler+0x1cc>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d02c      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x194>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a24      	ldr	r2, [pc, #144]	; (800290c <HAL_DMA_IRQHandler+0x1d0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d027      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x194>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a22      	ldr	r2, [pc, #136]	; (8002910 <HAL_DMA_IRQHandler+0x1d4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d022      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x194>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a21      	ldr	r2, [pc, #132]	; (8002914 <HAL_DMA_IRQHandler+0x1d8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d01d      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x194>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a1f      	ldr	r2, [pc, #124]	; (8002918 <HAL_DMA_IRQHandler+0x1dc>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d018      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x194>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1e      	ldr	r2, [pc, #120]	; (800291c <HAL_DMA_IRQHandler+0x1e0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d013      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x194>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <HAL_DMA_IRQHandler+0x1e4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00e      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x194>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <HAL_DMA_IRQHandler+0x1e8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d009      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x194>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a19      	ldr	r2, [pc, #100]	; (8002928 <HAL_DMA_IRQHandler+0x1ec>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d004      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x194>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a18      	ldr	r2, [pc, #96]	; (800292c <HAL_DMA_IRQHandler+0x1f0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d12f      	bne.n	8002930 <HAL_DMA_IRQHandler+0x1f4>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	bf14      	ite	ne
 80028de:	2301      	movne	r3, #1
 80028e0:	2300      	moveq	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	e02e      	b.n	8002944 <HAL_DMA_IRQHandler+0x208>
 80028e6:	bf00      	nop
 80028e8:	24000000 	.word	0x24000000
 80028ec:	1b4e81b5 	.word	0x1b4e81b5
 80028f0:	40020010 	.word	0x40020010
 80028f4:	40020028 	.word	0x40020028
 80028f8:	40020040 	.word	0x40020040
 80028fc:	40020058 	.word	0x40020058
 8002900:	40020070 	.word	0x40020070
 8002904:	40020088 	.word	0x40020088
 8002908:	400200a0 	.word	0x400200a0
 800290c:	400200b8 	.word	0x400200b8
 8002910:	40020410 	.word	0x40020410
 8002914:	40020428 	.word	0x40020428
 8002918:	40020440 	.word	0x40020440
 800291c:	40020458 	.word	0x40020458
 8002920:	40020470 	.word	0x40020470
 8002924:	40020488 	.word	0x40020488
 8002928:	400204a0 	.word	0x400204a0
 800292c:	400204b8 	.word	0x400204b8
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf14      	ite	ne
 800293e:	2301      	movne	r3, #1
 8002940:	2300      	moveq	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d015      	beq.n	8002974 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0204 	bic.w	r2, r2, #4
 8002956:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	2208      	movs	r2, #8
 8002962:	409a      	lsls	r2, r3
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296c:	f043 0201 	orr.w	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d06e      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a69      	ldr	r2, [pc, #420]	; (8002b34 <HAL_DMA_IRQHandler+0x3f8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d04a      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x2ee>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a67      	ldr	r2, [pc, #412]	; (8002b38 <HAL_DMA_IRQHandler+0x3fc>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d045      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x2ee>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a66      	ldr	r2, [pc, #408]	; (8002b3c <HAL_DMA_IRQHandler+0x400>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d040      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x2ee>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a64      	ldr	r2, [pc, #400]	; (8002b40 <HAL_DMA_IRQHandler+0x404>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d03b      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x2ee>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a63      	ldr	r2, [pc, #396]	; (8002b44 <HAL_DMA_IRQHandler+0x408>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d036      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x2ee>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a61      	ldr	r2, [pc, #388]	; (8002b48 <HAL_DMA_IRQHandler+0x40c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d031      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x2ee>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a60      	ldr	r2, [pc, #384]	; (8002b4c <HAL_DMA_IRQHandler+0x410>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d02c      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x2ee>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a5e      	ldr	r2, [pc, #376]	; (8002b50 <HAL_DMA_IRQHandler+0x414>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d027      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x2ee>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a5d      	ldr	r2, [pc, #372]	; (8002b54 <HAL_DMA_IRQHandler+0x418>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d022      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x2ee>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a5b      	ldr	r2, [pc, #364]	; (8002b58 <HAL_DMA_IRQHandler+0x41c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01d      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x2ee>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a5a      	ldr	r2, [pc, #360]	; (8002b5c <HAL_DMA_IRQHandler+0x420>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d018      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x2ee>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a58      	ldr	r2, [pc, #352]	; (8002b60 <HAL_DMA_IRQHandler+0x424>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x2ee>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a57      	ldr	r2, [pc, #348]	; (8002b64 <HAL_DMA_IRQHandler+0x428>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00e      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x2ee>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a55      	ldr	r2, [pc, #340]	; (8002b68 <HAL_DMA_IRQHandler+0x42c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d009      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x2ee>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a54      	ldr	r2, [pc, #336]	; (8002b6c <HAL_DMA_IRQHandler+0x430>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d004      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x2ee>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a52      	ldr	r2, [pc, #328]	; (8002b70 <HAL_DMA_IRQHandler+0x434>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d10a      	bne.n	8002a40 <HAL_DMA_IRQHandler+0x304>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	e003      	b.n	8002a48 <HAL_DMA_IRQHandler+0x30c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2300      	movs	r3, #0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00d      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	2201      	movs	r2, #1
 8002a56:	409a      	lsls	r2, r3
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a60:	f043 0202 	orr.w	r2, r3, #2
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	2204      	movs	r2, #4
 8002a72:	409a      	lsls	r2, r3
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 808f 	beq.w	8002b9c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a2c      	ldr	r2, [pc, #176]	; (8002b34 <HAL_DMA_IRQHandler+0x3f8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d04a      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x3e2>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a2a      	ldr	r2, [pc, #168]	; (8002b38 <HAL_DMA_IRQHandler+0x3fc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d045      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x3e2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a29      	ldr	r2, [pc, #164]	; (8002b3c <HAL_DMA_IRQHandler+0x400>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d040      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x3e2>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a27      	ldr	r2, [pc, #156]	; (8002b40 <HAL_DMA_IRQHandler+0x404>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d03b      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x3e2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a26      	ldr	r2, [pc, #152]	; (8002b44 <HAL_DMA_IRQHandler+0x408>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d036      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x3e2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <HAL_DMA_IRQHandler+0x40c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d031      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x3e2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a23      	ldr	r2, [pc, #140]	; (8002b4c <HAL_DMA_IRQHandler+0x410>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d02c      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x3e2>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a21      	ldr	r2, [pc, #132]	; (8002b50 <HAL_DMA_IRQHandler+0x414>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d027      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x3e2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a20      	ldr	r2, [pc, #128]	; (8002b54 <HAL_DMA_IRQHandler+0x418>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d022      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x3e2>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <HAL_DMA_IRQHandler+0x41c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d01d      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x3e2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <HAL_DMA_IRQHandler+0x420>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d018      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x3e2>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1b      	ldr	r2, [pc, #108]	; (8002b60 <HAL_DMA_IRQHandler+0x424>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x3e2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <HAL_DMA_IRQHandler+0x428>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00e      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x3e2>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a18      	ldr	r2, [pc, #96]	; (8002b68 <HAL_DMA_IRQHandler+0x42c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d009      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x3e2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a17      	ldr	r2, [pc, #92]	; (8002b6c <HAL_DMA_IRQHandler+0x430>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d004      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x3e2>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a15      	ldr	r2, [pc, #84]	; (8002b70 <HAL_DMA_IRQHandler+0x434>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d12a      	bne.n	8002b74 <HAL_DMA_IRQHandler+0x438>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf14      	ite	ne
 8002b2c:	2301      	movne	r3, #1
 8002b2e:	2300      	moveq	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	e023      	b.n	8002b7c <HAL_DMA_IRQHandler+0x440>
 8002b34:	40020010 	.word	0x40020010
 8002b38:	40020028 	.word	0x40020028
 8002b3c:	40020040 	.word	0x40020040
 8002b40:	40020058 	.word	0x40020058
 8002b44:	40020070 	.word	0x40020070
 8002b48:	40020088 	.word	0x40020088
 8002b4c:	400200a0 	.word	0x400200a0
 8002b50:	400200b8 	.word	0x400200b8
 8002b54:	40020410 	.word	0x40020410
 8002b58:	40020428 	.word	0x40020428
 8002b5c:	40020440 	.word	0x40020440
 8002b60:	40020458 	.word	0x40020458
 8002b64:	40020470 	.word	0x40020470
 8002b68:	40020488 	.word	0x40020488
 8002b6c:	400204a0 	.word	0x400204a0
 8002b70:	400204b8 	.word	0x400204b8
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00d      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	2204      	movs	r2, #4
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	f043 0204 	orr.w	r2, r3, #4
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80a6 	beq.w	8002cfe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a85      	ldr	r2, [pc, #532]	; (8002dcc <HAL_DMA_IRQHandler+0x690>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d04a      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x516>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a83      	ldr	r2, [pc, #524]	; (8002dd0 <HAL_DMA_IRQHandler+0x694>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d045      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x516>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a82      	ldr	r2, [pc, #520]	; (8002dd4 <HAL_DMA_IRQHandler+0x698>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d040      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x516>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a80      	ldr	r2, [pc, #512]	; (8002dd8 <HAL_DMA_IRQHandler+0x69c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d03b      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x516>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a7f      	ldr	r2, [pc, #508]	; (8002ddc <HAL_DMA_IRQHandler+0x6a0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d036      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x516>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a7d      	ldr	r2, [pc, #500]	; (8002de0 <HAL_DMA_IRQHandler+0x6a4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d031      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x516>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a7c      	ldr	r2, [pc, #496]	; (8002de4 <HAL_DMA_IRQHandler+0x6a8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d02c      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x516>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a7a      	ldr	r2, [pc, #488]	; (8002de8 <HAL_DMA_IRQHandler+0x6ac>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d027      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x516>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a79      	ldr	r2, [pc, #484]	; (8002dec <HAL_DMA_IRQHandler+0x6b0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d022      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x516>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a77      	ldr	r2, [pc, #476]	; (8002df0 <HAL_DMA_IRQHandler+0x6b4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d01d      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x516>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a76      	ldr	r2, [pc, #472]	; (8002df4 <HAL_DMA_IRQHandler+0x6b8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d018      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x516>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a74      	ldr	r2, [pc, #464]	; (8002df8 <HAL_DMA_IRQHandler+0x6bc>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d013      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x516>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a73      	ldr	r2, [pc, #460]	; (8002dfc <HAL_DMA_IRQHandler+0x6c0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00e      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x516>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a71      	ldr	r2, [pc, #452]	; (8002e00 <HAL_DMA_IRQHandler+0x6c4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d009      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x516>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a70      	ldr	r2, [pc, #448]	; (8002e04 <HAL_DMA_IRQHandler+0x6c8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d004      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x516>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a6e      	ldr	r2, [pc, #440]	; (8002e08 <HAL_DMA_IRQHandler+0x6cc>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d10a      	bne.n	8002c68 <HAL_DMA_IRQHandler+0x52c>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf14      	ite	ne
 8002c60:	2301      	movne	r3, #1
 8002c62:	2300      	moveq	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e009      	b.n	8002c7c <HAL_DMA_IRQHandler+0x540>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	bf14      	ite	ne
 8002c76:	2301      	movne	r3, #1
 8002c78:	2300      	moveq	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d03e      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	2210      	movs	r2, #16
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d018      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d108      	bne.n	8002cbe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d024      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
 8002cbc:	e01f      	b.n	8002cfe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01b      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
 8002cce:	e016      	b.n	8002cfe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d107      	bne.n	8002cee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0208 	bic.w	r2, r2, #8
 8002cec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2220      	movs	r2, #32
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8110 	beq.w	8002f34 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a2c      	ldr	r2, [pc, #176]	; (8002dcc <HAL_DMA_IRQHandler+0x690>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d04a      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x678>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a2b      	ldr	r2, [pc, #172]	; (8002dd0 <HAL_DMA_IRQHandler+0x694>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d045      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x678>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a29      	ldr	r2, [pc, #164]	; (8002dd4 <HAL_DMA_IRQHandler+0x698>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d040      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x678>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a28      	ldr	r2, [pc, #160]	; (8002dd8 <HAL_DMA_IRQHandler+0x69c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d03b      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x678>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a26      	ldr	r2, [pc, #152]	; (8002ddc <HAL_DMA_IRQHandler+0x6a0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d036      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x678>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a25      	ldr	r2, [pc, #148]	; (8002de0 <HAL_DMA_IRQHandler+0x6a4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d031      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x678>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a23      	ldr	r2, [pc, #140]	; (8002de4 <HAL_DMA_IRQHandler+0x6a8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d02c      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x678>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a22      	ldr	r2, [pc, #136]	; (8002de8 <HAL_DMA_IRQHandler+0x6ac>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d027      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x678>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a20      	ldr	r2, [pc, #128]	; (8002dec <HAL_DMA_IRQHandler+0x6b0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d022      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x678>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1f      	ldr	r2, [pc, #124]	; (8002df0 <HAL_DMA_IRQHandler+0x6b4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d01d      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x678>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1d      	ldr	r2, [pc, #116]	; (8002df4 <HAL_DMA_IRQHandler+0x6b8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d018      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x678>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1c      	ldr	r2, [pc, #112]	; (8002df8 <HAL_DMA_IRQHandler+0x6bc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d013      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x678>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1a      	ldr	r2, [pc, #104]	; (8002dfc <HAL_DMA_IRQHandler+0x6c0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00e      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x678>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a19      	ldr	r2, [pc, #100]	; (8002e00 <HAL_DMA_IRQHandler+0x6c4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x678>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a17      	ldr	r2, [pc, #92]	; (8002e04 <HAL_DMA_IRQHandler+0x6c8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d004      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x678>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a16      	ldr	r2, [pc, #88]	; (8002e08 <HAL_DMA_IRQHandler+0x6cc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d12b      	bne.n	8002e0c <HAL_DMA_IRQHandler+0x6d0>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bf14      	ite	ne
 8002dc2:	2301      	movne	r3, #1
 8002dc4:	2300      	moveq	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	e02a      	b.n	8002e20 <HAL_DMA_IRQHandler+0x6e4>
 8002dca:	bf00      	nop
 8002dcc:	40020010 	.word	0x40020010
 8002dd0:	40020028 	.word	0x40020028
 8002dd4:	40020040 	.word	0x40020040
 8002dd8:	40020058 	.word	0x40020058
 8002ddc:	40020070 	.word	0x40020070
 8002de0:	40020088 	.word	0x40020088
 8002de4:	400200a0 	.word	0x400200a0
 8002de8:	400200b8 	.word	0x400200b8
 8002dec:	40020410 	.word	0x40020410
 8002df0:	40020428 	.word	0x40020428
 8002df4:	40020440 	.word	0x40020440
 8002df8:	40020458 	.word	0x40020458
 8002dfc:	40020470 	.word	0x40020470
 8002e00:	40020488 	.word	0x40020488
 8002e04:	400204a0 	.word	0x400204a0
 8002e08:	400204b8 	.word	0x400204b8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	bf14      	ite	ne
 8002e1a:	2301      	movne	r3, #1
 8002e1c:	2300      	moveq	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8087 	beq.w	8002f34 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	2220      	movs	r2, #32
 8002e30:	409a      	lsls	r2, r3
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d139      	bne.n	8002eb6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0216 	bic.w	r2, r2, #22
 8002e50:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e60:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <HAL_DMA_IRQHandler+0x736>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0208 	bic.w	r2, r2, #8
 8002e80:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	223f      	movs	r2, #63	; 0x3f
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 834a 	beq.w	8003540 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
          }
          return;
 8002eb4:	e344      	b.n	8003540 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d018      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d108      	bne.n	8002ee4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d02c      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	4798      	blx	r3
 8002ee2:	e027      	b.n	8002f34 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d023      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	4798      	blx	r3
 8002ef4:	e01e      	b.n	8002f34 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10f      	bne.n	8002f24 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0210 	bic.w	r2, r2, #16
 8002f12:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 8306 	beq.w	800354a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8088 	beq.w	800305c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2204      	movs	r2, #4
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a7a      	ldr	r2, [pc, #488]	; (8003144 <HAL_DMA_IRQHandler+0xa08>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d04a      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x8b8>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a79      	ldr	r2, [pc, #484]	; (8003148 <HAL_DMA_IRQHandler+0xa0c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d045      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x8b8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a77      	ldr	r2, [pc, #476]	; (800314c <HAL_DMA_IRQHandler+0xa10>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d040      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x8b8>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a76      	ldr	r2, [pc, #472]	; (8003150 <HAL_DMA_IRQHandler+0xa14>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d03b      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x8b8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a74      	ldr	r2, [pc, #464]	; (8003154 <HAL_DMA_IRQHandler+0xa18>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d036      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x8b8>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a73      	ldr	r2, [pc, #460]	; (8003158 <HAL_DMA_IRQHandler+0xa1c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d031      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x8b8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a71      	ldr	r2, [pc, #452]	; (800315c <HAL_DMA_IRQHandler+0xa20>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d02c      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x8b8>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a70      	ldr	r2, [pc, #448]	; (8003160 <HAL_DMA_IRQHandler+0xa24>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d027      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x8b8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a6e      	ldr	r2, [pc, #440]	; (8003164 <HAL_DMA_IRQHandler+0xa28>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d022      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x8b8>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6d      	ldr	r2, [pc, #436]	; (8003168 <HAL_DMA_IRQHandler+0xa2c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d01d      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x8b8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a6b      	ldr	r2, [pc, #428]	; (800316c <HAL_DMA_IRQHandler+0xa30>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d018      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x8b8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6a      	ldr	r2, [pc, #424]	; (8003170 <HAL_DMA_IRQHandler+0xa34>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d013      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x8b8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a68      	ldr	r2, [pc, #416]	; (8003174 <HAL_DMA_IRQHandler+0xa38>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00e      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x8b8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a67      	ldr	r2, [pc, #412]	; (8003178 <HAL_DMA_IRQHandler+0xa3c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d009      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x8b8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a65      	ldr	r2, [pc, #404]	; (800317c <HAL_DMA_IRQHandler+0xa40>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d004      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x8b8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a64      	ldr	r2, [pc, #400]	; (8003180 <HAL_DMA_IRQHandler+0xa44>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d108      	bne.n	8003006 <HAL_DMA_IRQHandler+0x8ca>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e007      	b.n	8003016 <HAL_DMA_IRQHandler+0x8da>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3301      	adds	r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301e:	429a      	cmp	r2, r3
 8003020:	d307      	bcc.n	8003032 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f2      	bne.n	8003016 <HAL_DMA_IRQHandler+0x8da>
 8003030:	e000      	b.n	8003034 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003032:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d004      	beq.n	800304c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2203      	movs	r2, #3
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800304a:	e003      	b.n	8003054 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 8272 	beq.w	800354a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	4798      	blx	r3
 800306e:	e26c      	b.n	800354a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a43      	ldr	r2, [pc, #268]	; (8003184 <HAL_DMA_IRQHandler+0xa48>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d022      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x984>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a42      	ldr	r2, [pc, #264]	; (8003188 <HAL_DMA_IRQHandler+0xa4c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d01d      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x984>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a40      	ldr	r2, [pc, #256]	; (800318c <HAL_DMA_IRQHandler+0xa50>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d018      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x984>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a3f      	ldr	r2, [pc, #252]	; (8003190 <HAL_DMA_IRQHandler+0xa54>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d013      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x984>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a3d      	ldr	r2, [pc, #244]	; (8003194 <HAL_DMA_IRQHandler+0xa58>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00e      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x984>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a3c      	ldr	r2, [pc, #240]	; (8003198 <HAL_DMA_IRQHandler+0xa5c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d009      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x984>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a3a      	ldr	r2, [pc, #232]	; (800319c <HAL_DMA_IRQHandler+0xa60>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d004      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x984>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a39      	ldr	r2, [pc, #228]	; (80031a0 <HAL_DMA_IRQHandler+0xa64>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d101      	bne.n	80030c4 <HAL_DMA_IRQHandler+0x988>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <HAL_DMA_IRQHandler+0x98a>
 80030c4:	2300      	movs	r3, #0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 823f 	beq.w	800354a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	2204      	movs	r2, #4
 80030de:	409a      	lsls	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80cd 	beq.w	8003284 <HAL_DMA_IRQHandler+0xb48>
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80c7 	beq.w	8003284 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	f003 031f 	and.w	r3, r3, #31
 80030fe:	2204      	movs	r2, #4
 8003100:	409a      	lsls	r2, r3
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d049      	beq.n	80031a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8210 	beq.w	8003544 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800312c:	e20a      	b.n	8003544 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8206 	beq.w	8003544 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003140:	e200      	b.n	8003544 <HAL_DMA_IRQHandler+0xe08>
 8003142:	bf00      	nop
 8003144:	40020010 	.word	0x40020010
 8003148:	40020028 	.word	0x40020028
 800314c:	40020040 	.word	0x40020040
 8003150:	40020058 	.word	0x40020058
 8003154:	40020070 	.word	0x40020070
 8003158:	40020088 	.word	0x40020088
 800315c:	400200a0 	.word	0x400200a0
 8003160:	400200b8 	.word	0x400200b8
 8003164:	40020410 	.word	0x40020410
 8003168:	40020428 	.word	0x40020428
 800316c:	40020440 	.word	0x40020440
 8003170:	40020458 	.word	0x40020458
 8003174:	40020470 	.word	0x40020470
 8003178:	40020488 	.word	0x40020488
 800317c:	400204a0 	.word	0x400204a0
 8003180:	400204b8 	.word	0x400204b8
 8003184:	58025408 	.word	0x58025408
 8003188:	5802541c 	.word	0x5802541c
 800318c:	58025430 	.word	0x58025430
 8003190:	58025444 	.word	0x58025444
 8003194:	58025458 	.word	0x58025458
 8003198:	5802546c 	.word	0x5802546c
 800319c:	58025480 	.word	0x58025480
 80031a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d160      	bne.n	8003270 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a7f      	ldr	r2, [pc, #508]	; (80033b0 <HAL_DMA_IRQHandler+0xc74>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d04a      	beq.n	800324e <HAL_DMA_IRQHandler+0xb12>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a7d      	ldr	r2, [pc, #500]	; (80033b4 <HAL_DMA_IRQHandler+0xc78>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d045      	beq.n	800324e <HAL_DMA_IRQHandler+0xb12>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7c      	ldr	r2, [pc, #496]	; (80033b8 <HAL_DMA_IRQHandler+0xc7c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d040      	beq.n	800324e <HAL_DMA_IRQHandler+0xb12>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a7a      	ldr	r2, [pc, #488]	; (80033bc <HAL_DMA_IRQHandler+0xc80>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d03b      	beq.n	800324e <HAL_DMA_IRQHandler+0xb12>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a79      	ldr	r2, [pc, #484]	; (80033c0 <HAL_DMA_IRQHandler+0xc84>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d036      	beq.n	800324e <HAL_DMA_IRQHandler+0xb12>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a77      	ldr	r2, [pc, #476]	; (80033c4 <HAL_DMA_IRQHandler+0xc88>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d031      	beq.n	800324e <HAL_DMA_IRQHandler+0xb12>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a76      	ldr	r2, [pc, #472]	; (80033c8 <HAL_DMA_IRQHandler+0xc8c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d02c      	beq.n	800324e <HAL_DMA_IRQHandler+0xb12>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a74      	ldr	r2, [pc, #464]	; (80033cc <HAL_DMA_IRQHandler+0xc90>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d027      	beq.n	800324e <HAL_DMA_IRQHandler+0xb12>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a73      	ldr	r2, [pc, #460]	; (80033d0 <HAL_DMA_IRQHandler+0xc94>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <HAL_DMA_IRQHandler+0xb12>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a71      	ldr	r2, [pc, #452]	; (80033d4 <HAL_DMA_IRQHandler+0xc98>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01d      	beq.n	800324e <HAL_DMA_IRQHandler+0xb12>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a70      	ldr	r2, [pc, #448]	; (80033d8 <HAL_DMA_IRQHandler+0xc9c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d018      	beq.n	800324e <HAL_DMA_IRQHandler+0xb12>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a6e      	ldr	r2, [pc, #440]	; (80033dc <HAL_DMA_IRQHandler+0xca0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_DMA_IRQHandler+0xb12>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a6d      	ldr	r2, [pc, #436]	; (80033e0 <HAL_DMA_IRQHandler+0xca4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00e      	beq.n	800324e <HAL_DMA_IRQHandler+0xb12>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a6b      	ldr	r2, [pc, #428]	; (80033e4 <HAL_DMA_IRQHandler+0xca8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d009      	beq.n	800324e <HAL_DMA_IRQHandler+0xb12>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a6a      	ldr	r2, [pc, #424]	; (80033e8 <HAL_DMA_IRQHandler+0xcac>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_DMA_IRQHandler+0xb12>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a68      	ldr	r2, [pc, #416]	; (80033ec <HAL_DMA_IRQHandler+0xcb0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d108      	bne.n	8003260 <HAL_DMA_IRQHandler+0xb24>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0208 	bic.w	r2, r2, #8
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	e007      	b.n	8003270 <HAL_DMA_IRQHandler+0xb34>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0204 	bic.w	r2, r2, #4
 800326e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 8165 	beq.w	8003544 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003282:	e15f      	b.n	8003544 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	2202      	movs	r2, #2
 800328e:	409a      	lsls	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	4013      	ands	r3, r2
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80c5 	beq.w	8003424 <HAL_DMA_IRQHandler+0xce8>
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80bf 	beq.w	8003424 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	2202      	movs	r2, #2
 80032b0:	409a      	lsls	r2, r3
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d018      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 813a 	beq.w	8003548 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032dc:	e134      	b.n	8003548 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8130 	beq.w	8003548 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032f0:	e12a      	b.n	8003548 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f040 8089 	bne.w	8003410 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2b      	ldr	r2, [pc, #172]	; (80033b0 <HAL_DMA_IRQHandler+0xc74>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d04a      	beq.n	800339e <HAL_DMA_IRQHandler+0xc62>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <HAL_DMA_IRQHandler+0xc78>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d045      	beq.n	800339e <HAL_DMA_IRQHandler+0xc62>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a28      	ldr	r2, [pc, #160]	; (80033b8 <HAL_DMA_IRQHandler+0xc7c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d040      	beq.n	800339e <HAL_DMA_IRQHandler+0xc62>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a26      	ldr	r2, [pc, #152]	; (80033bc <HAL_DMA_IRQHandler+0xc80>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d03b      	beq.n	800339e <HAL_DMA_IRQHandler+0xc62>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a25      	ldr	r2, [pc, #148]	; (80033c0 <HAL_DMA_IRQHandler+0xc84>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d036      	beq.n	800339e <HAL_DMA_IRQHandler+0xc62>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a23      	ldr	r2, [pc, #140]	; (80033c4 <HAL_DMA_IRQHandler+0xc88>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d031      	beq.n	800339e <HAL_DMA_IRQHandler+0xc62>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a22      	ldr	r2, [pc, #136]	; (80033c8 <HAL_DMA_IRQHandler+0xc8c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d02c      	beq.n	800339e <HAL_DMA_IRQHandler+0xc62>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a20      	ldr	r2, [pc, #128]	; (80033cc <HAL_DMA_IRQHandler+0xc90>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d027      	beq.n	800339e <HAL_DMA_IRQHandler+0xc62>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a1f      	ldr	r2, [pc, #124]	; (80033d0 <HAL_DMA_IRQHandler+0xc94>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d022      	beq.n	800339e <HAL_DMA_IRQHandler+0xc62>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <HAL_DMA_IRQHandler+0xc98>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d01d      	beq.n	800339e <HAL_DMA_IRQHandler+0xc62>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a1c      	ldr	r2, [pc, #112]	; (80033d8 <HAL_DMA_IRQHandler+0xc9c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d018      	beq.n	800339e <HAL_DMA_IRQHandler+0xc62>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a1a      	ldr	r2, [pc, #104]	; (80033dc <HAL_DMA_IRQHandler+0xca0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <HAL_DMA_IRQHandler+0xc62>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a19      	ldr	r2, [pc, #100]	; (80033e0 <HAL_DMA_IRQHandler+0xca4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00e      	beq.n	800339e <HAL_DMA_IRQHandler+0xc62>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a17      	ldr	r2, [pc, #92]	; (80033e4 <HAL_DMA_IRQHandler+0xca8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d009      	beq.n	800339e <HAL_DMA_IRQHandler+0xc62>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a16      	ldr	r2, [pc, #88]	; (80033e8 <HAL_DMA_IRQHandler+0xcac>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <HAL_DMA_IRQHandler+0xc62>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a14      	ldr	r2, [pc, #80]	; (80033ec <HAL_DMA_IRQHandler+0xcb0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d128      	bne.n	80033f0 <HAL_DMA_IRQHandler+0xcb4>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0214 	bic.w	r2, r2, #20
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	e027      	b.n	8003400 <HAL_DMA_IRQHandler+0xcc4>
 80033b0:	40020010 	.word	0x40020010
 80033b4:	40020028 	.word	0x40020028
 80033b8:	40020040 	.word	0x40020040
 80033bc:	40020058 	.word	0x40020058
 80033c0:	40020070 	.word	0x40020070
 80033c4:	40020088 	.word	0x40020088
 80033c8:	400200a0 	.word	0x400200a0
 80033cc:	400200b8 	.word	0x400200b8
 80033d0:	40020410 	.word	0x40020410
 80033d4:	40020428 	.word	0x40020428
 80033d8:	40020440 	.word	0x40020440
 80033dc:	40020458 	.word	0x40020458
 80033e0:	40020470 	.word	0x40020470
 80033e4:	40020488 	.word	0x40020488
 80033e8:	400204a0 	.word	0x400204a0
 80033ec:	400204b8 	.word	0x400204b8
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 020a 	bic.w	r2, r2, #10
 80033fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8097 	beq.w	8003548 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003422:	e091      	b.n	8003548 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	2208      	movs	r2, #8
 800342e:	409a      	lsls	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8088 	beq.w	800354a <HAL_DMA_IRQHandler+0xe0e>
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8082 	beq.w	800354a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a41      	ldr	r2, [pc, #260]	; (8003550 <HAL_DMA_IRQHandler+0xe14>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d04a      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdaa>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a3f      	ldr	r2, [pc, #252]	; (8003554 <HAL_DMA_IRQHandler+0xe18>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d045      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdaa>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a3e      	ldr	r2, [pc, #248]	; (8003558 <HAL_DMA_IRQHandler+0xe1c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d040      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdaa>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a3c      	ldr	r2, [pc, #240]	; (800355c <HAL_DMA_IRQHandler+0xe20>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d03b      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdaa>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a3b      	ldr	r2, [pc, #236]	; (8003560 <HAL_DMA_IRQHandler+0xe24>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d036      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdaa>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a39      	ldr	r2, [pc, #228]	; (8003564 <HAL_DMA_IRQHandler+0xe28>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d031      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdaa>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a38      	ldr	r2, [pc, #224]	; (8003568 <HAL_DMA_IRQHandler+0xe2c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d02c      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdaa>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a36      	ldr	r2, [pc, #216]	; (800356c <HAL_DMA_IRQHandler+0xe30>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d027      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdaa>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a35      	ldr	r2, [pc, #212]	; (8003570 <HAL_DMA_IRQHandler+0xe34>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d022      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdaa>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a33      	ldr	r2, [pc, #204]	; (8003574 <HAL_DMA_IRQHandler+0xe38>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01d      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdaa>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a32      	ldr	r2, [pc, #200]	; (8003578 <HAL_DMA_IRQHandler+0xe3c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d018      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdaa>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a30      	ldr	r2, [pc, #192]	; (800357c <HAL_DMA_IRQHandler+0xe40>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d013      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdaa>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a2f      	ldr	r2, [pc, #188]	; (8003580 <HAL_DMA_IRQHandler+0xe44>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d00e      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdaa>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a2d      	ldr	r2, [pc, #180]	; (8003584 <HAL_DMA_IRQHandler+0xe48>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d009      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdaa>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a2c      	ldr	r2, [pc, #176]	; (8003588 <HAL_DMA_IRQHandler+0xe4c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d004      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdaa>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a2a      	ldr	r2, [pc, #168]	; (800358c <HAL_DMA_IRQHandler+0xe50>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d108      	bne.n	80034f8 <HAL_DMA_IRQHandler+0xdbc>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 021c 	bic.w	r2, r2, #28
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e007      	b.n	8003508 <HAL_DMA_IRQHandler+0xdcc>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 020e 	bic.w	r2, r2, #14
 8003506:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	2201      	movs	r2, #1
 8003512:	409a      	lsls	r2, r3
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
 800353e:	e004      	b.n	800354a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003540:	bf00      	nop
 8003542:	e002      	b.n	800354a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003544:	bf00      	nop
 8003546:	e000      	b.n	800354a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003548:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800354a:	3728      	adds	r7, #40	; 0x28
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40020010 	.word	0x40020010
 8003554:	40020028 	.word	0x40020028
 8003558:	40020040 	.word	0x40020040
 800355c:	40020058 	.word	0x40020058
 8003560:	40020070 	.word	0x40020070
 8003564:	40020088 	.word	0x40020088
 8003568:	400200a0 	.word	0x400200a0
 800356c:	400200b8 	.word	0x400200b8
 8003570:	40020410 	.word	0x40020410
 8003574:	40020428 	.word	0x40020428
 8003578:	40020440 	.word	0x40020440
 800357c:	40020458 	.word	0x40020458
 8003580:	40020470 	.word	0x40020470
 8003584:	40020488 	.word	0x40020488
 8003588:	400204a0 	.word	0x400204a0
 800358c:	400204b8 	.word	0x400204b8

08003590 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a7f      	ldr	r2, [pc, #508]	; (80037ac <DMA_SetConfig+0x21c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d072      	beq.n	800369a <DMA_SetConfig+0x10a>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a7d      	ldr	r2, [pc, #500]	; (80037b0 <DMA_SetConfig+0x220>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d06d      	beq.n	800369a <DMA_SetConfig+0x10a>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a7c      	ldr	r2, [pc, #496]	; (80037b4 <DMA_SetConfig+0x224>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d068      	beq.n	800369a <DMA_SetConfig+0x10a>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a7a      	ldr	r2, [pc, #488]	; (80037b8 <DMA_SetConfig+0x228>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d063      	beq.n	800369a <DMA_SetConfig+0x10a>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a79      	ldr	r2, [pc, #484]	; (80037bc <DMA_SetConfig+0x22c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d05e      	beq.n	800369a <DMA_SetConfig+0x10a>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a77      	ldr	r2, [pc, #476]	; (80037c0 <DMA_SetConfig+0x230>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d059      	beq.n	800369a <DMA_SetConfig+0x10a>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a76      	ldr	r2, [pc, #472]	; (80037c4 <DMA_SetConfig+0x234>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d054      	beq.n	800369a <DMA_SetConfig+0x10a>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a74      	ldr	r2, [pc, #464]	; (80037c8 <DMA_SetConfig+0x238>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d04f      	beq.n	800369a <DMA_SetConfig+0x10a>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a73      	ldr	r2, [pc, #460]	; (80037cc <DMA_SetConfig+0x23c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d04a      	beq.n	800369a <DMA_SetConfig+0x10a>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a71      	ldr	r2, [pc, #452]	; (80037d0 <DMA_SetConfig+0x240>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d045      	beq.n	800369a <DMA_SetConfig+0x10a>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a70      	ldr	r2, [pc, #448]	; (80037d4 <DMA_SetConfig+0x244>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d040      	beq.n	800369a <DMA_SetConfig+0x10a>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a6e      	ldr	r2, [pc, #440]	; (80037d8 <DMA_SetConfig+0x248>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d03b      	beq.n	800369a <DMA_SetConfig+0x10a>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a6d      	ldr	r2, [pc, #436]	; (80037dc <DMA_SetConfig+0x24c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d036      	beq.n	800369a <DMA_SetConfig+0x10a>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a6b      	ldr	r2, [pc, #428]	; (80037e0 <DMA_SetConfig+0x250>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d031      	beq.n	800369a <DMA_SetConfig+0x10a>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a6a      	ldr	r2, [pc, #424]	; (80037e4 <DMA_SetConfig+0x254>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d02c      	beq.n	800369a <DMA_SetConfig+0x10a>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a68      	ldr	r2, [pc, #416]	; (80037e8 <DMA_SetConfig+0x258>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d027      	beq.n	800369a <DMA_SetConfig+0x10a>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a67      	ldr	r2, [pc, #412]	; (80037ec <DMA_SetConfig+0x25c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d022      	beq.n	800369a <DMA_SetConfig+0x10a>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a65      	ldr	r2, [pc, #404]	; (80037f0 <DMA_SetConfig+0x260>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01d      	beq.n	800369a <DMA_SetConfig+0x10a>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a64      	ldr	r2, [pc, #400]	; (80037f4 <DMA_SetConfig+0x264>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d018      	beq.n	800369a <DMA_SetConfig+0x10a>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a62      	ldr	r2, [pc, #392]	; (80037f8 <DMA_SetConfig+0x268>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <DMA_SetConfig+0x10a>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a61      	ldr	r2, [pc, #388]	; (80037fc <DMA_SetConfig+0x26c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00e      	beq.n	800369a <DMA_SetConfig+0x10a>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a5f      	ldr	r2, [pc, #380]	; (8003800 <DMA_SetConfig+0x270>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d009      	beq.n	800369a <DMA_SetConfig+0x10a>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a5e      	ldr	r2, [pc, #376]	; (8003804 <DMA_SetConfig+0x274>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d004      	beq.n	800369a <DMA_SetConfig+0x10a>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a5c      	ldr	r2, [pc, #368]	; (8003808 <DMA_SetConfig+0x278>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <DMA_SetConfig+0x10e>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <DMA_SetConfig+0x110>
 800369e:	2300      	movs	r3, #0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00d      	beq.n	80036c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d004      	beq.n	80036c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a39      	ldr	r2, [pc, #228]	; (80037ac <DMA_SetConfig+0x21c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d04a      	beq.n	8003760 <DMA_SetConfig+0x1d0>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a38      	ldr	r2, [pc, #224]	; (80037b0 <DMA_SetConfig+0x220>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d045      	beq.n	8003760 <DMA_SetConfig+0x1d0>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a36      	ldr	r2, [pc, #216]	; (80037b4 <DMA_SetConfig+0x224>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d040      	beq.n	8003760 <DMA_SetConfig+0x1d0>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a35      	ldr	r2, [pc, #212]	; (80037b8 <DMA_SetConfig+0x228>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d03b      	beq.n	8003760 <DMA_SetConfig+0x1d0>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a33      	ldr	r2, [pc, #204]	; (80037bc <DMA_SetConfig+0x22c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d036      	beq.n	8003760 <DMA_SetConfig+0x1d0>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a32      	ldr	r2, [pc, #200]	; (80037c0 <DMA_SetConfig+0x230>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d031      	beq.n	8003760 <DMA_SetConfig+0x1d0>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a30      	ldr	r2, [pc, #192]	; (80037c4 <DMA_SetConfig+0x234>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d02c      	beq.n	8003760 <DMA_SetConfig+0x1d0>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a2f      	ldr	r2, [pc, #188]	; (80037c8 <DMA_SetConfig+0x238>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d027      	beq.n	8003760 <DMA_SetConfig+0x1d0>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a2d      	ldr	r2, [pc, #180]	; (80037cc <DMA_SetConfig+0x23c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d022      	beq.n	8003760 <DMA_SetConfig+0x1d0>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a2c      	ldr	r2, [pc, #176]	; (80037d0 <DMA_SetConfig+0x240>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d01d      	beq.n	8003760 <DMA_SetConfig+0x1d0>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2a      	ldr	r2, [pc, #168]	; (80037d4 <DMA_SetConfig+0x244>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d018      	beq.n	8003760 <DMA_SetConfig+0x1d0>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a29      	ldr	r2, [pc, #164]	; (80037d8 <DMA_SetConfig+0x248>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d013      	beq.n	8003760 <DMA_SetConfig+0x1d0>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a27      	ldr	r2, [pc, #156]	; (80037dc <DMA_SetConfig+0x24c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00e      	beq.n	8003760 <DMA_SetConfig+0x1d0>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <DMA_SetConfig+0x250>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d009      	beq.n	8003760 <DMA_SetConfig+0x1d0>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a24      	ldr	r2, [pc, #144]	; (80037e4 <DMA_SetConfig+0x254>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d004      	beq.n	8003760 <DMA_SetConfig+0x1d0>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <DMA_SetConfig+0x258>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <DMA_SetConfig+0x1d4>
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <DMA_SetConfig+0x1d6>
 8003764:	2300      	movs	r3, #0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d059      	beq.n	800381e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376e:	f003 031f 	and.w	r3, r3, #31
 8003772:	223f      	movs	r2, #63	; 0x3f
 8003774:	409a      	lsls	r2, r3
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003788:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b40      	cmp	r3, #64	; 0x40
 8003798:	d138      	bne.n	800380c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80037aa:	e086      	b.n	80038ba <DMA_SetConfig+0x32a>
 80037ac:	40020010 	.word	0x40020010
 80037b0:	40020028 	.word	0x40020028
 80037b4:	40020040 	.word	0x40020040
 80037b8:	40020058 	.word	0x40020058
 80037bc:	40020070 	.word	0x40020070
 80037c0:	40020088 	.word	0x40020088
 80037c4:	400200a0 	.word	0x400200a0
 80037c8:	400200b8 	.word	0x400200b8
 80037cc:	40020410 	.word	0x40020410
 80037d0:	40020428 	.word	0x40020428
 80037d4:	40020440 	.word	0x40020440
 80037d8:	40020458 	.word	0x40020458
 80037dc:	40020470 	.word	0x40020470
 80037e0:	40020488 	.word	0x40020488
 80037e4:	400204a0 	.word	0x400204a0
 80037e8:	400204b8 	.word	0x400204b8
 80037ec:	58025408 	.word	0x58025408
 80037f0:	5802541c 	.word	0x5802541c
 80037f4:	58025430 	.word	0x58025430
 80037f8:	58025444 	.word	0x58025444
 80037fc:	58025458 	.word	0x58025458
 8003800:	5802546c 	.word	0x5802546c
 8003804:	58025480 	.word	0x58025480
 8003808:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	60da      	str	r2, [r3, #12]
}
 800381c:	e04d      	b.n	80038ba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a29      	ldr	r2, [pc, #164]	; (80038c8 <DMA_SetConfig+0x338>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d022      	beq.n	800386e <DMA_SetConfig+0x2de>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a27      	ldr	r2, [pc, #156]	; (80038cc <DMA_SetConfig+0x33c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01d      	beq.n	800386e <DMA_SetConfig+0x2de>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a26      	ldr	r2, [pc, #152]	; (80038d0 <DMA_SetConfig+0x340>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d018      	beq.n	800386e <DMA_SetConfig+0x2de>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a24      	ldr	r2, [pc, #144]	; (80038d4 <DMA_SetConfig+0x344>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <DMA_SetConfig+0x2de>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a23      	ldr	r2, [pc, #140]	; (80038d8 <DMA_SetConfig+0x348>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00e      	beq.n	800386e <DMA_SetConfig+0x2de>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a21      	ldr	r2, [pc, #132]	; (80038dc <DMA_SetConfig+0x34c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d009      	beq.n	800386e <DMA_SetConfig+0x2de>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a20      	ldr	r2, [pc, #128]	; (80038e0 <DMA_SetConfig+0x350>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d004      	beq.n	800386e <DMA_SetConfig+0x2de>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1e      	ldr	r2, [pc, #120]	; (80038e4 <DMA_SetConfig+0x354>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <DMA_SetConfig+0x2e2>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <DMA_SetConfig+0x2e4>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d020      	beq.n	80038ba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	2201      	movs	r2, #1
 8003882:	409a      	lsls	r2, r3
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b40      	cmp	r3, #64	; 0x40
 8003896:	d108      	bne.n	80038aa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	60da      	str	r2, [r3, #12]
}
 80038a8:	e007      	b.n	80038ba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	60da      	str	r2, [r3, #12]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	58025408 	.word	0x58025408
 80038cc:	5802541c 	.word	0x5802541c
 80038d0:	58025430 	.word	0x58025430
 80038d4:	58025444 	.word	0x58025444
 80038d8:	58025458 	.word	0x58025458
 80038dc:	5802546c 	.word	0x5802546c
 80038e0:	58025480 	.word	0x58025480
 80038e4:	58025494 	.word	0x58025494

080038e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a42      	ldr	r2, [pc, #264]	; (8003a00 <DMA_CalcBaseAndBitshift+0x118>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d04a      	beq.n	8003990 <DMA_CalcBaseAndBitshift+0xa8>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a41      	ldr	r2, [pc, #260]	; (8003a04 <DMA_CalcBaseAndBitshift+0x11c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d045      	beq.n	8003990 <DMA_CalcBaseAndBitshift+0xa8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a3f      	ldr	r2, [pc, #252]	; (8003a08 <DMA_CalcBaseAndBitshift+0x120>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d040      	beq.n	8003990 <DMA_CalcBaseAndBitshift+0xa8>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a3e      	ldr	r2, [pc, #248]	; (8003a0c <DMA_CalcBaseAndBitshift+0x124>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d03b      	beq.n	8003990 <DMA_CalcBaseAndBitshift+0xa8>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a3c      	ldr	r2, [pc, #240]	; (8003a10 <DMA_CalcBaseAndBitshift+0x128>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d036      	beq.n	8003990 <DMA_CalcBaseAndBitshift+0xa8>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a3b      	ldr	r2, [pc, #236]	; (8003a14 <DMA_CalcBaseAndBitshift+0x12c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d031      	beq.n	8003990 <DMA_CalcBaseAndBitshift+0xa8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a39      	ldr	r2, [pc, #228]	; (8003a18 <DMA_CalcBaseAndBitshift+0x130>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d02c      	beq.n	8003990 <DMA_CalcBaseAndBitshift+0xa8>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a38      	ldr	r2, [pc, #224]	; (8003a1c <DMA_CalcBaseAndBitshift+0x134>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d027      	beq.n	8003990 <DMA_CalcBaseAndBitshift+0xa8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a36      	ldr	r2, [pc, #216]	; (8003a20 <DMA_CalcBaseAndBitshift+0x138>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d022      	beq.n	8003990 <DMA_CalcBaseAndBitshift+0xa8>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a35      	ldr	r2, [pc, #212]	; (8003a24 <DMA_CalcBaseAndBitshift+0x13c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d01d      	beq.n	8003990 <DMA_CalcBaseAndBitshift+0xa8>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a33      	ldr	r2, [pc, #204]	; (8003a28 <DMA_CalcBaseAndBitshift+0x140>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d018      	beq.n	8003990 <DMA_CalcBaseAndBitshift+0xa8>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a32      	ldr	r2, [pc, #200]	; (8003a2c <DMA_CalcBaseAndBitshift+0x144>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d013      	beq.n	8003990 <DMA_CalcBaseAndBitshift+0xa8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a30      	ldr	r2, [pc, #192]	; (8003a30 <DMA_CalcBaseAndBitshift+0x148>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00e      	beq.n	8003990 <DMA_CalcBaseAndBitshift+0xa8>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a2f      	ldr	r2, [pc, #188]	; (8003a34 <DMA_CalcBaseAndBitshift+0x14c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d009      	beq.n	8003990 <DMA_CalcBaseAndBitshift+0xa8>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a2d      	ldr	r2, [pc, #180]	; (8003a38 <DMA_CalcBaseAndBitshift+0x150>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d004      	beq.n	8003990 <DMA_CalcBaseAndBitshift+0xa8>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2c      	ldr	r2, [pc, #176]	; (8003a3c <DMA_CalcBaseAndBitshift+0x154>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d101      	bne.n	8003994 <DMA_CalcBaseAndBitshift+0xac>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <DMA_CalcBaseAndBitshift+0xae>
 8003994:	2300      	movs	r3, #0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d024      	beq.n	80039e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	3b10      	subs	r3, #16
 80039a2:	4a27      	ldr	r2, [pc, #156]	; (8003a40 <DMA_CalcBaseAndBitshift+0x158>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	4a24      	ldr	r2, [pc, #144]	; (8003a44 <DMA_CalcBaseAndBitshift+0x15c>)
 80039b4:	5cd3      	ldrb	r3, [r2, r3]
 80039b6:	461a      	mov	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d908      	bls.n	80039d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <DMA_CalcBaseAndBitshift+0x160>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	1d1a      	adds	r2, r3, #4
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	659a      	str	r2, [r3, #88]	; 0x58
 80039d2:	e00d      	b.n	80039f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <DMA_CalcBaseAndBitshift+0x160>)
 80039dc:	4013      	ands	r3, r2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6593      	str	r3, [r2, #88]	; 0x58
 80039e2:	e005      	b.n	80039f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	40020010 	.word	0x40020010
 8003a04:	40020028 	.word	0x40020028
 8003a08:	40020040 	.word	0x40020040
 8003a0c:	40020058 	.word	0x40020058
 8003a10:	40020070 	.word	0x40020070
 8003a14:	40020088 	.word	0x40020088
 8003a18:	400200a0 	.word	0x400200a0
 8003a1c:	400200b8 	.word	0x400200b8
 8003a20:	40020410 	.word	0x40020410
 8003a24:	40020428 	.word	0x40020428
 8003a28:	40020440 	.word	0x40020440
 8003a2c:	40020458 	.word	0x40020458
 8003a30:	40020470 	.word	0x40020470
 8003a34:	40020488 	.word	0x40020488
 8003a38:	400204a0 	.word	0x400204a0
 8003a3c:	400204b8 	.word	0x400204b8
 8003a40:	aaaaaaab 	.word	0xaaaaaaab
 8003a44:	0800ae98 	.word	0x0800ae98
 8003a48:	fffffc00 	.word	0xfffffc00

08003a4c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d120      	bne.n	8003aa2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d858      	bhi.n	8003b1a <DMA_CheckFifoParam+0xce>
 8003a68:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <DMA_CheckFifoParam+0x24>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003a81 	.word	0x08003a81
 8003a74:	08003a93 	.word	0x08003a93
 8003a78:	08003a81 	.word	0x08003a81
 8003a7c:	08003b1b 	.word	0x08003b1b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d048      	beq.n	8003b1e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a90:	e045      	b.n	8003b1e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a9a:	d142      	bne.n	8003b22 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003aa0:	e03f      	b.n	8003b22 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aaa:	d123      	bne.n	8003af4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d838      	bhi.n	8003b26 <DMA_CheckFifoParam+0xda>
 8003ab4:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <DMA_CheckFifoParam+0x70>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003ad3 	.word	0x08003ad3
 8003ac4:	08003acd 	.word	0x08003acd
 8003ac8:	08003ae5 	.word	0x08003ae5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
        break;
 8003ad0:	e030      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d025      	beq.n	8003b2a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ae2:	e022      	b.n	8003b2a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aec:	d11f      	bne.n	8003b2e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003af2:	e01c      	b.n	8003b2e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d902      	bls.n	8003b02 <DMA_CheckFifoParam+0xb6>
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d003      	beq.n	8003b08 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003b00:	e018      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
        break;
 8003b06:	e015      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00e      	beq.n	8003b32 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	73fb      	strb	r3, [r7, #15]
    break;
 8003b18:	e00b      	b.n	8003b32 <DMA_CheckFifoParam+0xe6>
        break;
 8003b1a:	bf00      	nop
 8003b1c:	e00a      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
        break;
 8003b1e:	bf00      	nop
 8003b20:	e008      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
        break;
 8003b22:	bf00      	nop
 8003b24:	e006      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
        break;
 8003b26:	bf00      	nop
 8003b28:	e004      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
        break;
 8003b2a:	bf00      	nop
 8003b2c:	e002      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
        break;
 8003b2e:	bf00      	nop
 8003b30:	e000      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
    break;
 8003b32:	bf00      	nop
    }
  }

  return status;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop

08003b44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a38      	ldr	r2, [pc, #224]	; (8003c38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d022      	beq.n	8003ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a36      	ldr	r2, [pc, #216]	; (8003c3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01d      	beq.n	8003ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a35      	ldr	r2, [pc, #212]	; (8003c40 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d018      	beq.n	8003ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a33      	ldr	r2, [pc, #204]	; (8003c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d013      	beq.n	8003ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a32      	ldr	r2, [pc, #200]	; (8003c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00e      	beq.n	8003ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a30      	ldr	r2, [pc, #192]	; (8003c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d009      	beq.n	8003ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2f      	ldr	r2, [pc, #188]	; (8003c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d004      	beq.n	8003ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2d      	ldr	r2, [pc, #180]	; (8003c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01a      	beq.n	8003be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	3b08      	subs	r3, #8
 8003bb4:	4a28      	ldr	r2, [pc, #160]	; (8003c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	091b      	lsrs	r3, r3, #4
 8003bbc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4b26      	ldr	r3, [pc, #152]	; (8003c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a24      	ldr	r2, [pc, #144]	; (8003c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003bd0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2201      	movs	r2, #1
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003be0:	e024      	b.n	8003c2c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	3b10      	subs	r3, #16
 8003bea:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003bec:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d806      	bhi.n	8003c0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	4a1b      	ldr	r2, [pc, #108]	; (8003c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d902      	bls.n	8003c0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3308      	adds	r3, #8
 8003c08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4b18      	ldr	r3, [pc, #96]	; (8003c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	461a      	mov	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a16      	ldr	r2, [pc, #88]	; (8003c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003c1c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	2201      	movs	r2, #1
 8003c26:	409a      	lsls	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c2c:	bf00      	nop
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	58025408 	.word	0x58025408
 8003c3c:	5802541c 	.word	0x5802541c
 8003c40:	58025430 	.word	0x58025430
 8003c44:	58025444 	.word	0x58025444
 8003c48:	58025458 	.word	0x58025458
 8003c4c:	5802546c 	.word	0x5802546c
 8003c50:	58025480 	.word	0x58025480
 8003c54:	58025494 	.word	0x58025494
 8003c58:	cccccccd 	.word	0xcccccccd
 8003c5c:	16009600 	.word	0x16009600
 8003c60:	58025880 	.word	0x58025880
 8003c64:	aaaaaaab 	.word	0xaaaaaaab
 8003c68:	400204b8 	.word	0x400204b8
 8003c6c:	4002040f 	.word	0x4002040f
 8003c70:	10008200 	.word	0x10008200
 8003c74:	40020880 	.word	0x40020880

08003c78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d04a      	beq.n	8003d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d847      	bhi.n	8003d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a25      	ldr	r2, [pc, #148]	; (8003d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d022      	beq.n	8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a24      	ldr	r2, [pc, #144]	; (8003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d01d      	beq.n	8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a22      	ldr	r2, [pc, #136]	; (8003d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d018      	beq.n	8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a21      	ldr	r2, [pc, #132]	; (8003d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d013      	beq.n	8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1f      	ldr	r2, [pc, #124]	; (8003d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00e      	beq.n	8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1e      	ldr	r2, [pc, #120]	; (8003d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d009      	beq.n	8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1c      	ldr	r2, [pc, #112]	; (8003d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d004      	beq.n	8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1b      	ldr	r2, [pc, #108]	; (8003d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d101      	bne.n	8003ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4b17      	ldr	r3, [pc, #92]	; (8003d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003d00:	671a      	str	r2, [r3, #112]	; 0x70
 8003d02:	e009      	b.n	8003d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a11      	ldr	r2, [pc, #68]	; (8003d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003d16:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	58025408 	.word	0x58025408
 8003d34:	5802541c 	.word	0x5802541c
 8003d38:	58025430 	.word	0x58025430
 8003d3c:	58025444 	.word	0x58025444
 8003d40:	58025458 	.word	0x58025458
 8003d44:	5802546c 	.word	0x5802546c
 8003d48:	58025480 	.word	0x58025480
 8003d4c:	58025494 	.word	0x58025494
 8003d50:	1600963f 	.word	0x1600963f
 8003d54:	58025940 	.word	0x58025940
 8003d58:	1000823f 	.word	0x1000823f
 8003d5c:	40020940 	.word	0x40020940

08003d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b089      	sub	sp, #36	; 0x24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003d6e:	4b89      	ldr	r3, [pc, #548]	; (8003f94 <HAL_GPIO_Init+0x234>)
 8003d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d72:	e194      	b.n	800409e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	2101      	movs	r1, #1
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	4013      	ands	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8186 	beq.w	8004098 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d005      	beq.n	8003da4 <HAL_GPIO_Init+0x44>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d130      	bne.n	8003e06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	2203      	movs	r2, #3
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dda:	2201      	movs	r2, #1
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	091b      	lsrs	r3, r3, #4
 8003df0:	f003 0201 	and.w	r2, r3, #1
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d017      	beq.n	8003e42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d123      	bne.n	8003e96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	08da      	lsrs	r2, r3, #3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3208      	adds	r2, #8
 8003e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	220f      	movs	r2, #15
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	08da      	lsrs	r2, r3, #3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3208      	adds	r2, #8
 8003e90:	69b9      	ldr	r1, [r7, #24]
 8003e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 0203 	and.w	r2, r3, #3
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80e0 	beq.w	8004098 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ed8:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <HAL_GPIO_Init+0x238>)
 8003eda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ede:	4a2e      	ldr	r2, [pc, #184]	; (8003f98 <HAL_GPIO_Init+0x238>)
 8003ee0:	f043 0302 	orr.w	r3, r3, #2
 8003ee4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ee8:	4b2b      	ldr	r3, [pc, #172]	; (8003f98 <HAL_GPIO_Init+0x238>)
 8003eea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ef6:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <HAL_GPIO_Init+0x23c>)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	089b      	lsrs	r3, r3, #2
 8003efc:	3302      	adds	r3, #2
 8003efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	220f      	movs	r2, #15
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4013      	ands	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a20      	ldr	r2, [pc, #128]	; (8003fa0 <HAL_GPIO_Init+0x240>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d052      	beq.n	8003fc8 <HAL_GPIO_Init+0x268>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a1f      	ldr	r2, [pc, #124]	; (8003fa4 <HAL_GPIO_Init+0x244>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d031      	beq.n	8003f8e <HAL_GPIO_Init+0x22e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a1e      	ldr	r2, [pc, #120]	; (8003fa8 <HAL_GPIO_Init+0x248>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d02b      	beq.n	8003f8a <HAL_GPIO_Init+0x22a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a1d      	ldr	r2, [pc, #116]	; (8003fac <HAL_GPIO_Init+0x24c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d025      	beq.n	8003f86 <HAL_GPIO_Init+0x226>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a1c      	ldr	r2, [pc, #112]	; (8003fb0 <HAL_GPIO_Init+0x250>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01f      	beq.n	8003f82 <HAL_GPIO_Init+0x222>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a1b      	ldr	r2, [pc, #108]	; (8003fb4 <HAL_GPIO_Init+0x254>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d019      	beq.n	8003f7e <HAL_GPIO_Init+0x21e>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a1a      	ldr	r2, [pc, #104]	; (8003fb8 <HAL_GPIO_Init+0x258>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <HAL_GPIO_Init+0x21a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <HAL_GPIO_Init+0x25c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00d      	beq.n	8003f76 <HAL_GPIO_Init+0x216>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <HAL_GPIO_Init+0x260>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d007      	beq.n	8003f72 <HAL_GPIO_Init+0x212>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <HAL_GPIO_Init+0x264>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d101      	bne.n	8003f6e <HAL_GPIO_Init+0x20e>
 8003f6a:	2309      	movs	r3, #9
 8003f6c:	e02d      	b.n	8003fca <HAL_GPIO_Init+0x26a>
 8003f6e:	230a      	movs	r3, #10
 8003f70:	e02b      	b.n	8003fca <HAL_GPIO_Init+0x26a>
 8003f72:	2308      	movs	r3, #8
 8003f74:	e029      	b.n	8003fca <HAL_GPIO_Init+0x26a>
 8003f76:	2307      	movs	r3, #7
 8003f78:	e027      	b.n	8003fca <HAL_GPIO_Init+0x26a>
 8003f7a:	2306      	movs	r3, #6
 8003f7c:	e025      	b.n	8003fca <HAL_GPIO_Init+0x26a>
 8003f7e:	2305      	movs	r3, #5
 8003f80:	e023      	b.n	8003fca <HAL_GPIO_Init+0x26a>
 8003f82:	2304      	movs	r3, #4
 8003f84:	e021      	b.n	8003fca <HAL_GPIO_Init+0x26a>
 8003f86:	2303      	movs	r3, #3
 8003f88:	e01f      	b.n	8003fca <HAL_GPIO_Init+0x26a>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e01d      	b.n	8003fca <HAL_GPIO_Init+0x26a>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e01b      	b.n	8003fca <HAL_GPIO_Init+0x26a>
 8003f92:	bf00      	nop
 8003f94:	58000080 	.word	0x58000080
 8003f98:	58024400 	.word	0x58024400
 8003f9c:	58000400 	.word	0x58000400
 8003fa0:	58020000 	.word	0x58020000
 8003fa4:	58020400 	.word	0x58020400
 8003fa8:	58020800 	.word	0x58020800
 8003fac:	58020c00 	.word	0x58020c00
 8003fb0:	58021000 	.word	0x58021000
 8003fb4:	58021400 	.word	0x58021400
 8003fb8:	58021800 	.word	0x58021800
 8003fbc:	58021c00 	.word	0x58021c00
 8003fc0:	58022000 	.word	0x58022000
 8003fc4:	58022400 	.word	0x58022400
 8003fc8:	2300      	movs	r3, #0
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	f002 0203 	and.w	r2, r2, #3
 8003fd0:	0092      	lsls	r2, r2, #2
 8003fd2:	4093      	lsls	r3, r2
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fda:	4938      	ldr	r1, [pc, #224]	; (80040bc <HAL_GPIO_Init+0x35c>)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	089b      	lsrs	r3, r3, #2
 8003fe0:	3302      	adds	r3, #2
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800400e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	43db      	mvns	r3, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800403c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	43db      	mvns	r3, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4013      	ands	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	43db      	mvns	r3, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4013      	ands	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	3301      	adds	r3, #1
 800409c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	fa22 f303 	lsr.w	r3, r2, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f47f ae63 	bne.w	8003d74 <HAL_GPIO_Init+0x14>
  }
}
 80040ae:	bf00      	nop
 80040b0:	bf00      	nop
 80040b2:	3724      	adds	r7, #36	; 0x24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	58000400 	.word	0x58000400

080040c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	807b      	strh	r3, [r7, #2]
 80040cc:	4613      	mov	r3, r2
 80040ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040d0:	787b      	ldrb	r3, [r7, #1]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040d6:	887a      	ldrh	r2, [r7, #2]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80040dc:	e003      	b.n	80040e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80040de:	887b      	ldrh	r3, [r7, #2]
 80040e0:	041a      	lsls	r2, r3, #16
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	619a      	str	r2, [r3, #24]
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e10b      	b.n	800431e <HAL_I2S_Init+0x22a>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fc fbd8 	bl	80008d0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b01      	cmp	r3, #1
 8004134:	d107      	bne.n	8004146 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2200      	movs	r2, #0
 800414c:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b04      	cmp	r3, #4
 8004154:	d008      	beq.n	8004168 <HAL_I2S_Init+0x74>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b06      	cmp	r3, #6
 800415c:	d004      	beq.n	8004168 <HAL_I2S_Init+0x74>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b0a      	cmp	r3, #10
 8004164:	f040 8085 	bne.w	8004272 <HAL_I2S_Init+0x17e>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d058      	beq.n	8004222 <HAL_I2S_Init+0x12e>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8004178:	2302      	movs	r3, #2
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	e001      	b.n	8004182 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 800417e:	2301      	movs	r3, #1
 8004180:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2b30      	cmp	r3, #48	; 0x30
 8004188:	d003      	beq.n	8004192 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800418e:	2bb0      	cmp	r3, #176	; 0xb0
 8004190:	d102      	bne.n	8004198 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8004192:	2301      	movs	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	e001      	b.n	800419c <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800419c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80041a0:	f002 f91e 	bl	80063e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80041a4:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041ae:	d113      	bne.n	80041d8 <HAL_I2S_Init+0xe4>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80041b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	461a      	mov	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d2:	3305      	adds	r3, #5
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	e014      	b.n	8004202 <HAL_I2S_Init+0x10e>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80041d8:	2220      	movs	r2, #32
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	461a      	mov	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fe:	3305      	adds	r3, #5
 8004200:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4a48      	ldr	r2, [pc, #288]	; (8004328 <HAL_I2S_Init+0x234>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	08db      	lsrs	r3, r3, #3
 800420c:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	085b      	lsrs	r3, r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	e003      	b.n	800422a <HAL_I2S_Init+0x136>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8004222:	2302      	movs	r3, #2
 8004224:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d102      	bne.n	8004236 <HAL_I2S_Init+0x142>
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d002      	beq.n	800423c <HAL_I2S_Init+0x148>
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	2bff      	cmp	r3, #255	; 0xff
 800423a:	d907      	bls.n	800424c <HAL_I2S_Init+0x158>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004240:	f043 0210 	orr.w	r2, r3, #16
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e068      	b.n	800431e <HAL_I2S_Init+0x22a>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_I2S_Init+0x162>
    {
      i2sodd = 1UL;
 8004252:	2301      	movs	r3, #1
 8004254:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800425c:	4b33      	ldr	r3, [pc, #204]	; (800432c <HAL_I2S_Init+0x238>)
 800425e:	4013      	ands	r3, r2
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	0411      	lsls	r1, r2, #16
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	0612      	lsls	r2, r2, #24
 8004268:	4311      	orrs	r1, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	430b      	orrs	r3, r1
 8004270:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004278:	4b2d      	ldr	r3, [pc, #180]	; (8004330 <HAL_I2S_Init+0x23c>)
 800427a:	4013      	ands	r3, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6851      	ldr	r1, [r2, #4]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6892      	ldr	r2, [r2, #8]
 8004284:	4311      	orrs	r1, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68d2      	ldr	r2, [r2, #12]
 800428a:	4311      	orrs	r1, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6992      	ldr	r2, [r2, #24]
 8004290:	4311      	orrs	r1, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6a12      	ldr	r2, [r2, #32]
 8004296:	4311      	orrs	r1, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800429c:	4311      	orrs	r1, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6912      	ldr	r2, [r2, #16]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f640 72f8 	movw	r2, #4088	; 0xff8
 80042b8:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042c8:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69da      	ldr	r2, [r3, #28]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d007      	beq.n	80042f8 <HAL_I2S_Init+0x204>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b06      	cmp	r3, #6
 80042ee:	d003      	beq.n	80042f8 <HAL_I2S_Init+0x204>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b0a      	cmp	r3, #10
 80042f6:	d10a      	bne.n	800430e <HAL_I2S_Init+0x21a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	cccccccd 	.word	0xcccccccd
 800432c:	fe00ffff 	.word	0xfe00ffff
 8004330:	fdff9040 	.word	0xfdff9040

08004334 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	4613      	mov	r3, r2
 8004340:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_I2S_Receive_DMA+0x1e>
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e086      	b.n	8004464 <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d001      	beq.n	8004366 <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 8004362:	2302      	movs	r3, #2
 8004364:	e07e      	b.n	8004464 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_I2S_Receive_DMA+0x42>
 8004372:	2302      	movs	r3, #2
 8004374:	e076      	b.n	8004464 <HAL_I2S_Receive_DMA+0x130>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2204      	movs	r2, #4
 8004382:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pRxBuffPtr  = pData;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = Size;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	88fa      	ldrh	r2, [r7, #6]
 8004396:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	88fa      	ldrh	r2, [r7, #6]
 800439c:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	865a      	strh	r2, [r3, #50]	; 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b4:	4a2d      	ldr	r2, [pc, #180]	; (800446c <HAL_I2S_Receive_DMA+0x138>)
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043bc:	4a2c      	ldr	r2, [pc, #176]	; (8004470 <HAL_I2S_Receive_DMA+0x13c>)
 80043be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c4:	4a2b      	ldr	r2, [pc, #172]	; (8004474 <HAL_I2S_Receive_DMA+0x140>)
 80043c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3330      	adds	r3, #48	; 0x30
 80043d2:	4619      	mov	r1, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d8:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80043de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80043e0:	f7fd ff42 	bl	8002268 <HAL_DMA_Start_IT>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d011      	beq.n	800440e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ee:	f043 0208 	orr.w	r2, r3, #8
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e02a      	b.n	8004464 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d107      	bne.n	800442c <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800442a:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d107      	bne.n	800444a <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0201 	orr.w	r2, r2, #1
 8004448:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004458:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8004462:	7dfb      	ldrb	r3, [r7, #23]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	080044e3 	.word	0x080044e3
 8004470:	080044a1 	.word	0x080044a1
 8004474:	080044ff 	.word	0x080044ff

08004478 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10e      	bne.n	80044d4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044c4:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	875a      	strh	r2, [r3, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7fc fb3d 	bl	8000b54 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80044da:	bf00      	nop
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f7ff ffc1 	bl	8004478 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80044f6:	bf00      	nop
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800451a:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004534:	f043 0208 	orr.w	r2, r3, #8
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff ffa5 	bl	800448c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004554:	4b19      	ldr	r3, [pc, #100]	; (80045bc <HAL_PWREx_ConfigSupply+0x70>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b04      	cmp	r3, #4
 800455e:	d00a      	beq.n	8004576 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004560:	4b16      	ldr	r3, [pc, #88]	; (80045bc <HAL_PWREx_ConfigSupply+0x70>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	429a      	cmp	r2, r3
 800456c:	d001      	beq.n	8004572 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e01f      	b.n	80045b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	e01d      	b.n	80045b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004576:	4b11      	ldr	r3, [pc, #68]	; (80045bc <HAL_PWREx_ConfigSupply+0x70>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f023 0207 	bic.w	r2, r3, #7
 800457e:	490f      	ldr	r1, [pc, #60]	; (80045bc <HAL_PWREx_ConfigSupply+0x70>)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4313      	orrs	r3, r2
 8004584:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004586:	f7fd f9eb 	bl	8001960 <HAL_GetTick>
 800458a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800458c:	e009      	b.n	80045a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800458e:	f7fd f9e7 	bl	8001960 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800459c:	d901      	bls.n	80045a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e007      	b.n	80045b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <HAL_PWREx_ConfigSupply+0x70>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ae:	d1ee      	bne.n	800458e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	58024800 	.word	0x58024800

080045c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08c      	sub	sp, #48	; 0x30
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d102      	bne.n	80045d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f000 bc1d 	b.w	8004e0e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8087 	beq.w	80046f0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045e2:	4b99      	ldr	r3, [pc, #612]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045ec:	4b96      	ldr	r3, [pc, #600]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	2b10      	cmp	r3, #16
 80045f6:	d007      	beq.n	8004608 <HAL_RCC_OscConfig+0x48>
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	2b18      	cmp	r3, #24
 80045fc:	d110      	bne.n	8004620 <HAL_RCC_OscConfig+0x60>
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d10b      	bne.n	8004620 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004608:	4b8f      	ldr	r3, [pc, #572]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d06c      	beq.n	80046ee <HAL_RCC_OscConfig+0x12e>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d168      	bne.n	80046ee <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e3f6      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004628:	d106      	bne.n	8004638 <HAL_RCC_OscConfig+0x78>
 800462a:	4b87      	ldr	r3, [pc, #540]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a86      	ldr	r2, [pc, #536]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e02e      	b.n	8004696 <HAL_RCC_OscConfig+0xd6>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10c      	bne.n	800465a <HAL_RCC_OscConfig+0x9a>
 8004640:	4b81      	ldr	r3, [pc, #516]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a80      	ldr	r2, [pc, #512]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	4b7e      	ldr	r3, [pc, #504]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a7d      	ldr	r2, [pc, #500]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	e01d      	b.n	8004696 <HAL_RCC_OscConfig+0xd6>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004662:	d10c      	bne.n	800467e <HAL_RCC_OscConfig+0xbe>
 8004664:	4b78      	ldr	r3, [pc, #480]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a77      	ldr	r2, [pc, #476]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 800466a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	4b75      	ldr	r3, [pc, #468]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a74      	ldr	r2, [pc, #464]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	e00b      	b.n	8004696 <HAL_RCC_OscConfig+0xd6>
 800467e:	4b72      	ldr	r3, [pc, #456]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a71      	ldr	r2, [pc, #452]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	4b6f      	ldr	r3, [pc, #444]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a6e      	ldr	r2, [pc, #440]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004694:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d013      	beq.n	80046c6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469e:	f7fd f95f 	bl	8001960 <HAL_GetTick>
 80046a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046a6:	f7fd f95b 	bl	8001960 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b64      	cmp	r3, #100	; 0x64
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e3aa      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046b8:	4b63      	ldr	r3, [pc, #396]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0xe6>
 80046c4:	e014      	b.n	80046f0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c6:	f7fd f94b 	bl	8001960 <HAL_GetTick>
 80046ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046ce:	f7fd f947 	bl	8001960 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b64      	cmp	r3, #100	; 0x64
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e396      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046e0:	4b59      	ldr	r3, [pc, #356]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f0      	bne.n	80046ce <HAL_RCC_OscConfig+0x10e>
 80046ec:	e000      	b.n	80046f0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80cb 	beq.w	8004894 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046fe:	4b52      	ldr	r3, [pc, #328]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004706:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004708:	4b4f      	ldr	r3, [pc, #316]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <HAL_RCC_OscConfig+0x164>
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	2b18      	cmp	r3, #24
 8004718:	d156      	bne.n	80047c8 <HAL_RCC_OscConfig+0x208>
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d151      	bne.n	80047c8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004724:	4b48      	ldr	r3, [pc, #288]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_RCC_OscConfig+0x17c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e368      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800473c:	4b42      	ldr	r3, [pc, #264]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f023 0219 	bic.w	r2, r3, #25
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	493f      	ldr	r1, [pc, #252]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800474e:	f7fd f907 	bl	8001960 <HAL_GetTick>
 8004752:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004756:	f7fd f903 	bl	8001960 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e352      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004768:	4b37      	ldr	r3, [pc, #220]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0f0      	beq.n	8004756 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004774:	f7fd f900 	bl	8001978 <HAL_GetREVID>
 8004778:	4603      	mov	r3, r0
 800477a:	f241 0203 	movw	r2, #4099	; 0x1003
 800477e:	4293      	cmp	r3, r2
 8004780:	d817      	bhi.n	80047b2 <HAL_RCC_OscConfig+0x1f2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b40      	cmp	r3, #64	; 0x40
 8004788:	d108      	bne.n	800479c <HAL_RCC_OscConfig+0x1dc>
 800478a:	4b2f      	ldr	r3, [pc, #188]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004792:	4a2d      	ldr	r2, [pc, #180]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004798:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800479a:	e07b      	b.n	8004894 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479c:	4b2a      	ldr	r3, [pc, #168]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	031b      	lsls	r3, r3, #12
 80047aa:	4927      	ldr	r1, [pc, #156]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047b0:	e070      	b.n	8004894 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b2:	4b25      	ldr	r3, [pc, #148]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	061b      	lsls	r3, r3, #24
 80047c0:	4921      	ldr	r1, [pc, #132]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047c6:	e065      	b.n	8004894 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d048      	beq.n	8004862 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047d0:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f023 0219 	bic.w	r2, r3, #25
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	491a      	ldr	r1, [pc, #104]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fd f8bd 	bl	8001960 <HAL_GetTick>
 80047e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ea:	f7fd f8b9 	bl	8001960 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e308      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047fc:	4b12      	ldr	r3, [pc, #72]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004808:	f7fd f8b6 	bl	8001978 <HAL_GetREVID>
 800480c:	4603      	mov	r3, r0
 800480e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004812:	4293      	cmp	r3, r2
 8004814:	d81a      	bhi.n	800484c <HAL_RCC_OscConfig+0x28c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b40      	cmp	r3, #64	; 0x40
 800481c:	d108      	bne.n	8004830 <HAL_RCC_OscConfig+0x270>
 800481e:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004826:	4a08      	ldr	r2, [pc, #32]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800482c:	6053      	str	r3, [r2, #4]
 800482e:	e031      	b.n	8004894 <HAL_RCC_OscConfig+0x2d4>
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	031b      	lsls	r3, r3, #12
 800483e:	4902      	ldr	r1, [pc, #8]	; (8004848 <HAL_RCC_OscConfig+0x288>)
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
 8004844:	e026      	b.n	8004894 <HAL_RCC_OscConfig+0x2d4>
 8004846:	bf00      	nop
 8004848:	58024400 	.word	0x58024400
 800484c:	4b9a      	ldr	r3, [pc, #616]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	061b      	lsls	r3, r3, #24
 800485a:	4997      	ldr	r1, [pc, #604]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 800485c:	4313      	orrs	r3, r2
 800485e:	604b      	str	r3, [r1, #4]
 8004860:	e018      	b.n	8004894 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004862:	4b95      	ldr	r3, [pc, #596]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a94      	ldr	r2, [pc, #592]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004868:	f023 0301 	bic.w	r3, r3, #1
 800486c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486e:	f7fd f877 	bl	8001960 <HAL_GetTick>
 8004872:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004876:	f7fd f873 	bl	8001960 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e2c2      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004888:	4b8b      	ldr	r3, [pc, #556]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80a9 	beq.w	80049f4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048a2:	4b85      	ldr	r3, [pc, #532]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048ac:	4b82      	ldr	r3, [pc, #520]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d007      	beq.n	80048c8 <HAL_RCC_OscConfig+0x308>
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2b18      	cmp	r3, #24
 80048bc:	d13a      	bne.n	8004934 <HAL_RCC_OscConfig+0x374>
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d135      	bne.n	8004934 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048c8:	4b7b      	ldr	r3, [pc, #492]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <HAL_RCC_OscConfig+0x320>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	2b80      	cmp	r3, #128	; 0x80
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e296      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048e0:	f7fd f84a 	bl	8001978 <HAL_GetREVID>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d817      	bhi.n	800491e <HAL_RCC_OscConfig+0x35e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d108      	bne.n	8004908 <HAL_RCC_OscConfig+0x348>
 80048f6:	4b70      	ldr	r3, [pc, #448]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80048fe:	4a6e      	ldr	r2, [pc, #440]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004900:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004904:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004906:	e075      	b.n	80049f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004908:	4b6b      	ldr	r3, [pc, #428]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	069b      	lsls	r3, r3, #26
 8004916:	4968      	ldr	r1, [pc, #416]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800491c:	e06a      	b.n	80049f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800491e:	4b66      	ldr	r3, [pc, #408]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	061b      	lsls	r3, r3, #24
 800492c:	4962      	ldr	r1, [pc, #392]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 800492e:	4313      	orrs	r3, r2
 8004930:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004932:	e05f      	b.n	80049f4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d042      	beq.n	80049c2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800493c:	4b5e      	ldr	r3, [pc, #376]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a5d      	ldr	r2, [pc, #372]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fd f80a 	bl	8001960 <HAL_GetTick>
 800494c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004950:	f7fd f806 	bl	8001960 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e255      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004962:	4b55      	ldr	r3, [pc, #340]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800496e:	f7fd f803 	bl	8001978 <HAL_GetREVID>
 8004972:	4603      	mov	r3, r0
 8004974:	f241 0203 	movw	r2, #4099	; 0x1003
 8004978:	4293      	cmp	r3, r2
 800497a:	d817      	bhi.n	80049ac <HAL_RCC_OscConfig+0x3ec>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	2b20      	cmp	r3, #32
 8004982:	d108      	bne.n	8004996 <HAL_RCC_OscConfig+0x3d6>
 8004984:	4b4c      	ldr	r3, [pc, #304]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800498c:	4a4a      	ldr	r2, [pc, #296]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 800498e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004992:	6053      	str	r3, [r2, #4]
 8004994:	e02e      	b.n	80049f4 <HAL_RCC_OscConfig+0x434>
 8004996:	4b48      	ldr	r3, [pc, #288]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	069b      	lsls	r3, r3, #26
 80049a4:	4944      	ldr	r1, [pc, #272]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	604b      	str	r3, [r1, #4]
 80049aa:	e023      	b.n	80049f4 <HAL_RCC_OscConfig+0x434>
 80049ac:	4b42      	ldr	r3, [pc, #264]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	061b      	lsls	r3, r3, #24
 80049ba:	493f      	ldr	r1, [pc, #252]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	60cb      	str	r3, [r1, #12]
 80049c0:	e018      	b.n	80049f4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80049c2:	4b3d      	ldr	r3, [pc, #244]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a3c      	ldr	r2, [pc, #240]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 80049c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ce:	f7fc ffc7 	bl	8001960 <HAL_GetTick>
 80049d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049d4:	e008      	b.n	80049e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80049d6:	f7fc ffc3 	bl	8001960 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e212      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049e8:	4b33      	ldr	r3, [pc, #204]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1f0      	bne.n	80049d6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d036      	beq.n	8004a6e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d019      	beq.n	8004a3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a08:	4b2b      	ldr	r3, [pc, #172]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0c:	4a2a      	ldr	r2, [pc, #168]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fc ffa4 	bl	8001960 <HAL_GetTick>
 8004a18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a1c:	f7fc ffa0 	bl	8001960 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e1ef      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a2e:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x45c>
 8004a3a:	e018      	b.n	8004a6e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a3c:	4b1e      	ldr	r3, [pc, #120]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a40:	4a1d      	ldr	r2, [pc, #116]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004a42:	f023 0301 	bic.w	r3, r3, #1
 8004a46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a48:	f7fc ff8a 	bl	8001960 <HAL_GetTick>
 8004a4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a50:	f7fc ff86 	bl	8001960 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e1d5      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d039      	beq.n	8004aee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01c      	beq.n	8004abc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a82:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a0c      	ldr	r2, [pc, #48]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004a88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a8e:	f7fc ff67 	bl	8001960 <HAL_GetTick>
 8004a92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004a96:	f7fc ff63 	bl	8001960 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e1b2      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <HAL_RCC_OscConfig+0x4f8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x4d6>
 8004ab4:	e01b      	b.n	8004aee <HAL_RCC_OscConfig+0x52e>
 8004ab6:	bf00      	nop
 8004ab8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004abc:	4b9b      	ldr	r3, [pc, #620]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a9a      	ldr	r2, [pc, #616]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004ac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ac6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ac8:	f7fc ff4a 	bl	8001960 <HAL_GetTick>
 8004acc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004ad0:	f7fc ff46 	bl	8001960 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e195      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ae2:	4b92      	ldr	r3, [pc, #584]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 8081 	beq.w	8004bfe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004afc:	4b8c      	ldr	r3, [pc, #560]	; (8004d30 <HAL_RCC_OscConfig+0x770>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a8b      	ldr	r2, [pc, #556]	; (8004d30 <HAL_RCC_OscConfig+0x770>)
 8004b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b08:	f7fc ff2a 	bl	8001960 <HAL_GetTick>
 8004b0c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b10:	f7fc ff26 	bl	8001960 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	; 0x64
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e175      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b22:	4b83      	ldr	r3, [pc, #524]	; (8004d30 <HAL_RCC_OscConfig+0x770>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d106      	bne.n	8004b44 <HAL_RCC_OscConfig+0x584>
 8004b36:	4b7d      	ldr	r3, [pc, #500]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3a:	4a7c      	ldr	r2, [pc, #496]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004b3c:	f043 0301 	orr.w	r3, r3, #1
 8004b40:	6713      	str	r3, [r2, #112]	; 0x70
 8004b42:	e02d      	b.n	8004ba0 <HAL_RCC_OscConfig+0x5e0>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10c      	bne.n	8004b66 <HAL_RCC_OscConfig+0x5a6>
 8004b4c:	4b77      	ldr	r3, [pc, #476]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b50:	4a76      	ldr	r2, [pc, #472]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004b52:	f023 0301 	bic.w	r3, r3, #1
 8004b56:	6713      	str	r3, [r2, #112]	; 0x70
 8004b58:	4b74      	ldr	r3, [pc, #464]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5c:	4a73      	ldr	r2, [pc, #460]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004b5e:	f023 0304 	bic.w	r3, r3, #4
 8004b62:	6713      	str	r3, [r2, #112]	; 0x70
 8004b64:	e01c      	b.n	8004ba0 <HAL_RCC_OscConfig+0x5e0>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b05      	cmp	r3, #5
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x5c8>
 8004b6e:	4b6f      	ldr	r3, [pc, #444]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b72:	4a6e      	ldr	r2, [pc, #440]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004b74:	f043 0304 	orr.w	r3, r3, #4
 8004b78:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7a:	4b6c      	ldr	r3, [pc, #432]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7e:	4a6b      	ldr	r2, [pc, #428]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	6713      	str	r3, [r2, #112]	; 0x70
 8004b86:	e00b      	b.n	8004ba0 <HAL_RCC_OscConfig+0x5e0>
 8004b88:	4b68      	ldr	r3, [pc, #416]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8c:	4a67      	ldr	r2, [pc, #412]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	6713      	str	r3, [r2, #112]	; 0x70
 8004b94:	4b65      	ldr	r3, [pc, #404]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b98:	4a64      	ldr	r2, [pc, #400]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004b9a:	f023 0304 	bic.w	r3, r3, #4
 8004b9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba8:	f7fc feda 	bl	8001960 <HAL_GetTick>
 8004bac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bae:	e00a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bb0:	f7fc fed6 	bl	8001960 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e123      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bc6:	4b59      	ldr	r3, [pc, #356]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0ee      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x5f0>
 8004bd2:	e014      	b.n	8004bfe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd4:	f7fc fec4 	bl	8001960 <HAL_GetTick>
 8004bd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bdc:	f7fc fec0 	bl	8001960 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e10d      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bf2:	4b4e      	ldr	r3, [pc, #312]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1ee      	bne.n	8004bdc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 8102 	beq.w	8004e0c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c08:	4b48      	ldr	r3, [pc, #288]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c10:	2b18      	cmp	r3, #24
 8004c12:	f000 80bd 	beq.w	8004d90 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	f040 809e 	bne.w	8004d5c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c20:	4b42      	ldr	r3, [pc, #264]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a41      	ldr	r2, [pc, #260]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fc fe98 	bl	8001960 <HAL_GetTick>
 8004c30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c34:	f7fc fe94 	bl	8001960 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e0e3      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c46:	4b39      	ldr	r3, [pc, #228]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f0      	bne.n	8004c34 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c52:	4b36      	ldr	r3, [pc, #216]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c56:	4b37      	ldr	r3, [pc, #220]	; (8004d34 <HAL_RCC_OscConfig+0x774>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c62:	0112      	lsls	r2, r2, #4
 8004c64:	430a      	orrs	r2, r1
 8004c66:	4931      	ldr	r1, [pc, #196]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	628b      	str	r3, [r1, #40]	; 0x28
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	3b01      	subs	r3, #1
 8004c72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	025b      	lsls	r3, r3, #9
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	3b01      	subs	r3, #1
 8004c88:	041b      	lsls	r3, r3, #16
 8004c8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	3b01      	subs	r3, #1
 8004c96:	061b      	lsls	r3, r3, #24
 8004c98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c9c:	4923      	ldr	r1, [pc, #140]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004ca2:	4b22      	ldr	r3, [pc, #136]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	4a21      	ldr	r2, [pc, #132]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004cae:	4b1f      	ldr	r3, [pc, #124]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb2:	4b21      	ldr	r3, [pc, #132]	; (8004d38 <HAL_RCC_OscConfig+0x778>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004cba:	00d2      	lsls	r2, r2, #3
 8004cbc:	491b      	ldr	r1, [pc, #108]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004cc2:	4b1a      	ldr	r3, [pc, #104]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	f023 020c 	bic.w	r2, r3, #12
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	4917      	ldr	r1, [pc, #92]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004cd4:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	f023 0202 	bic.w	r2, r3, #2
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce0:	4912      	ldr	r1, [pc, #72]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ce6:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cea:	4a10      	ldr	r2, [pc, #64]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf2:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	4a0d      	ldr	r2, [pc, #52]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004cfe:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004d0a:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	4a07      	ldr	r2, [pc, #28]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d16:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a04      	ldr	r2, [pc, #16]	; (8004d2c <HAL_RCC_OscConfig+0x76c>)
 8004d1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d22:	f7fc fe1d 	bl	8001960 <HAL_GetTick>
 8004d26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d28:	e011      	b.n	8004d4e <HAL_RCC_OscConfig+0x78e>
 8004d2a:	bf00      	nop
 8004d2c:	58024400 	.word	0x58024400
 8004d30:	58024800 	.word	0x58024800
 8004d34:	fffffc0c 	.word	0xfffffc0c
 8004d38:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d3c:	f7fc fe10 	bl	8001960 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e05f      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d4e:	4b32      	ldr	r3, [pc, #200]	; (8004e18 <HAL_RCC_OscConfig+0x858>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCC_OscConfig+0x77c>
 8004d5a:	e057      	b.n	8004e0c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5c:	4b2e      	ldr	r3, [pc, #184]	; (8004e18 <HAL_RCC_OscConfig+0x858>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a2d      	ldr	r2, [pc, #180]	; (8004e18 <HAL_RCC_OscConfig+0x858>)
 8004d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fc fdfa 	bl	8001960 <HAL_GetTick>
 8004d6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d70:	f7fc fdf6 	bl	8001960 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e045      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d82:	4b25      	ldr	r3, [pc, #148]	; (8004e18 <HAL_RCC_OscConfig+0x858>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x7b0>
 8004d8e:	e03d      	b.n	8004e0c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d90:	4b21      	ldr	r3, [pc, #132]	; (8004e18 <HAL_RCC_OscConfig+0x858>)
 8004d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d94:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d96:	4b20      	ldr	r3, [pc, #128]	; (8004e18 <HAL_RCC_OscConfig+0x858>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d031      	beq.n	8004e08 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f003 0203 	and.w	r2, r3, #3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d12a      	bne.n	8004e08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	091b      	lsrs	r3, r3, #4
 8004db6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d122      	bne.n	8004e08 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d11a      	bne.n	8004e08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	0a5b      	lsrs	r3, r3, #9
 8004dd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d111      	bne.n	8004e08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	0c1b      	lsrs	r3, r3, #16
 8004de8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d108      	bne.n	8004e08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	0e1b      	lsrs	r3, r3, #24
 8004dfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d001      	beq.n	8004e0c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3730      	adds	r7, #48	; 0x30
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	58024400 	.word	0x58024400

08004e1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e19c      	b.n	800516a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e30:	4b8a      	ldr	r3, [pc, #552]	; (800505c <HAL_RCC_ClockConfig+0x240>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d910      	bls.n	8004e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3e:	4b87      	ldr	r3, [pc, #540]	; (800505c <HAL_RCC_ClockConfig+0x240>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f023 020f 	bic.w	r2, r3, #15
 8004e46:	4985      	ldr	r1, [pc, #532]	; (800505c <HAL_RCC_ClockConfig+0x240>)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4e:	4b83      	ldr	r3, [pc, #524]	; (800505c <HAL_RCC_ClockConfig+0x240>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d001      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e184      	b.n	800516a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d010      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	4b7b      	ldr	r3, [pc, #492]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d908      	bls.n	8004e8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e7c:	4b78      	ldr	r3, [pc, #480]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	4975      	ldr	r1, [pc, #468]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0308 	and.w	r3, r3, #8
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d010      	beq.n	8004ebc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695a      	ldr	r2, [r3, #20]
 8004e9e:	4b70      	ldr	r3, [pc, #448]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d908      	bls.n	8004ebc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004eaa:	4b6d      	ldr	r3, [pc, #436]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	496a      	ldr	r1, [pc, #424]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d010      	beq.n	8004eea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699a      	ldr	r2, [r3, #24]
 8004ecc:	4b64      	ldr	r3, [pc, #400]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d908      	bls.n	8004eea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ed8:	4b61      	ldr	r3, [pc, #388]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	495e      	ldr	r1, [pc, #376]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d010      	beq.n	8004f18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69da      	ldr	r2, [r3, #28]
 8004efa:	4b59      	ldr	r3, [pc, #356]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d908      	bls.n	8004f18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004f06:	4b56      	ldr	r3, [pc, #344]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	4953      	ldr	r1, [pc, #332]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d010      	beq.n	8004f46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	4b4d      	ldr	r3, [pc, #308]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d908      	bls.n	8004f46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f34:	4b4a      	ldr	r3, [pc, #296]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f023 020f 	bic.w	r2, r3, #15
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4947      	ldr	r1, [pc, #284]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d055      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f52:	4b43      	ldr	r3, [pc, #268]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	4940      	ldr	r1, [pc, #256]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d107      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f6c:	4b3c      	ldr	r3, [pc, #240]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d121      	bne.n	8004fbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0f6      	b.n	800516a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d107      	bne.n	8004f94 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f84:	4b36      	ldr	r3, [pc, #216]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d115      	bne.n	8004fbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e0ea      	b.n	800516a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d107      	bne.n	8004fac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f9c:	4b30      	ldr	r3, [pc, #192]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d109      	bne.n	8004fbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e0de      	b.n	800516a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fac:	4b2c      	ldr	r3, [pc, #176]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e0d6      	b.n	800516a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fbc:	4b28      	ldr	r3, [pc, #160]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f023 0207 	bic.w	r2, r3, #7
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	4925      	ldr	r1, [pc, #148]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fce:	f7fc fcc7 	bl	8001960 <HAL_GetTick>
 8004fd2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd4:	e00a      	b.n	8004fec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd6:	f7fc fcc3 	bl	8001960 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e0be      	b.n	800516a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fec:	4b1c      	ldr	r3, [pc, #112]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d1eb      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d010      	beq.n	800502c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	4b14      	ldr	r3, [pc, #80]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	429a      	cmp	r2, r3
 8005018:	d208      	bcs.n	800502c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800501a:	4b11      	ldr	r3, [pc, #68]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f023 020f 	bic.w	r2, r3, #15
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	490e      	ldr	r1, [pc, #56]	; (8005060 <HAL_RCC_ClockConfig+0x244>)
 8005028:	4313      	orrs	r3, r2
 800502a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <HAL_RCC_ClockConfig+0x240>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d214      	bcs.n	8005064 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503a:	4b08      	ldr	r3, [pc, #32]	; (800505c <HAL_RCC_ClockConfig+0x240>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f023 020f 	bic.w	r2, r3, #15
 8005042:	4906      	ldr	r1, [pc, #24]	; (800505c <HAL_RCC_ClockConfig+0x240>)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	4313      	orrs	r3, r2
 8005048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800504a:	4b04      	ldr	r3, [pc, #16]	; (800505c <HAL_RCC_ClockConfig+0x240>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d005      	beq.n	8005064 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e086      	b.n	800516a <HAL_RCC_ClockConfig+0x34e>
 800505c:	52002000 	.word	0x52002000
 8005060:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d010      	beq.n	8005092 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	4b3f      	ldr	r3, [pc, #252]	; (8005174 <HAL_RCC_ClockConfig+0x358>)
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800507c:	429a      	cmp	r2, r3
 800507e:	d208      	bcs.n	8005092 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005080:	4b3c      	ldr	r3, [pc, #240]	; (8005174 <HAL_RCC_ClockConfig+0x358>)
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	4939      	ldr	r1, [pc, #228]	; (8005174 <HAL_RCC_ClockConfig+0x358>)
 800508e:	4313      	orrs	r3, r2
 8005090:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b00      	cmp	r3, #0
 800509c:	d010      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695a      	ldr	r2, [r3, #20]
 80050a2:	4b34      	ldr	r3, [pc, #208]	; (8005174 <HAL_RCC_ClockConfig+0x358>)
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d208      	bcs.n	80050c0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050ae:	4b31      	ldr	r3, [pc, #196]	; (8005174 <HAL_RCC_ClockConfig+0x358>)
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	492e      	ldr	r1, [pc, #184]	; (8005174 <HAL_RCC_ClockConfig+0x358>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d010      	beq.n	80050ee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699a      	ldr	r2, [r3, #24]
 80050d0:	4b28      	ldr	r3, [pc, #160]	; (8005174 <HAL_RCC_ClockConfig+0x358>)
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050d8:	429a      	cmp	r2, r3
 80050da:	d208      	bcs.n	80050ee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050dc:	4b25      	ldr	r3, [pc, #148]	; (8005174 <HAL_RCC_ClockConfig+0x358>)
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	4922      	ldr	r1, [pc, #136]	; (8005174 <HAL_RCC_ClockConfig+0x358>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d010      	beq.n	800511c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69da      	ldr	r2, [r3, #28]
 80050fe:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <HAL_RCC_ClockConfig+0x358>)
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005106:	429a      	cmp	r2, r3
 8005108:	d208      	bcs.n	800511c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800510a:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <HAL_RCC_ClockConfig+0x358>)
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	4917      	ldr	r1, [pc, #92]	; (8005174 <HAL_RCC_ClockConfig+0x358>)
 8005118:	4313      	orrs	r3, r2
 800511a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800511c:	f000 f844 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8005120:	4602      	mov	r2, r0
 8005122:	4b14      	ldr	r3, [pc, #80]	; (8005174 <HAL_RCC_ClockConfig+0x358>)
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	0a1b      	lsrs	r3, r3, #8
 8005128:	f003 030f 	and.w	r3, r3, #15
 800512c:	4912      	ldr	r1, [pc, #72]	; (8005178 <HAL_RCC_ClockConfig+0x35c>)
 800512e:	5ccb      	ldrb	r3, [r1, r3]
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	fa22 f303 	lsr.w	r3, r2, r3
 8005138:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800513a:	4b0e      	ldr	r3, [pc, #56]	; (8005174 <HAL_RCC_ClockConfig+0x358>)
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	4a0d      	ldr	r2, [pc, #52]	; (8005178 <HAL_RCC_ClockConfig+0x35c>)
 8005144:	5cd3      	ldrb	r3, [r2, r3]
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	fa22 f303 	lsr.w	r3, r2, r3
 8005150:	4a0a      	ldr	r2, [pc, #40]	; (800517c <HAL_RCC_ClockConfig+0x360>)
 8005152:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005154:	4a0a      	ldr	r2, [pc, #40]	; (8005180 <HAL_RCC_ClockConfig+0x364>)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800515a:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <HAL_RCC_ClockConfig+0x368>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f7fc fbb4 	bl	80018cc <HAL_InitTick>
 8005164:	4603      	mov	r3, r0
 8005166:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005168:	7bfb      	ldrb	r3, [r7, #15]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	58024400 	.word	0x58024400
 8005178:	0800ae88 	.word	0x0800ae88
 800517c:	24000004 	.word	0x24000004
 8005180:	24000000 	.word	0x24000000
 8005184:	24000008 	.word	0x24000008

08005188 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800518c:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <HAL_RCC_EnableCSS+0x1c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a04      	ldr	r2, [pc, #16]	; (80051a4 <HAL_RCC_EnableCSS+0x1c>)
 8005192:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005196:	6013      	str	r3, [r2, #0]
}
 8005198:	bf00      	nop
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	58024400 	.word	0x58024400

080051a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b089      	sub	sp, #36	; 0x24
 80051ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051ae:	4bb3      	ldr	r3, [pc, #716]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051b6:	2b18      	cmp	r3, #24
 80051b8:	f200 8155 	bhi.w	8005466 <HAL_RCC_GetSysClockFreq+0x2be>
 80051bc:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	08005229 	.word	0x08005229
 80051c8:	08005467 	.word	0x08005467
 80051cc:	08005467 	.word	0x08005467
 80051d0:	08005467 	.word	0x08005467
 80051d4:	08005467 	.word	0x08005467
 80051d8:	08005467 	.word	0x08005467
 80051dc:	08005467 	.word	0x08005467
 80051e0:	08005467 	.word	0x08005467
 80051e4:	0800524f 	.word	0x0800524f
 80051e8:	08005467 	.word	0x08005467
 80051ec:	08005467 	.word	0x08005467
 80051f0:	08005467 	.word	0x08005467
 80051f4:	08005467 	.word	0x08005467
 80051f8:	08005467 	.word	0x08005467
 80051fc:	08005467 	.word	0x08005467
 8005200:	08005467 	.word	0x08005467
 8005204:	08005255 	.word	0x08005255
 8005208:	08005467 	.word	0x08005467
 800520c:	08005467 	.word	0x08005467
 8005210:	08005467 	.word	0x08005467
 8005214:	08005467 	.word	0x08005467
 8005218:	08005467 	.word	0x08005467
 800521c:	08005467 	.word	0x08005467
 8005220:	08005467 	.word	0x08005467
 8005224:	0800525b 	.word	0x0800525b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005228:	4b94      	ldr	r3, [pc, #592]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0320 	and.w	r3, r3, #32
 8005230:	2b00      	cmp	r3, #0
 8005232:	d009      	beq.n	8005248 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005234:	4b91      	ldr	r3, [pc, #580]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	08db      	lsrs	r3, r3, #3
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	4a90      	ldr	r2, [pc, #576]	; (8005480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005240:	fa22 f303 	lsr.w	r3, r2, r3
 8005244:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005246:	e111      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005248:	4b8d      	ldr	r3, [pc, #564]	; (8005480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800524a:	61bb      	str	r3, [r7, #24]
    break;
 800524c:	e10e      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800524e:	4b8d      	ldr	r3, [pc, #564]	; (8005484 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005250:	61bb      	str	r3, [r7, #24]
    break;
 8005252:	e10b      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005254:	4b8c      	ldr	r3, [pc, #560]	; (8005488 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005256:	61bb      	str	r3, [r7, #24]
    break;
 8005258:	e108      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800525a:	4b88      	ldr	r3, [pc, #544]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005264:	4b85      	ldr	r3, [pc, #532]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800526e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005270:	4b82      	ldr	r3, [pc, #520]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800527a:	4b80      	ldr	r3, [pc, #512]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	08db      	lsrs	r3, r3, #3
 8005280:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	fb02 f303 	mul.w	r3, r2, r3
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005292:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 80e1 	beq.w	8005460 <HAL_RCC_GetSysClockFreq+0x2b8>
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	f000 8083 	beq.w	80053ac <HAL_RCC_GetSysClockFreq+0x204>
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	f200 80a1 	bhi.w	80053f0 <HAL_RCC_GetSysClockFreq+0x248>
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_RCC_GetSysClockFreq+0x114>
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d056      	beq.n	8005368 <HAL_RCC_GetSysClockFreq+0x1c0>
 80052ba:	e099      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052bc:	4b6f      	ldr	r3, [pc, #444]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d02d      	beq.n	8005324 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052c8:	4b6c      	ldr	r3, [pc, #432]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	08db      	lsrs	r3, r3, #3
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	4a6b      	ldr	r2, [pc, #428]	; (8005480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
 80052d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	ee07 3a90 	vmov	s15, r3
 80052e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f2:	4b62      	ldr	r3, [pc, #392]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005302:	ed97 6a02 	vldr	s12, [r7, #8]
 8005306:	eddf 5a61 	vldr	s11, [pc, #388]	; 800548c <HAL_RCC_GetSysClockFreq+0x2e4>
 800530a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800530e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800531a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800531e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005322:	e087      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005490 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005336:	4b51      	ldr	r3, [pc, #324]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005346:	ed97 6a02 	vldr	s12, [r7, #8]
 800534a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800548c <HAL_RCC_GetSysClockFreq+0x2e4>
 800534e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800535a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800535e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005366:	e065      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005372:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005494 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537a:	4b40      	ldr	r3, [pc, #256]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538a:	ed97 6a02 	vldr	s12, [r7, #8]
 800538e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800548c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800539a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800539e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053aa:	e043      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005498 <HAL_RCC_GetSysClockFreq+0x2f0>
 80053ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053be:	4b2f      	ldr	r3, [pc, #188]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80053d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800548c <HAL_RCC_GetSysClockFreq+0x2e4>
 80053d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053ee:	e021      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005494 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005402:	4b1e      	ldr	r3, [pc, #120]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005412:	ed97 6a02 	vldr	s12, [r7, #8]
 8005416:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800548c <HAL_RCC_GetSysClockFreq+0x2e4>
 800541a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005432:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005434:	4b11      	ldr	r3, [pc, #68]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	0a5b      	lsrs	r3, r3, #9
 800543a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800543e:	3301      	adds	r3, #1
 8005440:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	ee07 3a90 	vmov	s15, r3
 8005448:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800544c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005458:	ee17 3a90 	vmov	r3, s15
 800545c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800545e:	e005      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	61bb      	str	r3, [r7, #24]
    break;
 8005464:	e002      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005466:	4b07      	ldr	r3, [pc, #28]	; (8005484 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005468:	61bb      	str	r3, [r7, #24]
    break;
 800546a:	bf00      	nop
  }

  return sysclockfreq;
 800546c:	69bb      	ldr	r3, [r7, #24]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3724      	adds	r7, #36	; 0x24
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	58024400 	.word	0x58024400
 8005480:	03d09000 	.word	0x03d09000
 8005484:	003d0900 	.word	0x003d0900
 8005488:	017d7840 	.word	0x017d7840
 800548c:	46000000 	.word	0x46000000
 8005490:	4c742400 	.word	0x4c742400
 8005494:	4a742400 	.word	0x4a742400
 8005498:	4bbebc20 	.word	0x4bbebc20

0800549c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80054a2:	f7ff fe81 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 80054a6:	4602      	mov	r2, r0
 80054a8:	4b10      	ldr	r3, [pc, #64]	; (80054ec <HAL_RCC_GetHCLKFreq+0x50>)
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	0a1b      	lsrs	r3, r3, #8
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	490f      	ldr	r1, [pc, #60]	; (80054f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80054b4:	5ccb      	ldrb	r3, [r1, r3]
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	fa22 f303 	lsr.w	r3, r2, r3
 80054be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054c0:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <HAL_RCC_GetHCLKFreq+0x50>)
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	f003 030f 	and.w	r3, r3, #15
 80054c8:	4a09      	ldr	r2, [pc, #36]	; (80054f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80054ca:	5cd3      	ldrb	r3, [r2, r3]
 80054cc:	f003 031f 	and.w	r3, r3, #31
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	fa22 f303 	lsr.w	r3, r2, r3
 80054d6:	4a07      	ldr	r2, [pc, #28]	; (80054f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80054d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054da:	4a07      	ldr	r2, [pc, #28]	; (80054f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80054e0:	4b04      	ldr	r3, [pc, #16]	; (80054f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80054e2:	681b      	ldr	r3, [r3, #0]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	58024400 	.word	0x58024400
 80054f0:	0800ae88 	.word	0x0800ae88
 80054f4:	24000004 	.word	0x24000004
 80054f8:	24000000 	.word	0x24000000

080054fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005500:	f7ff ffcc 	bl	800549c <HAL_RCC_GetHCLKFreq>
 8005504:	4602      	mov	r2, r0
 8005506:	4b06      	ldr	r3, [pc, #24]	; (8005520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	091b      	lsrs	r3, r3, #4
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	4904      	ldr	r1, [pc, #16]	; (8005524 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005512:	5ccb      	ldrb	r3, [r1, r3]
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800551c:	4618      	mov	r0, r3
 800551e:	bd80      	pop	{r7, pc}
 8005520:	58024400 	.word	0x58024400
 8005524:	0800ae88 	.word	0x0800ae88

08005528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800552c:	f7ff ffb6 	bl	800549c <HAL_RCC_GetHCLKFreq>
 8005530:	4602      	mov	r2, r0
 8005532:	4b06      	ldr	r3, [pc, #24]	; (800554c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	0a1b      	lsrs	r3, r3, #8
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	4904      	ldr	r1, [pc, #16]	; (8005550 <HAL_RCC_GetPCLK2Freq+0x28>)
 800553e:	5ccb      	ldrb	r3, [r1, r3]
 8005540:	f003 031f 	and.w	r3, r3, #31
 8005544:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005548:	4618      	mov	r0, r3
 800554a:	bd80      	pop	{r7, pc}
 800554c:	58024400 	.word	0x58024400
 8005550:	0800ae88 	.word	0x0800ae88

08005554 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800555c:	2300      	movs	r3, #0
 800555e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005560:	2300      	movs	r3, #0
 8005562:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d03f      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005574:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005578:	d02a      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800557a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800557e:	d824      	bhi.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005580:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005584:	d018      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005586:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800558a:	d81e      	bhi.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005594:	d007      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005596:	e018      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005598:	4ba3      	ldr	r3, [pc, #652]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	4aa2      	ldr	r2, [pc, #648]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800559e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80055a4:	e015      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3304      	adds	r3, #4
 80055aa:	2102      	movs	r1, #2
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 fff9 	bl	80075a4 <RCCEx_PLL2_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80055b6:	e00c      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3324      	adds	r3, #36	; 0x24
 80055bc:	2102      	movs	r1, #2
 80055be:	4618      	mov	r0, r3
 80055c0:	f002 f8a2 	bl	8007708 <RCCEx_PLL3_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80055c8:	e003      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	75fb      	strb	r3, [r7, #23]
      break;
 80055ce:	e000      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80055d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055d2:	7dfb      	ldrb	r3, [r7, #23]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d109      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80055d8:	4b93      	ldr	r3, [pc, #588]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e4:	4990      	ldr	r1, [pc, #576]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	650b      	str	r3, [r1, #80]	; 0x50
 80055ea:	e001      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ec:	7dfb      	ldrb	r3, [r7, #23]
 80055ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d03d      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005600:	2b04      	cmp	r3, #4
 8005602:	d826      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005604:	a201      	add	r2, pc, #4	; (adr r2, 800560c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560a:	bf00      	nop
 800560c:	08005621 	.word	0x08005621
 8005610:	0800562f 	.word	0x0800562f
 8005614:	08005641 	.word	0x08005641
 8005618:	08005659 	.word	0x08005659
 800561c:	08005659 	.word	0x08005659
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005620:	4b81      	ldr	r3, [pc, #516]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	4a80      	ldr	r2, [pc, #512]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800562a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800562c:	e015      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3304      	adds	r3, #4
 8005632:	2100      	movs	r1, #0
 8005634:	4618      	mov	r0, r3
 8005636:	f001 ffb5 	bl	80075a4 <RCCEx_PLL2_Config>
 800563a:	4603      	mov	r3, r0
 800563c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800563e:	e00c      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3324      	adds	r3, #36	; 0x24
 8005644:	2100      	movs	r1, #0
 8005646:	4618      	mov	r0, r3
 8005648:	f002 f85e 	bl	8007708 <RCCEx_PLL3_Config>
 800564c:	4603      	mov	r3, r0
 800564e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005650:	e003      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	75fb      	strb	r3, [r7, #23]
      break;
 8005656:	e000      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800565a:	7dfb      	ldrb	r3, [r7, #23]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d109      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005660:	4b71      	ldr	r3, [pc, #452]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005664:	f023 0207 	bic.w	r2, r3, #7
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566c:	496e      	ldr	r1, [pc, #440]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800566e:	4313      	orrs	r3, r2
 8005670:	650b      	str	r3, [r1, #80]	; 0x50
 8005672:	e001      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005674:	7dfb      	ldrb	r3, [r7, #23]
 8005676:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005680:	2b00      	cmp	r3, #0
 8005682:	d042      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568c:	d02b      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800568e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005692:	d825      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005694:	2bc0      	cmp	r3, #192	; 0xc0
 8005696:	d028      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005698:	2bc0      	cmp	r3, #192	; 0xc0
 800569a:	d821      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800569c:	2b80      	cmp	r3, #128	; 0x80
 800569e:	d016      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80056a0:	2b80      	cmp	r3, #128	; 0x80
 80056a2:	d81d      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80056a8:	2b40      	cmp	r3, #64	; 0x40
 80056aa:	d007      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80056ac:	e018      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ae:	4b5e      	ldr	r3, [pc, #376]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b2:	4a5d      	ldr	r2, [pc, #372]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80056ba:	e017      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3304      	adds	r3, #4
 80056c0:	2100      	movs	r1, #0
 80056c2:	4618      	mov	r0, r3
 80056c4:	f001 ff6e 	bl	80075a4 <RCCEx_PLL2_Config>
 80056c8:	4603      	mov	r3, r0
 80056ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80056cc:	e00e      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3324      	adds	r3, #36	; 0x24
 80056d2:	2100      	movs	r1, #0
 80056d4:	4618      	mov	r0, r3
 80056d6:	f002 f817 	bl	8007708 <RCCEx_PLL3_Config>
 80056da:	4603      	mov	r3, r0
 80056dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80056de:	e005      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	75fb      	strb	r3, [r7, #23]
      break;
 80056e4:	e002      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80056e6:	bf00      	nop
 80056e8:	e000      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80056ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d109      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80056f2:	4b4d      	ldr	r3, [pc, #308]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fe:	494a      	ldr	r1, [pc, #296]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005700:	4313      	orrs	r3, r2
 8005702:	650b      	str	r3, [r1, #80]	; 0x50
 8005704:	e001      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005706:	7dfb      	ldrb	r3, [r7, #23]
 8005708:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005712:	2b00      	cmp	r3, #0
 8005714:	d049      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800571c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005720:	d030      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005722:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005726:	d82a      	bhi.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005728:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800572c:	d02c      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800572e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005732:	d824      	bhi.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005738:	d018      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800573a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800573e:	d81e      	bhi.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005744:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005748:	d007      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800574a:	e018      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800574c:	4b36      	ldr	r3, [pc, #216]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	4a35      	ldr	r2, [pc, #212]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005756:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005758:	e017      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3304      	adds	r3, #4
 800575e:	2100      	movs	r1, #0
 8005760:	4618      	mov	r0, r3
 8005762:	f001 ff1f 	bl	80075a4 <RCCEx_PLL2_Config>
 8005766:	4603      	mov	r3, r0
 8005768:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800576a:	e00e      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3324      	adds	r3, #36	; 0x24
 8005770:	2100      	movs	r1, #0
 8005772:	4618      	mov	r0, r3
 8005774:	f001 ffc8 	bl	8007708 <RCCEx_PLL3_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800577c:	e005      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	75fb      	strb	r3, [r7, #23]
      break;
 8005782:	e002      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005784:	bf00      	nop
 8005786:	e000      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800578a:	7dfb      	ldrb	r3, [r7, #23]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005790:	4b25      	ldr	r3, [pc, #148]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005794:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800579e:	4922      	ldr	r1, [pc, #136]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	658b      	str	r3, [r1, #88]	; 0x58
 80057a4:	e001      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a6:	7dfb      	ldrb	r3, [r7, #23]
 80057a8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d04b      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057c0:	d030      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80057c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057c6:	d82a      	bhi.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80057c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057cc:	d02e      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80057ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057d2:	d824      	bhi.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80057d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057d8:	d018      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80057da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057de:	d81e      	bhi.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 80057e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057e8:	d007      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80057ea:	e018      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057ec:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	4a0d      	ldr	r2, [pc, #52]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80057f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057f8:	e019      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3304      	adds	r3, #4
 80057fe:	2100      	movs	r1, #0
 8005800:	4618      	mov	r0, r3
 8005802:	f001 fecf 	bl	80075a4 <RCCEx_PLL2_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800580a:	e010      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3324      	adds	r3, #36	; 0x24
 8005810:	2100      	movs	r1, #0
 8005812:	4618      	mov	r0, r3
 8005814:	f001 ff78 	bl	8007708 <RCCEx_PLL3_Config>
 8005818:	4603      	mov	r3, r0
 800581a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800581c:	e007      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	75fb      	strb	r3, [r7, #23]
      break;
 8005822:	e004      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005824:	bf00      	nop
 8005826:	e002      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005828:	58024400 	.word	0x58024400
      break;
 800582c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800582e:	7dfb      	ldrb	r3, [r7, #23]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005834:	4b99      	ldr	r3, [pc, #612]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005838:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005842:	4996      	ldr	r1, [pc, #600]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005844:	4313      	orrs	r3, r2
 8005846:	658b      	str	r3, [r1, #88]	; 0x58
 8005848:	e001      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584a:	7dfb      	ldrb	r3, [r7, #23]
 800584c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d032      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800585e:	2b30      	cmp	r3, #48	; 0x30
 8005860:	d01c      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005862:	2b30      	cmp	r3, #48	; 0x30
 8005864:	d817      	bhi.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005866:	2b20      	cmp	r3, #32
 8005868:	d00c      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800586a:	2b20      	cmp	r3, #32
 800586c:	d813      	bhi.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d016      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005872:	2b10      	cmp	r3, #16
 8005874:	d10f      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005876:	4b89      	ldr	r3, [pc, #548]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	4a88      	ldr	r2, [pc, #544]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800587c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005880:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005882:	e00e      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3304      	adds	r3, #4
 8005888:	2102      	movs	r1, #2
 800588a:	4618      	mov	r0, r3
 800588c:	f001 fe8a 	bl	80075a4 <RCCEx_PLL2_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005894:	e005      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	75fb      	strb	r3, [r7, #23]
      break;
 800589a:	e002      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800589c:	bf00      	nop
 800589e:	e000      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80058a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d109      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80058a8:	4b7c      	ldr	r3, [pc, #496]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b4:	4979      	ldr	r1, [pc, #484]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80058ba:	e001      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
 80058be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d047      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058d4:	d030      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80058d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058da:	d82a      	bhi.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80058dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058e0:	d02c      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80058e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058e6:	d824      	bhi.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80058e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ec:	d018      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80058ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f2:	d81e      	bhi.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80058f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058fc:	d007      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80058fe:	e018      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005900:	4b66      	ldr	r3, [pc, #408]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	4a65      	ldr	r2, [pc, #404]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800590a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800590c:	e017      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3304      	adds	r3, #4
 8005912:	2100      	movs	r1, #0
 8005914:	4618      	mov	r0, r3
 8005916:	f001 fe45 	bl	80075a4 <RCCEx_PLL2_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800591e:	e00e      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3324      	adds	r3, #36	; 0x24
 8005924:	2100      	movs	r1, #0
 8005926:	4618      	mov	r0, r3
 8005928:	f001 feee 	bl	8007708 <RCCEx_PLL3_Config>
 800592c:	4603      	mov	r3, r0
 800592e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005930:	e005      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	75fb      	strb	r3, [r7, #23]
      break;
 8005936:	e002      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005938:	bf00      	nop
 800593a:	e000      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800593c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800593e:	7dfb      	ldrb	r3, [r7, #23]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005944:	4b55      	ldr	r3, [pc, #340]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005948:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005950:	4952      	ldr	r1, [pc, #328]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005952:	4313      	orrs	r3, r2
 8005954:	650b      	str	r3, [r1, #80]	; 0x50
 8005956:	e001      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d049      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800596c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005970:	d02e      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005972:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005976:	d828      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005978:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800597c:	d02a      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800597e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005982:	d822      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005984:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005988:	d026      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800598a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800598e:	d81c      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005990:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005994:	d010      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005996:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800599a:	d816      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01d      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x488>
 80059a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a4:	d111      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3304      	adds	r3, #4
 80059aa:	2101      	movs	r1, #1
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 fdf9 	bl	80075a4 <RCCEx_PLL2_Config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80059b6:	e012      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3324      	adds	r3, #36	; 0x24
 80059bc:	2101      	movs	r1, #1
 80059be:	4618      	mov	r0, r3
 80059c0:	f001 fea2 	bl	8007708 <RCCEx_PLL3_Config>
 80059c4:	4603      	mov	r3, r0
 80059c6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80059c8:	e009      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	75fb      	strb	r3, [r7, #23]
      break;
 80059ce:	e006      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80059d0:	bf00      	nop
 80059d2:	e004      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80059d4:	bf00      	nop
 80059d6:	e002      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80059d8:	bf00      	nop
 80059da:	e000      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80059dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059de:	7dfb      	ldrb	r3, [r7, #23]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80059e4:	4b2d      	ldr	r3, [pc, #180]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80059e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f0:	492a      	ldr	r1, [pc, #168]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	650b      	str	r3, [r1, #80]	; 0x50
 80059f6:	e001      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f8:	7dfb      	ldrb	r3, [r7, #23]
 80059fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d04d      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a12:	d02e      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a18:	d828      	bhi.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1e:	d02a      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a24:	d822      	bhi.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005a26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a2a:	d026      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005a2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a30:	d81c      	bhi.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a36:	d010      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a3c:	d816      	bhi.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d01d      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a46:	d111      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f001 fda8 	bl	80075a4 <RCCEx_PLL2_Config>
 8005a54:	4603      	mov	r3, r0
 8005a56:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005a58:	e012      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3324      	adds	r3, #36	; 0x24
 8005a5e:	2101      	movs	r1, #1
 8005a60:	4618      	mov	r0, r3
 8005a62:	f001 fe51 	bl	8007708 <RCCEx_PLL3_Config>
 8005a66:	4603      	mov	r3, r0
 8005a68:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005a6a:	e009      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a70:	e006      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005a72:	bf00      	nop
 8005a74:	e004      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005a76:	bf00      	nop
 8005a78:	e002      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005a7a:	bf00      	nop
 8005a7c:	e000      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a80:	7dfb      	ldrb	r3, [r7, #23]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10c      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a86:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a94:	4901      	ldr	r1, [pc, #4]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	658b      	str	r3, [r1, #88]	; 0x58
 8005a9a:	e003      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005a9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
 8005aa2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d02f      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005abe:	d814      	bhi.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d015      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ac8:	d10f      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aca:	4baf      	ldr	r3, [pc, #700]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ace:	4aae      	ldr	r2, [pc, #696]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ad6:	e00c      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3304      	adds	r3, #4
 8005adc:	2101      	movs	r1, #1
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f001 fd60 	bl	80075a4 <RCCEx_PLL2_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ae8:	e003      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	75fb      	strb	r3, [r7, #23]
      break;
 8005aee:	e000      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005af0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005af2:	7dfb      	ldrb	r3, [r7, #23]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d109      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005af8:	4ba3      	ldr	r3, [pc, #652]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005afc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b04:	49a0      	ldr	r1, [pc, #640]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	650b      	str	r3, [r1, #80]	; 0x50
 8005b0a:	e001      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0c:	7dfb      	ldrb	r3, [r7, #23]
 8005b0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d032      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d81b      	bhi.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005b24:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2a:	bf00      	nop
 8005b2c:	08005b63 	.word	0x08005b63
 8005b30:	08005b3d 	.word	0x08005b3d
 8005b34:	08005b4b 	.word	0x08005b4b
 8005b38:	08005b63 	.word	0x08005b63
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b3c:	4b92      	ldr	r3, [pc, #584]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4a91      	ldr	r2, [pc, #580]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005b48:	e00c      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	2102      	movs	r1, #2
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 fd27 	bl	80075a4 <RCCEx_PLL2_Config>
 8005b56:	4603      	mov	r3, r0
 8005b58:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005b5a:	e003      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b60:	e000      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d109      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b6a:	4b87      	ldr	r3, [pc, #540]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b6e:	f023 0203 	bic.w	r2, r3, #3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b76:	4984      	ldr	r1, [pc, #528]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b7c:	e001      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
 8005b80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 8086 	beq.w	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b90:	4b7e      	ldr	r3, [pc, #504]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a7d      	ldr	r2, [pc, #500]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b9c:	f7fb fee0 	bl	8001960 <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ba2:	e009      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ba4:	f7fb fedc 	bl	8001960 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b64      	cmp	r3, #100	; 0x64
 8005bb0:	d902      	bls.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	75fb      	strb	r3, [r7, #23]
        break;
 8005bb6:	e005      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bb8:	4b74      	ldr	r3, [pc, #464]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0ef      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d166      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005bca:	4b6f      	ldr	r3, [pc, #444]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bd4:	4053      	eors	r3, r2
 8005bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d013      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bde:	4b6a      	ldr	r3, [pc, #424]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005be8:	4b67      	ldr	r3, [pc, #412]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bec:	4a66      	ldr	r2, [pc, #408]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bf4:	4b64      	ldr	r3, [pc, #400]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf8:	4a63      	ldr	r2, [pc, #396]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bfe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c00:	4a61      	ldr	r2, [pc, #388]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c10:	d115      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c12:	f7fb fea5 	bl	8001960 <HAL_GetTick>
 8005c16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c18:	e00b      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c1a:	f7fb fea1 	bl	8001960 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d902      	bls.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	75fb      	strb	r3, [r7, #23]
            break;
 8005c30:	e005      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c32:	4b55      	ldr	r3, [pc, #340]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0ed      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d126      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c52:	d10d      	bne.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005c54:	4b4c      	ldr	r3, [pc, #304]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c62:	0919      	lsrs	r1, r3, #4
 8005c64:	4b4a      	ldr	r3, [pc, #296]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005c66:	400b      	ands	r3, r1
 8005c68:	4947      	ldr	r1, [pc, #284]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	610b      	str	r3, [r1, #16]
 8005c6e:	e005      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005c70:	4b45      	ldr	r3, [pc, #276]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	4a44      	ldr	r2, [pc, #272]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c7a:	6113      	str	r3, [r2, #16]
 8005c7c:	4b42      	ldr	r3, [pc, #264]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c8a:	493f      	ldr	r1, [pc, #252]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	670b      	str	r3, [r1, #112]	; 0x70
 8005c90:	e004      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
 8005c94:	75bb      	strb	r3, [r7, #22]
 8005c96:	e001      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
 8005c9a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8085 	beq.w	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cae:	2b28      	cmp	r3, #40	; 0x28
 8005cb0:	d866      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005cb2:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb8:	08005d95 	.word	0x08005d95
 8005cbc:	08005d81 	.word	0x08005d81
 8005cc0:	08005d81 	.word	0x08005d81
 8005cc4:	08005d81 	.word	0x08005d81
 8005cc8:	08005d81 	.word	0x08005d81
 8005ccc:	08005d81 	.word	0x08005d81
 8005cd0:	08005d81 	.word	0x08005d81
 8005cd4:	08005d81 	.word	0x08005d81
 8005cd8:	08005d5d 	.word	0x08005d5d
 8005cdc:	08005d81 	.word	0x08005d81
 8005ce0:	08005d81 	.word	0x08005d81
 8005ce4:	08005d81 	.word	0x08005d81
 8005ce8:	08005d81 	.word	0x08005d81
 8005cec:	08005d81 	.word	0x08005d81
 8005cf0:	08005d81 	.word	0x08005d81
 8005cf4:	08005d81 	.word	0x08005d81
 8005cf8:	08005d6f 	.word	0x08005d6f
 8005cfc:	08005d81 	.word	0x08005d81
 8005d00:	08005d81 	.word	0x08005d81
 8005d04:	08005d81 	.word	0x08005d81
 8005d08:	08005d81 	.word	0x08005d81
 8005d0c:	08005d81 	.word	0x08005d81
 8005d10:	08005d81 	.word	0x08005d81
 8005d14:	08005d81 	.word	0x08005d81
 8005d18:	08005d95 	.word	0x08005d95
 8005d1c:	08005d81 	.word	0x08005d81
 8005d20:	08005d81 	.word	0x08005d81
 8005d24:	08005d81 	.word	0x08005d81
 8005d28:	08005d81 	.word	0x08005d81
 8005d2c:	08005d81 	.word	0x08005d81
 8005d30:	08005d81 	.word	0x08005d81
 8005d34:	08005d81 	.word	0x08005d81
 8005d38:	08005d95 	.word	0x08005d95
 8005d3c:	08005d81 	.word	0x08005d81
 8005d40:	08005d81 	.word	0x08005d81
 8005d44:	08005d81 	.word	0x08005d81
 8005d48:	08005d81 	.word	0x08005d81
 8005d4c:	08005d81 	.word	0x08005d81
 8005d50:	08005d81 	.word	0x08005d81
 8005d54:	08005d81 	.word	0x08005d81
 8005d58:	08005d95 	.word	0x08005d95
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	2101      	movs	r1, #1
 8005d62:	4618      	mov	r0, r3
 8005d64:	f001 fc1e 	bl	80075a4 <RCCEx_PLL2_Config>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d6c:	e013      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3324      	adds	r3, #36	; 0x24
 8005d72:	2101      	movs	r1, #1
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 fcc7 	bl	8007708 <RCCEx_PLL3_Config>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d7e:	e00a      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	75fb      	strb	r3, [r7, #23]
      break;
 8005d84:	e007      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005d86:	bf00      	nop
 8005d88:	58024400 	.word	0x58024400
 8005d8c:	58024800 	.word	0x58024800
 8005d90:	00ffffcf 	.word	0x00ffffcf
      break;
 8005d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d109      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d9c:	4b96      	ldr	r3, [pc, #600]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005da8:	4993      	ldr	r1, [pc, #588]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	654b      	str	r3, [r1, #84]	; 0x54
 8005dae:	e001      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
 8005db2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d038      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc4:	2b05      	cmp	r3, #5
 8005dc6:	d821      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005dc8:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dce:	bf00      	nop
 8005dd0:	08005e13 	.word	0x08005e13
 8005dd4:	08005de9 	.word	0x08005de9
 8005dd8:	08005dfb 	.word	0x08005dfb
 8005ddc:	08005e13 	.word	0x08005e13
 8005de0:	08005e13 	.word	0x08005e13
 8005de4:	08005e13 	.word	0x08005e13
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3304      	adds	r3, #4
 8005dec:	2101      	movs	r1, #1
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 fbd8 	bl	80075a4 <RCCEx_PLL2_Config>
 8005df4:	4603      	mov	r3, r0
 8005df6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005df8:	e00c      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3324      	adds	r3, #36	; 0x24
 8005dfe:	2101      	movs	r1, #1
 8005e00:	4618      	mov	r0, r3
 8005e02:	f001 fc81 	bl	8007708 <RCCEx_PLL3_Config>
 8005e06:	4603      	mov	r3, r0
 8005e08:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005e0a:	e003      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e10:	e000      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005e12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e1a:	4b77      	ldr	r3, [pc, #476]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1e:	f023 0207 	bic.w	r2, r3, #7
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e26:	4974      	ldr	r1, [pc, #464]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	654b      	str	r3, [r1, #84]	; 0x54
 8005e2c:	e001      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2e:	7dfb      	ldrb	r3, [r7, #23]
 8005e30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d03a      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e44:	2b05      	cmp	r3, #5
 8005e46:	d821      	bhi.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005e93 	.word	0x08005e93
 8005e54:	08005e69 	.word	0x08005e69
 8005e58:	08005e7b 	.word	0x08005e7b
 8005e5c:	08005e93 	.word	0x08005e93
 8005e60:	08005e93 	.word	0x08005e93
 8005e64:	08005e93 	.word	0x08005e93
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f001 fb98 	bl	80075a4 <RCCEx_PLL2_Config>
 8005e74:	4603      	mov	r3, r0
 8005e76:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e78:	e00c      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3324      	adds	r3, #36	; 0x24
 8005e7e:	2101      	movs	r1, #1
 8005e80:	4618      	mov	r0, r3
 8005e82:	f001 fc41 	bl	8007708 <RCCEx_PLL3_Config>
 8005e86:	4603      	mov	r3, r0
 8005e88:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e8a:	e003      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e90:	e000      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e9a:	4b57      	ldr	r3, [pc, #348]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9e:	f023 0207 	bic.w	r2, r3, #7
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea8:	4953      	ldr	r1, [pc, #332]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	658b      	str	r3, [r1, #88]	; 0x58
 8005eae:	e001      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
 8005eb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d04b      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eca:	d02e      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ed0:	d828      	bhi.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed6:	d02a      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005edc:	d822      	bhi.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005ede:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ee2:	d026      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005ee4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ee8:	d81c      	bhi.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eee:	d010      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ef4:	d816      	bhi.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01d      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005efe:	d111      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3304      	adds	r3, #4
 8005f04:	2100      	movs	r1, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f001 fb4c 	bl	80075a4 <RCCEx_PLL2_Config>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005f10:	e012      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3324      	adds	r3, #36	; 0x24
 8005f16:	2102      	movs	r1, #2
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f001 fbf5 	bl	8007708 <RCCEx_PLL3_Config>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005f22:	e009      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	75fb      	strb	r3, [r7, #23]
      break;
 8005f28:	e006      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005f2a:	bf00      	nop
 8005f2c:	e004      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005f2e:	bf00      	nop
 8005f30:	e002      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005f32:	bf00      	nop
 8005f34:	e000      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f3e:	4b2e      	ldr	r3, [pc, #184]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f4c:	492a      	ldr	r1, [pc, #168]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	654b      	str	r3, [r1, #84]	; 0x54
 8005f52:	e001      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
 8005f56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d04d      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f6e:	d02e      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005f70:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f74:	d828      	bhi.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7a:	d02a      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f80:	d822      	bhi.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005f82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f86:	d026      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005f88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f8c:	d81c      	bhi.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f92:	d010      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f98:	d816      	bhi.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d01d      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa2:	d111      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	2100      	movs	r1, #0
 8005faa:	4618      	mov	r0, r3
 8005fac:	f001 fafa 	bl	80075a4 <RCCEx_PLL2_Config>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005fb4:	e012      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3324      	adds	r3, #36	; 0x24
 8005fba:	2102      	movs	r1, #2
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 fba3 	bl	8007708 <RCCEx_PLL3_Config>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005fc6:	e009      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	75fb      	strb	r3, [r7, #23]
      break;
 8005fcc:	e006      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005fce:	bf00      	nop
 8005fd0:	e004      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005fd2:	bf00      	nop
 8005fd4:	e002      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005fd6:	bf00      	nop
 8005fd8:	e000      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10c      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fe2:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ff0:	4901      	ldr	r1, [pc, #4]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	658b      	str	r3, [r1, #88]	; 0x58
 8005ff6:	e003      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005ff8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
 8005ffe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006008:	2b00      	cmp	r3, #0
 800600a:	d04b      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006012:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006016:	d02e      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006018:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800601c:	d828      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800601e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006022:	d02a      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006028:	d822      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800602a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800602e:	d026      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006030:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006034:	d81c      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800603a:	d010      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800603c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006040:	d816      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d01d      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604a:	d111      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3304      	adds	r3, #4
 8006050:	2100      	movs	r1, #0
 8006052:	4618      	mov	r0, r3
 8006054:	f001 faa6 	bl	80075a4 <RCCEx_PLL2_Config>
 8006058:	4603      	mov	r3, r0
 800605a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800605c:	e012      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3324      	adds	r3, #36	; 0x24
 8006062:	2102      	movs	r1, #2
 8006064:	4618      	mov	r0, r3
 8006066:	f001 fb4f 	bl	8007708 <RCCEx_PLL3_Config>
 800606a:	4603      	mov	r3, r0
 800606c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800606e:	e009      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	75fb      	strb	r3, [r7, #23]
      break;
 8006074:	e006      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006076:	bf00      	nop
 8006078:	e004      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800607a:	bf00      	nop
 800607c:	e002      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800607e:	bf00      	nop
 8006080:	e000      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006084:	7dfb      	ldrb	r3, [r7, #23]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800608a:	4b9d      	ldr	r3, [pc, #628]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006098:	4999      	ldr	r1, [pc, #612]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800609a:	4313      	orrs	r3, r2
 800609c:	658b      	str	r3, [r1, #88]	; 0x58
 800609e:	e001      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d01a      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ba:	d10a      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3324      	adds	r3, #36	; 0x24
 80060c0:	2102      	movs	r1, #2
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 fb20 	bl	8007708 <RCCEx_PLL3_Config>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80060d2:	4b8b      	ldr	r3, [pc, #556]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060e0:	4987      	ldr	r1, [pc, #540]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0310 	and.w	r3, r3, #16
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d01a      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060fc:	d10a      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3324      	adds	r3, #36	; 0x24
 8006102:	2102      	movs	r1, #2
 8006104:	4618      	mov	r0, r3
 8006106:	f001 faff 	bl	8007708 <RCCEx_PLL3_Config>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006114:	4b7a      	ldr	r3, [pc, #488]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006122:	4977      	ldr	r1, [pc, #476]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006124:	4313      	orrs	r3, r2
 8006126:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d034      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800613a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800613e:	d01d      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006144:	d817      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800614a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614e:	d009      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006150:	e011      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3304      	adds	r3, #4
 8006156:	2100      	movs	r1, #0
 8006158:	4618      	mov	r0, r3
 800615a:	f001 fa23 	bl	80075a4 <RCCEx_PLL2_Config>
 800615e:	4603      	mov	r3, r0
 8006160:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006162:	e00c      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3324      	adds	r3, #36	; 0x24
 8006168:	2102      	movs	r1, #2
 800616a:	4618      	mov	r0, r3
 800616c:	f001 facc 	bl	8007708 <RCCEx_PLL3_Config>
 8006170:	4603      	mov	r3, r0
 8006172:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006174:	e003      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	75fb      	strb	r3, [r7, #23]
      break;
 800617a:	e000      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800617c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800617e:	7dfb      	ldrb	r3, [r7, #23]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006184:	4b5e      	ldr	r3, [pc, #376]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006188:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006192:	495b      	ldr	r1, [pc, #364]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006194:	4313      	orrs	r3, r2
 8006196:	658b      	str	r3, [r1, #88]	; 0x58
 8006198:	e001      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619a:	7dfb      	ldrb	r3, [r7, #23]
 800619c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d033      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061b4:	d01c      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80061b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061ba:	d816      	bhi.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80061bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061c0:	d003      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80061c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061c6:	d007      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80061c8:	e00f      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ca:	4b4d      	ldr	r3, [pc, #308]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ce:	4a4c      	ldr	r2, [pc, #304]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80061d6:	e00c      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3324      	adds	r3, #36	; 0x24
 80061dc:	2101      	movs	r1, #1
 80061de:	4618      	mov	r0, r3
 80061e0:	f001 fa92 	bl	8007708 <RCCEx_PLL3_Config>
 80061e4:	4603      	mov	r3, r0
 80061e6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80061e8:	e003      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	75fb      	strb	r3, [r7, #23]
      break;
 80061ee:	e000      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80061f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061f8:	4b41      	ldr	r3, [pc, #260]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006206:	493e      	ldr	r1, [pc, #248]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006208:	4313      	orrs	r3, r2
 800620a:	654b      	str	r3, [r1, #84]	; 0x54
 800620c:	e001      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620e:	7dfb      	ldrb	r3, [r7, #23]
 8006210:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d029      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622a:	d007      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800622c:	e00f      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800622e:	4b34      	ldr	r3, [pc, #208]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	4a33      	ldr	r2, [pc, #204]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006238:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800623a:	e00b      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	2102      	movs	r1, #2
 8006242:	4618      	mov	r0, r3
 8006244:	f001 f9ae 	bl	80075a4 <RCCEx_PLL2_Config>
 8006248:	4603      	mov	r3, r0
 800624a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800624c:	e002      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	75fb      	strb	r3, [r7, #23]
      break;
 8006252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006254:	7dfb      	ldrb	r3, [r7, #23]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d109      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800625a:	4b29      	ldr	r3, [pc, #164]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800625c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800625e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006266:	4926      	ldr	r1, [pc, #152]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006268:	4313      	orrs	r3, r2
 800626a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800626c:	e001      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626e:	7dfb      	ldrb	r3, [r7, #23]
 8006270:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3324      	adds	r3, #36	; 0x24
 8006282:	2102      	movs	r1, #2
 8006284:	4618      	mov	r0, r3
 8006286:	f001 fa3f 	bl	8007708 <RCCEx_PLL3_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d033      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062a8:	d017      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80062aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ae:	d811      	bhi.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80062b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b4:	d013      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80062b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ba:	d80b      	bhi.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d010      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80062c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c4:	d106      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c6:	4b0e      	ldr	r3, [pc, #56]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80062c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ca:	4a0d      	ldr	r2, [pc, #52]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80062cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80062d2:	e007      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	75fb      	strb	r3, [r7, #23]
      break;
 80062d8:	e004      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80062da:	bf00      	nop
 80062dc:	e002      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80062de:	bf00      	nop
 80062e0:	e000      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80062e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10c      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062ea:	4b05      	ldr	r3, [pc, #20]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80062ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062f6:	4902      	ldr	r1, [pc, #8]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	654b      	str	r3, [r1, #84]	; 0x54
 80062fc:	e004      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80062fe:	bf00      	nop
 8006300:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d008      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006314:	4b31      	ldr	r3, [pc, #196]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006318:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006320:	492e      	ldr	r1, [pc, #184]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006322:	4313      	orrs	r3, r2
 8006324:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d009      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006332:	4b2a      	ldr	r3, [pc, #168]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006340:	4926      	ldr	r1, [pc, #152]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006342:	4313      	orrs	r3, r2
 8006344:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d008      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006352:	4b22      	ldr	r3, [pc, #136]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006356:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800635e:	491f      	ldr	r1, [pc, #124]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006360:	4313      	orrs	r3, r2
 8006362:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00d      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006370:	4b1a      	ldr	r3, [pc, #104]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	4a19      	ldr	r2, [pc, #100]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006376:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800637a:	6113      	str	r3, [r2, #16]
 800637c:	4b17      	ldr	r3, [pc, #92]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800637e:	691a      	ldr	r2, [r3, #16]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006386:	4915      	ldr	r1, [pc, #84]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006388:	4313      	orrs	r3, r2
 800638a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	da08      	bge.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006394:	4b11      	ldr	r3, [pc, #68]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006398:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a0:	490e      	ldr	r1, [pc, #56]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063b2:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80063b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c0:	4906      	ldr	r1, [pc, #24]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80063c6:	7dbb      	ldrb	r3, [r7, #22]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	e000      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	58024400 	.word	0x58024400

080063e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b090      	sub	sp, #64	; 0x40
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ee:	f040 8095 	bne.w	800651c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80063f2:	4b97      	ldr	r3, [pc, #604]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80063f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80063fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fe:	2b04      	cmp	r3, #4
 8006400:	f200 8088 	bhi.w	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006404:	a201      	add	r2, pc, #4	; (adr r2, 800640c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640a:	bf00      	nop
 800640c:	08006421 	.word	0x08006421
 8006410:	08006449 	.word	0x08006449
 8006414:	08006471 	.word	0x08006471
 8006418:	0800650d 	.word	0x0800650d
 800641c:	08006499 	.word	0x08006499
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006420:	4b8b      	ldr	r3, [pc, #556]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800642c:	d108      	bne.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800642e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006432:	4618      	mov	r0, r3
 8006434:	f000 ff64 	bl	8007300 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800643c:	f000 bc94 	b.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006440:	2300      	movs	r3, #0
 8006442:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006444:	f000 bc90 	b.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006448:	4b81      	ldr	r3, [pc, #516]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006454:	d108      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006456:	f107 0318 	add.w	r3, r7, #24
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fca8 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006464:	f000 bc80 	b.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006468:	2300      	movs	r3, #0
 800646a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800646c:	f000 bc7c 	b.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006470:	4b77      	ldr	r3, [pc, #476]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800647c:	d108      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800647e:	f107 030c 	add.w	r3, r7, #12
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fde8 	bl	8007058 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800648c:	f000 bc6c 	b.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006494:	f000 bc68 	b.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006498:	4b6d      	ldr	r3, [pc, #436]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800649a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064a2:	4b6b      	ldr	r3, [pc, #428]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d10c      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80064ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d109      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064b4:	4b66      	ldr	r3, [pc, #408]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	08db      	lsrs	r3, r3, #3
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	4a65      	ldr	r2, [pc, #404]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80064c0:	fa22 f303 	lsr.w	r3, r2, r3
 80064c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064c6:	e01f      	b.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064c8:	4b61      	ldr	r3, [pc, #388]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d4:	d106      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80064d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064dc:	d102      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80064de:	4b5e      	ldr	r3, [pc, #376]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80064e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e2:	e011      	b.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064e4:	4b5a      	ldr	r3, [pc, #360]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064f0:	d106      	bne.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80064f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064f8:	d102      	bne.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80064fa:	4b58      	ldr	r3, [pc, #352]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80064fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064fe:	e003      	b.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006504:	f000 bc30 	b.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006508:	f000 bc2e 	b.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800650c:	4b54      	ldr	r3, [pc, #336]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006510:	f000 bc2a 	b.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006518:	f000 bc26 	b.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006522:	f040 809f 	bne.w	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006526:	4b4a      	ldr	r3, [pc, #296]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800652a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800652e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006536:	d04d      	beq.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800653e:	f200 8084 	bhi.w	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	2bc0      	cmp	r3, #192	; 0xc0
 8006546:	d07d      	beq.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	2bc0      	cmp	r3, #192	; 0xc0
 800654c:	d87d      	bhi.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	2b80      	cmp	r3, #128	; 0x80
 8006552:	d02d      	beq.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	2b80      	cmp	r3, #128	; 0x80
 8006558:	d877      	bhi.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	2b40      	cmp	r3, #64	; 0x40
 8006564:	d012      	beq.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006566:	e070      	b.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006568:	4b39      	ldr	r3, [pc, #228]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006570:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006574:	d107      	bne.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fec0 	bl	8007300 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006584:	e3f0      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006586:	2300      	movs	r3, #0
 8006588:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800658a:	e3ed      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800658c:	4b30      	ldr	r3, [pc, #192]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006594:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006598:	d107      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800659a:	f107 0318 	add.w	r3, r7, #24
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 fc06 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065a8:	e3de      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065ae:	e3db      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065b0:	4b27      	ldr	r3, [pc, #156]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065bc:	d107      	bne.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065be:	f107 030c 	add.w	r3, r7, #12
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fd48 	bl	8007058 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065cc:	e3cc      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065d2:	e3c9      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80065d4:	4b1e      	ldr	r3, [pc, #120]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80065d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065de:	4b1c      	ldr	r3, [pc, #112]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0304 	and.w	r3, r3, #4
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d10c      	bne.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80065ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d109      	bne.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065f0:	4b17      	ldr	r3, [pc, #92]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	08db      	lsrs	r3, r3, #3
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	4a16      	ldr	r2, [pc, #88]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80065fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006602:	e01e      	b.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006604:	4b12      	ldr	r3, [pc, #72]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006610:	d106      	bne.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006618:	d102      	bne.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800661a:	4b0f      	ldr	r3, [pc, #60]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800661c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800661e:	e010      	b.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006620:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800662c:	d106      	bne.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006634:	d102      	bne.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006636:	4b09      	ldr	r3, [pc, #36]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800663a:	e002      	b.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006640:	e392      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006642:	e391      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006644:	4b06      	ldr	r3, [pc, #24]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006646:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006648:	e38e      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800664e:	e38b      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006650:	58024400 	.word	0x58024400
 8006654:	03d09000 	.word	0x03d09000
 8006658:	003d0900 	.word	0x003d0900
 800665c:	017d7840 	.word	0x017d7840
 8006660:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800666a:	f040 809c 	bne.w	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800666e:	4b9d      	ldr	r3, [pc, #628]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006672:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006676:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800667e:	d054      	beq.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006686:	f200 808b 	bhi.w	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006690:	f000 8083 	beq.w	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800669a:	f200 8081 	bhi.w	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066a4:	d02f      	beq.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ac:	d878      	bhi.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d004      	beq.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066ba:	d012      	beq.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80066bc:	e070      	b.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066be:	4b89      	ldr	r3, [pc, #548]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066ca:	d107      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fe15 	bl	8007300 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066da:	e345      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80066dc:	2300      	movs	r3, #0
 80066de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066e0:	e342      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066e2:	4b80      	ldr	r3, [pc, #512]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ee:	d107      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066f0:	f107 0318 	add.w	r3, r7, #24
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fb5b 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066fe:	e333      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006700:	2300      	movs	r3, #0
 8006702:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006704:	e330      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006706:	4b77      	ldr	r3, [pc, #476]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800670e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006712:	d107      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006714:	f107 030c 	add.w	r3, r7, #12
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fc9d 	bl	8007058 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006722:	e321      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006724:	2300      	movs	r3, #0
 8006726:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006728:	e31e      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800672a:	4b6e      	ldr	r3, [pc, #440]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800672c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800672e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006732:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006734:	4b6b      	ldr	r3, [pc, #428]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b04      	cmp	r3, #4
 800673e:	d10c      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8006740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006742:	2b00      	cmp	r3, #0
 8006744:	d109      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006746:	4b67      	ldr	r3, [pc, #412]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	08db      	lsrs	r3, r3, #3
 800674c:	f003 0303 	and.w	r3, r3, #3
 8006750:	4a65      	ldr	r2, [pc, #404]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006752:	fa22 f303 	lsr.w	r3, r2, r3
 8006756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006758:	e01e      	b.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800675a:	4b62      	ldr	r3, [pc, #392]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006766:	d106      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800676e:	d102      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006770:	4b5e      	ldr	r3, [pc, #376]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006774:	e010      	b.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006776:	4b5b      	ldr	r3, [pc, #364]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006782:	d106      	bne.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800678a:	d102      	bne.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800678c:	4b58      	ldr	r3, [pc, #352]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800678e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006790:	e002      	b.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006796:	e2e7      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006798:	e2e6      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800679a:	4b56      	ldr	r3, [pc, #344]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800679c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800679e:	e2e3      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067a4:	e2e0      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ac:	f040 80a7 	bne.w	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80067b0:	4b4c      	ldr	r3, [pc, #304]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80067b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80067b8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067c0:	d055      	beq.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067c8:	f200 8096 	bhi.w	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067d2:	f000 8084 	beq.w	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067dc:	f200 808c 	bhi.w	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067e6:	d030      	beq.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067ee:	f200 8083 	bhi.w	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d004      	beq.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067fe:	d012      	beq.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006800:	e07a      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006802:	4b38      	ldr	r3, [pc, #224]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800680e:	d107      	bne.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fd73 	bl	8007300 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800681e:	e2a3      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006824:	e2a0      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006826:	4b2f      	ldr	r3, [pc, #188]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800682e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006832:	d107      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006834:	f107 0318 	add.w	r3, r7, #24
 8006838:	4618      	mov	r0, r3
 800683a:	f000 fab9 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006842:	e291      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006844:	2300      	movs	r3, #0
 8006846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006848:	e28e      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800684a:	4b26      	ldr	r3, [pc, #152]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006856:	d107      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006858:	f107 030c 	add.w	r3, r7, #12
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fbfb 	bl	8007058 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006866:	e27f      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800686c:	e27c      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800686e:	4b1d      	ldr	r3, [pc, #116]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006872:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006876:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006878:	4b1a      	ldr	r3, [pc, #104]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b04      	cmp	r3, #4
 8006882:	d10c      	bne.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006886:	2b00      	cmp	r3, #0
 8006888:	d109      	bne.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800688a:	4b16      	ldr	r3, [pc, #88]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	08db      	lsrs	r3, r3, #3
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	4a14      	ldr	r2, [pc, #80]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006896:	fa22 f303 	lsr.w	r3, r2, r3
 800689a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800689c:	e01e      	b.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800689e:	4b11      	ldr	r3, [pc, #68]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068aa:	d106      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80068ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068b2:	d102      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80068b4:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b8:	e010      	b.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068ba:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068c6:	d106      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80068c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ce:	d102      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80068d0:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80068d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d4:	e002      	b.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80068da:	e245      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80068dc:	e244      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80068de:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80068e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068e2:	e241      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80068e4:	58024400 	.word	0x58024400
 80068e8:	03d09000 	.word	0x03d09000
 80068ec:	003d0900 	.word	0x003d0900
 80068f0:	017d7840 	.word	0x017d7840
 80068f4:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80068f8:	2300      	movs	r3, #0
 80068fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068fc:	e234      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006904:	f040 809c 	bne.w	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006908:	4b9b      	ldr	r3, [pc, #620]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800690a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800690c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006910:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006918:	d054      	beq.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006920:	f200 808b 	bhi.w	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006926:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800692a:	f000 8083 	beq.w	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006934:	f200 8081 	bhi.w	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800693e:	d02f      	beq.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8006940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006946:	d878      	bhi.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	2b00      	cmp	r3, #0
 800694c:	d004      	beq.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006954:	d012      	beq.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006956:	e070      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006958:	4b87      	ldr	r3, [pc, #540]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006964:	d107      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fcc8 	bl	8007300 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006974:	e1f8      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006976:	2300      	movs	r3, #0
 8006978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800697a:	e1f5      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800697c:	4b7e      	ldr	r3, [pc, #504]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006988:	d107      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800698a:	f107 0318 	add.w	r3, r7, #24
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fa0e 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006998:	e1e6      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800699e:	e1e3      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069a0:	4b75      	ldr	r3, [pc, #468]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ac:	d107      	bne.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ae:	f107 030c 	add.w	r3, r7, #12
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fb50 	bl	8007058 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069bc:	e1d4      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069c2:	e1d1      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80069c4:	4b6c      	ldr	r3, [pc, #432]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80069c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069cc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069ce:	4b6a      	ldr	r3, [pc, #424]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d10c      	bne.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80069da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d109      	bne.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069e0:	4b65      	ldr	r3, [pc, #404]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	08db      	lsrs	r3, r3, #3
 80069e6:	f003 0303 	and.w	r3, r3, #3
 80069ea:	4a64      	ldr	r2, [pc, #400]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80069ec:	fa22 f303 	lsr.w	r3, r2, r3
 80069f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069f2:	e01e      	b.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069f4:	4b60      	ldr	r3, [pc, #384]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a00:	d106      	bne.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8006a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a08:	d102      	bne.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006a0a:	4b5d      	ldr	r3, [pc, #372]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8006a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a0e:	e010      	b.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a10:	4b59      	ldr	r3, [pc, #356]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a1c:	d106      	bne.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a24:	d102      	bne.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006a26:	4b57      	ldr	r3, [pc, #348]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a2a:	e002      	b.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006a30:	e19a      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006a32:	e199      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006a34:	4b54      	ldr	r3, [pc, #336]	; (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a38:	e196      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a3e:	e193      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a46:	d173      	bne.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006a48:	4b4b      	ldr	r3, [pc, #300]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a50:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a58:	d02f      	beq.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a60:	d863      	bhi.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8006a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d004      	beq.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a6e:	d012      	beq.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8006a70:	e05b      	b.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a72:	4b41      	ldr	r3, [pc, #260]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a7e:	d107      	bne.n	8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a80:	f107 0318 	add.w	r3, r7, #24
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 f993 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a8e:	e16b      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006a90:	2300      	movs	r3, #0
 8006a92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a94:	e168      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a96:	4b38      	ldr	r3, [pc, #224]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa2:	d107      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aa4:	f107 030c 	add.w	r3, r7, #12
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 fad5 	bl	8007058 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ab2:	e159      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ab8:	e156      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006aba:	4b2f      	ldr	r3, [pc, #188]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006abe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ac2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ac4:	4b2c      	ldr	r3, [pc, #176]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b04      	cmp	r3, #4
 8006ace:	d10c      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8006ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d109      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ad6:	4b28      	ldr	r3, [pc, #160]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	08db      	lsrs	r3, r3, #3
 8006adc:	f003 0303 	and.w	r3, r3, #3
 8006ae0:	4a26      	ldr	r2, [pc, #152]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8006ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ae8:	e01e      	b.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006aea:	4b23      	ldr	r3, [pc, #140]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006af6:	d106      	bne.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8006af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006afe:	d102      	bne.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006b00:	4b1f      	ldr	r3, [pc, #124]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8006b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b04:	e010      	b.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b06:	4b1c      	ldr	r3, [pc, #112]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b12:	d106      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8006b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b1a:	d102      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006b1c:	4b19      	ldr	r3, [pc, #100]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b20:	e002      	b.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006b26:	e11f      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006b28:	e11e      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b2e:	e11b      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b36:	d13e      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006b38:	4b0f      	ldr	r3, [pc, #60]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b40:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d004      	beq.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8006b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b4e:	d01d      	beq.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006b50:	e02e      	b.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b52:	4b09      	ldr	r3, [pc, #36]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b5e:	d107      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fbcb 	bl	8007300 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b6e:	e0fb      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b74:	e0f8      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006b76:	bf00      	nop
 8006b78:	58024400 	.word	0x58024400
 8006b7c:	03d09000 	.word	0x03d09000
 8006b80:	003d0900 	.word	0x003d0900
 8006b84:	017d7840 	.word	0x017d7840
 8006b88:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b8c:	4b79      	ldr	r3, [pc, #484]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b98:	d107      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b9a:	f107 0318 	add.w	r3, r7, #24
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 f906 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ba8:	e0de      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bae:	e0db      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bb4:	e0d8      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bbc:	f040 8085 	bne.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006bc0:	4b6c      	ldr	r3, [pc, #432]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006bc8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bd0:	d06b      	beq.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bd8:	d874      	bhi.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be0:	d056      	beq.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8006be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be8:	d86c      	bhi.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bf0:	d03b      	beq.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bf8:	d864      	bhi.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c00:	d021      	beq.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c08:	d85c      	bhi.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d004      	beq.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c16:	d004      	beq.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006c18:	e054      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006c1a:	f000 f8b3 	bl	8006d84 <HAL_RCCEx_GetD3PCLK1Freq>
 8006c1e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006c20:	e0a2      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c22:	4b54      	ldr	r3, [pc, #336]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c2e:	d107      	bne.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c30:	f107 0318 	add.w	r3, r7, #24
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 f8bb 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006c3e:	e093      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006c40:	2300      	movs	r3, #0
 8006c42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c44:	e090      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c46:	4b4b      	ldr	r3, [pc, #300]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c52:	d107      	bne.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c54:	f107 030c 	add.w	r3, r7, #12
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 f9fd 	bl	8007058 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006c62:	e081      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c68:	e07e      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c6a:	4b42      	ldr	r3, [pc, #264]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0304 	and.w	r3, r3, #4
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	d109      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c76:	4b3f      	ldr	r3, [pc, #252]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	08db      	lsrs	r3, r3, #3
 8006c7c:	f003 0303 	and.w	r3, r3, #3
 8006c80:	4a3d      	ldr	r2, [pc, #244]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006c82:	fa22 f303 	lsr.w	r3, r2, r3
 8006c86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006c88:	e06e      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c8e:	e06b      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006c90:	4b38      	ldr	r3, [pc, #224]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c9c:	d102      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8006c9e:	4b37      	ldr	r3, [pc, #220]	; (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ca2:	e061      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ca8:	e05e      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006caa:	4b32      	ldr	r3, [pc, #200]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cb6:	d102      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8006cb8:	4b31      	ldr	r3, [pc, #196]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006cba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006cbc:	e054      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cc2:	e051      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cc8:	e04e      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cd0:	d148      	bne.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006cd2:	4b28      	ldr	r3, [pc, #160]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cda:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ce2:	d02a      	beq.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cea:	d838      	bhi.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8006cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cf8:	d00d      	beq.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8006cfa:	e030      	b.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006cfc:	4b1d      	ldr	r3, [pc, #116]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d08:	d102      	bne.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8006d0a:	4b1d      	ldr	r3, [pc, #116]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d0e:	e02b      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d14:	e028      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d16:	4b17      	ldr	r3, [pc, #92]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d22:	d107      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 fae9 	bl	8007300 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d32:	e019      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d38:	e016      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d3a:	4b0e      	ldr	r3, [pc, #56]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d46:	d107      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d48:	f107 0318 	add.w	r3, r7, #24
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 f82f 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d56:	e007      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d5c:	e004      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d62:	e001      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3740      	adds	r7, #64	; 0x40
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	58024400 	.word	0x58024400
 8006d78:	03d09000 	.word	0x03d09000
 8006d7c:	003d0900 	.word	0x003d0900
 8006d80:	017d7840 	.word	0x017d7840

08006d84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006d88:	f7fe fb88 	bl	800549c <HAL_RCC_GetHCLKFreq>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	091b      	lsrs	r3, r3, #4
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	4904      	ldr	r1, [pc, #16]	; (8006dac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006d9a:	5ccb      	ldrb	r3, [r1, r3]
 8006d9c:	f003 031f 	and.w	r3, r3, #31
 8006da0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	58024400 	.word	0x58024400
 8006dac:	0800ae88 	.word	0x0800ae88

08006db0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b089      	sub	sp, #36	; 0x24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006db8:	4ba1      	ldr	r3, [pc, #644]	; (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbc:	f003 0303 	and.w	r3, r3, #3
 8006dc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006dc2:	4b9f      	ldr	r3, [pc, #636]	; (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc6:	0b1b      	lsrs	r3, r3, #12
 8006dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dcc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006dce:	4b9c      	ldr	r3, [pc, #624]	; (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd2:	091b      	lsrs	r3, r3, #4
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006dda:	4b99      	ldr	r3, [pc, #612]	; (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dde:	08db      	lsrs	r3, r3, #3
 8006de0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	fb02 f303 	mul.w	r3, r2, r3
 8006dea:	ee07 3a90 	vmov	s15, r3
 8006dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 8111 	beq.w	8007020 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	f000 8083 	beq.w	8006f0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	f200 80a1 	bhi.w	8006f50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d056      	beq.n	8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e1a:	e099      	b.n	8006f50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e1c:	4b88      	ldr	r3, [pc, #544]	; (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0320 	and.w	r3, r3, #32
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d02d      	beq.n	8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e28:	4b85      	ldr	r3, [pc, #532]	; (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	08db      	lsrs	r3, r3, #3
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	4a84      	ldr	r2, [pc, #528]	; (8007044 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006e34:	fa22 f303 	lsr.w	r3, r2, r3
 8006e38:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	ee07 3a90 	vmov	s15, r3
 8006e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e52:	4b7b      	ldr	r3, [pc, #492]	; (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e5a:	ee07 3a90 	vmov	s15, r3
 8006e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e82:	e087      	b.n	8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800704c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e96:	4b6a      	ldr	r3, [pc, #424]	; (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9e:	ee07 3a90 	vmov	s15, r3
 8006ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eaa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ec6:	e065      	b.n	8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eda:	4b59      	ldr	r3, [pc, #356]	; (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f0a:	e043      	b.n	8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007054 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f1e:	4b48      	ldr	r3, [pc, #288]	; (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f4e:	e021      	b.n	8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f62:	4b37      	ldr	r3, [pc, #220]	; (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006f94:	4b2a      	ldr	r3, [pc, #168]	; (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	0a5b      	lsrs	r3, r3, #9
 8006f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006faa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fba:	ee17 2a90 	vmov	r2, s15
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006fc2:	4b1f      	ldr	r3, [pc, #124]	; (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc6:	0c1b      	lsrs	r3, r3, #16
 8006fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fcc:	ee07 3a90 	vmov	s15, r3
 8006fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fe8:	ee17 2a90 	vmov	r2, s15
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006ff0:	4b13      	ldr	r3, [pc, #76]	; (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff4:	0e1b      	lsrs	r3, r3, #24
 8006ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800700a:	edd7 6a07 	vldr	s13, [r7, #28]
 800700e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007016:	ee17 2a90 	vmov	r2, s15
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800701e:	e008      	b.n	8007032 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	609a      	str	r2, [r3, #8]
}
 8007032:	bf00      	nop
 8007034:	3724      	adds	r7, #36	; 0x24
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	58024400 	.word	0x58024400
 8007044:	03d09000 	.word	0x03d09000
 8007048:	46000000 	.word	0x46000000
 800704c:	4c742400 	.word	0x4c742400
 8007050:	4a742400 	.word	0x4a742400
 8007054:	4bbebc20 	.word	0x4bbebc20

08007058 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007058:	b480      	push	{r7}
 800705a:	b089      	sub	sp, #36	; 0x24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007060:	4ba1      	ldr	r3, [pc, #644]	; (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007064:	f003 0303 	and.w	r3, r3, #3
 8007068:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800706a:	4b9f      	ldr	r3, [pc, #636]	; (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800706c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706e:	0d1b      	lsrs	r3, r3, #20
 8007070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007074:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007076:	4b9c      	ldr	r3, [pc, #624]	; (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707a:	0a1b      	lsrs	r3, r3, #8
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007082:	4b99      	ldr	r3, [pc, #612]	; (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007086:	08db      	lsrs	r3, r3, #3
 8007088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	fb02 f303 	mul.w	r3, r2, r3
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 8111 	beq.w	80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	f000 8083 	beq.w	80071b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	f200 80a1 	bhi.w	80071f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d056      	beq.n	8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80070c2:	e099      	b.n	80071f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070c4:	4b88      	ldr	r3, [pc, #544]	; (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0320 	and.w	r3, r3, #32
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d02d      	beq.n	800712c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070d0:	4b85      	ldr	r3, [pc, #532]	; (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	08db      	lsrs	r3, r3, #3
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	4a84      	ldr	r2, [pc, #528]	; (80072ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80070dc:	fa22 f303 	lsr.w	r3, r2, r3
 80070e0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	ee07 3a90 	vmov	s15, r3
 80070e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070fa:	4b7b      	ldr	r3, [pc, #492]	; (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007102:	ee07 3a90 	vmov	s15, r3
 8007106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800710a:	ed97 6a03 	vldr	s12, [r7, #12]
 800710e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800711a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800711e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007126:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800712a:	e087      	b.n	800723c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007136:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80072f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800713a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800713e:	4b6a      	ldr	r3, [pc, #424]	; (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800714e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007152:	eddf 5a67 	vldr	s11, [pc, #412]	; 80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800715a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800715e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800716e:	e065      	b.n	800723c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80072f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800717e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007182:	4b59      	ldr	r3, [pc, #356]	; (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007192:	ed97 6a03 	vldr	s12, [r7, #12]
 8007196:	eddf 5a56 	vldr	s11, [pc, #344]	; 80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800719a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071b2:	e043      	b.n	800723c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80072fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80071c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c6:	4b48      	ldr	r3, [pc, #288]	; (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071f6:	e021      	b.n	800723c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80072f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720a:	4b37      	ldr	r3, [pc, #220]	; (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721a:	ed97 6a03 	vldr	s12, [r7, #12]
 800721e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800722e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800723a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800723c:	4b2a      	ldr	r3, [pc, #168]	; (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800723e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007240:	0a5b      	lsrs	r3, r3, #9
 8007242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007252:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007256:	edd7 6a07 	vldr	s13, [r7, #28]
 800725a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800725e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007262:	ee17 2a90 	vmov	r2, s15
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800726a:	4b1f      	ldr	r3, [pc, #124]	; (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	0c1b      	lsrs	r3, r3, #16
 8007270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007274:	ee07 3a90 	vmov	s15, r3
 8007278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007280:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007284:	edd7 6a07 	vldr	s13, [r7, #28]
 8007288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800728c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007290:	ee17 2a90 	vmov	r2, s15
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007298:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800729a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729c:	0e1b      	lsrs	r3, r3, #24
 800729e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80072b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072be:	ee17 2a90 	vmov	r2, s15
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80072c6:	e008      	b.n	80072da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	609a      	str	r2, [r3, #8]
}
 80072da:	bf00      	nop
 80072dc:	3724      	adds	r7, #36	; 0x24
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	58024400 	.word	0x58024400
 80072ec:	03d09000 	.word	0x03d09000
 80072f0:	46000000 	.word	0x46000000
 80072f4:	4c742400 	.word	0x4c742400
 80072f8:	4a742400 	.word	0x4a742400
 80072fc:	4bbebc20 	.word	0x4bbebc20

08007300 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007300:	b480      	push	{r7}
 8007302:	b089      	sub	sp, #36	; 0x24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007308:	4ba0      	ldr	r3, [pc, #640]	; (800758c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800730a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730c:	f003 0303 	and.w	r3, r3, #3
 8007310:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007312:	4b9e      	ldr	r3, [pc, #632]	; (800758c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007316:	091b      	lsrs	r3, r3, #4
 8007318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800731c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800731e:	4b9b      	ldr	r3, [pc, #620]	; (800758c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007328:	4b98      	ldr	r3, [pc, #608]	; (800758c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800732a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732c:	08db      	lsrs	r3, r3, #3
 800732e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	fb02 f303 	mul.w	r3, r2, r3
 8007338:	ee07 3a90 	vmov	s15, r3
 800733c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007340:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 8111 	beq.w	800756e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	2b02      	cmp	r3, #2
 8007350:	f000 8083 	beq.w	800745a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	2b02      	cmp	r3, #2
 8007358:	f200 80a1 	bhi.w	800749e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d056      	beq.n	8007416 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007368:	e099      	b.n	800749e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800736a:	4b88      	ldr	r3, [pc, #544]	; (800758c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	2b00      	cmp	r3, #0
 8007374:	d02d      	beq.n	80073d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007376:	4b85      	ldr	r3, [pc, #532]	; (800758c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	08db      	lsrs	r3, r3, #3
 800737c:	f003 0303 	and.w	r3, r3, #3
 8007380:	4a83      	ldr	r2, [pc, #524]	; (8007590 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007382:	fa22 f303 	lsr.w	r3, r2, r3
 8007386:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	ee07 3a90 	vmov	s15, r3
 8007398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a0:	4b7a      	ldr	r3, [pc, #488]	; (800758c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073a8:	ee07 3a90 	vmov	s15, r3
 80073ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80073b4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007594 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80073b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073cc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80073d0:	e087      	b.n	80074e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	ee07 3a90 	vmov	s15, r3
 80073d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073dc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007598 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80073e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073e4:	4b69      	ldr	r3, [pc, #420]	; (800758c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ec:	ee07 3a90 	vmov	s15, r3
 80073f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80073f8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007594 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80073fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800740c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007410:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007414:	e065      	b.n	80074e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	ee07 3a90 	vmov	s15, r3
 800741c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007420:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800759c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007424:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007428:	4b58      	ldr	r3, [pc, #352]	; (800758c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800742a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007430:	ee07 3a90 	vmov	s15, r3
 8007434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007438:	ed97 6a03 	vldr	s12, [r7, #12]
 800743c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007594 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007440:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007444:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007448:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800744c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007454:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007458:	e043      	b.n	80074e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	ee07 3a90 	vmov	s15, r3
 8007460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007464:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800746c:	4b47      	ldr	r3, [pc, #284]	; (800758c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800746e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007474:	ee07 3a90 	vmov	s15, r3
 8007478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007480:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007594 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800748c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007498:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800749c:	e021      	b.n	80074e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	ee07 3a90 	vmov	s15, r3
 80074a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007598 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80074ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b0:	4b36      	ldr	r3, [pc, #216]	; (800758c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b8:	ee07 3a90 	vmov	s15, r3
 80074bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80074c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007594 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074e0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80074e2:	4b2a      	ldr	r3, [pc, #168]	; (800758c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	0a5b      	lsrs	r3, r3, #9
 80074e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ec:	ee07 3a90 	vmov	s15, r3
 80074f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007508:	ee17 2a90 	vmov	r2, s15
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007510:	4b1e      	ldr	r3, [pc, #120]	; (800758c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007514:	0c1b      	lsrs	r3, r3, #16
 8007516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007526:	ee37 7a87 	vadd.f32	s14, s15, s14
 800752a:	edd7 6a07 	vldr	s13, [r7, #28]
 800752e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007536:	ee17 2a90 	vmov	r2, s15
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800753e:	4b13      	ldr	r3, [pc, #76]	; (800758c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007542:	0e1b      	lsrs	r3, r3, #24
 8007544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007548:	ee07 3a90 	vmov	s15, r3
 800754c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007554:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007558:	edd7 6a07 	vldr	s13, [r7, #28]
 800755c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007564:	ee17 2a90 	vmov	r2, s15
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800756c:	e008      	b.n	8007580 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	609a      	str	r2, [r3, #8]
}
 8007580:	bf00      	nop
 8007582:	3724      	adds	r7, #36	; 0x24
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	58024400 	.word	0x58024400
 8007590:	03d09000 	.word	0x03d09000
 8007594:	46000000 	.word	0x46000000
 8007598:	4c742400 	.word	0x4c742400
 800759c:	4a742400 	.word	0x4a742400
 80075a0:	4bbebc20 	.word	0x4bbebc20

080075a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075b2:	4b53      	ldr	r3, [pc, #332]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 80075b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b6:	f003 0303 	and.w	r3, r3, #3
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d101      	bne.n	80075c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e099      	b.n	80076f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80075c2:	4b4f      	ldr	r3, [pc, #316]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a4e      	ldr	r2, [pc, #312]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 80075c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ce:	f7fa f9c7 	bl	8001960 <HAL_GetTick>
 80075d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075d4:	e008      	b.n	80075e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80075d6:	f7fa f9c3 	bl	8001960 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d901      	bls.n	80075e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e086      	b.n	80076f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075e8:	4b45      	ldr	r3, [pc, #276]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1f0      	bne.n	80075d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80075f4:	4b42      	ldr	r3, [pc, #264]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 80075f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	031b      	lsls	r3, r3, #12
 8007602:	493f      	ldr	r1, [pc, #252]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 8007604:	4313      	orrs	r3, r2
 8007606:	628b      	str	r3, [r1, #40]	; 0x28
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	3b01      	subs	r3, #1
 800760e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	3b01      	subs	r3, #1
 8007618:	025b      	lsls	r3, r3, #9
 800761a:	b29b      	uxth	r3, r3
 800761c:	431a      	orrs	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	3b01      	subs	r3, #1
 8007624:	041b      	lsls	r3, r3, #16
 8007626:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800762a:	431a      	orrs	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	3b01      	subs	r3, #1
 8007632:	061b      	lsls	r3, r3, #24
 8007634:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007638:	4931      	ldr	r1, [pc, #196]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 800763a:	4313      	orrs	r3, r2
 800763c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800763e:	4b30      	ldr	r3, [pc, #192]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 8007640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007642:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	492d      	ldr	r1, [pc, #180]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 800764c:	4313      	orrs	r3, r2
 800764e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007650:	4b2b      	ldr	r3, [pc, #172]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	f023 0220 	bic.w	r2, r3, #32
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	4928      	ldr	r1, [pc, #160]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 800765e:	4313      	orrs	r3, r2
 8007660:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007662:	4b27      	ldr	r3, [pc, #156]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	4a26      	ldr	r2, [pc, #152]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 8007668:	f023 0310 	bic.w	r3, r3, #16
 800766c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800766e:	4b24      	ldr	r3, [pc, #144]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 8007670:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007672:	4b24      	ldr	r3, [pc, #144]	; (8007704 <RCCEx_PLL2_Config+0x160>)
 8007674:	4013      	ands	r3, r2
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	69d2      	ldr	r2, [r2, #28]
 800767a:	00d2      	lsls	r2, r2, #3
 800767c:	4920      	ldr	r1, [pc, #128]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 800767e:	4313      	orrs	r3, r2
 8007680:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007682:	4b1f      	ldr	r3, [pc, #124]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	4a1e      	ldr	r2, [pc, #120]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 8007688:	f043 0310 	orr.w	r3, r3, #16
 800768c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d106      	bne.n	80076a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007694:	4b1a      	ldr	r3, [pc, #104]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007698:	4a19      	ldr	r2, [pc, #100]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 800769a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800769e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076a0:	e00f      	b.n	80076c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d106      	bne.n	80076b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076a8:	4b15      	ldr	r3, [pc, #84]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	4a14      	ldr	r2, [pc, #80]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 80076ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076b4:	e005      	b.n	80076c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076b6:	4b12      	ldr	r3, [pc, #72]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	4a11      	ldr	r2, [pc, #68]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 80076bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80076c2:	4b0f      	ldr	r3, [pc, #60]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a0e      	ldr	r2, [pc, #56]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 80076c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ce:	f7fa f947 	bl	8001960 <HAL_GetTick>
 80076d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076d4:	e008      	b.n	80076e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076d6:	f7fa f943 	bl	8001960 <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d901      	bls.n	80076e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e006      	b.n	80076f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076e8:	4b05      	ldr	r3, [pc, #20]	; (8007700 <RCCEx_PLL2_Config+0x15c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d0f0      	beq.n	80076d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	58024400 	.word	0x58024400
 8007704:	ffff0007 	.word	0xffff0007

08007708 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007716:	4b53      	ldr	r3, [pc, #332]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	2b03      	cmp	r3, #3
 8007720:	d101      	bne.n	8007726 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e099      	b.n	800785a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007726:	4b4f      	ldr	r3, [pc, #316]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a4e      	ldr	r2, [pc, #312]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 800772c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007732:	f7fa f915 	bl	8001960 <HAL_GetTick>
 8007736:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007738:	e008      	b.n	800774c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800773a:	f7fa f911 	bl	8001960 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	2b02      	cmp	r3, #2
 8007746:	d901      	bls.n	800774c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e086      	b.n	800785a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800774c:	4b45      	ldr	r3, [pc, #276]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1f0      	bne.n	800773a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007758:	4b42      	ldr	r3, [pc, #264]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 800775a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	051b      	lsls	r3, r3, #20
 8007766:	493f      	ldr	r1, [pc, #252]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 8007768:	4313      	orrs	r3, r2
 800776a:	628b      	str	r3, [r1, #40]	; 0x28
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	3b01      	subs	r3, #1
 8007772:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	3b01      	subs	r3, #1
 800777c:	025b      	lsls	r3, r3, #9
 800777e:	b29b      	uxth	r3, r3
 8007780:	431a      	orrs	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	3b01      	subs	r3, #1
 8007788:	041b      	lsls	r3, r3, #16
 800778a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800778e:	431a      	orrs	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	3b01      	subs	r3, #1
 8007796:	061b      	lsls	r3, r3, #24
 8007798:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800779c:	4931      	ldr	r1, [pc, #196]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80077a2:	4b30      	ldr	r3, [pc, #192]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	492d      	ldr	r1, [pc, #180]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80077b4:	4b2b      	ldr	r3, [pc, #172]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 80077b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	4928      	ldr	r1, [pc, #160]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80077c6:	4b27      	ldr	r3, [pc, #156]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 80077c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ca:	4a26      	ldr	r2, [pc, #152]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 80077cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077d2:	4b24      	ldr	r3, [pc, #144]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 80077d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077d6:	4b24      	ldr	r3, [pc, #144]	; (8007868 <RCCEx_PLL3_Config+0x160>)
 80077d8:	4013      	ands	r3, r2
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	69d2      	ldr	r2, [r2, #28]
 80077de:	00d2      	lsls	r2, r2, #3
 80077e0:	4920      	ldr	r1, [pc, #128]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80077e6:	4b1f      	ldr	r3, [pc, #124]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 80077e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ea:	4a1e      	ldr	r2, [pc, #120]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 80077ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d106      	bne.n	8007806 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80077f8:	4b1a      	ldr	r3, [pc, #104]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 80077fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fc:	4a19      	ldr	r2, [pc, #100]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 80077fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007802:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007804:	e00f      	b.n	8007826 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d106      	bne.n	800781a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800780c:	4b15      	ldr	r3, [pc, #84]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 800780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007810:	4a14      	ldr	r2, [pc, #80]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 8007812:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007816:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007818:	e005      	b.n	8007826 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800781a:	4b12      	ldr	r3, [pc, #72]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 800781c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781e:	4a11      	ldr	r2, [pc, #68]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 8007820:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007824:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007826:	4b0f      	ldr	r3, [pc, #60]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a0e      	ldr	r2, [pc, #56]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 800782c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007830:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007832:	f7fa f895 	bl	8001960 <HAL_GetTick>
 8007836:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007838:	e008      	b.n	800784c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800783a:	f7fa f891 	bl	8001960 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	2b02      	cmp	r3, #2
 8007846:	d901      	bls.n	800784c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e006      	b.n	800785a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800784c:	4b05      	ldr	r3, [pc, #20]	; (8007864 <RCCEx_PLL3_Config+0x15c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d0f0      	beq.n	800783a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007858:	7bfb      	ldrb	r3, [r7, #15]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	58024400 	.word	0x58024400
 8007868:	ffff0007 	.word	0xffff0007

0800786c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e0f1      	b.n	8007a62 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a78      	ldr	r2, [pc, #480]	; (8007a6c <HAL_SPI_Init+0x200>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00f      	beq.n	80078ae <HAL_SPI_Init+0x42>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a77      	ldr	r2, [pc, #476]	; (8007a70 <HAL_SPI_Init+0x204>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00a      	beq.n	80078ae <HAL_SPI_Init+0x42>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a75      	ldr	r2, [pc, #468]	; (8007a74 <HAL_SPI_Init+0x208>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d005      	beq.n	80078ae <HAL_SPI_Init+0x42>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	2b0f      	cmp	r3, #15
 80078a8:	d901      	bls.n	80078ae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e0d9      	b.n	8007a62 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f8e2 	bl	8007a78 <SPI_GetPacketSize>
 80078b4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a6c      	ldr	r2, [pc, #432]	; (8007a6c <HAL_SPI_Init+0x200>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d00c      	beq.n	80078da <HAL_SPI_Init+0x6e>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a6a      	ldr	r2, [pc, #424]	; (8007a70 <HAL_SPI_Init+0x204>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d007      	beq.n	80078da <HAL_SPI_Init+0x6e>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a69      	ldr	r2, [pc, #420]	; (8007a74 <HAL_SPI_Init+0x208>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d002      	beq.n	80078da <HAL_SPI_Init+0x6e>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b08      	cmp	r3, #8
 80078d8:	d811      	bhi.n	80078fe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078de:	4a63      	ldr	r2, [pc, #396]	; (8007a6c <HAL_SPI_Init+0x200>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d009      	beq.n	80078f8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a61      	ldr	r2, [pc, #388]	; (8007a70 <HAL_SPI_Init+0x204>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d004      	beq.n	80078f8 <HAL_SPI_Init+0x8c>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a60      	ldr	r2, [pc, #384]	; (8007a74 <HAL_SPI_Init+0x208>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d104      	bne.n	8007902 <HAL_SPI_Init+0x96>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b10      	cmp	r3, #16
 80078fc:	d901      	bls.n	8007902 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e0af      	b.n	8007a62 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d106      	bne.n	800791c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7f9 fb14 	bl	8000f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f022 0201 	bic.w	r2, r2, #1
 8007932:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800793e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007948:	d119      	bne.n	800797e <HAL_SPI_Init+0x112>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007952:	d103      	bne.n	800795c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007958:	2b00      	cmp	r3, #0
 800795a:	d008      	beq.n	800796e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10c      	bne.n	800797e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800796c:	d107      	bne.n	800797e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800797c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	69da      	ldr	r2, [r3, #28]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007986:	431a      	orrs	r2, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007990:	ea42 0103 	orr.w	r1, r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68da      	ldr	r2, [r3, #12]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	431a      	orrs	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ae:	431a      	orrs	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	431a      	orrs	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	431a      	orrs	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	431a      	orrs	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079de:	ea42 0103 	orr.w	r1, r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d113      	bne.n	8007a1e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0201 	bic.w	r2, r2, #1
 8007a2c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	40013000 	.word	0x40013000
 8007a70:	40003800 	.word	0x40003800
 8007a74:	40003c00 	.word	0x40003c00

08007a78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a84:	095b      	lsrs	r3, r3, #5
 8007a86:	3301      	adds	r3, #1
 8007a88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	3307      	adds	r3, #7
 8007a96:	08db      	lsrs	r3, r3, #3
 8007a98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b082      	sub	sp, #8
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e049      	b.n	8007b54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d106      	bne.n	8007ada <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7f9 fd45 	bl	8001564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2202      	movs	r2, #2
 8007ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f000 fbb1 	bl	8008254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e049      	b.n	8007c02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d106      	bne.n	8007b88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f841 	bl	8007c0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3304      	adds	r3, #4
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	f000 fb5a 	bl	8008254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c12:	bf00      	nop
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
	...

08007c20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d109      	bne.n	8007c44 <HAL_TIM_PWM_Start+0x24>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	bf14      	ite	ne
 8007c3c:	2301      	movne	r3, #1
 8007c3e:	2300      	moveq	r3, #0
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	e03c      	b.n	8007cbe <HAL_TIM_PWM_Start+0x9e>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d109      	bne.n	8007c5e <HAL_TIM_PWM_Start+0x3e>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	bf14      	ite	ne
 8007c56:	2301      	movne	r3, #1
 8007c58:	2300      	moveq	r3, #0
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	e02f      	b.n	8007cbe <HAL_TIM_PWM_Start+0x9e>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d109      	bne.n	8007c78 <HAL_TIM_PWM_Start+0x58>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	bf14      	ite	ne
 8007c70:	2301      	movne	r3, #1
 8007c72:	2300      	moveq	r3, #0
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	e022      	b.n	8007cbe <HAL_TIM_PWM_Start+0x9e>
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b0c      	cmp	r3, #12
 8007c7c:	d109      	bne.n	8007c92 <HAL_TIM_PWM_Start+0x72>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	bf14      	ite	ne
 8007c8a:	2301      	movne	r3, #1
 8007c8c:	2300      	moveq	r3, #0
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	e015      	b.n	8007cbe <HAL_TIM_PWM_Start+0x9e>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b10      	cmp	r3, #16
 8007c96:	d109      	bne.n	8007cac <HAL_TIM_PWM_Start+0x8c>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	bf14      	ite	ne
 8007ca4:	2301      	movne	r3, #1
 8007ca6:	2300      	moveq	r3, #0
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	e008      	b.n	8007cbe <HAL_TIM_PWM_Start+0x9e>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	bf14      	ite	ne
 8007cb8:	2301      	movne	r3, #1
 8007cba:	2300      	moveq	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e0a1      	b.n	8007e0a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d104      	bne.n	8007cd6 <HAL_TIM_PWM_Start+0xb6>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cd4:	e023      	b.n	8007d1e <HAL_TIM_PWM_Start+0xfe>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d104      	bne.n	8007ce6 <HAL_TIM_PWM_Start+0xc6>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ce4:	e01b      	b.n	8007d1e <HAL_TIM_PWM_Start+0xfe>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b08      	cmp	r3, #8
 8007cea:	d104      	bne.n	8007cf6 <HAL_TIM_PWM_Start+0xd6>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cf4:	e013      	b.n	8007d1e <HAL_TIM_PWM_Start+0xfe>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b0c      	cmp	r3, #12
 8007cfa:	d104      	bne.n	8007d06 <HAL_TIM_PWM_Start+0xe6>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d04:	e00b      	b.n	8007d1e <HAL_TIM_PWM_Start+0xfe>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b10      	cmp	r3, #16
 8007d0a:	d104      	bne.n	8007d16 <HAL_TIM_PWM_Start+0xf6>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d14:	e003      	b.n	8007d1e <HAL_TIM_PWM_Start+0xfe>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2202      	movs	r2, #2
 8007d1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2201      	movs	r2, #1
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 fea2 	bl	8008a70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a38      	ldr	r2, [pc, #224]	; (8007e14 <HAL_TIM_PWM_Start+0x1f4>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d013      	beq.n	8007d5e <HAL_TIM_PWM_Start+0x13e>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a37      	ldr	r2, [pc, #220]	; (8007e18 <HAL_TIM_PWM_Start+0x1f8>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d00e      	beq.n	8007d5e <HAL_TIM_PWM_Start+0x13e>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a35      	ldr	r2, [pc, #212]	; (8007e1c <HAL_TIM_PWM_Start+0x1fc>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d009      	beq.n	8007d5e <HAL_TIM_PWM_Start+0x13e>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a34      	ldr	r2, [pc, #208]	; (8007e20 <HAL_TIM_PWM_Start+0x200>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d004      	beq.n	8007d5e <HAL_TIM_PWM_Start+0x13e>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a32      	ldr	r2, [pc, #200]	; (8007e24 <HAL_TIM_PWM_Start+0x204>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d101      	bne.n	8007d62 <HAL_TIM_PWM_Start+0x142>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e000      	b.n	8007d64 <HAL_TIM_PWM_Start+0x144>
 8007d62:	2300      	movs	r3, #0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d007      	beq.n	8007d78 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a25      	ldr	r2, [pc, #148]	; (8007e14 <HAL_TIM_PWM_Start+0x1f4>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d022      	beq.n	8007dc8 <HAL_TIM_PWM_Start+0x1a8>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8a:	d01d      	beq.n	8007dc8 <HAL_TIM_PWM_Start+0x1a8>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a25      	ldr	r2, [pc, #148]	; (8007e28 <HAL_TIM_PWM_Start+0x208>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d018      	beq.n	8007dc8 <HAL_TIM_PWM_Start+0x1a8>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a24      	ldr	r2, [pc, #144]	; (8007e2c <HAL_TIM_PWM_Start+0x20c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d013      	beq.n	8007dc8 <HAL_TIM_PWM_Start+0x1a8>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a22      	ldr	r2, [pc, #136]	; (8007e30 <HAL_TIM_PWM_Start+0x210>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00e      	beq.n	8007dc8 <HAL_TIM_PWM_Start+0x1a8>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a1a      	ldr	r2, [pc, #104]	; (8007e18 <HAL_TIM_PWM_Start+0x1f8>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d009      	beq.n	8007dc8 <HAL_TIM_PWM_Start+0x1a8>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a1e      	ldr	r2, [pc, #120]	; (8007e34 <HAL_TIM_PWM_Start+0x214>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d004      	beq.n	8007dc8 <HAL_TIM_PWM_Start+0x1a8>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a16      	ldr	r2, [pc, #88]	; (8007e1c <HAL_TIM_PWM_Start+0x1fc>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d115      	bne.n	8007df4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689a      	ldr	r2, [r3, #8]
 8007dce:	4b1a      	ldr	r3, [pc, #104]	; (8007e38 <HAL_TIM_PWM_Start+0x218>)
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b06      	cmp	r3, #6
 8007dd8:	d015      	beq.n	8007e06 <HAL_TIM_PWM_Start+0x1e6>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de0:	d011      	beq.n	8007e06 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f042 0201 	orr.w	r2, r2, #1
 8007df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df2:	e008      	b.n	8007e06 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f042 0201 	orr.w	r2, r2, #1
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	e000      	b.n	8007e08 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	40010000 	.word	0x40010000
 8007e18:	40010400 	.word	0x40010400
 8007e1c:	40014000 	.word	0x40014000
 8007e20:	40014400 	.word	0x40014400
 8007e24:	40014800 	.word	0x40014800
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	40000800 	.word	0x40000800
 8007e30:	40000c00 	.word	0x40000c00
 8007e34:	40001800 	.word	0x40001800
 8007e38:	00010007 	.word	0x00010007

08007e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d101      	bne.n	8007e5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e56:	2302      	movs	r3, #2
 8007e58:	e0ff      	b.n	800805a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b14      	cmp	r3, #20
 8007e66:	f200 80f0 	bhi.w	800804a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e6a:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e70:	08007ec5 	.word	0x08007ec5
 8007e74:	0800804b 	.word	0x0800804b
 8007e78:	0800804b 	.word	0x0800804b
 8007e7c:	0800804b 	.word	0x0800804b
 8007e80:	08007f05 	.word	0x08007f05
 8007e84:	0800804b 	.word	0x0800804b
 8007e88:	0800804b 	.word	0x0800804b
 8007e8c:	0800804b 	.word	0x0800804b
 8007e90:	08007f47 	.word	0x08007f47
 8007e94:	0800804b 	.word	0x0800804b
 8007e98:	0800804b 	.word	0x0800804b
 8007e9c:	0800804b 	.word	0x0800804b
 8007ea0:	08007f87 	.word	0x08007f87
 8007ea4:	0800804b 	.word	0x0800804b
 8007ea8:	0800804b 	.word	0x0800804b
 8007eac:	0800804b 	.word	0x0800804b
 8007eb0:	08007fc9 	.word	0x08007fc9
 8007eb4:	0800804b 	.word	0x0800804b
 8007eb8:	0800804b 	.word	0x0800804b
 8007ebc:	0800804b 	.word	0x0800804b
 8007ec0:	08008009 	.word	0x08008009
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68b9      	ldr	r1, [r7, #8]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f000 fa5c 	bl	8008388 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	699a      	ldr	r2, [r3, #24]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f042 0208 	orr.w	r2, r2, #8
 8007ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	699a      	ldr	r2, [r3, #24]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0204 	bic.w	r2, r2, #4
 8007eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6999      	ldr	r1, [r3, #24]
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	691a      	ldr	r2, [r3, #16]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	619a      	str	r2, [r3, #24]
      break;
 8007f02:	e0a5      	b.n	8008050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68b9      	ldr	r1, [r7, #8]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 facc 	bl	80084a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	699a      	ldr	r2, [r3, #24]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	699a      	ldr	r2, [r3, #24]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6999      	ldr	r1, [r3, #24]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	021a      	lsls	r2, r3, #8
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	430a      	orrs	r2, r1
 8007f42:	619a      	str	r2, [r3, #24]
      break;
 8007f44:	e084      	b.n	8008050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68b9      	ldr	r1, [r7, #8]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 fb35 	bl	80085bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69da      	ldr	r2, [r3, #28]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f042 0208 	orr.w	r2, r2, #8
 8007f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	69da      	ldr	r2, [r3, #28]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f022 0204 	bic.w	r2, r2, #4
 8007f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	69d9      	ldr	r1, [r3, #28]
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	691a      	ldr	r2, [r3, #16]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	61da      	str	r2, [r3, #28]
      break;
 8007f84:	e064      	b.n	8008050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 fb9d 	bl	80086cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	69da      	ldr	r2, [r3, #28]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	69da      	ldr	r2, [r3, #28]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69d9      	ldr	r1, [r3, #28]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	021a      	lsls	r2, r3, #8
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	61da      	str	r2, [r3, #28]
      break;
 8007fc6:	e043      	b.n	8008050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 fbe6 	bl	80087a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f042 0208 	orr.w	r2, r2, #8
 8007fe2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f022 0204 	bic.w	r2, r2, #4
 8007ff2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	691a      	ldr	r2, [r3, #16]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008006:	e023      	b.n	8008050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	4618      	mov	r0, r3
 8008010:	f000 fc2a 	bl	8008868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008022:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008032:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	021a      	lsls	r2, r3, #8
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	430a      	orrs	r2, r1
 8008046:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008048:	e002      	b.n	8008050 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	75fb      	strb	r3, [r7, #23]
      break;
 800804e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008058:	7dfb      	ldrb	r3, [r7, #23]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3718      	adds	r7, #24
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop

08008064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008078:	2b01      	cmp	r3, #1
 800807a:	d101      	bne.n	8008080 <HAL_TIM_ConfigClockSource+0x1c>
 800807c:	2302      	movs	r3, #2
 800807e:	e0dc      	b.n	800823a <HAL_TIM_ConfigClockSource+0x1d6>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2202      	movs	r2, #2
 800808c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	4b6a      	ldr	r3, [pc, #424]	; (8008244 <HAL_TIM_ConfigClockSource+0x1e0>)
 800809c:	4013      	ands	r3, r2
 800809e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a64      	ldr	r2, [pc, #400]	; (8008248 <HAL_TIM_ConfigClockSource+0x1e4>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	f000 80a9 	beq.w	800820e <HAL_TIM_ConfigClockSource+0x1aa>
 80080bc:	4a62      	ldr	r2, [pc, #392]	; (8008248 <HAL_TIM_ConfigClockSource+0x1e4>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	f200 80ae 	bhi.w	8008220 <HAL_TIM_ConfigClockSource+0x1bc>
 80080c4:	4a61      	ldr	r2, [pc, #388]	; (800824c <HAL_TIM_ConfigClockSource+0x1e8>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	f000 80a1 	beq.w	800820e <HAL_TIM_ConfigClockSource+0x1aa>
 80080cc:	4a5f      	ldr	r2, [pc, #380]	; (800824c <HAL_TIM_ConfigClockSource+0x1e8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	f200 80a6 	bhi.w	8008220 <HAL_TIM_ConfigClockSource+0x1bc>
 80080d4:	4a5e      	ldr	r2, [pc, #376]	; (8008250 <HAL_TIM_ConfigClockSource+0x1ec>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	f000 8099 	beq.w	800820e <HAL_TIM_ConfigClockSource+0x1aa>
 80080dc:	4a5c      	ldr	r2, [pc, #368]	; (8008250 <HAL_TIM_ConfigClockSource+0x1ec>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	f200 809e 	bhi.w	8008220 <HAL_TIM_ConfigClockSource+0x1bc>
 80080e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80080e8:	f000 8091 	beq.w	800820e <HAL_TIM_ConfigClockSource+0x1aa>
 80080ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80080f0:	f200 8096 	bhi.w	8008220 <HAL_TIM_ConfigClockSource+0x1bc>
 80080f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080f8:	f000 8089 	beq.w	800820e <HAL_TIM_ConfigClockSource+0x1aa>
 80080fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008100:	f200 808e 	bhi.w	8008220 <HAL_TIM_ConfigClockSource+0x1bc>
 8008104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008108:	d03e      	beq.n	8008188 <HAL_TIM_ConfigClockSource+0x124>
 800810a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800810e:	f200 8087 	bhi.w	8008220 <HAL_TIM_ConfigClockSource+0x1bc>
 8008112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008116:	f000 8086 	beq.w	8008226 <HAL_TIM_ConfigClockSource+0x1c2>
 800811a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800811e:	d87f      	bhi.n	8008220 <HAL_TIM_ConfigClockSource+0x1bc>
 8008120:	2b70      	cmp	r3, #112	; 0x70
 8008122:	d01a      	beq.n	800815a <HAL_TIM_ConfigClockSource+0xf6>
 8008124:	2b70      	cmp	r3, #112	; 0x70
 8008126:	d87b      	bhi.n	8008220 <HAL_TIM_ConfigClockSource+0x1bc>
 8008128:	2b60      	cmp	r3, #96	; 0x60
 800812a:	d050      	beq.n	80081ce <HAL_TIM_ConfigClockSource+0x16a>
 800812c:	2b60      	cmp	r3, #96	; 0x60
 800812e:	d877      	bhi.n	8008220 <HAL_TIM_ConfigClockSource+0x1bc>
 8008130:	2b50      	cmp	r3, #80	; 0x50
 8008132:	d03c      	beq.n	80081ae <HAL_TIM_ConfigClockSource+0x14a>
 8008134:	2b50      	cmp	r3, #80	; 0x50
 8008136:	d873      	bhi.n	8008220 <HAL_TIM_ConfigClockSource+0x1bc>
 8008138:	2b40      	cmp	r3, #64	; 0x40
 800813a:	d058      	beq.n	80081ee <HAL_TIM_ConfigClockSource+0x18a>
 800813c:	2b40      	cmp	r3, #64	; 0x40
 800813e:	d86f      	bhi.n	8008220 <HAL_TIM_ConfigClockSource+0x1bc>
 8008140:	2b30      	cmp	r3, #48	; 0x30
 8008142:	d064      	beq.n	800820e <HAL_TIM_ConfigClockSource+0x1aa>
 8008144:	2b30      	cmp	r3, #48	; 0x30
 8008146:	d86b      	bhi.n	8008220 <HAL_TIM_ConfigClockSource+0x1bc>
 8008148:	2b20      	cmp	r3, #32
 800814a:	d060      	beq.n	800820e <HAL_TIM_ConfigClockSource+0x1aa>
 800814c:	2b20      	cmp	r3, #32
 800814e:	d867      	bhi.n	8008220 <HAL_TIM_ConfigClockSource+0x1bc>
 8008150:	2b00      	cmp	r3, #0
 8008152:	d05c      	beq.n	800820e <HAL_TIM_ConfigClockSource+0x1aa>
 8008154:	2b10      	cmp	r3, #16
 8008156:	d05a      	beq.n	800820e <HAL_TIM_ConfigClockSource+0x1aa>
 8008158:	e062      	b.n	8008220 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6818      	ldr	r0, [r3, #0]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	6899      	ldr	r1, [r3, #8]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	f000 fc61 	bl	8008a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800817c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	609a      	str	r2, [r3, #8]
      break;
 8008186:	e04f      	b.n	8008228 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6818      	ldr	r0, [r3, #0]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	6899      	ldr	r1, [r3, #8]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	f000 fc4a 	bl	8008a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689a      	ldr	r2, [r3, #8]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081aa:	609a      	str	r2, [r3, #8]
      break;
 80081ac:	e03c      	b.n	8008228 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6818      	ldr	r0, [r3, #0]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	6859      	ldr	r1, [r3, #4]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	461a      	mov	r2, r3
 80081bc:	f000 fbba 	bl	8008934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2150      	movs	r1, #80	; 0x50
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 fc14 	bl	80089f4 <TIM_ITRx_SetConfig>
      break;
 80081cc:	e02c      	b.n	8008228 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	6859      	ldr	r1, [r3, #4]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	461a      	mov	r2, r3
 80081dc:	f000 fbd9 	bl	8008992 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2160      	movs	r1, #96	; 0x60
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fc04 	bl	80089f4 <TIM_ITRx_SetConfig>
      break;
 80081ec:	e01c      	b.n	8008228 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6818      	ldr	r0, [r3, #0]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	6859      	ldr	r1, [r3, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	461a      	mov	r2, r3
 80081fc:	f000 fb9a 	bl	8008934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2140      	movs	r1, #64	; 0x40
 8008206:	4618      	mov	r0, r3
 8008208:	f000 fbf4 	bl	80089f4 <TIM_ITRx_SetConfig>
      break;
 800820c:	e00c      	b.n	8008228 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4619      	mov	r1, r3
 8008218:	4610      	mov	r0, r2
 800821a:	f000 fbeb 	bl	80089f4 <TIM_ITRx_SetConfig>
      break;
 800821e:	e003      	b.n	8008228 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	73fb      	strb	r3, [r7, #15]
      break;
 8008224:	e000      	b.n	8008228 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008226:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008238:	7bfb      	ldrb	r3, [r7, #15]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	ffceff88 	.word	0xffceff88
 8008248:	00100040 	.word	0x00100040
 800824c:	00100030 	.word	0x00100030
 8008250:	00100020 	.word	0x00100020

08008254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a40      	ldr	r2, [pc, #256]	; (8008368 <TIM_Base_SetConfig+0x114>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d013      	beq.n	8008294 <TIM_Base_SetConfig+0x40>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008272:	d00f      	beq.n	8008294 <TIM_Base_SetConfig+0x40>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a3d      	ldr	r2, [pc, #244]	; (800836c <TIM_Base_SetConfig+0x118>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d00b      	beq.n	8008294 <TIM_Base_SetConfig+0x40>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a3c      	ldr	r2, [pc, #240]	; (8008370 <TIM_Base_SetConfig+0x11c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d007      	beq.n	8008294 <TIM_Base_SetConfig+0x40>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a3b      	ldr	r2, [pc, #236]	; (8008374 <TIM_Base_SetConfig+0x120>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d003      	beq.n	8008294 <TIM_Base_SetConfig+0x40>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a3a      	ldr	r2, [pc, #232]	; (8008378 <TIM_Base_SetConfig+0x124>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d108      	bne.n	80082a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a2f      	ldr	r2, [pc, #188]	; (8008368 <TIM_Base_SetConfig+0x114>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d01f      	beq.n	80082ee <TIM_Base_SetConfig+0x9a>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b4:	d01b      	beq.n	80082ee <TIM_Base_SetConfig+0x9a>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a2c      	ldr	r2, [pc, #176]	; (800836c <TIM_Base_SetConfig+0x118>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d017      	beq.n	80082ee <TIM_Base_SetConfig+0x9a>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a2b      	ldr	r2, [pc, #172]	; (8008370 <TIM_Base_SetConfig+0x11c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d013      	beq.n	80082ee <TIM_Base_SetConfig+0x9a>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a2a      	ldr	r2, [pc, #168]	; (8008374 <TIM_Base_SetConfig+0x120>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d00f      	beq.n	80082ee <TIM_Base_SetConfig+0x9a>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a29      	ldr	r2, [pc, #164]	; (8008378 <TIM_Base_SetConfig+0x124>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d00b      	beq.n	80082ee <TIM_Base_SetConfig+0x9a>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a28      	ldr	r2, [pc, #160]	; (800837c <TIM_Base_SetConfig+0x128>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d007      	beq.n	80082ee <TIM_Base_SetConfig+0x9a>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a27      	ldr	r2, [pc, #156]	; (8008380 <TIM_Base_SetConfig+0x12c>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d003      	beq.n	80082ee <TIM_Base_SetConfig+0x9a>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a26      	ldr	r2, [pc, #152]	; (8008384 <TIM_Base_SetConfig+0x130>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d108      	bne.n	8008300 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	4313      	orrs	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a10      	ldr	r2, [pc, #64]	; (8008368 <TIM_Base_SetConfig+0x114>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d00f      	beq.n	800834c <TIM_Base_SetConfig+0xf8>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a12      	ldr	r2, [pc, #72]	; (8008378 <TIM_Base_SetConfig+0x124>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d00b      	beq.n	800834c <TIM_Base_SetConfig+0xf8>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a11      	ldr	r2, [pc, #68]	; (800837c <TIM_Base_SetConfig+0x128>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d007      	beq.n	800834c <TIM_Base_SetConfig+0xf8>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a10      	ldr	r2, [pc, #64]	; (8008380 <TIM_Base_SetConfig+0x12c>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d003      	beq.n	800834c <TIM_Base_SetConfig+0xf8>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a0f      	ldr	r2, [pc, #60]	; (8008384 <TIM_Base_SetConfig+0x130>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d103      	bne.n	8008354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	691a      	ldr	r2, [r3, #16]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	615a      	str	r2, [r3, #20]
}
 800835a:	bf00      	nop
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	40010000 	.word	0x40010000
 800836c:	40000400 	.word	0x40000400
 8008370:	40000800 	.word	0x40000800
 8008374:	40000c00 	.word	0x40000c00
 8008378:	40010400 	.word	0x40010400
 800837c:	40014000 	.word	0x40014000
 8008380:	40014400 	.word	0x40014400
 8008384:	40014800 	.word	0x40014800

08008388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	f023 0201 	bic.w	r2, r3, #1
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	4b37      	ldr	r3, [pc, #220]	; (8008490 <TIM_OC1_SetConfig+0x108>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0303 	bic.w	r3, r3, #3
 80083be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f023 0302 	bic.w	r3, r3, #2
 80083d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	4313      	orrs	r3, r2
 80083da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a2d      	ldr	r2, [pc, #180]	; (8008494 <TIM_OC1_SetConfig+0x10c>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d00f      	beq.n	8008404 <TIM_OC1_SetConfig+0x7c>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a2c      	ldr	r2, [pc, #176]	; (8008498 <TIM_OC1_SetConfig+0x110>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d00b      	beq.n	8008404 <TIM_OC1_SetConfig+0x7c>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a2b      	ldr	r2, [pc, #172]	; (800849c <TIM_OC1_SetConfig+0x114>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d007      	beq.n	8008404 <TIM_OC1_SetConfig+0x7c>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a2a      	ldr	r2, [pc, #168]	; (80084a0 <TIM_OC1_SetConfig+0x118>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d003      	beq.n	8008404 <TIM_OC1_SetConfig+0x7c>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a29      	ldr	r2, [pc, #164]	; (80084a4 <TIM_OC1_SetConfig+0x11c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d10c      	bne.n	800841e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	f023 0308 	bic.w	r3, r3, #8
 800840a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	4313      	orrs	r3, r2
 8008414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f023 0304 	bic.w	r3, r3, #4
 800841c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a1c      	ldr	r2, [pc, #112]	; (8008494 <TIM_OC1_SetConfig+0x10c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d00f      	beq.n	8008446 <TIM_OC1_SetConfig+0xbe>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a1b      	ldr	r2, [pc, #108]	; (8008498 <TIM_OC1_SetConfig+0x110>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d00b      	beq.n	8008446 <TIM_OC1_SetConfig+0xbe>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a1a      	ldr	r2, [pc, #104]	; (800849c <TIM_OC1_SetConfig+0x114>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d007      	beq.n	8008446 <TIM_OC1_SetConfig+0xbe>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a19      	ldr	r2, [pc, #100]	; (80084a0 <TIM_OC1_SetConfig+0x118>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d003      	beq.n	8008446 <TIM_OC1_SetConfig+0xbe>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a18      	ldr	r2, [pc, #96]	; (80084a4 <TIM_OC1_SetConfig+0x11c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d111      	bne.n	800846a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800844c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	4313      	orrs	r3, r2
 800845e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	4313      	orrs	r3, r2
 8008468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	621a      	str	r2, [r3, #32]
}
 8008484:	bf00      	nop
 8008486:	371c      	adds	r7, #28
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	fffeff8f 	.word	0xfffeff8f
 8008494:	40010000 	.word	0x40010000
 8008498:	40010400 	.word	0x40010400
 800849c:	40014000 	.word	0x40014000
 80084a0:	40014400 	.word	0x40014400
 80084a4:	40014800 	.word	0x40014800

080084a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b087      	sub	sp, #28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	f023 0210 	bic.w	r2, r3, #16
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	4b34      	ldr	r3, [pc, #208]	; (80085a4 <TIM_OC2_SetConfig+0xfc>)
 80084d4:	4013      	ands	r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	021b      	lsls	r3, r3, #8
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	f023 0320 	bic.w	r3, r3, #32
 80084f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a29      	ldr	r2, [pc, #164]	; (80085a8 <TIM_OC2_SetConfig+0x100>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d003      	beq.n	8008510 <TIM_OC2_SetConfig+0x68>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a28      	ldr	r2, [pc, #160]	; (80085ac <TIM_OC2_SetConfig+0x104>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d10d      	bne.n	800852c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	011b      	lsls	r3, r3, #4
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	4313      	orrs	r3, r2
 8008522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800852a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a1e      	ldr	r2, [pc, #120]	; (80085a8 <TIM_OC2_SetConfig+0x100>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d00f      	beq.n	8008554 <TIM_OC2_SetConfig+0xac>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a1d      	ldr	r2, [pc, #116]	; (80085ac <TIM_OC2_SetConfig+0x104>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d00b      	beq.n	8008554 <TIM_OC2_SetConfig+0xac>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a1c      	ldr	r2, [pc, #112]	; (80085b0 <TIM_OC2_SetConfig+0x108>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d007      	beq.n	8008554 <TIM_OC2_SetConfig+0xac>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a1b      	ldr	r2, [pc, #108]	; (80085b4 <TIM_OC2_SetConfig+0x10c>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d003      	beq.n	8008554 <TIM_OC2_SetConfig+0xac>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a1a      	ldr	r2, [pc, #104]	; (80085b8 <TIM_OC2_SetConfig+0x110>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d113      	bne.n	800857c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800855a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	4313      	orrs	r3, r2
 800856e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	4313      	orrs	r3, r2
 800857a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	621a      	str	r2, [r3, #32]
}
 8008596:	bf00      	nop
 8008598:	371c      	adds	r7, #28
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	feff8fff 	.word	0xfeff8fff
 80085a8:	40010000 	.word	0x40010000
 80085ac:	40010400 	.word	0x40010400
 80085b0:	40014000 	.word	0x40014000
 80085b4:	40014400 	.word	0x40014400
 80085b8:	40014800 	.word	0x40014800

080085bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	4b33      	ldr	r3, [pc, #204]	; (80086b4 <TIM_OC3_SetConfig+0xf8>)
 80085e8:	4013      	ands	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f023 0303 	bic.w	r3, r3, #3
 80085f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	021b      	lsls	r3, r3, #8
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	4313      	orrs	r3, r2
 8008610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a28      	ldr	r2, [pc, #160]	; (80086b8 <TIM_OC3_SetConfig+0xfc>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d003      	beq.n	8008622 <TIM_OC3_SetConfig+0x66>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a27      	ldr	r2, [pc, #156]	; (80086bc <TIM_OC3_SetConfig+0x100>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d10d      	bne.n	800863e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	021b      	lsls	r3, r3, #8
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	4313      	orrs	r3, r2
 8008634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800863c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a1d      	ldr	r2, [pc, #116]	; (80086b8 <TIM_OC3_SetConfig+0xfc>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d00f      	beq.n	8008666 <TIM_OC3_SetConfig+0xaa>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a1c      	ldr	r2, [pc, #112]	; (80086bc <TIM_OC3_SetConfig+0x100>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d00b      	beq.n	8008666 <TIM_OC3_SetConfig+0xaa>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a1b      	ldr	r2, [pc, #108]	; (80086c0 <TIM_OC3_SetConfig+0x104>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d007      	beq.n	8008666 <TIM_OC3_SetConfig+0xaa>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a1a      	ldr	r2, [pc, #104]	; (80086c4 <TIM_OC3_SetConfig+0x108>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d003      	beq.n	8008666 <TIM_OC3_SetConfig+0xaa>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a19      	ldr	r2, [pc, #100]	; (80086c8 <TIM_OC3_SetConfig+0x10c>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d113      	bne.n	800868e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800866c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	011b      	lsls	r3, r3, #4
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	4313      	orrs	r3, r2
 8008680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	011b      	lsls	r3, r3, #4
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	4313      	orrs	r3, r2
 800868c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	621a      	str	r2, [r3, #32]
}
 80086a8:	bf00      	nop
 80086aa:	371c      	adds	r7, #28
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	fffeff8f 	.word	0xfffeff8f
 80086b8:	40010000 	.word	0x40010000
 80086bc:	40010400 	.word	0x40010400
 80086c0:	40014000 	.word	0x40014000
 80086c4:	40014400 	.word	0x40014400
 80086c8:	40014800 	.word	0x40014800

080086cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	4b24      	ldr	r3, [pc, #144]	; (8008788 <TIM_OC4_SetConfig+0xbc>)
 80086f8:	4013      	ands	r3, r2
 80086fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	021b      	lsls	r3, r3, #8
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	4313      	orrs	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	031b      	lsls	r3, r3, #12
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	4313      	orrs	r3, r2
 8008722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a19      	ldr	r2, [pc, #100]	; (800878c <TIM_OC4_SetConfig+0xc0>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d00f      	beq.n	800874c <TIM_OC4_SetConfig+0x80>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a18      	ldr	r2, [pc, #96]	; (8008790 <TIM_OC4_SetConfig+0xc4>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00b      	beq.n	800874c <TIM_OC4_SetConfig+0x80>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a17      	ldr	r2, [pc, #92]	; (8008794 <TIM_OC4_SetConfig+0xc8>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d007      	beq.n	800874c <TIM_OC4_SetConfig+0x80>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a16      	ldr	r2, [pc, #88]	; (8008798 <TIM_OC4_SetConfig+0xcc>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d003      	beq.n	800874c <TIM_OC4_SetConfig+0x80>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a15      	ldr	r2, [pc, #84]	; (800879c <TIM_OC4_SetConfig+0xd0>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d109      	bne.n	8008760 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008752:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	019b      	lsls	r3, r3, #6
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	4313      	orrs	r3, r2
 800875e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	621a      	str	r2, [r3, #32]
}
 800877a:	bf00      	nop
 800877c:	371c      	adds	r7, #28
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	feff8fff 	.word	0xfeff8fff
 800878c:	40010000 	.word	0x40010000
 8008790:	40010400 	.word	0x40010400
 8008794:	40014000 	.word	0x40014000
 8008798:	40014400 	.word	0x40014400
 800879c:	40014800 	.word	0x40014800

080087a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	4b21      	ldr	r3, [pc, #132]	; (8008850 <TIM_OC5_SetConfig+0xb0>)
 80087cc:	4013      	ands	r3, r2
 80087ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80087e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	041b      	lsls	r3, r3, #16
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a18      	ldr	r2, [pc, #96]	; (8008854 <TIM_OC5_SetConfig+0xb4>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d00f      	beq.n	8008816 <TIM_OC5_SetConfig+0x76>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a17      	ldr	r2, [pc, #92]	; (8008858 <TIM_OC5_SetConfig+0xb8>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d00b      	beq.n	8008816 <TIM_OC5_SetConfig+0x76>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a16      	ldr	r2, [pc, #88]	; (800885c <TIM_OC5_SetConfig+0xbc>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d007      	beq.n	8008816 <TIM_OC5_SetConfig+0x76>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a15      	ldr	r2, [pc, #84]	; (8008860 <TIM_OC5_SetConfig+0xc0>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d003      	beq.n	8008816 <TIM_OC5_SetConfig+0x76>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a14      	ldr	r2, [pc, #80]	; (8008864 <TIM_OC5_SetConfig+0xc4>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d109      	bne.n	800882a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800881c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	021b      	lsls	r3, r3, #8
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	621a      	str	r2, [r3, #32]
}
 8008844:	bf00      	nop
 8008846:	371c      	adds	r7, #28
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	fffeff8f 	.word	0xfffeff8f
 8008854:	40010000 	.word	0x40010000
 8008858:	40010400 	.word	0x40010400
 800885c:	40014000 	.word	0x40014000
 8008860:	40014400 	.word	0x40014400
 8008864:	40014800 	.word	0x40014800

08008868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	4b22      	ldr	r3, [pc, #136]	; (800891c <TIM_OC6_SetConfig+0xb4>)
 8008894:	4013      	ands	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	021b      	lsls	r3, r3, #8
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	051b      	lsls	r3, r3, #20
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a19      	ldr	r2, [pc, #100]	; (8008920 <TIM_OC6_SetConfig+0xb8>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d00f      	beq.n	80088e0 <TIM_OC6_SetConfig+0x78>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a18      	ldr	r2, [pc, #96]	; (8008924 <TIM_OC6_SetConfig+0xbc>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d00b      	beq.n	80088e0 <TIM_OC6_SetConfig+0x78>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a17      	ldr	r2, [pc, #92]	; (8008928 <TIM_OC6_SetConfig+0xc0>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d007      	beq.n	80088e0 <TIM_OC6_SetConfig+0x78>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a16      	ldr	r2, [pc, #88]	; (800892c <TIM_OC6_SetConfig+0xc4>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d003      	beq.n	80088e0 <TIM_OC6_SetConfig+0x78>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a15      	ldr	r2, [pc, #84]	; (8008930 <TIM_OC6_SetConfig+0xc8>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d109      	bne.n	80088f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	029b      	lsls	r3, r3, #10
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	621a      	str	r2, [r3, #32]
}
 800890e:	bf00      	nop
 8008910:	371c      	adds	r7, #28
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	feff8fff 	.word	0xfeff8fff
 8008920:	40010000 	.word	0x40010000
 8008924:	40010400 	.word	0x40010400
 8008928:	40014000 	.word	0x40014000
 800892c:	40014400 	.word	0x40014400
 8008930:	40014800 	.word	0x40014800

08008934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	f023 0201 	bic.w	r2, r3, #1
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800895e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	011b      	lsls	r3, r3, #4
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	4313      	orrs	r3, r2
 8008968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f023 030a 	bic.w	r3, r3, #10
 8008970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	4313      	orrs	r3, r2
 8008978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	621a      	str	r2, [r3, #32]
}
 8008986:	bf00      	nop
 8008988:	371c      	adds	r7, #28
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008992:	b480      	push	{r7}
 8008994:	b087      	sub	sp, #28
 8008996:	af00      	add	r7, sp, #0
 8008998:	60f8      	str	r0, [r7, #12]
 800899a:	60b9      	str	r1, [r7, #8]
 800899c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	f023 0210 	bic.w	r2, r3, #16
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	031b      	lsls	r3, r3, #12
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	621a      	str	r2, [r3, #32]
}
 80089e6:	bf00      	nop
 80089e8:	371c      	adds	r7, #28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
	...

080089f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4b09      	ldr	r3, [pc, #36]	; (8008a2c <TIM_ITRx_SetConfig+0x38>)
 8008a08:	4013      	ands	r3, r2
 8008a0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	f043 0307 	orr.w	r3, r3, #7
 8008a16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	609a      	str	r2, [r3, #8]
}
 8008a1e:	bf00      	nop
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	ffcfff8f 	.word	0xffcfff8f

08008a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
 8008a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	021a      	lsls	r2, r3, #8
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	431a      	orrs	r2, r3
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	609a      	str	r2, [r3, #8]
}
 8008a64:	bf00      	nop
 8008a66:	371c      	adds	r7, #28
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b087      	sub	sp, #28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f003 031f 	and.w	r3, r3, #31
 8008a82:	2201      	movs	r2, #1
 8008a84:	fa02 f303 	lsl.w	r3, r2, r3
 8008a88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6a1a      	ldr	r2, [r3, #32]
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	43db      	mvns	r3, r3
 8008a92:	401a      	ands	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6a1a      	ldr	r2, [r3, #32]
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	f003 031f 	and.w	r3, r3, #31
 8008aa2:	6879      	ldr	r1, [r7, #4]
 8008aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	621a      	str	r2, [r3, #32]
}
 8008aae:	bf00      	nop
 8008ab0:	371c      	adds	r7, #28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
	...

08008abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d101      	bne.n	8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	e06d      	b.n	8008bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a30      	ldr	r2, [pc, #192]	; (8008bbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d004      	beq.n	8008b08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a2f      	ldr	r2, [pc, #188]	; (8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d108      	bne.n	8008b1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a20      	ldr	r2, [pc, #128]	; (8008bbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d022      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b46:	d01d      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a1d      	ldr	r2, [pc, #116]	; (8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d018      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a1c      	ldr	r2, [pc, #112]	; (8008bc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d013      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a1a      	ldr	r2, [pc, #104]	; (8008bcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d00e      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a15      	ldr	r2, [pc, #84]	; (8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d009      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a16      	ldr	r2, [pc, #88]	; (8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d004      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a15      	ldr	r2, [pc, #84]	; (8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d10c      	bne.n	8008b9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	40010000 	.word	0x40010000
 8008bc0:	40010400 	.word	0x40010400
 8008bc4:	40000400 	.word	0x40000400
 8008bc8:	40000800 	.word	0x40000800
 8008bcc:	40000c00 	.word	0x40000c00
 8008bd0:	40001800 	.word	0x40001800
 8008bd4:	40014000 	.word	0x40014000

08008bd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d101      	bne.n	8008bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	e065      	b.n	8008cc0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	695b      	ldr	r3, [r3, #20]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	041b      	lsls	r3, r3, #16
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a16      	ldr	r2, [pc, #88]	; (8008ccc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d004      	beq.n	8008c82 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a14      	ldr	r2, [pc, #80]	; (8008cd0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d115      	bne.n	8008cae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8c:	051b      	lsls	r3, r3, #20
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	69db      	ldr	r3, [r3, #28]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	40010000 	.word	0x40010000
 8008cd0:	40010400 	.word	0x40010400

08008cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d101      	bne.n	8008ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e042      	b.n	8008d6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d106      	bne.n	8008cfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f7f8 fd1d 	bl	8001738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2224      	movs	r2, #36	; 0x24
 8008d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f022 0201 	bic.w	r2, r2, #1
 8008d14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f8c2 	bl	8008ea0 <UART_SetConfig>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d101      	bne.n	8008d26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e022      	b.n	8008d6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fe1e 	bl	8009970 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689a      	ldr	r2, [r3, #8]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f042 0201 	orr.w	r2, r2, #1
 8008d62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fea5 	bl	8009ab4 <UART_CheckIdleState>
 8008d6a:	4603      	mov	r3, r0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08a      	sub	sp, #40	; 0x28
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	603b      	str	r3, [r7, #0]
 8008d80:	4613      	mov	r3, r2
 8008d82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d8a:	2b20      	cmp	r3, #32
 8008d8c:	f040 8083 	bne.w	8008e96 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <HAL_UART_Transmit+0x28>
 8008d96:	88fb      	ldrh	r3, [r7, #6]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e07b      	b.n	8008e98 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d101      	bne.n	8008dae <HAL_UART_Transmit+0x3a>
 8008daa:	2302      	movs	r3, #2
 8008dac:	e074      	b.n	8008e98 <HAL_UART_Transmit+0x124>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2221      	movs	r2, #33	; 0x21
 8008dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dc6:	f7f8 fdcb 	bl	8001960 <HAL_GetTick>
 8008dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	88fa      	ldrh	r2, [r7, #6]
 8008dd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	88fa      	ldrh	r2, [r7, #6]
 8008dd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de4:	d108      	bne.n	8008df8 <HAL_UART_Transmit+0x84>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d104      	bne.n	8008df8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008dee:	2300      	movs	r3, #0
 8008df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	61bb      	str	r3, [r7, #24]
 8008df6:	e003      	b.n	8008e00 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008e08:	e02c      	b.n	8008e64 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	2200      	movs	r2, #0
 8008e12:	2180      	movs	r1, #128	; 0x80
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f000 fe98 	bl	8009b4a <UART_WaitOnFlagUntilTimeout>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e039      	b.n	8008e98 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d10b      	bne.n	8008e42 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	3302      	adds	r3, #2
 8008e3e:	61bb      	str	r3, [r7, #24]
 8008e40:	e007      	b.n	8008e52 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1cc      	bne.n	8008e0a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	2200      	movs	r2, #0
 8008e78:	2140      	movs	r1, #64	; 0x40
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f000 fe65 	bl	8009b4a <UART_WaitOnFlagUntilTimeout>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d001      	beq.n	8008e8a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e006      	b.n	8008e98 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	e000      	b.n	8008e98 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008e96:	2302      	movs	r3, #2
  }
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3720      	adds	r7, #32
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ea4:	b092      	sub	sp, #72	; 0x48
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	689a      	ldr	r2, [r3, #8]
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	69db      	ldr	r3, [r3, #28]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	4bbe      	ldr	r3, [pc, #760]	; (80091c8 <UART_SetConfig+0x328>)
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	6812      	ldr	r2, [r2, #0]
 8008ed6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ed8:	430b      	orrs	r3, r1
 8008eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	68da      	ldr	r2, [r3, #12]
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4ab3      	ldr	r2, [pc, #716]	; (80091cc <UART_SetConfig+0x32c>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d004      	beq.n	8008f0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689a      	ldr	r2, [r3, #8]
 8008f12:	4baf      	ldr	r3, [pc, #700]	; (80091d0 <UART_SetConfig+0x330>)
 8008f14:	4013      	ands	r3, r2
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	6812      	ldr	r2, [r2, #0]
 8008f1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f1c:	430b      	orrs	r3, r1
 8008f1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f26:	f023 010f 	bic.w	r1, r3, #15
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4aa6      	ldr	r2, [pc, #664]	; (80091d4 <UART_SetConfig+0x334>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d177      	bne.n	8009030 <UART_SetConfig+0x190>
 8008f40:	4ba5      	ldr	r3, [pc, #660]	; (80091d8 <UART_SetConfig+0x338>)
 8008f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f48:	2b28      	cmp	r3, #40	; 0x28
 8008f4a:	d86d      	bhi.n	8009028 <UART_SetConfig+0x188>
 8008f4c:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <UART_SetConfig+0xb4>)
 8008f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f52:	bf00      	nop
 8008f54:	08008ff9 	.word	0x08008ff9
 8008f58:	08009029 	.word	0x08009029
 8008f5c:	08009029 	.word	0x08009029
 8008f60:	08009029 	.word	0x08009029
 8008f64:	08009029 	.word	0x08009029
 8008f68:	08009029 	.word	0x08009029
 8008f6c:	08009029 	.word	0x08009029
 8008f70:	08009029 	.word	0x08009029
 8008f74:	08009001 	.word	0x08009001
 8008f78:	08009029 	.word	0x08009029
 8008f7c:	08009029 	.word	0x08009029
 8008f80:	08009029 	.word	0x08009029
 8008f84:	08009029 	.word	0x08009029
 8008f88:	08009029 	.word	0x08009029
 8008f8c:	08009029 	.word	0x08009029
 8008f90:	08009029 	.word	0x08009029
 8008f94:	08009009 	.word	0x08009009
 8008f98:	08009029 	.word	0x08009029
 8008f9c:	08009029 	.word	0x08009029
 8008fa0:	08009029 	.word	0x08009029
 8008fa4:	08009029 	.word	0x08009029
 8008fa8:	08009029 	.word	0x08009029
 8008fac:	08009029 	.word	0x08009029
 8008fb0:	08009029 	.word	0x08009029
 8008fb4:	08009011 	.word	0x08009011
 8008fb8:	08009029 	.word	0x08009029
 8008fbc:	08009029 	.word	0x08009029
 8008fc0:	08009029 	.word	0x08009029
 8008fc4:	08009029 	.word	0x08009029
 8008fc8:	08009029 	.word	0x08009029
 8008fcc:	08009029 	.word	0x08009029
 8008fd0:	08009029 	.word	0x08009029
 8008fd4:	08009019 	.word	0x08009019
 8008fd8:	08009029 	.word	0x08009029
 8008fdc:	08009029 	.word	0x08009029
 8008fe0:	08009029 	.word	0x08009029
 8008fe4:	08009029 	.word	0x08009029
 8008fe8:	08009029 	.word	0x08009029
 8008fec:	08009029 	.word	0x08009029
 8008ff0:	08009029 	.word	0x08009029
 8008ff4:	08009021 	.word	0x08009021
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ffe:	e222      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009000:	2304      	movs	r3, #4
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009006:	e21e      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009008:	2308      	movs	r3, #8
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800900e:	e21a      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009010:	2310      	movs	r3, #16
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009016:	e216      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009018:	2320      	movs	r3, #32
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800901e:	e212      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009020:	2340      	movs	r3, #64	; 0x40
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009026:	e20e      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009028:	2380      	movs	r3, #128	; 0x80
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800902e:	e20a      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a69      	ldr	r2, [pc, #420]	; (80091dc <UART_SetConfig+0x33c>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d130      	bne.n	800909c <UART_SetConfig+0x1fc>
 800903a:	4b67      	ldr	r3, [pc, #412]	; (80091d8 <UART_SetConfig+0x338>)
 800903c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800903e:	f003 0307 	and.w	r3, r3, #7
 8009042:	2b05      	cmp	r3, #5
 8009044:	d826      	bhi.n	8009094 <UART_SetConfig+0x1f4>
 8009046:	a201      	add	r2, pc, #4	; (adr r2, 800904c <UART_SetConfig+0x1ac>)
 8009048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904c:	08009065 	.word	0x08009065
 8009050:	0800906d 	.word	0x0800906d
 8009054:	08009075 	.word	0x08009075
 8009058:	0800907d 	.word	0x0800907d
 800905c:	08009085 	.word	0x08009085
 8009060:	0800908d 	.word	0x0800908d
 8009064:	2300      	movs	r3, #0
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800906a:	e1ec      	b.n	8009446 <UART_SetConfig+0x5a6>
 800906c:	2304      	movs	r3, #4
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009072:	e1e8      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009074:	2308      	movs	r3, #8
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800907a:	e1e4      	b.n	8009446 <UART_SetConfig+0x5a6>
 800907c:	2310      	movs	r3, #16
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009082:	e1e0      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009084:	2320      	movs	r3, #32
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800908a:	e1dc      	b.n	8009446 <UART_SetConfig+0x5a6>
 800908c:	2340      	movs	r3, #64	; 0x40
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009092:	e1d8      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009094:	2380      	movs	r3, #128	; 0x80
 8009096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800909a:	e1d4      	b.n	8009446 <UART_SetConfig+0x5a6>
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a4f      	ldr	r2, [pc, #316]	; (80091e0 <UART_SetConfig+0x340>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d130      	bne.n	8009108 <UART_SetConfig+0x268>
 80090a6:	4b4c      	ldr	r3, [pc, #304]	; (80091d8 <UART_SetConfig+0x338>)
 80090a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090aa:	f003 0307 	and.w	r3, r3, #7
 80090ae:	2b05      	cmp	r3, #5
 80090b0:	d826      	bhi.n	8009100 <UART_SetConfig+0x260>
 80090b2:	a201      	add	r2, pc, #4	; (adr r2, 80090b8 <UART_SetConfig+0x218>)
 80090b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b8:	080090d1 	.word	0x080090d1
 80090bc:	080090d9 	.word	0x080090d9
 80090c0:	080090e1 	.word	0x080090e1
 80090c4:	080090e9 	.word	0x080090e9
 80090c8:	080090f1 	.word	0x080090f1
 80090cc:	080090f9 	.word	0x080090f9
 80090d0:	2300      	movs	r3, #0
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090d6:	e1b6      	b.n	8009446 <UART_SetConfig+0x5a6>
 80090d8:	2304      	movs	r3, #4
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090de:	e1b2      	b.n	8009446 <UART_SetConfig+0x5a6>
 80090e0:	2308      	movs	r3, #8
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090e6:	e1ae      	b.n	8009446 <UART_SetConfig+0x5a6>
 80090e8:	2310      	movs	r3, #16
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ee:	e1aa      	b.n	8009446 <UART_SetConfig+0x5a6>
 80090f0:	2320      	movs	r3, #32
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090f6:	e1a6      	b.n	8009446 <UART_SetConfig+0x5a6>
 80090f8:	2340      	movs	r3, #64	; 0x40
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090fe:	e1a2      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009100:	2380      	movs	r3, #128	; 0x80
 8009102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009106:	e19e      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a35      	ldr	r2, [pc, #212]	; (80091e4 <UART_SetConfig+0x344>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d130      	bne.n	8009174 <UART_SetConfig+0x2d4>
 8009112:	4b31      	ldr	r3, [pc, #196]	; (80091d8 <UART_SetConfig+0x338>)
 8009114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009116:	f003 0307 	and.w	r3, r3, #7
 800911a:	2b05      	cmp	r3, #5
 800911c:	d826      	bhi.n	800916c <UART_SetConfig+0x2cc>
 800911e:	a201      	add	r2, pc, #4	; (adr r2, 8009124 <UART_SetConfig+0x284>)
 8009120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009124:	0800913d 	.word	0x0800913d
 8009128:	08009145 	.word	0x08009145
 800912c:	0800914d 	.word	0x0800914d
 8009130:	08009155 	.word	0x08009155
 8009134:	0800915d 	.word	0x0800915d
 8009138:	08009165 	.word	0x08009165
 800913c:	2300      	movs	r3, #0
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009142:	e180      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009144:	2304      	movs	r3, #4
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800914a:	e17c      	b.n	8009446 <UART_SetConfig+0x5a6>
 800914c:	2308      	movs	r3, #8
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009152:	e178      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009154:	2310      	movs	r3, #16
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800915a:	e174      	b.n	8009446 <UART_SetConfig+0x5a6>
 800915c:	2320      	movs	r3, #32
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009162:	e170      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009164:	2340      	movs	r3, #64	; 0x40
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800916a:	e16c      	b.n	8009446 <UART_SetConfig+0x5a6>
 800916c:	2380      	movs	r3, #128	; 0x80
 800916e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009172:	e168      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a1b      	ldr	r2, [pc, #108]	; (80091e8 <UART_SetConfig+0x348>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d142      	bne.n	8009204 <UART_SetConfig+0x364>
 800917e:	4b16      	ldr	r3, [pc, #88]	; (80091d8 <UART_SetConfig+0x338>)
 8009180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009182:	f003 0307 	and.w	r3, r3, #7
 8009186:	2b05      	cmp	r3, #5
 8009188:	d838      	bhi.n	80091fc <UART_SetConfig+0x35c>
 800918a:	a201      	add	r2, pc, #4	; (adr r2, 8009190 <UART_SetConfig+0x2f0>)
 800918c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009190:	080091a9 	.word	0x080091a9
 8009194:	080091b1 	.word	0x080091b1
 8009198:	080091b9 	.word	0x080091b9
 800919c:	080091c1 	.word	0x080091c1
 80091a0:	080091ed 	.word	0x080091ed
 80091a4:	080091f5 	.word	0x080091f5
 80091a8:	2300      	movs	r3, #0
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ae:	e14a      	b.n	8009446 <UART_SetConfig+0x5a6>
 80091b0:	2304      	movs	r3, #4
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091b6:	e146      	b.n	8009446 <UART_SetConfig+0x5a6>
 80091b8:	2308      	movs	r3, #8
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091be:	e142      	b.n	8009446 <UART_SetConfig+0x5a6>
 80091c0:	2310      	movs	r3, #16
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091c6:	e13e      	b.n	8009446 <UART_SetConfig+0x5a6>
 80091c8:	cfff69f3 	.word	0xcfff69f3
 80091cc:	58000c00 	.word	0x58000c00
 80091d0:	11fff4ff 	.word	0x11fff4ff
 80091d4:	40011000 	.word	0x40011000
 80091d8:	58024400 	.word	0x58024400
 80091dc:	40004400 	.word	0x40004400
 80091e0:	40004800 	.word	0x40004800
 80091e4:	40004c00 	.word	0x40004c00
 80091e8:	40005000 	.word	0x40005000
 80091ec:	2320      	movs	r3, #32
 80091ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091f2:	e128      	b.n	8009446 <UART_SetConfig+0x5a6>
 80091f4:	2340      	movs	r3, #64	; 0x40
 80091f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091fa:	e124      	b.n	8009446 <UART_SetConfig+0x5a6>
 80091fc:	2380      	movs	r3, #128	; 0x80
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009202:	e120      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4acb      	ldr	r2, [pc, #812]	; (8009538 <UART_SetConfig+0x698>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d176      	bne.n	80092fc <UART_SetConfig+0x45c>
 800920e:	4bcb      	ldr	r3, [pc, #812]	; (800953c <UART_SetConfig+0x69c>)
 8009210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009216:	2b28      	cmp	r3, #40	; 0x28
 8009218:	d86c      	bhi.n	80092f4 <UART_SetConfig+0x454>
 800921a:	a201      	add	r2, pc, #4	; (adr r2, 8009220 <UART_SetConfig+0x380>)
 800921c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009220:	080092c5 	.word	0x080092c5
 8009224:	080092f5 	.word	0x080092f5
 8009228:	080092f5 	.word	0x080092f5
 800922c:	080092f5 	.word	0x080092f5
 8009230:	080092f5 	.word	0x080092f5
 8009234:	080092f5 	.word	0x080092f5
 8009238:	080092f5 	.word	0x080092f5
 800923c:	080092f5 	.word	0x080092f5
 8009240:	080092cd 	.word	0x080092cd
 8009244:	080092f5 	.word	0x080092f5
 8009248:	080092f5 	.word	0x080092f5
 800924c:	080092f5 	.word	0x080092f5
 8009250:	080092f5 	.word	0x080092f5
 8009254:	080092f5 	.word	0x080092f5
 8009258:	080092f5 	.word	0x080092f5
 800925c:	080092f5 	.word	0x080092f5
 8009260:	080092d5 	.word	0x080092d5
 8009264:	080092f5 	.word	0x080092f5
 8009268:	080092f5 	.word	0x080092f5
 800926c:	080092f5 	.word	0x080092f5
 8009270:	080092f5 	.word	0x080092f5
 8009274:	080092f5 	.word	0x080092f5
 8009278:	080092f5 	.word	0x080092f5
 800927c:	080092f5 	.word	0x080092f5
 8009280:	080092dd 	.word	0x080092dd
 8009284:	080092f5 	.word	0x080092f5
 8009288:	080092f5 	.word	0x080092f5
 800928c:	080092f5 	.word	0x080092f5
 8009290:	080092f5 	.word	0x080092f5
 8009294:	080092f5 	.word	0x080092f5
 8009298:	080092f5 	.word	0x080092f5
 800929c:	080092f5 	.word	0x080092f5
 80092a0:	080092e5 	.word	0x080092e5
 80092a4:	080092f5 	.word	0x080092f5
 80092a8:	080092f5 	.word	0x080092f5
 80092ac:	080092f5 	.word	0x080092f5
 80092b0:	080092f5 	.word	0x080092f5
 80092b4:	080092f5 	.word	0x080092f5
 80092b8:	080092f5 	.word	0x080092f5
 80092bc:	080092f5 	.word	0x080092f5
 80092c0:	080092ed 	.word	0x080092ed
 80092c4:	2301      	movs	r3, #1
 80092c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ca:	e0bc      	b.n	8009446 <UART_SetConfig+0x5a6>
 80092cc:	2304      	movs	r3, #4
 80092ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092d2:	e0b8      	b.n	8009446 <UART_SetConfig+0x5a6>
 80092d4:	2308      	movs	r3, #8
 80092d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092da:	e0b4      	b.n	8009446 <UART_SetConfig+0x5a6>
 80092dc:	2310      	movs	r3, #16
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092e2:	e0b0      	b.n	8009446 <UART_SetConfig+0x5a6>
 80092e4:	2320      	movs	r3, #32
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ea:	e0ac      	b.n	8009446 <UART_SetConfig+0x5a6>
 80092ec:	2340      	movs	r3, #64	; 0x40
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092f2:	e0a8      	b.n	8009446 <UART_SetConfig+0x5a6>
 80092f4:	2380      	movs	r3, #128	; 0x80
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092fa:	e0a4      	b.n	8009446 <UART_SetConfig+0x5a6>
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a8f      	ldr	r2, [pc, #572]	; (8009540 <UART_SetConfig+0x6a0>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d130      	bne.n	8009368 <UART_SetConfig+0x4c8>
 8009306:	4b8d      	ldr	r3, [pc, #564]	; (800953c <UART_SetConfig+0x69c>)
 8009308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800930a:	f003 0307 	and.w	r3, r3, #7
 800930e:	2b05      	cmp	r3, #5
 8009310:	d826      	bhi.n	8009360 <UART_SetConfig+0x4c0>
 8009312:	a201      	add	r2, pc, #4	; (adr r2, 8009318 <UART_SetConfig+0x478>)
 8009314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009318:	08009331 	.word	0x08009331
 800931c:	08009339 	.word	0x08009339
 8009320:	08009341 	.word	0x08009341
 8009324:	08009349 	.word	0x08009349
 8009328:	08009351 	.word	0x08009351
 800932c:	08009359 	.word	0x08009359
 8009330:	2300      	movs	r3, #0
 8009332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009336:	e086      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009338:	2304      	movs	r3, #4
 800933a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800933e:	e082      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009340:	2308      	movs	r3, #8
 8009342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009346:	e07e      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009348:	2310      	movs	r3, #16
 800934a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800934e:	e07a      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009350:	2320      	movs	r3, #32
 8009352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009356:	e076      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009358:	2340      	movs	r3, #64	; 0x40
 800935a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800935e:	e072      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009360:	2380      	movs	r3, #128	; 0x80
 8009362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009366:	e06e      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a75      	ldr	r2, [pc, #468]	; (8009544 <UART_SetConfig+0x6a4>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d130      	bne.n	80093d4 <UART_SetConfig+0x534>
 8009372:	4b72      	ldr	r3, [pc, #456]	; (800953c <UART_SetConfig+0x69c>)
 8009374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009376:	f003 0307 	and.w	r3, r3, #7
 800937a:	2b05      	cmp	r3, #5
 800937c:	d826      	bhi.n	80093cc <UART_SetConfig+0x52c>
 800937e:	a201      	add	r2, pc, #4	; (adr r2, 8009384 <UART_SetConfig+0x4e4>)
 8009380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009384:	0800939d 	.word	0x0800939d
 8009388:	080093a5 	.word	0x080093a5
 800938c:	080093ad 	.word	0x080093ad
 8009390:	080093b5 	.word	0x080093b5
 8009394:	080093bd 	.word	0x080093bd
 8009398:	080093c5 	.word	0x080093c5
 800939c:	2300      	movs	r3, #0
 800939e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093a2:	e050      	b.n	8009446 <UART_SetConfig+0x5a6>
 80093a4:	2304      	movs	r3, #4
 80093a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093aa:	e04c      	b.n	8009446 <UART_SetConfig+0x5a6>
 80093ac:	2308      	movs	r3, #8
 80093ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093b2:	e048      	b.n	8009446 <UART_SetConfig+0x5a6>
 80093b4:	2310      	movs	r3, #16
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ba:	e044      	b.n	8009446 <UART_SetConfig+0x5a6>
 80093bc:	2320      	movs	r3, #32
 80093be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093c2:	e040      	b.n	8009446 <UART_SetConfig+0x5a6>
 80093c4:	2340      	movs	r3, #64	; 0x40
 80093c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ca:	e03c      	b.n	8009446 <UART_SetConfig+0x5a6>
 80093cc:	2380      	movs	r3, #128	; 0x80
 80093ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093d2:	e038      	b.n	8009446 <UART_SetConfig+0x5a6>
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a5b      	ldr	r2, [pc, #364]	; (8009548 <UART_SetConfig+0x6a8>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d130      	bne.n	8009440 <UART_SetConfig+0x5a0>
 80093de:	4b57      	ldr	r3, [pc, #348]	; (800953c <UART_SetConfig+0x69c>)
 80093e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e2:	f003 0307 	and.w	r3, r3, #7
 80093e6:	2b05      	cmp	r3, #5
 80093e8:	d826      	bhi.n	8009438 <UART_SetConfig+0x598>
 80093ea:	a201      	add	r2, pc, #4	; (adr r2, 80093f0 <UART_SetConfig+0x550>)
 80093ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f0:	08009409 	.word	0x08009409
 80093f4:	08009411 	.word	0x08009411
 80093f8:	08009419 	.word	0x08009419
 80093fc:	08009421 	.word	0x08009421
 8009400:	08009429 	.word	0x08009429
 8009404:	08009431 	.word	0x08009431
 8009408:	2302      	movs	r3, #2
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800940e:	e01a      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009410:	2304      	movs	r3, #4
 8009412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009416:	e016      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009418:	2308      	movs	r3, #8
 800941a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800941e:	e012      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009420:	2310      	movs	r3, #16
 8009422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009426:	e00e      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009428:	2320      	movs	r3, #32
 800942a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800942e:	e00a      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009430:	2340      	movs	r3, #64	; 0x40
 8009432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009436:	e006      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009438:	2380      	movs	r3, #128	; 0x80
 800943a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800943e:	e002      	b.n	8009446 <UART_SetConfig+0x5a6>
 8009440:	2380      	movs	r3, #128	; 0x80
 8009442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a3f      	ldr	r2, [pc, #252]	; (8009548 <UART_SetConfig+0x6a8>)
 800944c:	4293      	cmp	r3, r2
 800944e:	f040 80f8 	bne.w	8009642 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009452:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009456:	2b20      	cmp	r3, #32
 8009458:	dc46      	bgt.n	80094e8 <UART_SetConfig+0x648>
 800945a:	2b02      	cmp	r3, #2
 800945c:	f2c0 8082 	blt.w	8009564 <UART_SetConfig+0x6c4>
 8009460:	3b02      	subs	r3, #2
 8009462:	2b1e      	cmp	r3, #30
 8009464:	d87e      	bhi.n	8009564 <UART_SetConfig+0x6c4>
 8009466:	a201      	add	r2, pc, #4	; (adr r2, 800946c <UART_SetConfig+0x5cc>)
 8009468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946c:	080094ef 	.word	0x080094ef
 8009470:	08009565 	.word	0x08009565
 8009474:	080094f7 	.word	0x080094f7
 8009478:	08009565 	.word	0x08009565
 800947c:	08009565 	.word	0x08009565
 8009480:	08009565 	.word	0x08009565
 8009484:	08009507 	.word	0x08009507
 8009488:	08009565 	.word	0x08009565
 800948c:	08009565 	.word	0x08009565
 8009490:	08009565 	.word	0x08009565
 8009494:	08009565 	.word	0x08009565
 8009498:	08009565 	.word	0x08009565
 800949c:	08009565 	.word	0x08009565
 80094a0:	08009565 	.word	0x08009565
 80094a4:	08009517 	.word	0x08009517
 80094a8:	08009565 	.word	0x08009565
 80094ac:	08009565 	.word	0x08009565
 80094b0:	08009565 	.word	0x08009565
 80094b4:	08009565 	.word	0x08009565
 80094b8:	08009565 	.word	0x08009565
 80094bc:	08009565 	.word	0x08009565
 80094c0:	08009565 	.word	0x08009565
 80094c4:	08009565 	.word	0x08009565
 80094c8:	08009565 	.word	0x08009565
 80094cc:	08009565 	.word	0x08009565
 80094d0:	08009565 	.word	0x08009565
 80094d4:	08009565 	.word	0x08009565
 80094d8:	08009565 	.word	0x08009565
 80094dc:	08009565 	.word	0x08009565
 80094e0:	08009565 	.word	0x08009565
 80094e4:	08009557 	.word	0x08009557
 80094e8:	2b40      	cmp	r3, #64	; 0x40
 80094ea:	d037      	beq.n	800955c <UART_SetConfig+0x6bc>
 80094ec:	e03a      	b.n	8009564 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80094ee:	f7fd fc49 	bl	8006d84 <HAL_RCCEx_GetD3PCLK1Freq>
 80094f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80094f4:	e03c      	b.n	8009570 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fd fc58 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009504:	e034      	b.n	8009570 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009506:	f107 0318 	add.w	r3, r7, #24
 800950a:	4618      	mov	r0, r3
 800950c:	f7fd fda4 	bl	8007058 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009514:	e02c      	b.n	8009570 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009516:	4b09      	ldr	r3, [pc, #36]	; (800953c <UART_SetConfig+0x69c>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 0320 	and.w	r3, r3, #32
 800951e:	2b00      	cmp	r3, #0
 8009520:	d016      	beq.n	8009550 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009522:	4b06      	ldr	r3, [pc, #24]	; (800953c <UART_SetConfig+0x69c>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	08db      	lsrs	r3, r3, #3
 8009528:	f003 0303 	and.w	r3, r3, #3
 800952c:	4a07      	ldr	r2, [pc, #28]	; (800954c <UART_SetConfig+0x6ac>)
 800952e:	fa22 f303 	lsr.w	r3, r2, r3
 8009532:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009534:	e01c      	b.n	8009570 <UART_SetConfig+0x6d0>
 8009536:	bf00      	nop
 8009538:	40011400 	.word	0x40011400
 800953c:	58024400 	.word	0x58024400
 8009540:	40007800 	.word	0x40007800
 8009544:	40007c00 	.word	0x40007c00
 8009548:	58000c00 	.word	0x58000c00
 800954c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009550:	4b9d      	ldr	r3, [pc, #628]	; (80097c8 <UART_SetConfig+0x928>)
 8009552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009554:	e00c      	b.n	8009570 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009556:	4b9d      	ldr	r3, [pc, #628]	; (80097cc <UART_SetConfig+0x92c>)
 8009558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800955a:	e009      	b.n	8009570 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800955c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009562:	e005      	b.n	8009570 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009564:	2300      	movs	r3, #0
 8009566:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800956e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 81de 	beq.w	8009934 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957c:	4a94      	ldr	r2, [pc, #592]	; (80097d0 <UART_SetConfig+0x930>)
 800957e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009582:	461a      	mov	r2, r3
 8009584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009586:	fbb3 f3f2 	udiv	r3, r3, r2
 800958a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	4613      	mov	r3, r2
 8009592:	005b      	lsls	r3, r3, #1
 8009594:	4413      	add	r3, r2
 8009596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009598:	429a      	cmp	r2, r3
 800959a:	d305      	bcc.n	80095a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d903      	bls.n	80095b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80095ae:	e1c1      	b.n	8009934 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b2:	2200      	movs	r2, #0
 80095b4:	60bb      	str	r3, [r7, #8]
 80095b6:	60fa      	str	r2, [r7, #12]
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095bc:	4a84      	ldr	r2, [pc, #528]	; (80097d0 <UART_SetConfig+0x930>)
 80095be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	2200      	movs	r2, #0
 80095c6:	603b      	str	r3, [r7, #0]
 80095c8:	607a      	str	r2, [r7, #4]
 80095ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095d2:	f7f6 fed5 	bl	8000380 <__aeabi_uldivmod>
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	4610      	mov	r0, r2
 80095dc:	4619      	mov	r1, r3
 80095de:	f04f 0200 	mov.w	r2, #0
 80095e2:	f04f 0300 	mov.w	r3, #0
 80095e6:	020b      	lsls	r3, r1, #8
 80095e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80095ec:	0202      	lsls	r2, r0, #8
 80095ee:	6979      	ldr	r1, [r7, #20]
 80095f0:	6849      	ldr	r1, [r1, #4]
 80095f2:	0849      	lsrs	r1, r1, #1
 80095f4:	2000      	movs	r0, #0
 80095f6:	460c      	mov	r4, r1
 80095f8:	4605      	mov	r5, r0
 80095fa:	eb12 0804 	adds.w	r8, r2, r4
 80095fe:	eb43 0905 	adc.w	r9, r3, r5
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	469a      	mov	sl, r3
 800960a:	4693      	mov	fp, r2
 800960c:	4652      	mov	r2, sl
 800960e:	465b      	mov	r3, fp
 8009610:	4640      	mov	r0, r8
 8009612:	4649      	mov	r1, r9
 8009614:	f7f6 feb4 	bl	8000380 <__aeabi_uldivmod>
 8009618:	4602      	mov	r2, r0
 800961a:	460b      	mov	r3, r1
 800961c:	4613      	mov	r3, r2
 800961e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009626:	d308      	bcc.n	800963a <UART_SetConfig+0x79a>
 8009628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800962e:	d204      	bcs.n	800963a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009636:	60da      	str	r2, [r3, #12]
 8009638:	e17c      	b.n	8009934 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009640:	e178      	b.n	8009934 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	69db      	ldr	r3, [r3, #28]
 8009646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800964a:	f040 80c5 	bne.w	80097d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800964e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009652:	2b20      	cmp	r3, #32
 8009654:	dc48      	bgt.n	80096e8 <UART_SetConfig+0x848>
 8009656:	2b00      	cmp	r3, #0
 8009658:	db7b      	blt.n	8009752 <UART_SetConfig+0x8b2>
 800965a:	2b20      	cmp	r3, #32
 800965c:	d879      	bhi.n	8009752 <UART_SetConfig+0x8b2>
 800965e:	a201      	add	r2, pc, #4	; (adr r2, 8009664 <UART_SetConfig+0x7c4>)
 8009660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009664:	080096ef 	.word	0x080096ef
 8009668:	080096f7 	.word	0x080096f7
 800966c:	08009753 	.word	0x08009753
 8009670:	08009753 	.word	0x08009753
 8009674:	080096ff 	.word	0x080096ff
 8009678:	08009753 	.word	0x08009753
 800967c:	08009753 	.word	0x08009753
 8009680:	08009753 	.word	0x08009753
 8009684:	0800970f 	.word	0x0800970f
 8009688:	08009753 	.word	0x08009753
 800968c:	08009753 	.word	0x08009753
 8009690:	08009753 	.word	0x08009753
 8009694:	08009753 	.word	0x08009753
 8009698:	08009753 	.word	0x08009753
 800969c:	08009753 	.word	0x08009753
 80096a0:	08009753 	.word	0x08009753
 80096a4:	0800971f 	.word	0x0800971f
 80096a8:	08009753 	.word	0x08009753
 80096ac:	08009753 	.word	0x08009753
 80096b0:	08009753 	.word	0x08009753
 80096b4:	08009753 	.word	0x08009753
 80096b8:	08009753 	.word	0x08009753
 80096bc:	08009753 	.word	0x08009753
 80096c0:	08009753 	.word	0x08009753
 80096c4:	08009753 	.word	0x08009753
 80096c8:	08009753 	.word	0x08009753
 80096cc:	08009753 	.word	0x08009753
 80096d0:	08009753 	.word	0x08009753
 80096d4:	08009753 	.word	0x08009753
 80096d8:	08009753 	.word	0x08009753
 80096dc:	08009753 	.word	0x08009753
 80096e0:	08009753 	.word	0x08009753
 80096e4:	08009745 	.word	0x08009745
 80096e8:	2b40      	cmp	r3, #64	; 0x40
 80096ea:	d02e      	beq.n	800974a <UART_SetConfig+0x8aa>
 80096ec:	e031      	b.n	8009752 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096ee:	f7fb ff05 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 80096f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80096f4:	e033      	b.n	800975e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096f6:	f7fb ff17 	bl	8005528 <HAL_RCC_GetPCLK2Freq>
 80096fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80096fc:	e02f      	b.n	800975e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009702:	4618      	mov	r0, r3
 8009704:	f7fd fb54 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800970c:	e027      	b.n	800975e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800970e:	f107 0318 	add.w	r3, r7, #24
 8009712:	4618      	mov	r0, r3
 8009714:	f7fd fca0 	bl	8007058 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800971c:	e01f      	b.n	800975e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800971e:	4b2d      	ldr	r3, [pc, #180]	; (80097d4 <UART_SetConfig+0x934>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0320 	and.w	r3, r3, #32
 8009726:	2b00      	cmp	r3, #0
 8009728:	d009      	beq.n	800973e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800972a:	4b2a      	ldr	r3, [pc, #168]	; (80097d4 <UART_SetConfig+0x934>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	08db      	lsrs	r3, r3, #3
 8009730:	f003 0303 	and.w	r3, r3, #3
 8009734:	4a24      	ldr	r2, [pc, #144]	; (80097c8 <UART_SetConfig+0x928>)
 8009736:	fa22 f303 	lsr.w	r3, r2, r3
 800973a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800973c:	e00f      	b.n	800975e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800973e:	4b22      	ldr	r3, [pc, #136]	; (80097c8 <UART_SetConfig+0x928>)
 8009740:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009742:	e00c      	b.n	800975e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009744:	4b21      	ldr	r3, [pc, #132]	; (80097cc <UART_SetConfig+0x92c>)
 8009746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009748:	e009      	b.n	800975e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800974a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800974e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009750:	e005      	b.n	800975e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009752:	2300      	movs	r3, #0
 8009754:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800975c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800975e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009760:	2b00      	cmp	r3, #0
 8009762:	f000 80e7 	beq.w	8009934 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976a:	4a19      	ldr	r2, [pc, #100]	; (80097d0 <UART_SetConfig+0x930>)
 800976c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009770:	461a      	mov	r2, r3
 8009772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009774:	fbb3 f3f2 	udiv	r3, r3, r2
 8009778:	005a      	lsls	r2, r3, #1
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	085b      	lsrs	r3, r3, #1
 8009780:	441a      	add	r2, r3
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	fbb2 f3f3 	udiv	r3, r2, r3
 800978a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	2b0f      	cmp	r3, #15
 8009790:	d916      	bls.n	80097c0 <UART_SetConfig+0x920>
 8009792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009798:	d212      	bcs.n	80097c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800979a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979c:	b29b      	uxth	r3, r3
 800979e:	f023 030f 	bic.w	r3, r3, #15
 80097a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a6:	085b      	lsrs	r3, r3, #1
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	f003 0307 	and.w	r3, r3, #7
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80097b2:	4313      	orrs	r3, r2
 80097b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80097bc:	60da      	str	r2, [r3, #12]
 80097be:	e0b9      	b.n	8009934 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80097c6:	e0b5      	b.n	8009934 <UART_SetConfig+0xa94>
 80097c8:	03d09000 	.word	0x03d09000
 80097cc:	003d0900 	.word	0x003d0900
 80097d0:	0800aea0 	.word	0x0800aea0
 80097d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80097d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80097dc:	2b20      	cmp	r3, #32
 80097de:	dc49      	bgt.n	8009874 <UART_SetConfig+0x9d4>
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	db7c      	blt.n	80098de <UART_SetConfig+0xa3e>
 80097e4:	2b20      	cmp	r3, #32
 80097e6:	d87a      	bhi.n	80098de <UART_SetConfig+0xa3e>
 80097e8:	a201      	add	r2, pc, #4	; (adr r2, 80097f0 <UART_SetConfig+0x950>)
 80097ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ee:	bf00      	nop
 80097f0:	0800987b 	.word	0x0800987b
 80097f4:	08009883 	.word	0x08009883
 80097f8:	080098df 	.word	0x080098df
 80097fc:	080098df 	.word	0x080098df
 8009800:	0800988b 	.word	0x0800988b
 8009804:	080098df 	.word	0x080098df
 8009808:	080098df 	.word	0x080098df
 800980c:	080098df 	.word	0x080098df
 8009810:	0800989b 	.word	0x0800989b
 8009814:	080098df 	.word	0x080098df
 8009818:	080098df 	.word	0x080098df
 800981c:	080098df 	.word	0x080098df
 8009820:	080098df 	.word	0x080098df
 8009824:	080098df 	.word	0x080098df
 8009828:	080098df 	.word	0x080098df
 800982c:	080098df 	.word	0x080098df
 8009830:	080098ab 	.word	0x080098ab
 8009834:	080098df 	.word	0x080098df
 8009838:	080098df 	.word	0x080098df
 800983c:	080098df 	.word	0x080098df
 8009840:	080098df 	.word	0x080098df
 8009844:	080098df 	.word	0x080098df
 8009848:	080098df 	.word	0x080098df
 800984c:	080098df 	.word	0x080098df
 8009850:	080098df 	.word	0x080098df
 8009854:	080098df 	.word	0x080098df
 8009858:	080098df 	.word	0x080098df
 800985c:	080098df 	.word	0x080098df
 8009860:	080098df 	.word	0x080098df
 8009864:	080098df 	.word	0x080098df
 8009868:	080098df 	.word	0x080098df
 800986c:	080098df 	.word	0x080098df
 8009870:	080098d1 	.word	0x080098d1
 8009874:	2b40      	cmp	r3, #64	; 0x40
 8009876:	d02e      	beq.n	80098d6 <UART_SetConfig+0xa36>
 8009878:	e031      	b.n	80098de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800987a:	f7fb fe3f 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 800987e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009880:	e033      	b.n	80098ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009882:	f7fb fe51 	bl	8005528 <HAL_RCC_GetPCLK2Freq>
 8009886:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009888:	e02f      	b.n	80098ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800988a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800988e:	4618      	mov	r0, r3
 8009890:	f7fd fa8e 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009898:	e027      	b.n	80098ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800989a:	f107 0318 	add.w	r3, r7, #24
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fd fbda 	bl	8007058 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098a8:	e01f      	b.n	80098ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098aa:	4b2d      	ldr	r3, [pc, #180]	; (8009960 <UART_SetConfig+0xac0>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 0320 	and.w	r3, r3, #32
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d009      	beq.n	80098ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098b6:	4b2a      	ldr	r3, [pc, #168]	; (8009960 <UART_SetConfig+0xac0>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	08db      	lsrs	r3, r3, #3
 80098bc:	f003 0303 	and.w	r3, r3, #3
 80098c0:	4a28      	ldr	r2, [pc, #160]	; (8009964 <UART_SetConfig+0xac4>)
 80098c2:	fa22 f303 	lsr.w	r3, r2, r3
 80098c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80098c8:	e00f      	b.n	80098ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80098ca:	4b26      	ldr	r3, [pc, #152]	; (8009964 <UART_SetConfig+0xac4>)
 80098cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098ce:	e00c      	b.n	80098ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80098d0:	4b25      	ldr	r3, [pc, #148]	; (8009968 <UART_SetConfig+0xac8>)
 80098d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098d4:	e009      	b.n	80098ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098dc:	e005      	b.n	80098ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80098de:	2300      	movs	r3, #0
 80098e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80098e8:	bf00      	nop
    }

    if (pclk != 0U)
 80098ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d021      	beq.n	8009934 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f4:	4a1d      	ldr	r2, [pc, #116]	; (800996c <UART_SetConfig+0xacc>)
 80098f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098fa:	461a      	mov	r2, r3
 80098fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	085b      	lsrs	r3, r3, #1
 8009908:	441a      	add	r2, r3
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009912:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009916:	2b0f      	cmp	r3, #15
 8009918:	d909      	bls.n	800992e <UART_SetConfig+0xa8e>
 800991a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009920:	d205      	bcs.n	800992e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009924:	b29a      	uxth	r2, r3
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	60da      	str	r2, [r3, #12]
 800992c:	e002      	b.n	8009934 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	2201      	movs	r2, #1
 8009938:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	2201      	movs	r2, #1
 8009940:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	2200      	movs	r2, #0
 8009948:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	2200      	movs	r2, #0
 800994e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009950:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009954:	4618      	mov	r0, r3
 8009956:	3748      	adds	r7, #72	; 0x48
 8009958:	46bd      	mov	sp, r7
 800995a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800995e:	bf00      	nop
 8009960:	58024400 	.word	0x58024400
 8009964:	03d09000 	.word	0x03d09000
 8009968:	003d0900 	.word	0x003d0900
 800996c:	0800aea0 	.word	0x0800aea0

08009970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800997c:	f003 0301 	and.w	r3, r3, #1
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00a      	beq.n	800999a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	430a      	orrs	r2, r1
 8009998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999e:	f003 0302 	and.w	r3, r3, #2
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00a      	beq.n	80099bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	430a      	orrs	r2, r1
 80099ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c0:	f003 0304 	and.w	r3, r3, #4
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00a      	beq.n	80099de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	430a      	orrs	r2, r1
 80099dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e2:	f003 0308 	and.w	r3, r3, #8
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00a      	beq.n	8009a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	430a      	orrs	r2, r1
 80099fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a04:	f003 0310 	and.w	r3, r3, #16
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00a      	beq.n	8009a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a26:	f003 0320 	and.w	r3, r3, #32
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00a      	beq.n	8009a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	430a      	orrs	r2, r1
 8009a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d01a      	beq.n	8009a86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a6e:	d10a      	bne.n	8009a86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00a      	beq.n	8009aa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	430a      	orrs	r2, r1
 8009aa6:	605a      	str	r2, [r3, #4]
  }
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af02      	add	r7, sp, #8
 8009aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ac4:	f7f7 ff4c 	bl	8001960 <HAL_GetTick>
 8009ac8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 0308 	and.w	r3, r3, #8
 8009ad4:	2b08      	cmp	r3, #8
 8009ad6:	d10e      	bne.n	8009af6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ad8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f82f 	bl	8009b4a <UART_WaitOnFlagUntilTimeout>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d001      	beq.n	8009af6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e025      	b.n	8009b42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 0304 	and.w	r3, r3, #4
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	d10e      	bne.n	8009b22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f819 	bl	8009b4a <UART_WaitOnFlagUntilTimeout>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d001      	beq.n	8009b22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e00f      	b.n	8009b42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2220      	movs	r2, #32
 8009b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2220      	movs	r2, #32
 8009b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b09c      	sub	sp, #112	; 0x70
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	60f8      	str	r0, [r7, #12]
 8009b52:	60b9      	str	r1, [r7, #8]
 8009b54:	603b      	str	r3, [r7, #0]
 8009b56:	4613      	mov	r3, r2
 8009b58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b5a:	e0a9      	b.n	8009cb0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b62:	f000 80a5 	beq.w	8009cb0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b66:	f7f7 fefb 	bl	8001960 <HAL_GetTick>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d302      	bcc.n	8009b7c <UART_WaitOnFlagUntilTimeout+0x32>
 8009b76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d140      	bne.n	8009bfe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b90:	667b      	str	r3, [r7, #100]	; 0x64
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	461a      	mov	r2, r3
 8009b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ba0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ba2:	e841 2300 	strex	r3, r2, [r1]
 8009ba6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1e6      	bne.n	8009b7c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bb8:	e853 3f00 	ldrex	r3, [r3]
 8009bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc0:	f023 0301 	bic.w	r3, r3, #1
 8009bc4:	663b      	str	r3, [r7, #96]	; 0x60
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3308      	adds	r3, #8
 8009bcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009bce:	64ba      	str	r2, [r7, #72]	; 0x48
 8009bd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bd6:	e841 2300 	strex	r3, r2, [r1]
 8009bda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1e5      	bne.n	8009bae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2220      	movs	r2, #32
 8009be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2220      	movs	r2, #32
 8009bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e069      	b.n	8009cd2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 0304 	and.w	r3, r3, #4
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d051      	beq.n	8009cb0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c1a:	d149      	bne.n	8009cb0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2e:	e853 3f00 	ldrex	r3, [r3]
 8009c32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	461a      	mov	r2, r3
 8009c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c44:	637b      	str	r3, [r7, #52]	; 0x34
 8009c46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c4c:	e841 2300 	strex	r3, r2, [r1]
 8009c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1e6      	bne.n	8009c26 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	3308      	adds	r3, #8
 8009c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	e853 3f00 	ldrex	r3, [r3]
 8009c66:	613b      	str	r3, [r7, #16]
   return(result);
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f023 0301 	bic.w	r3, r3, #1
 8009c6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3308      	adds	r3, #8
 8009c76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c78:	623a      	str	r2, [r7, #32]
 8009c7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7c:	69f9      	ldr	r1, [r7, #28]
 8009c7e:	6a3a      	ldr	r2, [r7, #32]
 8009c80:	e841 2300 	strex	r3, r2, [r1]
 8009c84:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1e5      	bne.n	8009c58 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2220      	movs	r2, #32
 8009c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2220      	movs	r2, #32
 8009c98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2220      	movs	r2, #32
 8009ca0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e010      	b.n	8009cd2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	69da      	ldr	r2, [r3, #28]
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	4013      	ands	r3, r2
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	bf0c      	ite	eq
 8009cc0:	2301      	moveq	r3, #1
 8009cc2:	2300      	movne	r3, #0
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	79fb      	ldrb	r3, [r7, #7]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	f43f af46 	beq.w	8009b5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3770      	adds	r7, #112	; 0x70
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b085      	sub	sp, #20
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d101      	bne.n	8009cf0 <HAL_UARTEx_DisableFifoMode+0x16>
 8009cec:	2302      	movs	r3, #2
 8009cee:	e027      	b.n	8009d40 <HAL_UARTEx_DisableFifoMode+0x66>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2224      	movs	r2, #36	; 0x24
 8009cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f022 0201 	bic.w	r2, r2, #1
 8009d16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2220      	movs	r2, #32
 8009d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3714      	adds	r7, #20
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d101      	bne.n	8009d64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d60:	2302      	movs	r3, #2
 8009d62:	e02d      	b.n	8009dc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2224      	movs	r2, #36	; 0x24
 8009d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f022 0201 	bic.w	r2, r2, #1
 8009d8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	430a      	orrs	r2, r1
 8009d9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 f84f 	bl	8009e44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2220      	movs	r2, #32
 8009db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d101      	bne.n	8009de0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ddc:	2302      	movs	r3, #2
 8009dde:	e02d      	b.n	8009e3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2224      	movs	r2, #36	; 0x24
 8009dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f022 0201 	bic.w	r2, r2, #1
 8009e06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 f811 	bl	8009e44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2220      	movs	r2, #32
 8009e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d108      	bne.n	8009e66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e64:	e031      	b.n	8009eca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e66:	2310      	movs	r3, #16
 8009e68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e6a:	2310      	movs	r3, #16
 8009e6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	0e5b      	lsrs	r3, r3, #25
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	f003 0307 	and.w	r3, r3, #7
 8009e7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	0f5b      	lsrs	r3, r3, #29
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	f003 0307 	and.w	r3, r3, #7
 8009e8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e8e:	7bbb      	ldrb	r3, [r7, #14]
 8009e90:	7b3a      	ldrb	r2, [r7, #12]
 8009e92:	4911      	ldr	r1, [pc, #68]	; (8009ed8 <UARTEx_SetNbDataToProcess+0x94>)
 8009e94:	5c8a      	ldrb	r2, [r1, r2]
 8009e96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e9a:	7b3a      	ldrb	r2, [r7, #12]
 8009e9c:	490f      	ldr	r1, [pc, #60]	; (8009edc <UARTEx_SetNbDataToProcess+0x98>)
 8009e9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ea0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009eac:	7bfb      	ldrb	r3, [r7, #15]
 8009eae:	7b7a      	ldrb	r2, [r7, #13]
 8009eb0:	4909      	ldr	r1, [pc, #36]	; (8009ed8 <UARTEx_SetNbDataToProcess+0x94>)
 8009eb2:	5c8a      	ldrb	r2, [r1, r2]
 8009eb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009eb8:	7b7a      	ldrb	r2, [r7, #13]
 8009eba:	4908      	ldr	r1, [pc, #32]	; (8009edc <UARTEx_SetNbDataToProcess+0x98>)
 8009ebc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ebe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009eca:	bf00      	nop
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	0800aeb8 	.word	0x0800aeb8
 8009edc:	0800aec0 	.word	0x0800aec0

08009ee0 <__errno>:
 8009ee0:	4b01      	ldr	r3, [pc, #4]	; (8009ee8 <__errno+0x8>)
 8009ee2:	6818      	ldr	r0, [r3, #0]
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	24000010 	.word	0x24000010

08009eec <__libc_init_array>:
 8009eec:	b570      	push	{r4, r5, r6, lr}
 8009eee:	4d0d      	ldr	r5, [pc, #52]	; (8009f24 <__libc_init_array+0x38>)
 8009ef0:	4c0d      	ldr	r4, [pc, #52]	; (8009f28 <__libc_init_array+0x3c>)
 8009ef2:	1b64      	subs	r4, r4, r5
 8009ef4:	10a4      	asrs	r4, r4, #2
 8009ef6:	2600      	movs	r6, #0
 8009ef8:	42a6      	cmp	r6, r4
 8009efa:	d109      	bne.n	8009f10 <__libc_init_array+0x24>
 8009efc:	4d0b      	ldr	r5, [pc, #44]	; (8009f2c <__libc_init_array+0x40>)
 8009efe:	4c0c      	ldr	r4, [pc, #48]	; (8009f30 <__libc_init_array+0x44>)
 8009f00:	f000 ffae 	bl	800ae60 <_init>
 8009f04:	1b64      	subs	r4, r4, r5
 8009f06:	10a4      	asrs	r4, r4, #2
 8009f08:	2600      	movs	r6, #0
 8009f0a:	42a6      	cmp	r6, r4
 8009f0c:	d105      	bne.n	8009f1a <__libc_init_array+0x2e>
 8009f0e:	bd70      	pop	{r4, r5, r6, pc}
 8009f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f14:	4798      	blx	r3
 8009f16:	3601      	adds	r6, #1
 8009f18:	e7ee      	b.n	8009ef8 <__libc_init_array+0xc>
 8009f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f1e:	4798      	blx	r3
 8009f20:	3601      	adds	r6, #1
 8009f22:	e7f2      	b.n	8009f0a <__libc_init_array+0x1e>
 8009f24:	0800af68 	.word	0x0800af68
 8009f28:	0800af68 	.word	0x0800af68
 8009f2c:	0800af68 	.word	0x0800af68
 8009f30:	0800af6c 	.word	0x0800af6c

08009f34 <memset>:
 8009f34:	4402      	add	r2, r0
 8009f36:	4603      	mov	r3, r0
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d100      	bne.n	8009f3e <memset+0xa>
 8009f3c:	4770      	bx	lr
 8009f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f42:	e7f9      	b.n	8009f38 <memset+0x4>

08009f44 <iprintf>:
 8009f44:	b40f      	push	{r0, r1, r2, r3}
 8009f46:	4b0a      	ldr	r3, [pc, #40]	; (8009f70 <iprintf+0x2c>)
 8009f48:	b513      	push	{r0, r1, r4, lr}
 8009f4a:	681c      	ldr	r4, [r3, #0]
 8009f4c:	b124      	cbz	r4, 8009f58 <iprintf+0x14>
 8009f4e:	69a3      	ldr	r3, [r4, #24]
 8009f50:	b913      	cbnz	r3, 8009f58 <iprintf+0x14>
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 f866 	bl	800a024 <__sinit>
 8009f58:	ab05      	add	r3, sp, #20
 8009f5a:	9a04      	ldr	r2, [sp, #16]
 8009f5c:	68a1      	ldr	r1, [r4, #8]
 8009f5e:	9301      	str	r3, [sp, #4]
 8009f60:	4620      	mov	r0, r4
 8009f62:	f000 f9bd 	bl	800a2e0 <_vfiprintf_r>
 8009f66:	b002      	add	sp, #8
 8009f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f6c:	b004      	add	sp, #16
 8009f6e:	4770      	bx	lr
 8009f70:	24000010 	.word	0x24000010

08009f74 <std>:
 8009f74:	2300      	movs	r3, #0
 8009f76:	b510      	push	{r4, lr}
 8009f78:	4604      	mov	r4, r0
 8009f7a:	e9c0 3300 	strd	r3, r3, [r0]
 8009f7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f82:	6083      	str	r3, [r0, #8]
 8009f84:	8181      	strh	r1, [r0, #12]
 8009f86:	6643      	str	r3, [r0, #100]	; 0x64
 8009f88:	81c2      	strh	r2, [r0, #14]
 8009f8a:	6183      	str	r3, [r0, #24]
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	2208      	movs	r2, #8
 8009f90:	305c      	adds	r0, #92	; 0x5c
 8009f92:	f7ff ffcf 	bl	8009f34 <memset>
 8009f96:	4b05      	ldr	r3, [pc, #20]	; (8009fac <std+0x38>)
 8009f98:	6263      	str	r3, [r4, #36]	; 0x24
 8009f9a:	4b05      	ldr	r3, [pc, #20]	; (8009fb0 <std+0x3c>)
 8009f9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f9e:	4b05      	ldr	r3, [pc, #20]	; (8009fb4 <std+0x40>)
 8009fa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fa2:	4b05      	ldr	r3, [pc, #20]	; (8009fb8 <std+0x44>)
 8009fa4:	6224      	str	r4, [r4, #32]
 8009fa6:	6323      	str	r3, [r4, #48]	; 0x30
 8009fa8:	bd10      	pop	{r4, pc}
 8009faa:	bf00      	nop
 8009fac:	0800a889 	.word	0x0800a889
 8009fb0:	0800a8ab 	.word	0x0800a8ab
 8009fb4:	0800a8e3 	.word	0x0800a8e3
 8009fb8:	0800a907 	.word	0x0800a907

08009fbc <_cleanup_r>:
 8009fbc:	4901      	ldr	r1, [pc, #4]	; (8009fc4 <_cleanup_r+0x8>)
 8009fbe:	f000 b8af 	b.w	800a120 <_fwalk_reent>
 8009fc2:	bf00      	nop
 8009fc4:	0800abe1 	.word	0x0800abe1

08009fc8 <__sfmoreglue>:
 8009fc8:	b570      	push	{r4, r5, r6, lr}
 8009fca:	2268      	movs	r2, #104	; 0x68
 8009fcc:	1e4d      	subs	r5, r1, #1
 8009fce:	4355      	muls	r5, r2
 8009fd0:	460e      	mov	r6, r1
 8009fd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009fd6:	f000 f8e5 	bl	800a1a4 <_malloc_r>
 8009fda:	4604      	mov	r4, r0
 8009fdc:	b140      	cbz	r0, 8009ff0 <__sfmoreglue+0x28>
 8009fde:	2100      	movs	r1, #0
 8009fe0:	e9c0 1600 	strd	r1, r6, [r0]
 8009fe4:	300c      	adds	r0, #12
 8009fe6:	60a0      	str	r0, [r4, #8]
 8009fe8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fec:	f7ff ffa2 	bl	8009f34 <memset>
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	bd70      	pop	{r4, r5, r6, pc}

08009ff4 <__sfp_lock_acquire>:
 8009ff4:	4801      	ldr	r0, [pc, #4]	; (8009ffc <__sfp_lock_acquire+0x8>)
 8009ff6:	f000 b8b3 	b.w	800a160 <__retarget_lock_acquire_recursive>
 8009ffa:	bf00      	nop
 8009ffc:	24000401 	.word	0x24000401

0800a000 <__sfp_lock_release>:
 800a000:	4801      	ldr	r0, [pc, #4]	; (800a008 <__sfp_lock_release+0x8>)
 800a002:	f000 b8ae 	b.w	800a162 <__retarget_lock_release_recursive>
 800a006:	bf00      	nop
 800a008:	24000401 	.word	0x24000401

0800a00c <__sinit_lock_acquire>:
 800a00c:	4801      	ldr	r0, [pc, #4]	; (800a014 <__sinit_lock_acquire+0x8>)
 800a00e:	f000 b8a7 	b.w	800a160 <__retarget_lock_acquire_recursive>
 800a012:	bf00      	nop
 800a014:	24000402 	.word	0x24000402

0800a018 <__sinit_lock_release>:
 800a018:	4801      	ldr	r0, [pc, #4]	; (800a020 <__sinit_lock_release+0x8>)
 800a01a:	f000 b8a2 	b.w	800a162 <__retarget_lock_release_recursive>
 800a01e:	bf00      	nop
 800a020:	24000402 	.word	0x24000402

0800a024 <__sinit>:
 800a024:	b510      	push	{r4, lr}
 800a026:	4604      	mov	r4, r0
 800a028:	f7ff fff0 	bl	800a00c <__sinit_lock_acquire>
 800a02c:	69a3      	ldr	r3, [r4, #24]
 800a02e:	b11b      	cbz	r3, 800a038 <__sinit+0x14>
 800a030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a034:	f7ff bff0 	b.w	800a018 <__sinit_lock_release>
 800a038:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a03c:	6523      	str	r3, [r4, #80]	; 0x50
 800a03e:	4b13      	ldr	r3, [pc, #76]	; (800a08c <__sinit+0x68>)
 800a040:	4a13      	ldr	r2, [pc, #76]	; (800a090 <__sinit+0x6c>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	62a2      	str	r2, [r4, #40]	; 0x28
 800a046:	42a3      	cmp	r3, r4
 800a048:	bf04      	itt	eq
 800a04a:	2301      	moveq	r3, #1
 800a04c:	61a3      	streq	r3, [r4, #24]
 800a04e:	4620      	mov	r0, r4
 800a050:	f000 f820 	bl	800a094 <__sfp>
 800a054:	6060      	str	r0, [r4, #4]
 800a056:	4620      	mov	r0, r4
 800a058:	f000 f81c 	bl	800a094 <__sfp>
 800a05c:	60a0      	str	r0, [r4, #8]
 800a05e:	4620      	mov	r0, r4
 800a060:	f000 f818 	bl	800a094 <__sfp>
 800a064:	2200      	movs	r2, #0
 800a066:	60e0      	str	r0, [r4, #12]
 800a068:	2104      	movs	r1, #4
 800a06a:	6860      	ldr	r0, [r4, #4]
 800a06c:	f7ff ff82 	bl	8009f74 <std>
 800a070:	68a0      	ldr	r0, [r4, #8]
 800a072:	2201      	movs	r2, #1
 800a074:	2109      	movs	r1, #9
 800a076:	f7ff ff7d 	bl	8009f74 <std>
 800a07a:	68e0      	ldr	r0, [r4, #12]
 800a07c:	2202      	movs	r2, #2
 800a07e:	2112      	movs	r1, #18
 800a080:	f7ff ff78 	bl	8009f74 <std>
 800a084:	2301      	movs	r3, #1
 800a086:	61a3      	str	r3, [r4, #24]
 800a088:	e7d2      	b.n	800a030 <__sinit+0xc>
 800a08a:	bf00      	nop
 800a08c:	0800aec8 	.word	0x0800aec8
 800a090:	08009fbd 	.word	0x08009fbd

0800a094 <__sfp>:
 800a094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a096:	4607      	mov	r7, r0
 800a098:	f7ff ffac 	bl	8009ff4 <__sfp_lock_acquire>
 800a09c:	4b1e      	ldr	r3, [pc, #120]	; (800a118 <__sfp+0x84>)
 800a09e:	681e      	ldr	r6, [r3, #0]
 800a0a0:	69b3      	ldr	r3, [r6, #24]
 800a0a2:	b913      	cbnz	r3, 800a0aa <__sfp+0x16>
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	f7ff ffbd 	bl	800a024 <__sinit>
 800a0aa:	3648      	adds	r6, #72	; 0x48
 800a0ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	d503      	bpl.n	800a0bc <__sfp+0x28>
 800a0b4:	6833      	ldr	r3, [r6, #0]
 800a0b6:	b30b      	cbz	r3, 800a0fc <__sfp+0x68>
 800a0b8:	6836      	ldr	r6, [r6, #0]
 800a0ba:	e7f7      	b.n	800a0ac <__sfp+0x18>
 800a0bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0c0:	b9d5      	cbnz	r5, 800a0f8 <__sfp+0x64>
 800a0c2:	4b16      	ldr	r3, [pc, #88]	; (800a11c <__sfp+0x88>)
 800a0c4:	60e3      	str	r3, [r4, #12]
 800a0c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0ca:	6665      	str	r5, [r4, #100]	; 0x64
 800a0cc:	f000 f847 	bl	800a15e <__retarget_lock_init_recursive>
 800a0d0:	f7ff ff96 	bl	800a000 <__sfp_lock_release>
 800a0d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0dc:	6025      	str	r5, [r4, #0]
 800a0de:	61a5      	str	r5, [r4, #24]
 800a0e0:	2208      	movs	r2, #8
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0e8:	f7ff ff24 	bl	8009f34 <memset>
 800a0ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0f8:	3468      	adds	r4, #104	; 0x68
 800a0fa:	e7d9      	b.n	800a0b0 <__sfp+0x1c>
 800a0fc:	2104      	movs	r1, #4
 800a0fe:	4638      	mov	r0, r7
 800a100:	f7ff ff62 	bl	8009fc8 <__sfmoreglue>
 800a104:	4604      	mov	r4, r0
 800a106:	6030      	str	r0, [r6, #0]
 800a108:	2800      	cmp	r0, #0
 800a10a:	d1d5      	bne.n	800a0b8 <__sfp+0x24>
 800a10c:	f7ff ff78 	bl	800a000 <__sfp_lock_release>
 800a110:	230c      	movs	r3, #12
 800a112:	603b      	str	r3, [r7, #0]
 800a114:	e7ee      	b.n	800a0f4 <__sfp+0x60>
 800a116:	bf00      	nop
 800a118:	0800aec8 	.word	0x0800aec8
 800a11c:	ffff0001 	.word	0xffff0001

0800a120 <_fwalk_reent>:
 800a120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a124:	4606      	mov	r6, r0
 800a126:	4688      	mov	r8, r1
 800a128:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a12c:	2700      	movs	r7, #0
 800a12e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a132:	f1b9 0901 	subs.w	r9, r9, #1
 800a136:	d505      	bpl.n	800a144 <_fwalk_reent+0x24>
 800a138:	6824      	ldr	r4, [r4, #0]
 800a13a:	2c00      	cmp	r4, #0
 800a13c:	d1f7      	bne.n	800a12e <_fwalk_reent+0xe>
 800a13e:	4638      	mov	r0, r7
 800a140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a144:	89ab      	ldrh	r3, [r5, #12]
 800a146:	2b01      	cmp	r3, #1
 800a148:	d907      	bls.n	800a15a <_fwalk_reent+0x3a>
 800a14a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a14e:	3301      	adds	r3, #1
 800a150:	d003      	beq.n	800a15a <_fwalk_reent+0x3a>
 800a152:	4629      	mov	r1, r5
 800a154:	4630      	mov	r0, r6
 800a156:	47c0      	blx	r8
 800a158:	4307      	orrs	r7, r0
 800a15a:	3568      	adds	r5, #104	; 0x68
 800a15c:	e7e9      	b.n	800a132 <_fwalk_reent+0x12>

0800a15e <__retarget_lock_init_recursive>:
 800a15e:	4770      	bx	lr

0800a160 <__retarget_lock_acquire_recursive>:
 800a160:	4770      	bx	lr

0800a162 <__retarget_lock_release_recursive>:
 800a162:	4770      	bx	lr

0800a164 <sbrk_aligned>:
 800a164:	b570      	push	{r4, r5, r6, lr}
 800a166:	4e0e      	ldr	r6, [pc, #56]	; (800a1a0 <sbrk_aligned+0x3c>)
 800a168:	460c      	mov	r4, r1
 800a16a:	6831      	ldr	r1, [r6, #0]
 800a16c:	4605      	mov	r5, r0
 800a16e:	b911      	cbnz	r1, 800a176 <sbrk_aligned+0x12>
 800a170:	f000 fb7a 	bl	800a868 <_sbrk_r>
 800a174:	6030      	str	r0, [r6, #0]
 800a176:	4621      	mov	r1, r4
 800a178:	4628      	mov	r0, r5
 800a17a:	f000 fb75 	bl	800a868 <_sbrk_r>
 800a17e:	1c43      	adds	r3, r0, #1
 800a180:	d00a      	beq.n	800a198 <sbrk_aligned+0x34>
 800a182:	1cc4      	adds	r4, r0, #3
 800a184:	f024 0403 	bic.w	r4, r4, #3
 800a188:	42a0      	cmp	r0, r4
 800a18a:	d007      	beq.n	800a19c <sbrk_aligned+0x38>
 800a18c:	1a21      	subs	r1, r4, r0
 800a18e:	4628      	mov	r0, r5
 800a190:	f000 fb6a 	bl	800a868 <_sbrk_r>
 800a194:	3001      	adds	r0, #1
 800a196:	d101      	bne.n	800a19c <sbrk_aligned+0x38>
 800a198:	f04f 34ff 	mov.w	r4, #4294967295
 800a19c:	4620      	mov	r0, r4
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	24000408 	.word	0x24000408

0800a1a4 <_malloc_r>:
 800a1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a8:	1ccd      	adds	r5, r1, #3
 800a1aa:	f025 0503 	bic.w	r5, r5, #3
 800a1ae:	3508      	adds	r5, #8
 800a1b0:	2d0c      	cmp	r5, #12
 800a1b2:	bf38      	it	cc
 800a1b4:	250c      	movcc	r5, #12
 800a1b6:	2d00      	cmp	r5, #0
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	db01      	blt.n	800a1c0 <_malloc_r+0x1c>
 800a1bc:	42a9      	cmp	r1, r5
 800a1be:	d905      	bls.n	800a1cc <_malloc_r+0x28>
 800a1c0:	230c      	movs	r3, #12
 800a1c2:	603b      	str	r3, [r7, #0]
 800a1c4:	2600      	movs	r6, #0
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1cc:	4e2e      	ldr	r6, [pc, #184]	; (800a288 <_malloc_r+0xe4>)
 800a1ce:	f000 fdbb 	bl	800ad48 <__malloc_lock>
 800a1d2:	6833      	ldr	r3, [r6, #0]
 800a1d4:	461c      	mov	r4, r3
 800a1d6:	bb34      	cbnz	r4, 800a226 <_malloc_r+0x82>
 800a1d8:	4629      	mov	r1, r5
 800a1da:	4638      	mov	r0, r7
 800a1dc:	f7ff ffc2 	bl	800a164 <sbrk_aligned>
 800a1e0:	1c43      	adds	r3, r0, #1
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	d14d      	bne.n	800a282 <_malloc_r+0xde>
 800a1e6:	6834      	ldr	r4, [r6, #0]
 800a1e8:	4626      	mov	r6, r4
 800a1ea:	2e00      	cmp	r6, #0
 800a1ec:	d140      	bne.n	800a270 <_malloc_r+0xcc>
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	eb04 0803 	add.w	r8, r4, r3
 800a1f8:	f000 fb36 	bl	800a868 <_sbrk_r>
 800a1fc:	4580      	cmp	r8, r0
 800a1fe:	d13a      	bne.n	800a276 <_malloc_r+0xd2>
 800a200:	6821      	ldr	r1, [r4, #0]
 800a202:	3503      	adds	r5, #3
 800a204:	1a6d      	subs	r5, r5, r1
 800a206:	f025 0503 	bic.w	r5, r5, #3
 800a20a:	3508      	adds	r5, #8
 800a20c:	2d0c      	cmp	r5, #12
 800a20e:	bf38      	it	cc
 800a210:	250c      	movcc	r5, #12
 800a212:	4629      	mov	r1, r5
 800a214:	4638      	mov	r0, r7
 800a216:	f7ff ffa5 	bl	800a164 <sbrk_aligned>
 800a21a:	3001      	adds	r0, #1
 800a21c:	d02b      	beq.n	800a276 <_malloc_r+0xd2>
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	442b      	add	r3, r5
 800a222:	6023      	str	r3, [r4, #0]
 800a224:	e00e      	b.n	800a244 <_malloc_r+0xa0>
 800a226:	6822      	ldr	r2, [r4, #0]
 800a228:	1b52      	subs	r2, r2, r5
 800a22a:	d41e      	bmi.n	800a26a <_malloc_r+0xc6>
 800a22c:	2a0b      	cmp	r2, #11
 800a22e:	d916      	bls.n	800a25e <_malloc_r+0xba>
 800a230:	1961      	adds	r1, r4, r5
 800a232:	42a3      	cmp	r3, r4
 800a234:	6025      	str	r5, [r4, #0]
 800a236:	bf18      	it	ne
 800a238:	6059      	strne	r1, [r3, #4]
 800a23a:	6863      	ldr	r3, [r4, #4]
 800a23c:	bf08      	it	eq
 800a23e:	6031      	streq	r1, [r6, #0]
 800a240:	5162      	str	r2, [r4, r5]
 800a242:	604b      	str	r3, [r1, #4]
 800a244:	4638      	mov	r0, r7
 800a246:	f104 060b 	add.w	r6, r4, #11
 800a24a:	f000 fd83 	bl	800ad54 <__malloc_unlock>
 800a24e:	f026 0607 	bic.w	r6, r6, #7
 800a252:	1d23      	adds	r3, r4, #4
 800a254:	1af2      	subs	r2, r6, r3
 800a256:	d0b6      	beq.n	800a1c6 <_malloc_r+0x22>
 800a258:	1b9b      	subs	r3, r3, r6
 800a25a:	50a3      	str	r3, [r4, r2]
 800a25c:	e7b3      	b.n	800a1c6 <_malloc_r+0x22>
 800a25e:	6862      	ldr	r2, [r4, #4]
 800a260:	42a3      	cmp	r3, r4
 800a262:	bf0c      	ite	eq
 800a264:	6032      	streq	r2, [r6, #0]
 800a266:	605a      	strne	r2, [r3, #4]
 800a268:	e7ec      	b.n	800a244 <_malloc_r+0xa0>
 800a26a:	4623      	mov	r3, r4
 800a26c:	6864      	ldr	r4, [r4, #4]
 800a26e:	e7b2      	b.n	800a1d6 <_malloc_r+0x32>
 800a270:	4634      	mov	r4, r6
 800a272:	6876      	ldr	r6, [r6, #4]
 800a274:	e7b9      	b.n	800a1ea <_malloc_r+0x46>
 800a276:	230c      	movs	r3, #12
 800a278:	603b      	str	r3, [r7, #0]
 800a27a:	4638      	mov	r0, r7
 800a27c:	f000 fd6a 	bl	800ad54 <__malloc_unlock>
 800a280:	e7a1      	b.n	800a1c6 <_malloc_r+0x22>
 800a282:	6025      	str	r5, [r4, #0]
 800a284:	e7de      	b.n	800a244 <_malloc_r+0xa0>
 800a286:	bf00      	nop
 800a288:	24000404 	.word	0x24000404

0800a28c <__sfputc_r>:
 800a28c:	6893      	ldr	r3, [r2, #8]
 800a28e:	3b01      	subs	r3, #1
 800a290:	2b00      	cmp	r3, #0
 800a292:	b410      	push	{r4}
 800a294:	6093      	str	r3, [r2, #8]
 800a296:	da08      	bge.n	800a2aa <__sfputc_r+0x1e>
 800a298:	6994      	ldr	r4, [r2, #24]
 800a29a:	42a3      	cmp	r3, r4
 800a29c:	db01      	blt.n	800a2a2 <__sfputc_r+0x16>
 800a29e:	290a      	cmp	r1, #10
 800a2a0:	d103      	bne.n	800a2aa <__sfputc_r+0x1e>
 800a2a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2a6:	f000 bb33 	b.w	800a910 <__swbuf_r>
 800a2aa:	6813      	ldr	r3, [r2, #0]
 800a2ac:	1c58      	adds	r0, r3, #1
 800a2ae:	6010      	str	r0, [r2, #0]
 800a2b0:	7019      	strb	r1, [r3, #0]
 800a2b2:	4608      	mov	r0, r1
 800a2b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <__sfputs_r>:
 800a2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2bc:	4606      	mov	r6, r0
 800a2be:	460f      	mov	r7, r1
 800a2c0:	4614      	mov	r4, r2
 800a2c2:	18d5      	adds	r5, r2, r3
 800a2c4:	42ac      	cmp	r4, r5
 800a2c6:	d101      	bne.n	800a2cc <__sfputs_r+0x12>
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	e007      	b.n	800a2dc <__sfputs_r+0x22>
 800a2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2d0:	463a      	mov	r2, r7
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f7ff ffda 	bl	800a28c <__sfputc_r>
 800a2d8:	1c43      	adds	r3, r0, #1
 800a2da:	d1f3      	bne.n	800a2c4 <__sfputs_r+0xa>
 800a2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2e0 <_vfiprintf_r>:
 800a2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e4:	460d      	mov	r5, r1
 800a2e6:	b09d      	sub	sp, #116	; 0x74
 800a2e8:	4614      	mov	r4, r2
 800a2ea:	4698      	mov	r8, r3
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	b118      	cbz	r0, 800a2f8 <_vfiprintf_r+0x18>
 800a2f0:	6983      	ldr	r3, [r0, #24]
 800a2f2:	b90b      	cbnz	r3, 800a2f8 <_vfiprintf_r+0x18>
 800a2f4:	f7ff fe96 	bl	800a024 <__sinit>
 800a2f8:	4b89      	ldr	r3, [pc, #548]	; (800a520 <_vfiprintf_r+0x240>)
 800a2fa:	429d      	cmp	r5, r3
 800a2fc:	d11b      	bne.n	800a336 <_vfiprintf_r+0x56>
 800a2fe:	6875      	ldr	r5, [r6, #4]
 800a300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a302:	07d9      	lsls	r1, r3, #31
 800a304:	d405      	bmi.n	800a312 <_vfiprintf_r+0x32>
 800a306:	89ab      	ldrh	r3, [r5, #12]
 800a308:	059a      	lsls	r2, r3, #22
 800a30a:	d402      	bmi.n	800a312 <_vfiprintf_r+0x32>
 800a30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a30e:	f7ff ff27 	bl	800a160 <__retarget_lock_acquire_recursive>
 800a312:	89ab      	ldrh	r3, [r5, #12]
 800a314:	071b      	lsls	r3, r3, #28
 800a316:	d501      	bpl.n	800a31c <_vfiprintf_r+0x3c>
 800a318:	692b      	ldr	r3, [r5, #16]
 800a31a:	b9eb      	cbnz	r3, 800a358 <_vfiprintf_r+0x78>
 800a31c:	4629      	mov	r1, r5
 800a31e:	4630      	mov	r0, r6
 800a320:	f000 fb5a 	bl	800a9d8 <__swsetup_r>
 800a324:	b1c0      	cbz	r0, 800a358 <_vfiprintf_r+0x78>
 800a326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a328:	07dc      	lsls	r4, r3, #31
 800a32a:	d50e      	bpl.n	800a34a <_vfiprintf_r+0x6a>
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	b01d      	add	sp, #116	; 0x74
 800a332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a336:	4b7b      	ldr	r3, [pc, #492]	; (800a524 <_vfiprintf_r+0x244>)
 800a338:	429d      	cmp	r5, r3
 800a33a:	d101      	bne.n	800a340 <_vfiprintf_r+0x60>
 800a33c:	68b5      	ldr	r5, [r6, #8]
 800a33e:	e7df      	b.n	800a300 <_vfiprintf_r+0x20>
 800a340:	4b79      	ldr	r3, [pc, #484]	; (800a528 <_vfiprintf_r+0x248>)
 800a342:	429d      	cmp	r5, r3
 800a344:	bf08      	it	eq
 800a346:	68f5      	ldreq	r5, [r6, #12]
 800a348:	e7da      	b.n	800a300 <_vfiprintf_r+0x20>
 800a34a:	89ab      	ldrh	r3, [r5, #12]
 800a34c:	0598      	lsls	r0, r3, #22
 800a34e:	d4ed      	bmi.n	800a32c <_vfiprintf_r+0x4c>
 800a350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a352:	f7ff ff06 	bl	800a162 <__retarget_lock_release_recursive>
 800a356:	e7e9      	b.n	800a32c <_vfiprintf_r+0x4c>
 800a358:	2300      	movs	r3, #0
 800a35a:	9309      	str	r3, [sp, #36]	; 0x24
 800a35c:	2320      	movs	r3, #32
 800a35e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a362:	f8cd 800c 	str.w	r8, [sp, #12]
 800a366:	2330      	movs	r3, #48	; 0x30
 800a368:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a52c <_vfiprintf_r+0x24c>
 800a36c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a370:	f04f 0901 	mov.w	r9, #1
 800a374:	4623      	mov	r3, r4
 800a376:	469a      	mov	sl, r3
 800a378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a37c:	b10a      	cbz	r2, 800a382 <_vfiprintf_r+0xa2>
 800a37e:	2a25      	cmp	r2, #37	; 0x25
 800a380:	d1f9      	bne.n	800a376 <_vfiprintf_r+0x96>
 800a382:	ebba 0b04 	subs.w	fp, sl, r4
 800a386:	d00b      	beq.n	800a3a0 <_vfiprintf_r+0xc0>
 800a388:	465b      	mov	r3, fp
 800a38a:	4622      	mov	r2, r4
 800a38c:	4629      	mov	r1, r5
 800a38e:	4630      	mov	r0, r6
 800a390:	f7ff ff93 	bl	800a2ba <__sfputs_r>
 800a394:	3001      	adds	r0, #1
 800a396:	f000 80aa 	beq.w	800a4ee <_vfiprintf_r+0x20e>
 800a39a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a39c:	445a      	add	r2, fp
 800a39e:	9209      	str	r2, [sp, #36]	; 0x24
 800a3a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 80a2 	beq.w	800a4ee <_vfiprintf_r+0x20e>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3b4:	f10a 0a01 	add.w	sl, sl, #1
 800a3b8:	9304      	str	r3, [sp, #16]
 800a3ba:	9307      	str	r3, [sp, #28]
 800a3bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3c0:	931a      	str	r3, [sp, #104]	; 0x68
 800a3c2:	4654      	mov	r4, sl
 800a3c4:	2205      	movs	r2, #5
 800a3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ca:	4858      	ldr	r0, [pc, #352]	; (800a52c <_vfiprintf_r+0x24c>)
 800a3cc:	f7f5 ff88 	bl	80002e0 <memchr>
 800a3d0:	9a04      	ldr	r2, [sp, #16]
 800a3d2:	b9d8      	cbnz	r0, 800a40c <_vfiprintf_r+0x12c>
 800a3d4:	06d1      	lsls	r1, r2, #27
 800a3d6:	bf44      	itt	mi
 800a3d8:	2320      	movmi	r3, #32
 800a3da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3de:	0713      	lsls	r3, r2, #28
 800a3e0:	bf44      	itt	mi
 800a3e2:	232b      	movmi	r3, #43	; 0x2b
 800a3e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ee:	d015      	beq.n	800a41c <_vfiprintf_r+0x13c>
 800a3f0:	9a07      	ldr	r2, [sp, #28]
 800a3f2:	4654      	mov	r4, sl
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	f04f 0c0a 	mov.w	ip, #10
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a400:	3b30      	subs	r3, #48	; 0x30
 800a402:	2b09      	cmp	r3, #9
 800a404:	d94e      	bls.n	800a4a4 <_vfiprintf_r+0x1c4>
 800a406:	b1b0      	cbz	r0, 800a436 <_vfiprintf_r+0x156>
 800a408:	9207      	str	r2, [sp, #28]
 800a40a:	e014      	b.n	800a436 <_vfiprintf_r+0x156>
 800a40c:	eba0 0308 	sub.w	r3, r0, r8
 800a410:	fa09 f303 	lsl.w	r3, r9, r3
 800a414:	4313      	orrs	r3, r2
 800a416:	9304      	str	r3, [sp, #16]
 800a418:	46a2      	mov	sl, r4
 800a41a:	e7d2      	b.n	800a3c2 <_vfiprintf_r+0xe2>
 800a41c:	9b03      	ldr	r3, [sp, #12]
 800a41e:	1d19      	adds	r1, r3, #4
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	9103      	str	r1, [sp, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	bfbb      	ittet	lt
 800a428:	425b      	neglt	r3, r3
 800a42a:	f042 0202 	orrlt.w	r2, r2, #2
 800a42e:	9307      	strge	r3, [sp, #28]
 800a430:	9307      	strlt	r3, [sp, #28]
 800a432:	bfb8      	it	lt
 800a434:	9204      	strlt	r2, [sp, #16]
 800a436:	7823      	ldrb	r3, [r4, #0]
 800a438:	2b2e      	cmp	r3, #46	; 0x2e
 800a43a:	d10c      	bne.n	800a456 <_vfiprintf_r+0x176>
 800a43c:	7863      	ldrb	r3, [r4, #1]
 800a43e:	2b2a      	cmp	r3, #42	; 0x2a
 800a440:	d135      	bne.n	800a4ae <_vfiprintf_r+0x1ce>
 800a442:	9b03      	ldr	r3, [sp, #12]
 800a444:	1d1a      	adds	r2, r3, #4
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	9203      	str	r2, [sp, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	bfb8      	it	lt
 800a44e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a452:	3402      	adds	r4, #2
 800a454:	9305      	str	r3, [sp, #20]
 800a456:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a53c <_vfiprintf_r+0x25c>
 800a45a:	7821      	ldrb	r1, [r4, #0]
 800a45c:	2203      	movs	r2, #3
 800a45e:	4650      	mov	r0, sl
 800a460:	f7f5 ff3e 	bl	80002e0 <memchr>
 800a464:	b140      	cbz	r0, 800a478 <_vfiprintf_r+0x198>
 800a466:	2340      	movs	r3, #64	; 0x40
 800a468:	eba0 000a 	sub.w	r0, r0, sl
 800a46c:	fa03 f000 	lsl.w	r0, r3, r0
 800a470:	9b04      	ldr	r3, [sp, #16]
 800a472:	4303      	orrs	r3, r0
 800a474:	3401      	adds	r4, #1
 800a476:	9304      	str	r3, [sp, #16]
 800a478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a47c:	482c      	ldr	r0, [pc, #176]	; (800a530 <_vfiprintf_r+0x250>)
 800a47e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a482:	2206      	movs	r2, #6
 800a484:	f7f5 ff2c 	bl	80002e0 <memchr>
 800a488:	2800      	cmp	r0, #0
 800a48a:	d03f      	beq.n	800a50c <_vfiprintf_r+0x22c>
 800a48c:	4b29      	ldr	r3, [pc, #164]	; (800a534 <_vfiprintf_r+0x254>)
 800a48e:	bb1b      	cbnz	r3, 800a4d8 <_vfiprintf_r+0x1f8>
 800a490:	9b03      	ldr	r3, [sp, #12]
 800a492:	3307      	adds	r3, #7
 800a494:	f023 0307 	bic.w	r3, r3, #7
 800a498:	3308      	adds	r3, #8
 800a49a:	9303      	str	r3, [sp, #12]
 800a49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49e:	443b      	add	r3, r7
 800a4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4a2:	e767      	b.n	800a374 <_vfiprintf_r+0x94>
 800a4a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4a8:	460c      	mov	r4, r1
 800a4aa:	2001      	movs	r0, #1
 800a4ac:	e7a5      	b.n	800a3fa <_vfiprintf_r+0x11a>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	3401      	adds	r4, #1
 800a4b2:	9305      	str	r3, [sp, #20]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	f04f 0c0a 	mov.w	ip, #10
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4c0:	3a30      	subs	r2, #48	; 0x30
 800a4c2:	2a09      	cmp	r2, #9
 800a4c4:	d903      	bls.n	800a4ce <_vfiprintf_r+0x1ee>
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d0c5      	beq.n	800a456 <_vfiprintf_r+0x176>
 800a4ca:	9105      	str	r1, [sp, #20]
 800a4cc:	e7c3      	b.n	800a456 <_vfiprintf_r+0x176>
 800a4ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e7f0      	b.n	800a4ba <_vfiprintf_r+0x1da>
 800a4d8:	ab03      	add	r3, sp, #12
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	462a      	mov	r2, r5
 800a4de:	4b16      	ldr	r3, [pc, #88]	; (800a538 <_vfiprintf_r+0x258>)
 800a4e0:	a904      	add	r1, sp, #16
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f3af 8000 	nop.w
 800a4e8:	4607      	mov	r7, r0
 800a4ea:	1c78      	adds	r0, r7, #1
 800a4ec:	d1d6      	bne.n	800a49c <_vfiprintf_r+0x1bc>
 800a4ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4f0:	07d9      	lsls	r1, r3, #31
 800a4f2:	d405      	bmi.n	800a500 <_vfiprintf_r+0x220>
 800a4f4:	89ab      	ldrh	r3, [r5, #12]
 800a4f6:	059a      	lsls	r2, r3, #22
 800a4f8:	d402      	bmi.n	800a500 <_vfiprintf_r+0x220>
 800a4fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4fc:	f7ff fe31 	bl	800a162 <__retarget_lock_release_recursive>
 800a500:	89ab      	ldrh	r3, [r5, #12]
 800a502:	065b      	lsls	r3, r3, #25
 800a504:	f53f af12 	bmi.w	800a32c <_vfiprintf_r+0x4c>
 800a508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a50a:	e711      	b.n	800a330 <_vfiprintf_r+0x50>
 800a50c:	ab03      	add	r3, sp, #12
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	462a      	mov	r2, r5
 800a512:	4b09      	ldr	r3, [pc, #36]	; (800a538 <_vfiprintf_r+0x258>)
 800a514:	a904      	add	r1, sp, #16
 800a516:	4630      	mov	r0, r6
 800a518:	f000 f880 	bl	800a61c <_printf_i>
 800a51c:	e7e4      	b.n	800a4e8 <_vfiprintf_r+0x208>
 800a51e:	bf00      	nop
 800a520:	0800aeec 	.word	0x0800aeec
 800a524:	0800af0c 	.word	0x0800af0c
 800a528:	0800aecc 	.word	0x0800aecc
 800a52c:	0800af2c 	.word	0x0800af2c
 800a530:	0800af36 	.word	0x0800af36
 800a534:	00000000 	.word	0x00000000
 800a538:	0800a2bb 	.word	0x0800a2bb
 800a53c:	0800af32 	.word	0x0800af32

0800a540 <_printf_common>:
 800a540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a544:	4616      	mov	r6, r2
 800a546:	4699      	mov	r9, r3
 800a548:	688a      	ldr	r2, [r1, #8]
 800a54a:	690b      	ldr	r3, [r1, #16]
 800a54c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a550:	4293      	cmp	r3, r2
 800a552:	bfb8      	it	lt
 800a554:	4613      	movlt	r3, r2
 800a556:	6033      	str	r3, [r6, #0]
 800a558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a55c:	4607      	mov	r7, r0
 800a55e:	460c      	mov	r4, r1
 800a560:	b10a      	cbz	r2, 800a566 <_printf_common+0x26>
 800a562:	3301      	adds	r3, #1
 800a564:	6033      	str	r3, [r6, #0]
 800a566:	6823      	ldr	r3, [r4, #0]
 800a568:	0699      	lsls	r1, r3, #26
 800a56a:	bf42      	ittt	mi
 800a56c:	6833      	ldrmi	r3, [r6, #0]
 800a56e:	3302      	addmi	r3, #2
 800a570:	6033      	strmi	r3, [r6, #0]
 800a572:	6825      	ldr	r5, [r4, #0]
 800a574:	f015 0506 	ands.w	r5, r5, #6
 800a578:	d106      	bne.n	800a588 <_printf_common+0x48>
 800a57a:	f104 0a19 	add.w	sl, r4, #25
 800a57e:	68e3      	ldr	r3, [r4, #12]
 800a580:	6832      	ldr	r2, [r6, #0]
 800a582:	1a9b      	subs	r3, r3, r2
 800a584:	42ab      	cmp	r3, r5
 800a586:	dc26      	bgt.n	800a5d6 <_printf_common+0x96>
 800a588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a58c:	1e13      	subs	r3, r2, #0
 800a58e:	6822      	ldr	r2, [r4, #0]
 800a590:	bf18      	it	ne
 800a592:	2301      	movne	r3, #1
 800a594:	0692      	lsls	r2, r2, #26
 800a596:	d42b      	bmi.n	800a5f0 <_printf_common+0xb0>
 800a598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a59c:	4649      	mov	r1, r9
 800a59e:	4638      	mov	r0, r7
 800a5a0:	47c0      	blx	r8
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	d01e      	beq.n	800a5e4 <_printf_common+0xa4>
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	68e5      	ldr	r5, [r4, #12]
 800a5aa:	6832      	ldr	r2, [r6, #0]
 800a5ac:	f003 0306 	and.w	r3, r3, #6
 800a5b0:	2b04      	cmp	r3, #4
 800a5b2:	bf08      	it	eq
 800a5b4:	1aad      	subeq	r5, r5, r2
 800a5b6:	68a3      	ldr	r3, [r4, #8]
 800a5b8:	6922      	ldr	r2, [r4, #16]
 800a5ba:	bf0c      	ite	eq
 800a5bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5c0:	2500      	movne	r5, #0
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	bfc4      	itt	gt
 800a5c6:	1a9b      	subgt	r3, r3, r2
 800a5c8:	18ed      	addgt	r5, r5, r3
 800a5ca:	2600      	movs	r6, #0
 800a5cc:	341a      	adds	r4, #26
 800a5ce:	42b5      	cmp	r5, r6
 800a5d0:	d11a      	bne.n	800a608 <_printf_common+0xc8>
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	e008      	b.n	800a5e8 <_printf_common+0xa8>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	4652      	mov	r2, sl
 800a5da:	4649      	mov	r1, r9
 800a5dc:	4638      	mov	r0, r7
 800a5de:	47c0      	blx	r8
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	d103      	bne.n	800a5ec <_printf_common+0xac>
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ec:	3501      	adds	r5, #1
 800a5ee:	e7c6      	b.n	800a57e <_printf_common+0x3e>
 800a5f0:	18e1      	adds	r1, r4, r3
 800a5f2:	1c5a      	adds	r2, r3, #1
 800a5f4:	2030      	movs	r0, #48	; 0x30
 800a5f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5fa:	4422      	add	r2, r4
 800a5fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a604:	3302      	adds	r3, #2
 800a606:	e7c7      	b.n	800a598 <_printf_common+0x58>
 800a608:	2301      	movs	r3, #1
 800a60a:	4622      	mov	r2, r4
 800a60c:	4649      	mov	r1, r9
 800a60e:	4638      	mov	r0, r7
 800a610:	47c0      	blx	r8
 800a612:	3001      	adds	r0, #1
 800a614:	d0e6      	beq.n	800a5e4 <_printf_common+0xa4>
 800a616:	3601      	adds	r6, #1
 800a618:	e7d9      	b.n	800a5ce <_printf_common+0x8e>
	...

0800a61c <_printf_i>:
 800a61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a620:	7e0f      	ldrb	r7, [r1, #24]
 800a622:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a624:	2f78      	cmp	r7, #120	; 0x78
 800a626:	4691      	mov	r9, r2
 800a628:	4680      	mov	r8, r0
 800a62a:	460c      	mov	r4, r1
 800a62c:	469a      	mov	sl, r3
 800a62e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a632:	d807      	bhi.n	800a644 <_printf_i+0x28>
 800a634:	2f62      	cmp	r7, #98	; 0x62
 800a636:	d80a      	bhi.n	800a64e <_printf_i+0x32>
 800a638:	2f00      	cmp	r7, #0
 800a63a:	f000 80d8 	beq.w	800a7ee <_printf_i+0x1d2>
 800a63e:	2f58      	cmp	r7, #88	; 0x58
 800a640:	f000 80a3 	beq.w	800a78a <_printf_i+0x16e>
 800a644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a64c:	e03a      	b.n	800a6c4 <_printf_i+0xa8>
 800a64e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a652:	2b15      	cmp	r3, #21
 800a654:	d8f6      	bhi.n	800a644 <_printf_i+0x28>
 800a656:	a101      	add	r1, pc, #4	; (adr r1, 800a65c <_printf_i+0x40>)
 800a658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a65c:	0800a6b5 	.word	0x0800a6b5
 800a660:	0800a6c9 	.word	0x0800a6c9
 800a664:	0800a645 	.word	0x0800a645
 800a668:	0800a645 	.word	0x0800a645
 800a66c:	0800a645 	.word	0x0800a645
 800a670:	0800a645 	.word	0x0800a645
 800a674:	0800a6c9 	.word	0x0800a6c9
 800a678:	0800a645 	.word	0x0800a645
 800a67c:	0800a645 	.word	0x0800a645
 800a680:	0800a645 	.word	0x0800a645
 800a684:	0800a645 	.word	0x0800a645
 800a688:	0800a7d5 	.word	0x0800a7d5
 800a68c:	0800a6f9 	.word	0x0800a6f9
 800a690:	0800a7b7 	.word	0x0800a7b7
 800a694:	0800a645 	.word	0x0800a645
 800a698:	0800a645 	.word	0x0800a645
 800a69c:	0800a7f7 	.word	0x0800a7f7
 800a6a0:	0800a645 	.word	0x0800a645
 800a6a4:	0800a6f9 	.word	0x0800a6f9
 800a6a8:	0800a645 	.word	0x0800a645
 800a6ac:	0800a645 	.word	0x0800a645
 800a6b0:	0800a7bf 	.word	0x0800a7bf
 800a6b4:	682b      	ldr	r3, [r5, #0]
 800a6b6:	1d1a      	adds	r2, r3, #4
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	602a      	str	r2, [r5, #0]
 800a6bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e0a3      	b.n	800a810 <_printf_i+0x1f4>
 800a6c8:	6820      	ldr	r0, [r4, #0]
 800a6ca:	6829      	ldr	r1, [r5, #0]
 800a6cc:	0606      	lsls	r6, r0, #24
 800a6ce:	f101 0304 	add.w	r3, r1, #4
 800a6d2:	d50a      	bpl.n	800a6ea <_printf_i+0xce>
 800a6d4:	680e      	ldr	r6, [r1, #0]
 800a6d6:	602b      	str	r3, [r5, #0]
 800a6d8:	2e00      	cmp	r6, #0
 800a6da:	da03      	bge.n	800a6e4 <_printf_i+0xc8>
 800a6dc:	232d      	movs	r3, #45	; 0x2d
 800a6de:	4276      	negs	r6, r6
 800a6e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6e4:	485e      	ldr	r0, [pc, #376]	; (800a860 <_printf_i+0x244>)
 800a6e6:	230a      	movs	r3, #10
 800a6e8:	e019      	b.n	800a71e <_printf_i+0x102>
 800a6ea:	680e      	ldr	r6, [r1, #0]
 800a6ec:	602b      	str	r3, [r5, #0]
 800a6ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6f2:	bf18      	it	ne
 800a6f4:	b236      	sxthne	r6, r6
 800a6f6:	e7ef      	b.n	800a6d8 <_printf_i+0xbc>
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	6820      	ldr	r0, [r4, #0]
 800a6fc:	1d19      	adds	r1, r3, #4
 800a6fe:	6029      	str	r1, [r5, #0]
 800a700:	0601      	lsls	r1, r0, #24
 800a702:	d501      	bpl.n	800a708 <_printf_i+0xec>
 800a704:	681e      	ldr	r6, [r3, #0]
 800a706:	e002      	b.n	800a70e <_printf_i+0xf2>
 800a708:	0646      	lsls	r6, r0, #25
 800a70a:	d5fb      	bpl.n	800a704 <_printf_i+0xe8>
 800a70c:	881e      	ldrh	r6, [r3, #0]
 800a70e:	4854      	ldr	r0, [pc, #336]	; (800a860 <_printf_i+0x244>)
 800a710:	2f6f      	cmp	r7, #111	; 0x6f
 800a712:	bf0c      	ite	eq
 800a714:	2308      	moveq	r3, #8
 800a716:	230a      	movne	r3, #10
 800a718:	2100      	movs	r1, #0
 800a71a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a71e:	6865      	ldr	r5, [r4, #4]
 800a720:	60a5      	str	r5, [r4, #8]
 800a722:	2d00      	cmp	r5, #0
 800a724:	bfa2      	ittt	ge
 800a726:	6821      	ldrge	r1, [r4, #0]
 800a728:	f021 0104 	bicge.w	r1, r1, #4
 800a72c:	6021      	strge	r1, [r4, #0]
 800a72e:	b90e      	cbnz	r6, 800a734 <_printf_i+0x118>
 800a730:	2d00      	cmp	r5, #0
 800a732:	d04d      	beq.n	800a7d0 <_printf_i+0x1b4>
 800a734:	4615      	mov	r5, r2
 800a736:	fbb6 f1f3 	udiv	r1, r6, r3
 800a73a:	fb03 6711 	mls	r7, r3, r1, r6
 800a73e:	5dc7      	ldrb	r7, [r0, r7]
 800a740:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a744:	4637      	mov	r7, r6
 800a746:	42bb      	cmp	r3, r7
 800a748:	460e      	mov	r6, r1
 800a74a:	d9f4      	bls.n	800a736 <_printf_i+0x11a>
 800a74c:	2b08      	cmp	r3, #8
 800a74e:	d10b      	bne.n	800a768 <_printf_i+0x14c>
 800a750:	6823      	ldr	r3, [r4, #0]
 800a752:	07de      	lsls	r6, r3, #31
 800a754:	d508      	bpl.n	800a768 <_printf_i+0x14c>
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	6861      	ldr	r1, [r4, #4]
 800a75a:	4299      	cmp	r1, r3
 800a75c:	bfde      	ittt	le
 800a75e:	2330      	movle	r3, #48	; 0x30
 800a760:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a764:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a768:	1b52      	subs	r2, r2, r5
 800a76a:	6122      	str	r2, [r4, #16]
 800a76c:	f8cd a000 	str.w	sl, [sp]
 800a770:	464b      	mov	r3, r9
 800a772:	aa03      	add	r2, sp, #12
 800a774:	4621      	mov	r1, r4
 800a776:	4640      	mov	r0, r8
 800a778:	f7ff fee2 	bl	800a540 <_printf_common>
 800a77c:	3001      	adds	r0, #1
 800a77e:	d14c      	bne.n	800a81a <_printf_i+0x1fe>
 800a780:	f04f 30ff 	mov.w	r0, #4294967295
 800a784:	b004      	add	sp, #16
 800a786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a78a:	4835      	ldr	r0, [pc, #212]	; (800a860 <_printf_i+0x244>)
 800a78c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a790:	6829      	ldr	r1, [r5, #0]
 800a792:	6823      	ldr	r3, [r4, #0]
 800a794:	f851 6b04 	ldr.w	r6, [r1], #4
 800a798:	6029      	str	r1, [r5, #0]
 800a79a:	061d      	lsls	r5, r3, #24
 800a79c:	d514      	bpl.n	800a7c8 <_printf_i+0x1ac>
 800a79e:	07df      	lsls	r7, r3, #31
 800a7a0:	bf44      	itt	mi
 800a7a2:	f043 0320 	orrmi.w	r3, r3, #32
 800a7a6:	6023      	strmi	r3, [r4, #0]
 800a7a8:	b91e      	cbnz	r6, 800a7b2 <_printf_i+0x196>
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	f023 0320 	bic.w	r3, r3, #32
 800a7b0:	6023      	str	r3, [r4, #0]
 800a7b2:	2310      	movs	r3, #16
 800a7b4:	e7b0      	b.n	800a718 <_printf_i+0xfc>
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	f043 0320 	orr.w	r3, r3, #32
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	2378      	movs	r3, #120	; 0x78
 800a7c0:	4828      	ldr	r0, [pc, #160]	; (800a864 <_printf_i+0x248>)
 800a7c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7c6:	e7e3      	b.n	800a790 <_printf_i+0x174>
 800a7c8:	0659      	lsls	r1, r3, #25
 800a7ca:	bf48      	it	mi
 800a7cc:	b2b6      	uxthmi	r6, r6
 800a7ce:	e7e6      	b.n	800a79e <_printf_i+0x182>
 800a7d0:	4615      	mov	r5, r2
 800a7d2:	e7bb      	b.n	800a74c <_printf_i+0x130>
 800a7d4:	682b      	ldr	r3, [r5, #0]
 800a7d6:	6826      	ldr	r6, [r4, #0]
 800a7d8:	6961      	ldr	r1, [r4, #20]
 800a7da:	1d18      	adds	r0, r3, #4
 800a7dc:	6028      	str	r0, [r5, #0]
 800a7de:	0635      	lsls	r5, r6, #24
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	d501      	bpl.n	800a7e8 <_printf_i+0x1cc>
 800a7e4:	6019      	str	r1, [r3, #0]
 800a7e6:	e002      	b.n	800a7ee <_printf_i+0x1d2>
 800a7e8:	0670      	lsls	r0, r6, #25
 800a7ea:	d5fb      	bpl.n	800a7e4 <_printf_i+0x1c8>
 800a7ec:	8019      	strh	r1, [r3, #0]
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	6123      	str	r3, [r4, #16]
 800a7f2:	4615      	mov	r5, r2
 800a7f4:	e7ba      	b.n	800a76c <_printf_i+0x150>
 800a7f6:	682b      	ldr	r3, [r5, #0]
 800a7f8:	1d1a      	adds	r2, r3, #4
 800a7fa:	602a      	str	r2, [r5, #0]
 800a7fc:	681d      	ldr	r5, [r3, #0]
 800a7fe:	6862      	ldr	r2, [r4, #4]
 800a800:	2100      	movs	r1, #0
 800a802:	4628      	mov	r0, r5
 800a804:	f7f5 fd6c 	bl	80002e0 <memchr>
 800a808:	b108      	cbz	r0, 800a80e <_printf_i+0x1f2>
 800a80a:	1b40      	subs	r0, r0, r5
 800a80c:	6060      	str	r0, [r4, #4]
 800a80e:	6863      	ldr	r3, [r4, #4]
 800a810:	6123      	str	r3, [r4, #16]
 800a812:	2300      	movs	r3, #0
 800a814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a818:	e7a8      	b.n	800a76c <_printf_i+0x150>
 800a81a:	6923      	ldr	r3, [r4, #16]
 800a81c:	462a      	mov	r2, r5
 800a81e:	4649      	mov	r1, r9
 800a820:	4640      	mov	r0, r8
 800a822:	47d0      	blx	sl
 800a824:	3001      	adds	r0, #1
 800a826:	d0ab      	beq.n	800a780 <_printf_i+0x164>
 800a828:	6823      	ldr	r3, [r4, #0]
 800a82a:	079b      	lsls	r3, r3, #30
 800a82c:	d413      	bmi.n	800a856 <_printf_i+0x23a>
 800a82e:	68e0      	ldr	r0, [r4, #12]
 800a830:	9b03      	ldr	r3, [sp, #12]
 800a832:	4298      	cmp	r0, r3
 800a834:	bfb8      	it	lt
 800a836:	4618      	movlt	r0, r3
 800a838:	e7a4      	b.n	800a784 <_printf_i+0x168>
 800a83a:	2301      	movs	r3, #1
 800a83c:	4632      	mov	r2, r6
 800a83e:	4649      	mov	r1, r9
 800a840:	4640      	mov	r0, r8
 800a842:	47d0      	blx	sl
 800a844:	3001      	adds	r0, #1
 800a846:	d09b      	beq.n	800a780 <_printf_i+0x164>
 800a848:	3501      	adds	r5, #1
 800a84a:	68e3      	ldr	r3, [r4, #12]
 800a84c:	9903      	ldr	r1, [sp, #12]
 800a84e:	1a5b      	subs	r3, r3, r1
 800a850:	42ab      	cmp	r3, r5
 800a852:	dcf2      	bgt.n	800a83a <_printf_i+0x21e>
 800a854:	e7eb      	b.n	800a82e <_printf_i+0x212>
 800a856:	2500      	movs	r5, #0
 800a858:	f104 0619 	add.w	r6, r4, #25
 800a85c:	e7f5      	b.n	800a84a <_printf_i+0x22e>
 800a85e:	bf00      	nop
 800a860:	0800af3d 	.word	0x0800af3d
 800a864:	0800af4e 	.word	0x0800af4e

0800a868 <_sbrk_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	4d06      	ldr	r5, [pc, #24]	; (800a884 <_sbrk_r+0x1c>)
 800a86c:	2300      	movs	r3, #0
 800a86e:	4604      	mov	r4, r0
 800a870:	4608      	mov	r0, r1
 800a872:	602b      	str	r3, [r5, #0]
 800a874:	f7f6 fc94 	bl	80011a0 <_sbrk>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d102      	bne.n	800a882 <_sbrk_r+0x1a>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	b103      	cbz	r3, 800a882 <_sbrk_r+0x1a>
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	bd38      	pop	{r3, r4, r5, pc}
 800a884:	2400040c 	.word	0x2400040c

0800a888 <__sread>:
 800a888:	b510      	push	{r4, lr}
 800a88a:	460c      	mov	r4, r1
 800a88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a890:	f000 fab2 	bl	800adf8 <_read_r>
 800a894:	2800      	cmp	r0, #0
 800a896:	bfab      	itete	ge
 800a898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a89a:	89a3      	ldrhlt	r3, [r4, #12]
 800a89c:	181b      	addge	r3, r3, r0
 800a89e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8a2:	bfac      	ite	ge
 800a8a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8a6:	81a3      	strhlt	r3, [r4, #12]
 800a8a8:	bd10      	pop	{r4, pc}

0800a8aa <__swrite>:
 800a8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ae:	461f      	mov	r7, r3
 800a8b0:	898b      	ldrh	r3, [r1, #12]
 800a8b2:	05db      	lsls	r3, r3, #23
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	4616      	mov	r6, r2
 800a8ba:	d505      	bpl.n	800a8c8 <__swrite+0x1e>
 800a8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f000 f9c8 	bl	800ac58 <_lseek_r>
 800a8c8:	89a3      	ldrh	r3, [r4, #12]
 800a8ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8d2:	81a3      	strh	r3, [r4, #12]
 800a8d4:	4632      	mov	r2, r6
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	4628      	mov	r0, r5
 800a8da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8de:	f000 b869 	b.w	800a9b4 <_write_r>

0800a8e2 <__sseek>:
 800a8e2:	b510      	push	{r4, lr}
 800a8e4:	460c      	mov	r4, r1
 800a8e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ea:	f000 f9b5 	bl	800ac58 <_lseek_r>
 800a8ee:	1c43      	adds	r3, r0, #1
 800a8f0:	89a3      	ldrh	r3, [r4, #12]
 800a8f2:	bf15      	itete	ne
 800a8f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8fe:	81a3      	strheq	r3, [r4, #12]
 800a900:	bf18      	it	ne
 800a902:	81a3      	strhne	r3, [r4, #12]
 800a904:	bd10      	pop	{r4, pc}

0800a906 <__sclose>:
 800a906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90a:	f000 b8d3 	b.w	800aab4 <_close_r>
	...

0800a910 <__swbuf_r>:
 800a910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a912:	460e      	mov	r6, r1
 800a914:	4614      	mov	r4, r2
 800a916:	4605      	mov	r5, r0
 800a918:	b118      	cbz	r0, 800a922 <__swbuf_r+0x12>
 800a91a:	6983      	ldr	r3, [r0, #24]
 800a91c:	b90b      	cbnz	r3, 800a922 <__swbuf_r+0x12>
 800a91e:	f7ff fb81 	bl	800a024 <__sinit>
 800a922:	4b21      	ldr	r3, [pc, #132]	; (800a9a8 <__swbuf_r+0x98>)
 800a924:	429c      	cmp	r4, r3
 800a926:	d12b      	bne.n	800a980 <__swbuf_r+0x70>
 800a928:	686c      	ldr	r4, [r5, #4]
 800a92a:	69a3      	ldr	r3, [r4, #24]
 800a92c:	60a3      	str	r3, [r4, #8]
 800a92e:	89a3      	ldrh	r3, [r4, #12]
 800a930:	071a      	lsls	r2, r3, #28
 800a932:	d52f      	bpl.n	800a994 <__swbuf_r+0x84>
 800a934:	6923      	ldr	r3, [r4, #16]
 800a936:	b36b      	cbz	r3, 800a994 <__swbuf_r+0x84>
 800a938:	6923      	ldr	r3, [r4, #16]
 800a93a:	6820      	ldr	r0, [r4, #0]
 800a93c:	1ac0      	subs	r0, r0, r3
 800a93e:	6963      	ldr	r3, [r4, #20]
 800a940:	b2f6      	uxtb	r6, r6
 800a942:	4283      	cmp	r3, r0
 800a944:	4637      	mov	r7, r6
 800a946:	dc04      	bgt.n	800a952 <__swbuf_r+0x42>
 800a948:	4621      	mov	r1, r4
 800a94a:	4628      	mov	r0, r5
 800a94c:	f000 f948 	bl	800abe0 <_fflush_r>
 800a950:	bb30      	cbnz	r0, 800a9a0 <__swbuf_r+0x90>
 800a952:	68a3      	ldr	r3, [r4, #8]
 800a954:	3b01      	subs	r3, #1
 800a956:	60a3      	str	r3, [r4, #8]
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	1c5a      	adds	r2, r3, #1
 800a95c:	6022      	str	r2, [r4, #0]
 800a95e:	701e      	strb	r6, [r3, #0]
 800a960:	6963      	ldr	r3, [r4, #20]
 800a962:	3001      	adds	r0, #1
 800a964:	4283      	cmp	r3, r0
 800a966:	d004      	beq.n	800a972 <__swbuf_r+0x62>
 800a968:	89a3      	ldrh	r3, [r4, #12]
 800a96a:	07db      	lsls	r3, r3, #31
 800a96c:	d506      	bpl.n	800a97c <__swbuf_r+0x6c>
 800a96e:	2e0a      	cmp	r6, #10
 800a970:	d104      	bne.n	800a97c <__swbuf_r+0x6c>
 800a972:	4621      	mov	r1, r4
 800a974:	4628      	mov	r0, r5
 800a976:	f000 f933 	bl	800abe0 <_fflush_r>
 800a97a:	b988      	cbnz	r0, 800a9a0 <__swbuf_r+0x90>
 800a97c:	4638      	mov	r0, r7
 800a97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a980:	4b0a      	ldr	r3, [pc, #40]	; (800a9ac <__swbuf_r+0x9c>)
 800a982:	429c      	cmp	r4, r3
 800a984:	d101      	bne.n	800a98a <__swbuf_r+0x7a>
 800a986:	68ac      	ldr	r4, [r5, #8]
 800a988:	e7cf      	b.n	800a92a <__swbuf_r+0x1a>
 800a98a:	4b09      	ldr	r3, [pc, #36]	; (800a9b0 <__swbuf_r+0xa0>)
 800a98c:	429c      	cmp	r4, r3
 800a98e:	bf08      	it	eq
 800a990:	68ec      	ldreq	r4, [r5, #12]
 800a992:	e7ca      	b.n	800a92a <__swbuf_r+0x1a>
 800a994:	4621      	mov	r1, r4
 800a996:	4628      	mov	r0, r5
 800a998:	f000 f81e 	bl	800a9d8 <__swsetup_r>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d0cb      	beq.n	800a938 <__swbuf_r+0x28>
 800a9a0:	f04f 37ff 	mov.w	r7, #4294967295
 800a9a4:	e7ea      	b.n	800a97c <__swbuf_r+0x6c>
 800a9a6:	bf00      	nop
 800a9a8:	0800aeec 	.word	0x0800aeec
 800a9ac:	0800af0c 	.word	0x0800af0c
 800a9b0:	0800aecc 	.word	0x0800aecc

0800a9b4 <_write_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	4d07      	ldr	r5, [pc, #28]	; (800a9d4 <_write_r+0x20>)
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	4608      	mov	r0, r1
 800a9bc:	4611      	mov	r1, r2
 800a9be:	2200      	movs	r2, #0
 800a9c0:	602a      	str	r2, [r5, #0]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	f7f6 fb9b 	bl	80010fe <_write>
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d102      	bne.n	800a9d2 <_write_r+0x1e>
 800a9cc:	682b      	ldr	r3, [r5, #0]
 800a9ce:	b103      	cbz	r3, 800a9d2 <_write_r+0x1e>
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	bd38      	pop	{r3, r4, r5, pc}
 800a9d4:	2400040c 	.word	0x2400040c

0800a9d8 <__swsetup_r>:
 800a9d8:	4b32      	ldr	r3, [pc, #200]	; (800aaa4 <__swsetup_r+0xcc>)
 800a9da:	b570      	push	{r4, r5, r6, lr}
 800a9dc:	681d      	ldr	r5, [r3, #0]
 800a9de:	4606      	mov	r6, r0
 800a9e0:	460c      	mov	r4, r1
 800a9e2:	b125      	cbz	r5, 800a9ee <__swsetup_r+0x16>
 800a9e4:	69ab      	ldr	r3, [r5, #24]
 800a9e6:	b913      	cbnz	r3, 800a9ee <__swsetup_r+0x16>
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	f7ff fb1b 	bl	800a024 <__sinit>
 800a9ee:	4b2e      	ldr	r3, [pc, #184]	; (800aaa8 <__swsetup_r+0xd0>)
 800a9f0:	429c      	cmp	r4, r3
 800a9f2:	d10f      	bne.n	800aa14 <__swsetup_r+0x3c>
 800a9f4:	686c      	ldr	r4, [r5, #4]
 800a9f6:	89a3      	ldrh	r3, [r4, #12]
 800a9f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9fc:	0719      	lsls	r1, r3, #28
 800a9fe:	d42c      	bmi.n	800aa5a <__swsetup_r+0x82>
 800aa00:	06dd      	lsls	r5, r3, #27
 800aa02:	d411      	bmi.n	800aa28 <__swsetup_r+0x50>
 800aa04:	2309      	movs	r3, #9
 800aa06:	6033      	str	r3, [r6, #0]
 800aa08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa0c:	81a3      	strh	r3, [r4, #12]
 800aa0e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa12:	e03e      	b.n	800aa92 <__swsetup_r+0xba>
 800aa14:	4b25      	ldr	r3, [pc, #148]	; (800aaac <__swsetup_r+0xd4>)
 800aa16:	429c      	cmp	r4, r3
 800aa18:	d101      	bne.n	800aa1e <__swsetup_r+0x46>
 800aa1a:	68ac      	ldr	r4, [r5, #8]
 800aa1c:	e7eb      	b.n	800a9f6 <__swsetup_r+0x1e>
 800aa1e:	4b24      	ldr	r3, [pc, #144]	; (800aab0 <__swsetup_r+0xd8>)
 800aa20:	429c      	cmp	r4, r3
 800aa22:	bf08      	it	eq
 800aa24:	68ec      	ldreq	r4, [r5, #12]
 800aa26:	e7e6      	b.n	800a9f6 <__swsetup_r+0x1e>
 800aa28:	0758      	lsls	r0, r3, #29
 800aa2a:	d512      	bpl.n	800aa52 <__swsetup_r+0x7a>
 800aa2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa2e:	b141      	cbz	r1, 800aa42 <__swsetup_r+0x6a>
 800aa30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa34:	4299      	cmp	r1, r3
 800aa36:	d002      	beq.n	800aa3e <__swsetup_r+0x66>
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f000 f991 	bl	800ad60 <_free_r>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	6363      	str	r3, [r4, #52]	; 0x34
 800aa42:	89a3      	ldrh	r3, [r4, #12]
 800aa44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa48:	81a3      	strh	r3, [r4, #12]
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	6063      	str	r3, [r4, #4]
 800aa4e:	6923      	ldr	r3, [r4, #16]
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	89a3      	ldrh	r3, [r4, #12]
 800aa54:	f043 0308 	orr.w	r3, r3, #8
 800aa58:	81a3      	strh	r3, [r4, #12]
 800aa5a:	6923      	ldr	r3, [r4, #16]
 800aa5c:	b94b      	cbnz	r3, 800aa72 <__swsetup_r+0x9a>
 800aa5e:	89a3      	ldrh	r3, [r4, #12]
 800aa60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa68:	d003      	beq.n	800aa72 <__swsetup_r+0x9a>
 800aa6a:	4621      	mov	r1, r4
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	f000 f92b 	bl	800acc8 <__smakebuf_r>
 800aa72:	89a0      	ldrh	r0, [r4, #12]
 800aa74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa78:	f010 0301 	ands.w	r3, r0, #1
 800aa7c:	d00a      	beq.n	800aa94 <__swsetup_r+0xbc>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60a3      	str	r3, [r4, #8]
 800aa82:	6963      	ldr	r3, [r4, #20]
 800aa84:	425b      	negs	r3, r3
 800aa86:	61a3      	str	r3, [r4, #24]
 800aa88:	6923      	ldr	r3, [r4, #16]
 800aa8a:	b943      	cbnz	r3, 800aa9e <__swsetup_r+0xc6>
 800aa8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa90:	d1ba      	bne.n	800aa08 <__swsetup_r+0x30>
 800aa92:	bd70      	pop	{r4, r5, r6, pc}
 800aa94:	0781      	lsls	r1, r0, #30
 800aa96:	bf58      	it	pl
 800aa98:	6963      	ldrpl	r3, [r4, #20]
 800aa9a:	60a3      	str	r3, [r4, #8]
 800aa9c:	e7f4      	b.n	800aa88 <__swsetup_r+0xb0>
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	e7f7      	b.n	800aa92 <__swsetup_r+0xba>
 800aaa2:	bf00      	nop
 800aaa4:	24000010 	.word	0x24000010
 800aaa8:	0800aeec 	.word	0x0800aeec
 800aaac:	0800af0c 	.word	0x0800af0c
 800aab0:	0800aecc 	.word	0x0800aecc

0800aab4 <_close_r>:
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	4d06      	ldr	r5, [pc, #24]	; (800aad0 <_close_r+0x1c>)
 800aab8:	2300      	movs	r3, #0
 800aaba:	4604      	mov	r4, r0
 800aabc:	4608      	mov	r0, r1
 800aabe:	602b      	str	r3, [r5, #0]
 800aac0:	f7f6 fb39 	bl	8001136 <_close>
 800aac4:	1c43      	adds	r3, r0, #1
 800aac6:	d102      	bne.n	800aace <_close_r+0x1a>
 800aac8:	682b      	ldr	r3, [r5, #0]
 800aaca:	b103      	cbz	r3, 800aace <_close_r+0x1a>
 800aacc:	6023      	str	r3, [r4, #0]
 800aace:	bd38      	pop	{r3, r4, r5, pc}
 800aad0:	2400040c 	.word	0x2400040c

0800aad4 <__sflush_r>:
 800aad4:	898a      	ldrh	r2, [r1, #12]
 800aad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aada:	4605      	mov	r5, r0
 800aadc:	0710      	lsls	r0, r2, #28
 800aade:	460c      	mov	r4, r1
 800aae0:	d458      	bmi.n	800ab94 <__sflush_r+0xc0>
 800aae2:	684b      	ldr	r3, [r1, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	dc05      	bgt.n	800aaf4 <__sflush_r+0x20>
 800aae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	dc02      	bgt.n	800aaf4 <__sflush_r+0x20>
 800aaee:	2000      	movs	r0, #0
 800aaf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aaf6:	2e00      	cmp	r6, #0
 800aaf8:	d0f9      	beq.n	800aaee <__sflush_r+0x1a>
 800aafa:	2300      	movs	r3, #0
 800aafc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab00:	682f      	ldr	r7, [r5, #0]
 800ab02:	602b      	str	r3, [r5, #0]
 800ab04:	d032      	beq.n	800ab6c <__sflush_r+0x98>
 800ab06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab08:	89a3      	ldrh	r3, [r4, #12]
 800ab0a:	075a      	lsls	r2, r3, #29
 800ab0c:	d505      	bpl.n	800ab1a <__sflush_r+0x46>
 800ab0e:	6863      	ldr	r3, [r4, #4]
 800ab10:	1ac0      	subs	r0, r0, r3
 800ab12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab14:	b10b      	cbz	r3, 800ab1a <__sflush_r+0x46>
 800ab16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab18:	1ac0      	subs	r0, r0, r3
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab20:	6a21      	ldr	r1, [r4, #32]
 800ab22:	4628      	mov	r0, r5
 800ab24:	47b0      	blx	r6
 800ab26:	1c43      	adds	r3, r0, #1
 800ab28:	89a3      	ldrh	r3, [r4, #12]
 800ab2a:	d106      	bne.n	800ab3a <__sflush_r+0x66>
 800ab2c:	6829      	ldr	r1, [r5, #0]
 800ab2e:	291d      	cmp	r1, #29
 800ab30:	d82c      	bhi.n	800ab8c <__sflush_r+0xb8>
 800ab32:	4a2a      	ldr	r2, [pc, #168]	; (800abdc <__sflush_r+0x108>)
 800ab34:	40ca      	lsrs	r2, r1
 800ab36:	07d6      	lsls	r6, r2, #31
 800ab38:	d528      	bpl.n	800ab8c <__sflush_r+0xb8>
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	6062      	str	r2, [r4, #4]
 800ab3e:	04d9      	lsls	r1, r3, #19
 800ab40:	6922      	ldr	r2, [r4, #16]
 800ab42:	6022      	str	r2, [r4, #0]
 800ab44:	d504      	bpl.n	800ab50 <__sflush_r+0x7c>
 800ab46:	1c42      	adds	r2, r0, #1
 800ab48:	d101      	bne.n	800ab4e <__sflush_r+0x7a>
 800ab4a:	682b      	ldr	r3, [r5, #0]
 800ab4c:	b903      	cbnz	r3, 800ab50 <__sflush_r+0x7c>
 800ab4e:	6560      	str	r0, [r4, #84]	; 0x54
 800ab50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab52:	602f      	str	r7, [r5, #0]
 800ab54:	2900      	cmp	r1, #0
 800ab56:	d0ca      	beq.n	800aaee <__sflush_r+0x1a>
 800ab58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab5c:	4299      	cmp	r1, r3
 800ab5e:	d002      	beq.n	800ab66 <__sflush_r+0x92>
 800ab60:	4628      	mov	r0, r5
 800ab62:	f000 f8fd 	bl	800ad60 <_free_r>
 800ab66:	2000      	movs	r0, #0
 800ab68:	6360      	str	r0, [r4, #52]	; 0x34
 800ab6a:	e7c1      	b.n	800aaf0 <__sflush_r+0x1c>
 800ab6c:	6a21      	ldr	r1, [r4, #32]
 800ab6e:	2301      	movs	r3, #1
 800ab70:	4628      	mov	r0, r5
 800ab72:	47b0      	blx	r6
 800ab74:	1c41      	adds	r1, r0, #1
 800ab76:	d1c7      	bne.n	800ab08 <__sflush_r+0x34>
 800ab78:	682b      	ldr	r3, [r5, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d0c4      	beq.n	800ab08 <__sflush_r+0x34>
 800ab7e:	2b1d      	cmp	r3, #29
 800ab80:	d001      	beq.n	800ab86 <__sflush_r+0xb2>
 800ab82:	2b16      	cmp	r3, #22
 800ab84:	d101      	bne.n	800ab8a <__sflush_r+0xb6>
 800ab86:	602f      	str	r7, [r5, #0]
 800ab88:	e7b1      	b.n	800aaee <__sflush_r+0x1a>
 800ab8a:	89a3      	ldrh	r3, [r4, #12]
 800ab8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab90:	81a3      	strh	r3, [r4, #12]
 800ab92:	e7ad      	b.n	800aaf0 <__sflush_r+0x1c>
 800ab94:	690f      	ldr	r7, [r1, #16]
 800ab96:	2f00      	cmp	r7, #0
 800ab98:	d0a9      	beq.n	800aaee <__sflush_r+0x1a>
 800ab9a:	0793      	lsls	r3, r2, #30
 800ab9c:	680e      	ldr	r6, [r1, #0]
 800ab9e:	bf08      	it	eq
 800aba0:	694b      	ldreq	r3, [r1, #20]
 800aba2:	600f      	str	r7, [r1, #0]
 800aba4:	bf18      	it	ne
 800aba6:	2300      	movne	r3, #0
 800aba8:	eba6 0807 	sub.w	r8, r6, r7
 800abac:	608b      	str	r3, [r1, #8]
 800abae:	f1b8 0f00 	cmp.w	r8, #0
 800abb2:	dd9c      	ble.n	800aaee <__sflush_r+0x1a>
 800abb4:	6a21      	ldr	r1, [r4, #32]
 800abb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abb8:	4643      	mov	r3, r8
 800abba:	463a      	mov	r2, r7
 800abbc:	4628      	mov	r0, r5
 800abbe:	47b0      	blx	r6
 800abc0:	2800      	cmp	r0, #0
 800abc2:	dc06      	bgt.n	800abd2 <__sflush_r+0xfe>
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abca:	81a3      	strh	r3, [r4, #12]
 800abcc:	f04f 30ff 	mov.w	r0, #4294967295
 800abd0:	e78e      	b.n	800aaf0 <__sflush_r+0x1c>
 800abd2:	4407      	add	r7, r0
 800abd4:	eba8 0800 	sub.w	r8, r8, r0
 800abd8:	e7e9      	b.n	800abae <__sflush_r+0xda>
 800abda:	bf00      	nop
 800abdc:	20400001 	.word	0x20400001

0800abe0 <_fflush_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	690b      	ldr	r3, [r1, #16]
 800abe4:	4605      	mov	r5, r0
 800abe6:	460c      	mov	r4, r1
 800abe8:	b913      	cbnz	r3, 800abf0 <_fflush_r+0x10>
 800abea:	2500      	movs	r5, #0
 800abec:	4628      	mov	r0, r5
 800abee:	bd38      	pop	{r3, r4, r5, pc}
 800abf0:	b118      	cbz	r0, 800abfa <_fflush_r+0x1a>
 800abf2:	6983      	ldr	r3, [r0, #24]
 800abf4:	b90b      	cbnz	r3, 800abfa <_fflush_r+0x1a>
 800abf6:	f7ff fa15 	bl	800a024 <__sinit>
 800abfa:	4b14      	ldr	r3, [pc, #80]	; (800ac4c <_fflush_r+0x6c>)
 800abfc:	429c      	cmp	r4, r3
 800abfe:	d11b      	bne.n	800ac38 <_fflush_r+0x58>
 800ac00:	686c      	ldr	r4, [r5, #4]
 800ac02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d0ef      	beq.n	800abea <_fflush_r+0xa>
 800ac0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac0c:	07d0      	lsls	r0, r2, #31
 800ac0e:	d404      	bmi.n	800ac1a <_fflush_r+0x3a>
 800ac10:	0599      	lsls	r1, r3, #22
 800ac12:	d402      	bmi.n	800ac1a <_fflush_r+0x3a>
 800ac14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac16:	f7ff faa3 	bl	800a160 <__retarget_lock_acquire_recursive>
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	4621      	mov	r1, r4
 800ac1e:	f7ff ff59 	bl	800aad4 <__sflush_r>
 800ac22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac24:	07da      	lsls	r2, r3, #31
 800ac26:	4605      	mov	r5, r0
 800ac28:	d4e0      	bmi.n	800abec <_fflush_r+0xc>
 800ac2a:	89a3      	ldrh	r3, [r4, #12]
 800ac2c:	059b      	lsls	r3, r3, #22
 800ac2e:	d4dd      	bmi.n	800abec <_fflush_r+0xc>
 800ac30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac32:	f7ff fa96 	bl	800a162 <__retarget_lock_release_recursive>
 800ac36:	e7d9      	b.n	800abec <_fflush_r+0xc>
 800ac38:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <_fflush_r+0x70>)
 800ac3a:	429c      	cmp	r4, r3
 800ac3c:	d101      	bne.n	800ac42 <_fflush_r+0x62>
 800ac3e:	68ac      	ldr	r4, [r5, #8]
 800ac40:	e7df      	b.n	800ac02 <_fflush_r+0x22>
 800ac42:	4b04      	ldr	r3, [pc, #16]	; (800ac54 <_fflush_r+0x74>)
 800ac44:	429c      	cmp	r4, r3
 800ac46:	bf08      	it	eq
 800ac48:	68ec      	ldreq	r4, [r5, #12]
 800ac4a:	e7da      	b.n	800ac02 <_fflush_r+0x22>
 800ac4c:	0800aeec 	.word	0x0800aeec
 800ac50:	0800af0c 	.word	0x0800af0c
 800ac54:	0800aecc 	.word	0x0800aecc

0800ac58 <_lseek_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	4d07      	ldr	r5, [pc, #28]	; (800ac78 <_lseek_r+0x20>)
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	4608      	mov	r0, r1
 800ac60:	4611      	mov	r1, r2
 800ac62:	2200      	movs	r2, #0
 800ac64:	602a      	str	r2, [r5, #0]
 800ac66:	461a      	mov	r2, r3
 800ac68:	f7f6 fa8c 	bl	8001184 <_lseek>
 800ac6c:	1c43      	adds	r3, r0, #1
 800ac6e:	d102      	bne.n	800ac76 <_lseek_r+0x1e>
 800ac70:	682b      	ldr	r3, [r5, #0]
 800ac72:	b103      	cbz	r3, 800ac76 <_lseek_r+0x1e>
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	bd38      	pop	{r3, r4, r5, pc}
 800ac78:	2400040c 	.word	0x2400040c

0800ac7c <__swhatbuf_r>:
 800ac7c:	b570      	push	{r4, r5, r6, lr}
 800ac7e:	460e      	mov	r6, r1
 800ac80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac84:	2900      	cmp	r1, #0
 800ac86:	b096      	sub	sp, #88	; 0x58
 800ac88:	4614      	mov	r4, r2
 800ac8a:	461d      	mov	r5, r3
 800ac8c:	da08      	bge.n	800aca0 <__swhatbuf_r+0x24>
 800ac8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	602a      	str	r2, [r5, #0]
 800ac96:	061a      	lsls	r2, r3, #24
 800ac98:	d410      	bmi.n	800acbc <__swhatbuf_r+0x40>
 800ac9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac9e:	e00e      	b.n	800acbe <__swhatbuf_r+0x42>
 800aca0:	466a      	mov	r2, sp
 800aca2:	f000 f8bb 	bl	800ae1c <_fstat_r>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	dbf1      	blt.n	800ac8e <__swhatbuf_r+0x12>
 800acaa:	9a01      	ldr	r2, [sp, #4]
 800acac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800acb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800acb4:	425a      	negs	r2, r3
 800acb6:	415a      	adcs	r2, r3
 800acb8:	602a      	str	r2, [r5, #0]
 800acba:	e7ee      	b.n	800ac9a <__swhatbuf_r+0x1e>
 800acbc:	2340      	movs	r3, #64	; 0x40
 800acbe:	2000      	movs	r0, #0
 800acc0:	6023      	str	r3, [r4, #0]
 800acc2:	b016      	add	sp, #88	; 0x58
 800acc4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800acc8 <__smakebuf_r>:
 800acc8:	898b      	ldrh	r3, [r1, #12]
 800acca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800accc:	079d      	lsls	r5, r3, #30
 800acce:	4606      	mov	r6, r0
 800acd0:	460c      	mov	r4, r1
 800acd2:	d507      	bpl.n	800ace4 <__smakebuf_r+0x1c>
 800acd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800acd8:	6023      	str	r3, [r4, #0]
 800acda:	6123      	str	r3, [r4, #16]
 800acdc:	2301      	movs	r3, #1
 800acde:	6163      	str	r3, [r4, #20]
 800ace0:	b002      	add	sp, #8
 800ace2:	bd70      	pop	{r4, r5, r6, pc}
 800ace4:	ab01      	add	r3, sp, #4
 800ace6:	466a      	mov	r2, sp
 800ace8:	f7ff ffc8 	bl	800ac7c <__swhatbuf_r>
 800acec:	9900      	ldr	r1, [sp, #0]
 800acee:	4605      	mov	r5, r0
 800acf0:	4630      	mov	r0, r6
 800acf2:	f7ff fa57 	bl	800a1a4 <_malloc_r>
 800acf6:	b948      	cbnz	r0, 800ad0c <__smakebuf_r+0x44>
 800acf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acfc:	059a      	lsls	r2, r3, #22
 800acfe:	d4ef      	bmi.n	800ace0 <__smakebuf_r+0x18>
 800ad00:	f023 0303 	bic.w	r3, r3, #3
 800ad04:	f043 0302 	orr.w	r3, r3, #2
 800ad08:	81a3      	strh	r3, [r4, #12]
 800ad0a:	e7e3      	b.n	800acd4 <__smakebuf_r+0xc>
 800ad0c:	4b0d      	ldr	r3, [pc, #52]	; (800ad44 <__smakebuf_r+0x7c>)
 800ad0e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad10:	89a3      	ldrh	r3, [r4, #12]
 800ad12:	6020      	str	r0, [r4, #0]
 800ad14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad18:	81a3      	strh	r3, [r4, #12]
 800ad1a:	9b00      	ldr	r3, [sp, #0]
 800ad1c:	6163      	str	r3, [r4, #20]
 800ad1e:	9b01      	ldr	r3, [sp, #4]
 800ad20:	6120      	str	r0, [r4, #16]
 800ad22:	b15b      	cbz	r3, 800ad3c <__smakebuf_r+0x74>
 800ad24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad28:	4630      	mov	r0, r6
 800ad2a:	f000 f889 	bl	800ae40 <_isatty_r>
 800ad2e:	b128      	cbz	r0, 800ad3c <__smakebuf_r+0x74>
 800ad30:	89a3      	ldrh	r3, [r4, #12]
 800ad32:	f023 0303 	bic.w	r3, r3, #3
 800ad36:	f043 0301 	orr.w	r3, r3, #1
 800ad3a:	81a3      	strh	r3, [r4, #12]
 800ad3c:	89a0      	ldrh	r0, [r4, #12]
 800ad3e:	4305      	orrs	r5, r0
 800ad40:	81a5      	strh	r5, [r4, #12]
 800ad42:	e7cd      	b.n	800ace0 <__smakebuf_r+0x18>
 800ad44:	08009fbd 	.word	0x08009fbd

0800ad48 <__malloc_lock>:
 800ad48:	4801      	ldr	r0, [pc, #4]	; (800ad50 <__malloc_lock+0x8>)
 800ad4a:	f7ff ba09 	b.w	800a160 <__retarget_lock_acquire_recursive>
 800ad4e:	bf00      	nop
 800ad50:	24000400 	.word	0x24000400

0800ad54 <__malloc_unlock>:
 800ad54:	4801      	ldr	r0, [pc, #4]	; (800ad5c <__malloc_unlock+0x8>)
 800ad56:	f7ff ba04 	b.w	800a162 <__retarget_lock_release_recursive>
 800ad5a:	bf00      	nop
 800ad5c:	24000400 	.word	0x24000400

0800ad60 <_free_r>:
 800ad60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad62:	2900      	cmp	r1, #0
 800ad64:	d044      	beq.n	800adf0 <_free_r+0x90>
 800ad66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad6a:	9001      	str	r0, [sp, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f1a1 0404 	sub.w	r4, r1, #4
 800ad72:	bfb8      	it	lt
 800ad74:	18e4      	addlt	r4, r4, r3
 800ad76:	f7ff ffe7 	bl	800ad48 <__malloc_lock>
 800ad7a:	4a1e      	ldr	r2, [pc, #120]	; (800adf4 <_free_r+0x94>)
 800ad7c:	9801      	ldr	r0, [sp, #4]
 800ad7e:	6813      	ldr	r3, [r2, #0]
 800ad80:	b933      	cbnz	r3, 800ad90 <_free_r+0x30>
 800ad82:	6063      	str	r3, [r4, #4]
 800ad84:	6014      	str	r4, [r2, #0]
 800ad86:	b003      	add	sp, #12
 800ad88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad8c:	f7ff bfe2 	b.w	800ad54 <__malloc_unlock>
 800ad90:	42a3      	cmp	r3, r4
 800ad92:	d908      	bls.n	800ada6 <_free_r+0x46>
 800ad94:	6825      	ldr	r5, [r4, #0]
 800ad96:	1961      	adds	r1, r4, r5
 800ad98:	428b      	cmp	r3, r1
 800ad9a:	bf01      	itttt	eq
 800ad9c:	6819      	ldreq	r1, [r3, #0]
 800ad9e:	685b      	ldreq	r3, [r3, #4]
 800ada0:	1949      	addeq	r1, r1, r5
 800ada2:	6021      	streq	r1, [r4, #0]
 800ada4:	e7ed      	b.n	800ad82 <_free_r+0x22>
 800ada6:	461a      	mov	r2, r3
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	b10b      	cbz	r3, 800adb0 <_free_r+0x50>
 800adac:	42a3      	cmp	r3, r4
 800adae:	d9fa      	bls.n	800ada6 <_free_r+0x46>
 800adb0:	6811      	ldr	r1, [r2, #0]
 800adb2:	1855      	adds	r5, r2, r1
 800adb4:	42a5      	cmp	r5, r4
 800adb6:	d10b      	bne.n	800add0 <_free_r+0x70>
 800adb8:	6824      	ldr	r4, [r4, #0]
 800adba:	4421      	add	r1, r4
 800adbc:	1854      	adds	r4, r2, r1
 800adbe:	42a3      	cmp	r3, r4
 800adc0:	6011      	str	r1, [r2, #0]
 800adc2:	d1e0      	bne.n	800ad86 <_free_r+0x26>
 800adc4:	681c      	ldr	r4, [r3, #0]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	6053      	str	r3, [r2, #4]
 800adca:	4421      	add	r1, r4
 800adcc:	6011      	str	r1, [r2, #0]
 800adce:	e7da      	b.n	800ad86 <_free_r+0x26>
 800add0:	d902      	bls.n	800add8 <_free_r+0x78>
 800add2:	230c      	movs	r3, #12
 800add4:	6003      	str	r3, [r0, #0]
 800add6:	e7d6      	b.n	800ad86 <_free_r+0x26>
 800add8:	6825      	ldr	r5, [r4, #0]
 800adda:	1961      	adds	r1, r4, r5
 800addc:	428b      	cmp	r3, r1
 800adde:	bf04      	itt	eq
 800ade0:	6819      	ldreq	r1, [r3, #0]
 800ade2:	685b      	ldreq	r3, [r3, #4]
 800ade4:	6063      	str	r3, [r4, #4]
 800ade6:	bf04      	itt	eq
 800ade8:	1949      	addeq	r1, r1, r5
 800adea:	6021      	streq	r1, [r4, #0]
 800adec:	6054      	str	r4, [r2, #4]
 800adee:	e7ca      	b.n	800ad86 <_free_r+0x26>
 800adf0:	b003      	add	sp, #12
 800adf2:	bd30      	pop	{r4, r5, pc}
 800adf4:	24000404 	.word	0x24000404

0800adf8 <_read_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	4d07      	ldr	r5, [pc, #28]	; (800ae18 <_read_r+0x20>)
 800adfc:	4604      	mov	r4, r0
 800adfe:	4608      	mov	r0, r1
 800ae00:	4611      	mov	r1, r2
 800ae02:	2200      	movs	r2, #0
 800ae04:	602a      	str	r2, [r5, #0]
 800ae06:	461a      	mov	r2, r3
 800ae08:	f7f6 f95c 	bl	80010c4 <_read>
 800ae0c:	1c43      	adds	r3, r0, #1
 800ae0e:	d102      	bne.n	800ae16 <_read_r+0x1e>
 800ae10:	682b      	ldr	r3, [r5, #0]
 800ae12:	b103      	cbz	r3, 800ae16 <_read_r+0x1e>
 800ae14:	6023      	str	r3, [r4, #0]
 800ae16:	bd38      	pop	{r3, r4, r5, pc}
 800ae18:	2400040c 	.word	0x2400040c

0800ae1c <_fstat_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	4d07      	ldr	r5, [pc, #28]	; (800ae3c <_fstat_r+0x20>)
 800ae20:	2300      	movs	r3, #0
 800ae22:	4604      	mov	r4, r0
 800ae24:	4608      	mov	r0, r1
 800ae26:	4611      	mov	r1, r2
 800ae28:	602b      	str	r3, [r5, #0]
 800ae2a:	f7f6 f990 	bl	800114e <_fstat>
 800ae2e:	1c43      	adds	r3, r0, #1
 800ae30:	d102      	bne.n	800ae38 <_fstat_r+0x1c>
 800ae32:	682b      	ldr	r3, [r5, #0]
 800ae34:	b103      	cbz	r3, 800ae38 <_fstat_r+0x1c>
 800ae36:	6023      	str	r3, [r4, #0]
 800ae38:	bd38      	pop	{r3, r4, r5, pc}
 800ae3a:	bf00      	nop
 800ae3c:	2400040c 	.word	0x2400040c

0800ae40 <_isatty_r>:
 800ae40:	b538      	push	{r3, r4, r5, lr}
 800ae42:	4d06      	ldr	r5, [pc, #24]	; (800ae5c <_isatty_r+0x1c>)
 800ae44:	2300      	movs	r3, #0
 800ae46:	4604      	mov	r4, r0
 800ae48:	4608      	mov	r0, r1
 800ae4a:	602b      	str	r3, [r5, #0]
 800ae4c:	f7f6 f98f 	bl	800116e <_isatty>
 800ae50:	1c43      	adds	r3, r0, #1
 800ae52:	d102      	bne.n	800ae5a <_isatty_r+0x1a>
 800ae54:	682b      	ldr	r3, [r5, #0]
 800ae56:	b103      	cbz	r3, 800ae5a <_isatty_r+0x1a>
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	bd38      	pop	{r3, r4, r5, pc}
 800ae5c:	2400040c 	.word	0x2400040c

0800ae60 <_init>:
 800ae60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae62:	bf00      	nop
 800ae64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae66:	bc08      	pop	{r3}
 800ae68:	469e      	mov	lr, r3
 800ae6a:	4770      	bx	lr

0800ae6c <_fini>:
 800ae6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6e:	bf00      	nop
 800ae70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae72:	bc08      	pop	{r3}
 800ae74:	469e      	mov	lr, r3
 800ae76:	4770      	bx	lr
