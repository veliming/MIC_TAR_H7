
MIC_TAR_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0c4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800b364  0800b364  0001b364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b450  0800b450  0001b450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b458  0800b458  0001b458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b45c  0800b45c  0001b45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800b460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000478  24000074  0800b4d4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240004ec  0800b4d4  000204ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d268  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035dd  00000000  00000000  0003d30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014f8  00000000  00000000  000408e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001390  00000000  00000000  00041de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a661  00000000  00000000  00043170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001df6e  00000000  00000000  0007d7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c91d  00000000  00000000  0009b73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020805c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005f74  00000000  00000000  002080ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b34c 	.word	0x0800b34c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800b34c 	.word	0x0800b34c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_DMA_Init+0x6c>)
 800068c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_DMA_Init+0x6c>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_DMA_Init+0x6c>)
 800069c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2102      	movs	r1, #2
 80006ac:	200b      	movs	r0, #11
 80006ae:	f001 fbc8 	bl	8001e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006b2:	200b      	movs	r0, #11
 80006b4:	f001 fbdf 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2102      	movs	r1, #2
 80006bc:	200c      	movs	r0, #12
 80006be:	f001 fbc0 	bl	8001e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006c2:	200c      	movs	r0, #12
 80006c4:	f001 fbd7 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 2, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2102      	movs	r1, #2
 80006cc:	200d      	movs	r0, #13
 80006ce:	f001 fbb8 	bl	8001e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80006d2:	200d      	movs	r0, #13
 80006d4:	f001 fbcf 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	2066      	movs	r0, #102	; 0x66
 80006de:	f001 fbb0 	bl	8001e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80006e2:	2066      	movs	r0, #102	; 0x66
 80006e4:	f001 fbc7 	bl	8001e76 <HAL_NVIC_EnableIRQ>

}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	58024400 	.word	0x58024400

080006f4 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070a:	4b42      	ldr	r3, [pc, #264]	; (8000814 <MX_GPIO_Init+0x120>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	4a40      	ldr	r2, [pc, #256]	; (8000814 <MX_GPIO_Init+0x120>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800071a:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <MX_GPIO_Init+0x120>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000720:	f003 0310 	and.w	r3, r3, #16
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000728:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <MX_GPIO_Init+0x120>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	4a39      	ldr	r2, [pc, #228]	; (8000814 <MX_GPIO_Init+0x120>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000738:	4b36      	ldr	r3, [pc, #216]	; (8000814 <MX_GPIO_Init+0x120>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	4b33      	ldr	r3, [pc, #204]	; (8000814 <MX_GPIO_Init+0x120>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	4a31      	ldr	r2, [pc, #196]	; (8000814 <MX_GPIO_Init+0x120>)
 800074e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000756:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_GPIO_Init+0x120>)
 8000758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <MX_GPIO_Init+0x120>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <MX_GPIO_Init+0x120>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000774:	4b27      	ldr	r3, [pc, #156]	; (8000814 <MX_GPIO_Init+0x120>)
 8000776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_GPIO_Init+0x120>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000788:	4a22      	ldr	r2, [pc, #136]	; (8000814 <MX_GPIO_Init+0x120>)
 800078a:	f043 0302 	orr.w	r3, r3, #2
 800078e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_GPIO_Init+0x120>)
 8000794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000798:	f003 0302 	and.w	r3, r3, #2
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2108      	movs	r1, #8
 80007a4:	481c      	ldr	r0, [pc, #112]	; (8000818 <MX_GPIO_Init+0x124>)
 80007a6:	f003 fe09 	bl	80043bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 80007b0:	4819      	ldr	r0, [pc, #100]	; (8000818 <MX_GPIO_Init+0x124>)
 80007b2:	f003 fe03 	bl	80043bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007b6:	2308      	movs	r3, #8
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4812      	ldr	r0, [pc, #72]	; (8000818 <MX_GPIO_Init+0x124>)
 80007ce:	f003 fc45 	bl	800405c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80007d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007dc:	2302      	movs	r3, #2
 80007de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	480d      	ldr	r0, [pc, #52]	; (800081c <MX_GPIO_Init+0x128>)
 80007e8:	f003 fc38 	bl	800405c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 80007ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_GPIO_Init+0x124>)
 8000806:	f003 fc29 	bl	800405c <HAL_GPIO_Init>

}
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	; 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	58024400 	.word	0x58024400
 8000818:	58021000 	.word	0x58021000
 800081c:	58020800 	.word	0x58020800

08000820 <MX_I2S1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi3_rx;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_I2S1_Init+0x60>)
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <MX_I2S1_Init+0x64>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_I2S1_Init+0x60>)
 800082c:	2206      	movs	r2, #6
 800082e:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_I2S1_Init+0x60>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_I2S1_Init+0x60>)
 8000838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800083c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_I2S1_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_I2S1_Init+0x60>)
 8000846:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800084a:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_I2S1_Init+0x60>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_I2S1_Init+0x60>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_I2S1_Init+0x60>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_I2S1_Init+0x60>)
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_ENABLE;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_I2S1_Init+0x60>)
 8000866:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_I2S1_Init+0x60>)
 800086e:	f003 fdbf 	bl	80043f0 <HAL_I2S_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000878:	f000 fc56 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	24000090 	.word	0x24000090
 8000884:	40013000 	.word	0x40013000

08000888 <MX_I2S2_Init>:
/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_I2S2_Init+0x60>)
 800088e:	4a17      	ldr	r2, [pc, #92]	; (80008ec <MX_I2S2_Init+0x64>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_I2S2_Init+0x60>)
 8000894:	2206      	movs	r2, #6
 8000896:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_I2S2_Init+0x60>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008ae:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80008b2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008d4:	f003 fd8c 	bl	80043f0 <HAL_I2S_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_I2S2_Init+0x5a>
  {
    Error_Handler();
 80008de:	f000 fc23 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	240000e4 	.word	0x240000e4
 80008ec:	40003800 	.word	0x40003800

080008f0 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_I2S3_Init+0x60>)
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <MX_I2S3_Init+0x64>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_I2S3_Init+0x60>)
 80008fc:	2206      	movs	r2, #6
 80008fe:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_I2S3_Init+0x60>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_I2S3_Init+0x60>)
 8000908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800090c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_I2S3_Init+0x60>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_I2S3_Init+0x60>)
 8000916:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800091a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_I2S3_Init+0x60>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_I2S3_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_I2S3_Init+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_I2S3_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_I2S3_Init+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_I2S3_Init+0x60>)
 800093c:	f003 fd58 	bl	80043f0 <HAL_I2S_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_I2S3_Init+0x5a>
  {
    Error_Handler();
 8000946:	f000 fbef 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	24000138 	.word	0x24000138
 8000954:	40003c00 	.word	0x40003c00

08000958 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b090      	sub	sp, #64	; 0x40
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a8d      	ldr	r2, [pc, #564]	; (8000bac <HAL_I2S_MspInit+0x254>)
 8000976:	4293      	cmp	r3, r2
 8000978:	f040 8081 	bne.w	8000a7e <HAL_I2S_MspInit+0x126>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800097c:	4b8c      	ldr	r3, [pc, #560]	; (8000bb0 <HAL_I2S_MspInit+0x258>)
 800097e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000982:	4a8b      	ldr	r2, [pc, #556]	; (8000bb0 <HAL_I2S_MspInit+0x258>)
 8000984:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000988:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800098c:	4b88      	ldr	r3, [pc, #544]	; (8000bb0 <HAL_I2S_MspInit+0x258>)
 800098e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
 8000998:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b85      	ldr	r3, [pc, #532]	; (8000bb0 <HAL_I2S_MspInit+0x258>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a0:	4a83      	ldr	r2, [pc, #524]	; (8000bb0 <HAL_I2S_MspInit+0x258>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009aa:	4b81      	ldr	r3, [pc, #516]	; (8000bb0 <HAL_I2S_MspInit+0x258>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009b8:	2330      	movs	r3, #48	; 0x30
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009c8:	2305      	movs	r3, #5
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	4878      	ldr	r0, [pc, #480]	; (8000bb4 <HAL_I2S_MspInit+0x25c>)
 80009d4:	f003 fb42 	bl	800405c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009d8:	2340      	movs	r3, #64	; 0x40
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009e0:	2302      	movs	r3, #2
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009e8:	2305      	movs	r3, #5
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f0:	4619      	mov	r1, r3
 80009f2:	4870      	ldr	r0, [pc, #448]	; (8000bb4 <HAL_I2S_MspInit+0x25c>)
 80009f4:	f003 fb32 	bl	800405c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 80009f8:	4b6f      	ldr	r3, [pc, #444]	; (8000bb8 <HAL_I2S_MspInit+0x260>)
 80009fa:	4a70      	ldr	r2, [pc, #448]	; (8000bbc <HAL_I2S_MspInit+0x264>)
 80009fc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80009fe:	4b6e      	ldr	r3, [pc, #440]	; (8000bb8 <HAL_I2S_MspInit+0x260>)
 8000a00:	2225      	movs	r2, #37	; 0x25
 8000a02:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a04:	4b6c      	ldr	r3, [pc, #432]	; (8000bb8 <HAL_I2S_MspInit+0x260>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a0a:	4b6b      	ldr	r3, [pc, #428]	; (8000bb8 <HAL_I2S_MspInit+0x260>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a10:	4b69      	ldr	r3, [pc, #420]	; (8000bb8 <HAL_I2S_MspInit+0x260>)
 8000a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a16:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a18:	4b67      	ldr	r3, [pc, #412]	; (8000bb8 <HAL_I2S_MspInit+0x260>)
 8000a1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a1e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a20:	4b65      	ldr	r3, [pc, #404]	; (8000bb8 <HAL_I2S_MspInit+0x260>)
 8000a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a26:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000a28:	4b63      	ldr	r3, [pc, #396]	; (8000bb8 <HAL_I2S_MspInit+0x260>)
 8000a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a2e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a30:	4b61      	ldr	r3, [pc, #388]	; (8000bb8 <HAL_I2S_MspInit+0x260>)
 8000a32:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a36:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a38:	4b5f      	ldr	r3, [pc, #380]	; (8000bb8 <HAL_I2S_MspInit+0x260>)
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a3e:	4b5e      	ldr	r3, [pc, #376]	; (8000bb8 <HAL_I2S_MspInit+0x260>)
 8000a40:	2203      	movs	r2, #3
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000a44:	4b5c      	ldr	r3, [pc, #368]	; (8000bb8 <HAL_I2S_MspInit+0x260>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000a4a:	4b5b      	ldr	r3, [pc, #364]	; (8000bb8 <HAL_I2S_MspInit+0x260>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a50:	4859      	ldr	r0, [pc, #356]	; (8000bb8 <HAL_I2S_MspInit+0x260>)
 8000a52:	f001 fa2b 	bl	8001eac <HAL_DMA_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_I2S_MspInit+0x108>
    {
      Error_Handler();
 8000a5c:	f000 fb64 	bl	8001128 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi1_rx);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a55      	ldr	r2, [pc, #340]	; (8000bb8 <HAL_I2S_MspInit+0x260>)
 8000a64:	649a      	str	r2, [r3, #72]	; 0x48
 8000a66:	4a54      	ldr	r2, [pc, #336]	; (8000bb8 <HAL_I2S_MspInit+0x260>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2101      	movs	r1, #1
 8000a70:	2023      	movs	r0, #35	; 0x23
 8000a72:	f001 f9e6 	bl	8001e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a76:	2023      	movs	r0, #35	; 0x23
 8000a78:	f001 f9fd 	bl	8001e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a7c:	e152      	b.n	8000d24 <HAL_I2S_MspInit+0x3cc>
  else if(i2sHandle->Instance==SPI2)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a4f      	ldr	r2, [pc, #316]	; (8000bc0 <HAL_I2S_MspInit+0x268>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	f040 80a5 	bne.w	8000bd4 <HAL_I2S_MspInit+0x27c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a8a:	4b49      	ldr	r3, [pc, #292]	; (8000bb0 <HAL_I2S_MspInit+0x258>)
 8000a8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a90:	4a47      	ldr	r2, [pc, #284]	; (8000bb0 <HAL_I2S_MspInit+0x258>)
 8000a92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a9a:	4b45      	ldr	r3, [pc, #276]	; (8000bb0 <HAL_I2S_MspInit+0x258>)
 8000a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa4:	623b      	str	r3, [r7, #32]
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa8:	4b41      	ldr	r3, [pc, #260]	; (8000bb0 <HAL_I2S_MspInit+0x258>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aae:	4a40      	ldr	r2, [pc, #256]	; (8000bb0 <HAL_I2S_MspInit+0x258>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab8:	4b3d      	ldr	r3, [pc, #244]	; (8000bb0 <HAL_I2S_MspInit+0x258>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	61fb      	str	r3, [r7, #28]
 8000ac4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4b3a      	ldr	r3, [pc, #232]	; (8000bb0 <HAL_I2S_MspInit+0x258>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	4a38      	ldr	r2, [pc, #224]	; (8000bb0 <HAL_I2S_MspInit+0x258>)
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad6:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <HAL_I2S_MspInit+0x258>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aec:	2302      	movs	r3, #2
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af4:	2305      	movs	r3, #5
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afc:	4619      	mov	r1, r3
 8000afe:	4831      	ldr	r0, [pc, #196]	; (8000bc4 <HAL_I2S_MspInit+0x26c>)
 8000b00:	f003 faac 	bl	800405c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000b04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b16:	2305      	movs	r3, #5
 8000b18:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4829      	ldr	r0, [pc, #164]	; (8000bc8 <HAL_I2S_MspInit+0x270>)
 8000b22:	f003 fa9b 	bl	800405c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8000b26:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <HAL_I2S_MspInit+0x274>)
 8000b28:	4a29      	ldr	r2, [pc, #164]	; (8000bd0 <HAL_I2S_MspInit+0x278>)
 8000b2a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8000b2c:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <HAL_I2S_MspInit+0x274>)
 8000b2e:	2227      	movs	r2, #39	; 0x27
 8000b30:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b32:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <HAL_I2S_MspInit+0x274>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <HAL_I2S_MspInit+0x274>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b3e:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <HAL_I2S_MspInit+0x274>)
 8000b40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b44:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <HAL_I2S_MspInit+0x274>)
 8000b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b4c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <HAL_I2S_MspInit+0x274>)
 8000b50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b54:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000b56:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <HAL_I2S_MspInit+0x274>)
 8000b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b5c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <HAL_I2S_MspInit+0x274>)
 8000b60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b64:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <HAL_I2S_MspInit+0x274>)
 8000b68:	2204      	movs	r2, #4
 8000b6a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_I2S_MspInit+0x274>)
 8000b6e:	2203      	movs	r2, #3
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_I2S_MspInit+0x274>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <HAL_I2S_MspInit+0x274>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000b7e:	4813      	ldr	r0, [pc, #76]	; (8000bcc <HAL_I2S_MspInit+0x274>)
 8000b80:	f001 f994 	bl	8001eac <HAL_DMA_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_I2S_MspInit+0x236>
      Error_Handler();
 8000b8a:	f000 facd 	bl	8001128 <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_I2S_MspInit+0x274>)
 8000b92:	649a      	str	r2, [r3, #72]	; 0x48
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <HAL_I2S_MspInit+0x274>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	2024      	movs	r0, #36	; 0x24
 8000ba0:	f001 f94f 	bl	8001e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000ba4:	2024      	movs	r0, #36	; 0x24
 8000ba6:	f001 f966 	bl	8001e76 <HAL_NVIC_EnableIRQ>
}
 8000baa:	e0bb      	b.n	8000d24 <HAL_I2S_MspInit+0x3cc>
 8000bac:	40013000 	.word	0x40013000
 8000bb0:	58024400 	.word	0x58024400
 8000bb4:	58020000 	.word	0x58020000
 8000bb8:	2400018c 	.word	0x2400018c
 8000bbc:	40020010 	.word	0x40020010
 8000bc0:	40003800 	.word	0x40003800
 8000bc4:	58020800 	.word	0x58020800
 8000bc8:	58020400 	.word	0x58020400
 8000bcc:	24000204 	.word	0x24000204
 8000bd0:	40020028 	.word	0x40020028
  else if(i2sHandle->Instance==SPI3)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a54      	ldr	r2, [pc, #336]	; (8000d2c <HAL_I2S_MspInit+0x3d4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	f040 80a2 	bne.w	8000d24 <HAL_I2S_MspInit+0x3cc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000be0:	4b53      	ldr	r3, [pc, #332]	; (8000d30 <HAL_I2S_MspInit+0x3d8>)
 8000be2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000be6:	4a52      	ldr	r2, [pc, #328]	; (8000d30 <HAL_I2S_MspInit+0x3d8>)
 8000be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bf0:	4b4f      	ldr	r3, [pc, #316]	; (8000d30 <HAL_I2S_MspInit+0x3d8>)
 8000bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b4c      	ldr	r3, [pc, #304]	; (8000d30 <HAL_I2S_MspInit+0x3d8>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	4a4a      	ldr	r2, [pc, #296]	; (8000d30 <HAL_I2S_MspInit+0x3d8>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0e:	4b48      	ldr	r3, [pc, #288]	; (8000d30 <HAL_I2S_MspInit+0x3d8>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1c:	4b44      	ldr	r3, [pc, #272]	; (8000d30 <HAL_I2S_MspInit+0x3d8>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c22:	4a43      	ldr	r2, [pc, #268]	; (8000d30 <HAL_I2S_MspInit+0x3d8>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2c:	4b40      	ldr	r3, [pc, #256]	; (8000d30 <HAL_I2S_MspInit+0x3d8>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c54:	4619      	mov	r1, r3
 8000c56:	4837      	ldr	r0, [pc, #220]	; (8000d34 <HAL_I2S_MspInit+0x3dc>)
 8000c58:	f003 fa00 	bl	800405c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c6e:	2306      	movs	r3, #6
 8000c70:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c76:	4619      	mov	r1, r3
 8000c78:	482f      	ldr	r0, [pc, #188]	; (8000d38 <HAL_I2S_MspInit+0x3e0>)
 8000c7a:	f003 f9ef 	bl	800405c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c90:	2306      	movs	r3, #6
 8000c92:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4827      	ldr	r0, [pc, #156]	; (8000d38 <HAL_I2S_MspInit+0x3e0>)
 8000c9c:	f003 f9de 	bl	800405c <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream2;
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <HAL_I2S_MspInit+0x3e4>)
 8000ca2:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <HAL_I2S_MspInit+0x3e8>)
 8000ca4:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8000ca6:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <HAL_I2S_MspInit+0x3e4>)
 8000ca8:	223d      	movs	r2, #61	; 0x3d
 8000caa:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cac:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <HAL_I2S_MspInit+0x3e4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb2:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <HAL_I2S_MspInit+0x3e4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <HAL_I2S_MspInit+0x3e4>)
 8000cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cbe:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <HAL_I2S_MspInit+0x3e4>)
 8000cc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cc6:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_I2S_MspInit+0x3e4>)
 8000cca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cce:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <HAL_I2S_MspInit+0x3e4>)
 8000cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd6:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_I2S_MspInit+0x3e4>)
 8000cda:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cde:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <HAL_I2S_MspInit+0x3e4>)
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_I2S_MspInit+0x3e4>)
 8000ce8:	2203      	movs	r2, #3
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <HAL_I2S_MspInit+0x3e4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_I2S_MspInit+0x3e4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8000cf8:	4810      	ldr	r0, [pc, #64]	; (8000d3c <HAL_I2S_MspInit+0x3e4>)
 8000cfa:	f001 f8d7 	bl	8001eac <HAL_DMA_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <HAL_I2S_MspInit+0x3b0>
      Error_Handler();
 8000d04:	f000 fa10 	bl	8001128 <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi3_rx);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a0c      	ldr	r2, [pc, #48]	; (8000d3c <HAL_I2S_MspInit+0x3e4>)
 8000d0c:	649a      	str	r2, [r3, #72]	; 0x48
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <HAL_I2S_MspInit+0x3e4>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2101      	movs	r1, #1
 8000d18:	2033      	movs	r0, #51	; 0x33
 8000d1a:	f001 f892 	bl	8001e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000d1e:	2033      	movs	r0, #51	; 0x33
 8000d20:	f001 f8a9 	bl	8001e76 <HAL_NVIC_EnableIRQ>
}
 8000d24:	bf00      	nop
 8000d26:	3740      	adds	r7, #64	; 0x40
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40003c00 	.word	0x40003c00
 8000d30:	58024400 	.word	0x58024400
 8000d34:	58020000 	.word	0x58020000
 8000d38:	58020800 	.word	0x58020800
 8000d3c:	2400027c 	.word	0x2400027c
 8000d40:	40020040 	.word	0x40020040

08000d44 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8000d4c:	1d39      	adds	r1, r7, #4
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	2201      	movs	r2, #1
 8000d54:	4803      	ldr	r0, [pc, #12]	; (8000d64 <__io_putchar+0x20>)
 8000d56:	f008 fa83 	bl	8009260 <HAL_UART_Transmit>
    return ch;
 8000d5a:	687b      	ldr	r3, [r7, #4]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	24000448 	.word	0x24000448

08000d68 <HAL_I2S_RxCpltCallback>:
/*
 * 重写printf
 */

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

	if(hi2s==&hi2s1){
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a44      	ldr	r2, [pc, #272]	; (8000e84 <HAL_I2S_RxCpltCallback+0x11c>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d127      	bne.n	8000dc8 <HAL_I2S_RxCpltCallback+0x60>
		//10 0
		//11 1
		if(hi2s1_Data[0] & 0x800000){//negative
 8000d78:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <HAL_I2S_RxCpltCallback+0x120>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d007      	beq.n	8000d94 <HAL_I2S_RxCpltCallback+0x2c>
			hi2s1_Data_s[0]=(0xff000000 | hi2s1_Data[0]);
 8000d84:	4b40      	ldr	r3, [pc, #256]	; (8000e88 <HAL_I2S_RxCpltCallback+0x120>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <HAL_I2S_RxCpltCallback+0x124>)
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	e005      	b.n	8000da0 <HAL_I2S_RxCpltCallback+0x38>
		}else{//positive
			hi2s1_Data_s[0]=0x00ffffff & hi2s1_Data[0];
 8000d94:	4b3c      	ldr	r3, [pc, #240]	; (8000e88 <HAL_I2S_RxCpltCallback+0x120>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d9c:	4a3b      	ldr	r2, [pc, #236]	; (8000e8c <HAL_I2S_RxCpltCallback+0x124>)
 8000d9e:	6013      	str	r3, [r2, #0]
		}

		if(hi2s1_Data[1] & 0x800000){//negative
 8000da0:	4b39      	ldr	r3, [pc, #228]	; (8000e88 <HAL_I2S_RxCpltCallback+0x120>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d007      	beq.n	8000dbc <HAL_I2S_RxCpltCallback+0x54>
			hi2s1_Data_s[1]=0xff000000 | hi2s1_Data[1];
 8000dac:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <HAL_I2S_RxCpltCallback+0x120>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <HAL_I2S_RxCpltCallback+0x124>)
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	e005      	b.n	8000dc8 <HAL_I2S_RxCpltCallback+0x60>
		}else{//positive
			hi2s1_Data_s[1]=0x00ffffff & hi2s1_Data[1];
 8000dbc:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <HAL_I2S_RxCpltCallback+0x120>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000dc4:	4a31      	ldr	r2, [pc, #196]	; (8000e8c <HAL_I2S_RxCpltCallback+0x124>)
 8000dc6:	6053      	str	r3, [r2, #4]
		}

		}


	if(hi2s==&hi2s2){
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a31      	ldr	r2, [pc, #196]	; (8000e90 <HAL_I2S_RxCpltCallback+0x128>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d127      	bne.n	8000e20 <HAL_I2S_RxCpltCallback+0xb8>
		//10 0
		//11 1
		if(hi2s2_Data[0] & 0x800000){//negative
 8000dd0:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <HAL_I2S_RxCpltCallback+0x12c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d007      	beq.n	8000dec <HAL_I2S_RxCpltCallback+0x84>
			hi2s2_Data_s[0]=0xff000000 | hi2s2_Data[0];
 8000ddc:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <HAL_I2S_RxCpltCallback+0x12c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <HAL_I2S_RxCpltCallback+0x130>)
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e005      	b.n	8000df8 <HAL_I2S_RxCpltCallback+0x90>
		}else{//positive
			hi2s2_Data_s[0]=0x00ffffff & hi2s2_Data[0];
 8000dec:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <HAL_I2S_RxCpltCallback+0x12c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000df4:	4a28      	ldr	r2, [pc, #160]	; (8000e98 <HAL_I2S_RxCpltCallback+0x130>)
 8000df6:	6013      	str	r3, [r2, #0]
		}

		if(hi2s2_Data[1] & 0x800000){//negative
 8000df8:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <HAL_I2S_RxCpltCallback+0x12c>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d007      	beq.n	8000e14 <HAL_I2S_RxCpltCallback+0xac>
			hi2s2_Data_s[1]=0xff000000 | hi2s2_Data[1];
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <HAL_I2S_RxCpltCallback+0x12c>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <HAL_I2S_RxCpltCallback+0x130>)
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	e005      	b.n	8000e20 <HAL_I2S_RxCpltCallback+0xb8>
		}else{//positive
			hi2s2_Data_s[1]=0x00ffffff & hi2s2_Data[1];
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <HAL_I2S_RxCpltCallback+0x12c>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e1c:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <HAL_I2S_RxCpltCallback+0x130>)
 8000e1e:	6053      	str	r3, [r2, #4]
		}

		}

	if(hi2s==&hi2s3){
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <HAL_I2S_RxCpltCallback+0x134>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d127      	bne.n	8000e78 <HAL_I2S_RxCpltCallback+0x110>
		//10 0
		//11 1
		if(hi2s3_Data[0] & 0x800000){//negative
 8000e28:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_I2S_RxCpltCallback+0x138>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d007      	beq.n	8000e44 <HAL_I2S_RxCpltCallback+0xdc>
			hi2s3_Data_s[0]=0xff000000 | hi2s3_Data[0];
 8000e34:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <HAL_I2S_RxCpltCallback+0x138>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_I2S_RxCpltCallback+0x13c>)
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	e005      	b.n	8000e50 <HAL_I2S_RxCpltCallback+0xe8>
		}else{//positive
			hi2s3_Data_s[0]=0x00ffffff & hi2s3_Data[0];
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <HAL_I2S_RxCpltCallback+0x138>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e4c:	4a15      	ldr	r2, [pc, #84]	; (8000ea4 <HAL_I2S_RxCpltCallback+0x13c>)
 8000e4e:	6013      	str	r3, [r2, #0]
		}

		if(hi2s3_Data[1] & 0x800000){//negative
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <HAL_I2S_RxCpltCallback+0x138>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d007      	beq.n	8000e6c <HAL_I2S_RxCpltCallback+0x104>
			hi2s3_Data_s[1]=0xff000000 | hi2s3_Data[1];
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_I2S_RxCpltCallback+0x138>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <HAL_I2S_RxCpltCallback+0x13c>)
 8000e68:	605a      	str	r2, [r3, #4]
		}

		}


}
 8000e6a:	e005      	b.n	8000e78 <HAL_I2S_RxCpltCallback+0x110>
			hi2s3_Data_s[1]=0x00ffffff & hi2s3_Data[1];
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_I2S_RxCpltCallback+0x138>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <HAL_I2S_RxCpltCallback+0x13c>)
 8000e76:	6053      	str	r3, [r2, #4]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	24000090 	.word	0x24000090
 8000e88:	240002f4 	.word	0x240002f4
 8000e8c:	2400030c 	.word	0x2400030c
 8000e90:	240000e4 	.word	0x240000e4
 8000e94:	240002fc 	.word	0x240002fc
 8000e98:	24000314 	.word	0x24000314
 8000e9c:	24000138 	.word	0x24000138
 8000ea0:	24000304 	.word	0x24000304
 8000ea4:	2400031c 	.word	0x2400031c

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 fe4f 	bl	8001b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f853 	bl	8000f5c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eb6:	f000 f90b 	bl	80010d0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f7ff fc1b 	bl	80006f4 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000ebe:	f000 f939 	bl	8001134 <MX_SPI4_Init>
  MX_DMA_Init();
 8000ec2:	f7ff fbdf 	bl	8000684 <MX_DMA_Init>
  MX_I2S1_Init();
 8000ec6:	f7ff fcab 	bl	8000820 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000eca:	f7ff fcdd 	bl	8000888 <MX_I2S2_Init>
  MX_TIM1_Init();
 8000ece:	f000 fba3 	bl	8001618 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ed2:	f000 fc4d 	bl	8001770 <MX_TIM3_Init>
  MX_UART4_Init();
 8000ed6:	f000 fd61 	bl	800199c <MX_UART4_Init>
  MX_I2S3_Init();
 8000eda:	f7ff fd09 	bl	80008f0 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4813      	ldr	r0, [pc, #76]	; (8000f30 <main+0x88>)
 8000ee2:	f007 f913 	bl	800810c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  LCD_Test();
//  uint8_t text[20]={0};

  HAL_I2S_Receive_DMA(&hi2s1, (uint16_t*)hi2s1_Data, 2);
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	4912      	ldr	r1, [pc, #72]	; (8000f34 <main+0x8c>)
 8000eea:	4813      	ldr	r0, [pc, #76]	; (8000f38 <main+0x90>)
 8000eec:	f003 fba0 	bl	8004630 <HAL_I2S_Receive_DMA>
  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t*)hi2s2_Data, 2);
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	4912      	ldr	r1, [pc, #72]	; (8000f3c <main+0x94>)
 8000ef4:	4812      	ldr	r0, [pc, #72]	; (8000f40 <main+0x98>)
 8000ef6:	f003 fb9b 	bl	8004630 <HAL_I2S_Receive_DMA>
  HAL_I2S_Receive_DMA(&hi2s3, (uint16_t*)hi2s3_Data, 2);
 8000efa:	2202      	movs	r2, #2
 8000efc:	4911      	ldr	r1, [pc, #68]	; (8000f44 <main+0x9c>)
 8000efe:	4812      	ldr	r0, [pc, #72]	; (8000f48 <main+0xa0>)
 8000f00:	f003 fb96 	bl	8004630 <HAL_I2S_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf("%d,%d,%d,%d,%d,%d\r\n",hi2s1_Data_s[0],hi2s1_Data_s[1],hi2s2_Data_s[0],hi2s2_Data_s[1],hi2s3_Data_s[0],hi2s3_Data_s[1]);
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <main+0xa4>)
 8000f06:	6818      	ldr	r0, [r3, #0]
 8000f08:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <main+0xa4>)
 8000f0a:	685c      	ldr	r4, [r3, #4]
 8000f0c:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <main+0xa8>)
 8000f0e:	681d      	ldr	r5, [r3, #0]
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <main+0xa8>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <main+0xac>)
 8000f16:	6812      	ldr	r2, [r2, #0]
 8000f18:	490e      	ldr	r1, [pc, #56]	; (8000f54 <main+0xac>)
 8000f1a:	6849      	ldr	r1, [r1, #4]
 8000f1c:	9102      	str	r1, [sp, #8]
 8000f1e:	9201      	str	r2, [sp, #4]
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	462b      	mov	r3, r5
 8000f24:	4622      	mov	r2, r4
 8000f26:	4601      	mov	r1, r0
 8000f28:	480b      	ldr	r0, [pc, #44]	; (8000f58 <main+0xb0>)
 8000f2a:	f009 fa81 	bl	800a430 <iprintf>
 8000f2e:	e7e9      	b.n	8000f04 <main+0x5c>
 8000f30:	240003fc 	.word	0x240003fc
 8000f34:	240002f4 	.word	0x240002f4
 8000f38:	24000090 	.word	0x24000090
 8000f3c:	240002fc 	.word	0x240002fc
 8000f40:	240000e4 	.word	0x240000e4
 8000f44:	24000304 	.word	0x24000304
 8000f48:	24000138 	.word	0x24000138
 8000f4c:	2400030c 	.word	0x2400030c
 8000f50:	24000314 	.word	0x24000314
 8000f54:	2400031c 	.word	0x2400031c
 8000f58:	0800b364 	.word	0x0800b364

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b09e      	sub	sp, #120	; 0x78
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f66:	224c      	movs	r2, #76	; 0x4c
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f009 fa58 	bl	800a420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2220      	movs	r2, #32
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f009 fa51 	bl	800a420 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f003 fd5a 	bl	8004a38 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	4b4e      	ldr	r3, [pc, #312]	; (80010c4 <SystemClock_Config+0x168>)
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	4a4d      	ldr	r2, [pc, #308]	; (80010c4 <SystemClock_Config+0x168>)
 8000f8e:	f023 0301 	bic.w	r3, r3, #1
 8000f92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f94:	4b4b      	ldr	r3, [pc, #300]	; (80010c4 <SystemClock_Config+0x168>)
 8000f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b4a      	ldr	r3, [pc, #296]	; (80010c8 <SystemClock_Config+0x16c>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a49      	ldr	r2, [pc, #292]	; (80010c8 <SystemClock_Config+0x16c>)
 8000fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fa8:	6193      	str	r3, [r2, #24]
 8000faa:	4b47      	ldr	r3, [pc, #284]	; (80010c8 <SystemClock_Config+0x16c>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fb6:	bf00      	nop
 8000fb8:	4b43      	ldr	r3, [pc, #268]	; (80010c8 <SystemClock_Config+0x16c>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fc4:	d1f8      	bne.n	8000fb8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	4b41      	ldr	r3, [pc, #260]	; (80010cc <SystemClock_Config+0x170>)
 8000fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fcc:	4a3f      	ldr	r2, [pc, #252]	; (80010cc <SystemClock_Config+0x170>)
 8000fce:	f043 0302 	orr.w	r3, r3, #2
 8000fd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fd6:	4b3d      	ldr	r3, [pc, #244]	; (80010cc <SystemClock_Config+0x170>)
 8000fd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <SystemClock_Config+0x16c>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a36      	ldr	r2, [pc, #216]	; (80010c8 <SystemClock_Config+0x16c>)
 8000fee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <SystemClock_Config+0x16c>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <SystemClock_Config+0x168>)
 8001000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001002:	4a30      	ldr	r2, [pc, #192]	; (80010c4 <SystemClock_Config+0x168>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	62d3      	str	r3, [r2, #44]	; 0x2c
 800100a:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <SystemClock_Config+0x168>)
 800100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001016:	bf00      	nop
 8001018:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <SystemClock_Config+0x16c>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001024:	d1f8      	bne.n	8001018 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <SystemClock_Config+0x170>)
 8001028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102a:	f023 0303 	bic.w	r3, r3, #3
 800102e:	4a27      	ldr	r2, [pc, #156]	; (80010cc <SystemClock_Config+0x170>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001036:	2301      	movs	r3, #1
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800103a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001040:	2302      	movs	r3, #2
 8001042:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001044:	2302      	movs	r3, #2
 8001046:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001048:	230a      	movs	r3, #10
 800104a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 384;
 800104c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001050:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001052:	2302      	movs	r3, #2
 8001054:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001056:	2305      	movs	r3, #5
 8001058:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800105a:	2302      	movs	r3, #2
 800105c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800105e:	2304      	movs	r3, #4
 8001060:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001062:	2300      	movs	r3, #0
 8001064:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106e:	4618      	mov	r0, r3
 8001070:	f003 fd1c 	bl	8004aac <HAL_RCC_OscConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x122>
  {
    Error_Handler();
 800107a:	f000 f855 	bl	8001128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107e:	233f      	movs	r3, #63	; 0x3f
 8001080:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001082:	2303      	movs	r3, #3
 8001084:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800108a:	2308      	movs	r3, #8
 800108c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800108e:	2340      	movs	r3, #64	; 0x40
 8001090:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001092:	2340      	movs	r3, #64	; 0x40
 8001094:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800109c:	2340      	movs	r3, #64	; 0x40
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2104      	movs	r1, #4
 80010a6:	4618      	mov	r0, r3
 80010a8:	f004 f92e 	bl	8005308 <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 80010b2:	f000 f839 	bl	8001128 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80010b6:	f004 fadd 	bl	8005674 <HAL_RCC_EnableCSS>
}
 80010ba:	bf00      	nop
 80010bc:	3778      	adds	r7, #120	; 0x78
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	58000400 	.word	0x58000400
 80010c8:	58024800 	.word	0x58024800
 80010cc:	58024400 	.word	0x58024400

080010d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0b0      	sub	sp, #192	; 0xc0
 80010d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	22bc      	movs	r2, #188	; 0xbc
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f009 f99f 	bl	800a420 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 80010e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 10;
 80010e8:	230a      	movs	r3, #10
 80010ea:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80010fc:	2340      	movs	r3, #64	; 0x40
 80010fe:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	4618      	mov	r0, r3
 8001112:	f004 fc95 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 800111c:	f000 f804 	bl	8001128 <Error_Handler>
  }
}
 8001120:	bf00      	nop
 8001122:	37c0      	adds	r7, #192	; 0xc0
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800112c:	b672      	cpsid	i
}
 800112e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001130:	e7fe      	b.n	8001130 <Error_Handler+0x8>
	...

08001134 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <MX_SPI4_Init+0xa8>)
 800113a:	4a29      	ldr	r2, [pc, #164]	; (80011e0 <MX_SPI4_Init+0xac>)
 800113c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MX_SPI4_Init+0xa8>)
 8001140:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001144:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8001146:	4b25      	ldr	r3, [pc, #148]	; (80011dc <MX_SPI4_Init+0xa8>)
 8001148:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800114c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <MX_SPI4_Init+0xa8>)
 8001150:	2207      	movs	r2, #7
 8001152:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_SPI4_Init+0xa8>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <MX_SPI4_Init+0xa8>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <MX_SPI4_Init+0xa8>)
 8001162:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001166:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001168:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_SPI4_Init+0xa8>)
 800116a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800116e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_SPI4_Init+0xa8>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_SPI4_Init+0xa8>)
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_SPI4_Init+0xa8>)
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_SPI4_Init+0xa8>)
 8001184:	2200      	movs	r2, #0
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_SPI4_Init+0xa8>)
 800118a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_SPI4_Init+0xa8>)
 8001192:	2200      	movs	r2, #0
 8001194:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_SPI4_Init+0xa8>)
 8001198:	2200      	movs	r2, #0
 800119a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_SPI4_Init+0xa8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_SPI4_Init+0xa8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_SPI4_Init+0xa8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_SPI4_Init+0xa8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_SPI4_Init+0xa8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_SPI4_Init+0xa8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_SPI4_Init+0xa8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_SPI4_Init+0xa8>)
 80011c8:	f006 fdc6 	bl	8007d58 <HAL_SPI_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80011d2:	f7ff ffa9 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	24000324 	.word	0x24000324
 80011e0:	40013400 	.word	0x40013400

080011e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0b8      	sub	sp, #224	; 0xe0
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	22bc      	movs	r2, #188	; 0xbc
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f009 f90b 	bl	800a420 <memset>
  if(spiHandle->Instance==SPI4)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a25      	ldr	r2, [pc, #148]	; (80012a4 <HAL_SPI_MspInit+0xc0>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d142      	bne.n	800129a <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001218:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800121a:	2300      	movs	r3, #0
 800121c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	4618      	mov	r0, r3
 8001224:	f004 fc0c 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800122e:	f7ff ff7b 	bl	8001128 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <HAL_SPI_MspInit+0xc4>)
 8001234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <HAL_SPI_MspInit+0xc4>)
 800123a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800123e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <HAL_SPI_MspInit+0xc4>)
 8001244:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_SPI_MspInit+0xc4>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <HAL_SPI_MspInit+0xc4>)
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_SPI_MspInit+0xc4>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800126e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001272:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001288:	2305      	movs	r3, #5
 800128a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800128e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 8001296:	f002 fee1 	bl	800405c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800129a:	bf00      	nop
 800129c:	37e0      	adds	r7, #224	; 0xe0
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40013400 	.word	0x40013400
 80012a8:	58024400 	.word	0x58024400
 80012ac:	58021000 	.word	0x58021000

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_MspInit+0x34>)
 80012b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012bc:	4a09      	ldr	r2, [pc, #36]	; (80012e4 <HAL_MspInit+0x34>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <HAL_MspInit+0x34>)
 80012c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80012d4:	2004      	movs	r0, #4
 80012d6:	f000 fda9 	bl	8001e2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	58024400 	.word	0x58024400

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <NMI_Handler+0x4>

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001334:	f000 fc7e 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <DMA1_Stream0_IRQHandler+0x10>)
 8001342:	f001 fb79 	bl	8002a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2400018c 	.word	0x2400018c

08001350 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <DMA1_Stream1_IRQHandler+0x10>)
 8001356:	f001 fb6f 	bl	8002a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	24000204 	.word	0x24000204

08001364 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <DMA1_Stream2_IRQHandler+0x10>)
 800136a:	f001 fb65 	bl	8002a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2400027c 	.word	0x2400027c

08001378 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <SPI1_IRQHandler+0x10>)
 800137e:	f003 f9f9 	bl	8004774 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	24000090 	.word	0x24000090

0800138c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <SPI2_IRQHandler+0x10>)
 8001392:	f003 f9ef 	bl	8004774 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	240000e4 	.word	0x240000e4

080013a0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <SPI3_IRQHandler+0x10>)
 80013a6:	f003 f9e5 	bl	8004774 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	24000138 	.word	0x24000138

080013b4 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	e00a      	b.n	80013ea <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013d4:	f3af 8000 	nop.w
 80013d8:	4601      	mov	r1, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	60ba      	str	r2, [r7, #8]
 80013e0:	b2ca      	uxtb	r2, r1
 80013e2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dbf0      	blt.n	80013d4 <_read+0x12>
	}

return len;
 80013f2:	687b      	ldr	r3, [r7, #4]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e009      	b.n	8001422 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	60ba      	str	r2, [r7, #8]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fc94 	bl	8000d44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3301      	adds	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	429a      	cmp	r2, r3
 8001428:	dbf1      	blt.n	800140e <_write+0x12>
	}
	return len;
 800142a:	687b      	ldr	r3, [r7, #4]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <_close>:

int _close(int file)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	return -1;
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800145c:	605a      	str	r2, [r3, #4]
	return 0;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_isatty>:

int _isatty(int file)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return 1;
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
	return 0;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f008 ff7e 	bl	800a3cc <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	220c      	movs	r2, #12
 80014d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a05      	ldr	r2, [pc, #20]	; (8001500 <_sbrk+0x64>)
 80014ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	24080000 	.word	0x24080000
 80014fc:	00000400 	.word	0x00000400
 8001500:	240003ac 	.word	0x240003ac
 8001504:	240004f0 	.word	0x240004f0

08001508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800150c:	4b37      	ldr	r3, [pc, #220]	; (80015ec <SystemInit+0xe4>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001512:	4a36      	ldr	r2, [pc, #216]	; (80015ec <SystemInit+0xe4>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800151c:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <SystemInit+0xe8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 030f 	and.w	r3, r3, #15
 8001524:	2b06      	cmp	r3, #6
 8001526:	d807      	bhi.n	8001538 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001528:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <SystemInit+0xe8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 030f 	bic.w	r3, r3, #15
 8001530:	4a2f      	ldr	r2, [pc, #188]	; (80015f0 <SystemInit+0xe8>)
 8001532:	f043 0307 	orr.w	r3, r3, #7
 8001536:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001538:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <SystemInit+0xec>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a2d      	ldr	r2, [pc, #180]	; (80015f4 <SystemInit+0xec>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <SystemInit+0xec>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800154a:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <SystemInit+0xec>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4929      	ldr	r1, [pc, #164]	; (80015f4 <SystemInit+0xec>)
 8001550:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <SystemInit+0xf0>)
 8001552:	4013      	ands	r3, r2
 8001554:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <SystemInit+0xe8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001562:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <SystemInit+0xe8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 030f 	bic.w	r3, r3, #15
 800156a:	4a21      	ldr	r2, [pc, #132]	; (80015f0 <SystemInit+0xe8>)
 800156c:	f043 0307 	orr.w	r3, r3, #7
 8001570:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <SystemInit+0xec>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001578:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <SystemInit+0xec>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800157e:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <SystemInit+0xec>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <SystemInit+0xec>)
 8001586:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <SystemInit+0xf4>)
 8001588:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800158a:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <SystemInit+0xec>)
 800158c:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <SystemInit+0xf8>)
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001590:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <SystemInit+0xec>)
 8001592:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <SystemInit+0xfc>)
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <SystemInit+0xec>)
 8001598:	2200      	movs	r2, #0
 800159a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <SystemInit+0xec>)
 800159e:	4a19      	ldr	r2, [pc, #100]	; (8001604 <SystemInit+0xfc>)
 80015a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <SystemInit+0xec>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <SystemInit+0xec>)
 80015aa:	4a16      	ldr	r2, [pc, #88]	; (8001604 <SystemInit+0xfc>)
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <SystemInit+0xec>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <SystemInit+0xec>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <SystemInit+0xec>)
 80015ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <SystemInit+0xec>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <SystemInit+0x100>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <SystemInit+0x104>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015d2:	d202      	bcs.n	80015da <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <SystemInit+0x108>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <SystemInit+0x10c>)
 80015dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00
 80015f0:	52002000 	.word	0x52002000
 80015f4:	58024400 	.word	0x58024400
 80015f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80015fc:	02020200 	.word	0x02020200
 8001600:	01ff0000 	.word	0x01ff0000
 8001604:	01010280 	.word	0x01010280
 8001608:	5c001000 	.word	0x5c001000
 800160c:	ffff0000 	.word	0xffff0000
 8001610:	51008108 	.word	0x51008108
 8001614:	52004000 	.word	0x52004000

08001618 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b09a      	sub	sp, #104	; 0x68
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001638:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
 8001648:	615a      	str	r2, [r3, #20]
 800164a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	222c      	movs	r2, #44	; 0x2c
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f008 fee4 	bl	800a420 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001658:	4b43      	ldr	r3, [pc, #268]	; (8001768 <MX_TIM1_Init+0x150>)
 800165a:	4a44      	ldr	r2, [pc, #272]	; (800176c <MX_TIM1_Init+0x154>)
 800165c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24-1;
 800165e:	4b42      	ldr	r3, [pc, #264]	; (8001768 <MX_TIM1_Init+0x150>)
 8001660:	2217      	movs	r2, #23
 8001662:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b40      	ldr	r3, [pc, #256]	; (8001768 <MX_TIM1_Init+0x150>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800166a:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <MX_TIM1_Init+0x150>)
 800166c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001670:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <MX_TIM1_Init+0x150>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001678:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <MX_TIM1_Init+0x150>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <MX_TIM1_Init+0x150>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001684:	4838      	ldr	r0, [pc, #224]	; (8001768 <MX_TIM1_Init+0x150>)
 8001686:	f006 fc88 	bl	8007f9a <HAL_TIM_Base_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001690:	f7ff fd4a 	bl	8001128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001698:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800169a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800169e:	4619      	mov	r1, r3
 80016a0:	4831      	ldr	r0, [pc, #196]	; (8001768 <MX_TIM1_Init+0x150>)
 80016a2:	f006 ff55 	bl	8008550 <HAL_TIM_ConfigClockSource>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80016ac:	f7ff fd3c 	bl	8001128 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016b0:	482d      	ldr	r0, [pc, #180]	; (8001768 <MX_TIM1_Init+0x150>)
 80016b2:	f006 fcc9 	bl	8008048 <HAL_TIM_PWM_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80016bc:	f7ff fd34 	bl	8001128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016d0:	4619      	mov	r1, r3
 80016d2:	4825      	ldr	r0, [pc, #148]	; (8001768 <MX_TIM1_Init+0x150>)
 80016d4:	f007 fc68 	bl	8008fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80016de:	f7ff fd23 	bl	8001128 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e2:	2360      	movs	r3, #96	; 0x60
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ea:	2300      	movs	r3, #0
 80016ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80016ee:	2308      	movs	r3, #8
 80016f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001702:	2204      	movs	r2, #4
 8001704:	4619      	mov	r1, r3
 8001706:	4818      	ldr	r0, [pc, #96]	; (8001768 <MX_TIM1_Init+0x150>)
 8001708:	f006 fe0e 	bl	8008328 <HAL_TIM_PWM_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001712:	f7ff fd09 	bl	8001128 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800172a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001738:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	4619      	mov	r1, r3
 800174a:	4807      	ldr	r0, [pc, #28]	; (8001768 <MX_TIM1_Init+0x150>)
 800174c:	f007 fcba 	bl	80090c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001756:	f7ff fce7 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800175a:	4803      	ldr	r0, [pc, #12]	; (8001768 <MX_TIM1_Init+0x150>)
 800175c:	f000 f8ba 	bl	80018d4 <HAL_TIM_MspPostInit>

}
 8001760:	bf00      	nop
 8001762:	3768      	adds	r7, #104	; 0x68
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	240003b0 	.word	0x240003b0
 800176c:	40010000 	.word	0x40010000

08001770 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08e      	sub	sp, #56	; 0x38
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001790:	463b      	mov	r3, r7
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]
 800179e:	615a      	str	r2, [r3, #20]
 80017a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017a2:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <MX_TIM3_Init+0xe8>)
 80017a4:	4a2d      	ldr	r2, [pc, #180]	; (800185c <MX_TIM3_Init+0xec>)
 80017a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 80017a8:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <MX_TIM3_Init+0xe8>)
 80017aa:	22ef      	movs	r2, #239	; 0xef
 80017ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <MX_TIM3_Init+0xe8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <MX_TIM3_Init+0xe8>)
 80017b6:	f241 3287 	movw	r2, #4999	; 0x1387
 80017ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017bc:	4b26      	ldr	r3, [pc, #152]	; (8001858 <MX_TIM3_Init+0xe8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <MX_TIM3_Init+0xe8>)
 80017c4:	2280      	movs	r2, #128	; 0x80
 80017c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017c8:	4823      	ldr	r0, [pc, #140]	; (8001858 <MX_TIM3_Init+0xe8>)
 80017ca:	f006 fbe6 	bl	8007f9a <HAL_TIM_Base_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80017d4:	f7ff fca8 	bl	8001128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e2:	4619      	mov	r1, r3
 80017e4:	481c      	ldr	r0, [pc, #112]	; (8001858 <MX_TIM3_Init+0xe8>)
 80017e6:	f006 feb3 	bl	8008550 <HAL_TIM_ConfigClockSource>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80017f0:	f7ff fc9a 	bl	8001128 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017f4:	4818      	ldr	r0, [pc, #96]	; (8001858 <MX_TIM3_Init+0xe8>)
 80017f6:	f006 fc27 	bl	8008048 <HAL_TIM_PWM_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001800:	f7ff fc92 	bl	8001128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	4811      	ldr	r0, [pc, #68]	; (8001858 <MX_TIM3_Init+0xe8>)
 8001814:	f007 fbc8 	bl	8008fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800181e:	f7ff fc83 	bl	8001128 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001822:	2360      	movs	r3, #96	; 0x60
 8001824:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2500-1;
 8001826:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800182a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001834:	463b      	mov	r3, r7
 8001836:	2200      	movs	r2, #0
 8001838:	4619      	mov	r1, r3
 800183a:	4807      	ldr	r0, [pc, #28]	; (8001858 <MX_TIM3_Init+0xe8>)
 800183c:	f006 fd74 	bl	8008328 <HAL_TIM_PWM_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001846:	f7ff fc6f 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800184a:	4803      	ldr	r0, [pc, #12]	; (8001858 <MX_TIM3_Init+0xe8>)
 800184c:	f000 f842 	bl	80018d4 <HAL_TIM_MspPostInit>

}
 8001850:	bf00      	nop
 8001852:	3738      	adds	r7, #56	; 0x38
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	240003fc 	.word	0x240003fc
 800185c:	40000400 	.word	0x40000400

08001860 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <HAL_TIM_Base_MspInit+0x68>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d10f      	bne.n	8001892 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_TIM_Base_MspInit+0x6c>)
 8001874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <HAL_TIM_Base_MspInit+0x6c>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_TIM_Base_MspInit+0x6c>)
 8001884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001890:	e013      	b.n	80018ba <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM3)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <HAL_TIM_Base_MspInit+0x70>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d10e      	bne.n	80018ba <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_TIM_Base_MspInit+0x6c>)
 800189e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <HAL_TIM_Base_MspInit+0x6c>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <HAL_TIM_Base_MspInit+0x6c>)
 80018ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40010000 	.word	0x40010000
 80018cc:	58024400 	.word	0x58024400
 80018d0:	40000400 	.word	0x40000400

080018d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a25      	ldr	r2, [pc, #148]	; (8001988 <HAL_TIM_MspPostInit+0xb4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d120      	bne.n	8001938 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018f6:	4b25      	ldr	r3, [pc, #148]	; (800198c <HAL_TIM_MspPostInit+0xb8>)
 80018f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fc:	4a23      	ldr	r2, [pc, #140]	; (800198c <HAL_TIM_MspPostInit+0xb8>)
 80018fe:	f043 0310 	orr.w	r3, r3, #16
 8001902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_TIM_MspPostInit+0xb8>)
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = LCD_LIGHT_Pin;
 8001914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001926:	2301      	movs	r3, #1
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_LIGHT_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	4817      	ldr	r0, [pc, #92]	; (8001990 <HAL_TIM_MspPostInit+0xbc>)
 8001932:	f002 fb93 	bl	800405c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001936:	e023      	b.n	8001980 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a15      	ldr	r2, [pc, #84]	; (8001994 <HAL_TIM_MspPostInit+0xc0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d11e      	bne.n	8001980 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_TIM_MspPostInit+0xb8>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001948:	4a10      	ldr	r2, [pc, #64]	; (800198c <HAL_TIM_MspPostInit+0xb8>)
 800194a:	f043 0302 	orr.w	r3, r3, #2
 800194e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_TIM_MspPostInit+0xb8>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001960:	2310      	movs	r3, #16
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001970:	2302      	movs	r3, #2
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	4807      	ldr	r0, [pc, #28]	; (8001998 <HAL_TIM_MspPostInit+0xc4>)
 800197c:	f002 fb6e 	bl	800405c <HAL_GPIO_Init>
}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40010000 	.word	0x40010000
 800198c:	58024400 	.word	0x58024400
 8001990:	58021000 	.word	0x58021000
 8001994:	40000400 	.word	0x40000400
 8001998:	58020400 	.word	0x58020400

0800199c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019a0:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <MX_UART4_Init+0x90>)
 80019a2:	4a23      	ldr	r2, [pc, #140]	; (8001a30 <MX_UART4_Init+0x94>)
 80019a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 80019a6:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <MX_UART4_Init+0x90>)
 80019a8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80019ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019ae:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <MX_UART4_Init+0x90>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <MX_UART4_Init+0x90>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <MX_UART4_Init+0x90>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <MX_UART4_Init+0x90>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <MX_UART4_Init+0x90>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <MX_UART4_Init+0x90>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <MX_UART4_Init+0x90>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <MX_UART4_Init+0x90>)
 80019da:	2200      	movs	r2, #0
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <MX_UART4_Init+0x90>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019e4:	4811      	ldr	r0, [pc, #68]	; (8001a2c <MX_UART4_Init+0x90>)
 80019e6:	f007 fbeb 	bl	80091c0 <HAL_UART_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80019f0:	f7ff fb9a 	bl	8001128 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f4:	2100      	movs	r1, #0
 80019f6:	480d      	ldr	r0, [pc, #52]	; (8001a2c <MX_UART4_Init+0x90>)
 80019f8:	f008 fc1e 	bl	800a238 <HAL_UARTEx_SetTxFifoThreshold>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001a02:	f7ff fb91 	bl	8001128 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a06:	2100      	movs	r1, #0
 8001a08:	4808      	ldr	r0, [pc, #32]	; (8001a2c <MX_UART4_Init+0x90>)
 8001a0a:	f008 fc53 	bl	800a2b4 <HAL_UARTEx_SetRxFifoThreshold>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001a14:	f7ff fb88 	bl	8001128 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a18:	4804      	ldr	r0, [pc, #16]	; (8001a2c <MX_UART4_Init+0x90>)
 8001a1a:	f008 fbd4 	bl	800a1c6 <HAL_UARTEx_DisableFifoMode>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001a24:	f7ff fb80 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	24000448 	.word	0x24000448
 8001a30:	40004c00 	.word	0x40004c00

08001a34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b0b8      	sub	sp, #224	; 0xe0
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	22bc      	movs	r2, #188	; 0xbc
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f008 fce3 	bl	800a420 <memset>
  if(uartHandle->Instance==UART4)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a24      	ldr	r2, [pc, #144]	; (8001af0 <HAL_UART_MspInit+0xbc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d141      	bne.n	8001ae8 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a64:	2302      	movs	r3, #2
 8001a66:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 ffe4 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a7e:	f7ff fb53 	bl	8001128 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a82:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <HAL_UART_MspInit+0xc0>)
 8001a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a88:	4a1a      	ldr	r2, [pc, #104]	; (8001af4 <HAL_UART_MspInit+0xc0>)
 8001a8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_UART_MspInit+0xc0>)
 8001a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <HAL_UART_MspInit+0xc0>)
 8001aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa6:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <HAL_UART_MspInit+0xc0>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_UART_MspInit+0xc0>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ad6:	2308      	movs	r3, #8
 8001ad8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <HAL_UART_MspInit+0xc4>)
 8001ae4:	f002 faba 	bl	800405c <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001ae8:	bf00      	nop
 8001aea:	37e0      	adds	r7, #224	; 0xe0
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40004c00 	.word	0x40004c00
 8001af4:	58024400 	.word	0x58024400
 8001af8:	58020000 	.word	0x58020000

08001afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b00:	f7ff fd02 	bl	8001508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b06:	490d      	ldr	r1, [pc, #52]	; (8001b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b1c:	4c0a      	ldr	r4, [pc, #40]	; (8001b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f008 fc55 	bl	800a3d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2e:	f7ff f9bb 	bl	8000ea8 <main>
  bx  lr
 8001b32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b34:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b3c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001b40:	0800b460 	.word	0x0800b460
  ldr r2, =_sbss
 8001b44:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001b48:	240004ec 	.word	0x240004ec

08001b4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC3_IRQHandler>
	...

08001b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b56:	2003      	movs	r0, #3
 8001b58:	f000 f968 	bl	8001e2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b5c:	f003 fd9a 	bl	8005694 <HAL_RCC_GetSysClockFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_Init+0x68>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	4913      	ldr	r1, [pc, #76]	; (8001bbc <HAL_Init+0x6c>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
 8001b78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_Init+0x68>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_Init+0x6c>)
 8001b84:	5cd3      	ldrb	r3, [r2, r3]
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b90:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <HAL_Init+0x70>)
 8001b92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b94:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <HAL_Init+0x74>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b9a:	2007      	movs	r0, #7
 8001b9c:	f000 f814 	bl	8001bc8 <HAL_InitTick>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e002      	b.n	8001bb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001baa:	f7ff fb81 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	58024400 	.word	0x58024400
 8001bbc:	0800b378 	.word	0x0800b378
 8001bc0:	24000004 	.word	0x24000004
 8001bc4:	24000000 	.word	0x24000000

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bd0:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_InitTick+0x60>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e021      	b.n	8001c20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <HAL_InitTick+0x64>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_InitTick+0x60>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f94d 	bl	8001e92 <HAL_SYSTICK_Config>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00e      	b.n	8001c20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d80a      	bhi.n	8001c1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f000 f917 	bl	8001e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c14:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <HAL_InitTick+0x68>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	2400000c 	.word	0x2400000c
 8001c2c:	24000000 	.word	0x24000000
 8001c30:	24000008 	.word	0x24000008

08001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	2400000c 	.word	0x2400000c
 8001c58:	240004d8 	.word	0x240004d8

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	240004d8 	.word	0x240004d8

08001c74 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_GetREVID+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	0c1b      	lsrs	r3, r3, #16
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	5c001000 	.word	0x5c001000

08001c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <__NVIC_SetPriorityGrouping+0x40>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cba:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <__NVIC_SetPriorityGrouping+0x40>)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	60d3      	str	r3, [r2, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00
 8001cd0:	05fa0000 	.word	0x05fa0000

08001cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <__NVIC_GetPriorityGrouping+0x18>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	f003 0307 	and.w	r3, r3, #7
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	db0b      	blt.n	8001d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	f003 021f 	and.w	r2, r3, #31
 8001d08:	4907      	ldr	r1, [pc, #28]	; (8001d28 <__NVIC_EnableIRQ+0x38>)
 8001d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	2001      	movs	r0, #1
 8001d12:	fa00 f202 	lsl.w	r2, r0, r2
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000e100 	.word	0xe000e100

08001d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	db0a      	blt.n	8001d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	490c      	ldr	r1, [pc, #48]	; (8001d78 <__NVIC_SetPriority+0x4c>)
 8001d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d4a:	0112      	lsls	r2, r2, #4
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	440b      	add	r3, r1
 8001d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d54:	e00a      	b.n	8001d6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4908      	ldr	r1, [pc, #32]	; (8001d7c <__NVIC_SetPriority+0x50>)
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	3b04      	subs	r3, #4
 8001d64:	0112      	lsls	r2, r2, #4
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	440b      	add	r3, r1
 8001d6a:	761a      	strb	r2, [r3, #24]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000e100 	.word	0xe000e100
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f1c3 0307 	rsb	r3, r3, #7
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	bf28      	it	cs
 8001d9e:	2304      	movcs	r3, #4
 8001da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3304      	adds	r3, #4
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d902      	bls.n	8001db0 <NVIC_EncodePriority+0x30>
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3b03      	subs	r3, #3
 8001dae:	e000      	b.n	8001db2 <NVIC_EncodePriority+0x32>
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	43d9      	mvns	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	4313      	orrs	r3, r2
         );
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3724      	adds	r7, #36	; 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df8:	d301      	bcc.n	8001dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00f      	b.n	8001e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <SysTick_Config+0x40>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e06:	210f      	movs	r1, #15
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	f7ff ff8e 	bl	8001d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <SysTick_Config+0x40>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <SysTick_Config+0x40>)
 8001e18:	2207      	movs	r2, #7
 8001e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	e000e010 	.word	0xe000e010

08001e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ff29 	bl	8001c8c <__NVIC_SetPriorityGrouping>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e50:	f7ff ff40 	bl	8001cd4 <__NVIC_GetPriorityGrouping>
 8001e54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f7ff ff90 	bl	8001d80 <NVIC_EncodePriority>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff5f 	bl	8001d2c <__NVIC_SetPriority>
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff33 	bl	8001cf0 <__NVIC_EnableIRQ>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffa4 	bl	8001de8 <SysTick_Config>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff fed2 	bl	8001c5c <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e316      	b.n	80024f2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a66      	ldr	r2, [pc, #408]	; (8002064 <HAL_DMA_Init+0x1b8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d04a      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a65      	ldr	r2, [pc, #404]	; (8002068 <HAL_DMA_Init+0x1bc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d045      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a63      	ldr	r2, [pc, #396]	; (800206c <HAL_DMA_Init+0x1c0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d040      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a62      	ldr	r2, [pc, #392]	; (8002070 <HAL_DMA_Init+0x1c4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d03b      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a60      	ldr	r2, [pc, #384]	; (8002074 <HAL_DMA_Init+0x1c8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d036      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a5f      	ldr	r2, [pc, #380]	; (8002078 <HAL_DMA_Init+0x1cc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d031      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a5d      	ldr	r2, [pc, #372]	; (800207c <HAL_DMA_Init+0x1d0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d02c      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a5c      	ldr	r2, [pc, #368]	; (8002080 <HAL_DMA_Init+0x1d4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d027      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a5a      	ldr	r2, [pc, #360]	; (8002084 <HAL_DMA_Init+0x1d8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d022      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a59      	ldr	r2, [pc, #356]	; (8002088 <HAL_DMA_Init+0x1dc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d01d      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a57      	ldr	r2, [pc, #348]	; (800208c <HAL_DMA_Init+0x1e0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d018      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a56      	ldr	r2, [pc, #344]	; (8002090 <HAL_DMA_Init+0x1e4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d013      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a54      	ldr	r2, [pc, #336]	; (8002094 <HAL_DMA_Init+0x1e8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00e      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a53      	ldr	r2, [pc, #332]	; (8002098 <HAL_DMA_Init+0x1ec>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d009      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a51      	ldr	r2, [pc, #324]	; (800209c <HAL_DMA_Init+0x1f0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d004      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a50      	ldr	r2, [pc, #320]	; (80020a0 <HAL_DMA_Init+0x1f4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d101      	bne.n	8001f68 <HAL_DMA_Init+0xbc>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_DMA_Init+0xbe>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 813b 	beq.w	80021e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a37      	ldr	r2, [pc, #220]	; (8002064 <HAL_DMA_Init+0x1b8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d04a      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a36      	ldr	r2, [pc, #216]	; (8002068 <HAL_DMA_Init+0x1bc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d045      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a34      	ldr	r2, [pc, #208]	; (800206c <HAL_DMA_Init+0x1c0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d040      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a33      	ldr	r2, [pc, #204]	; (8002070 <HAL_DMA_Init+0x1c4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d03b      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a31      	ldr	r2, [pc, #196]	; (8002074 <HAL_DMA_Init+0x1c8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d036      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a30      	ldr	r2, [pc, #192]	; (8002078 <HAL_DMA_Init+0x1cc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d031      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a2e      	ldr	r2, [pc, #184]	; (800207c <HAL_DMA_Init+0x1d0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d02c      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a2d      	ldr	r2, [pc, #180]	; (8002080 <HAL_DMA_Init+0x1d4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d027      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a2b      	ldr	r2, [pc, #172]	; (8002084 <HAL_DMA_Init+0x1d8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d022      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a2a      	ldr	r2, [pc, #168]	; (8002088 <HAL_DMA_Init+0x1dc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d01d      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a28      	ldr	r2, [pc, #160]	; (800208c <HAL_DMA_Init+0x1e0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d018      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a27      	ldr	r2, [pc, #156]	; (8002090 <HAL_DMA_Init+0x1e4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d013      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a25      	ldr	r2, [pc, #148]	; (8002094 <HAL_DMA_Init+0x1e8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00e      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a24      	ldr	r2, [pc, #144]	; (8002098 <HAL_DMA_Init+0x1ec>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d009      	beq.n	8002020 <HAL_DMA_Init+0x174>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a22      	ldr	r2, [pc, #136]	; (800209c <HAL_DMA_Init+0x1f0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d004      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a21      	ldr	r2, [pc, #132]	; (80020a0 <HAL_DMA_Init+0x1f4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d108      	bne.n	8002032 <HAL_DMA_Init+0x186>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0201 	bic.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	e007      	b.n	8002042 <HAL_DMA_Init+0x196>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0201 	bic.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002042:	e02f      	b.n	80020a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002044:	f7ff fe0a 	bl	8001c5c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b05      	cmp	r3, #5
 8002050:	d928      	bls.n	80020a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2220      	movs	r2, #32
 8002056:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2203      	movs	r2, #3
 800205c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e246      	b.n	80024f2 <HAL_DMA_Init+0x646>
 8002064:	40020010 	.word	0x40020010
 8002068:	40020028 	.word	0x40020028
 800206c:	40020040 	.word	0x40020040
 8002070:	40020058 	.word	0x40020058
 8002074:	40020070 	.word	0x40020070
 8002078:	40020088 	.word	0x40020088
 800207c:	400200a0 	.word	0x400200a0
 8002080:	400200b8 	.word	0x400200b8
 8002084:	40020410 	.word	0x40020410
 8002088:	40020428 	.word	0x40020428
 800208c:	40020440 	.word	0x40020440
 8002090:	40020458 	.word	0x40020458
 8002094:	40020470 	.word	0x40020470
 8002098:	40020488 	.word	0x40020488
 800209c:	400204a0 	.word	0x400204a0
 80020a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1c8      	bne.n	8002044 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4b83      	ldr	r3, [pc, #524]	; (80022cc <HAL_DMA_Init+0x420>)
 80020be:	4013      	ands	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80020ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d107      	bne.n	8002108 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	4313      	orrs	r3, r2
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002108:	4b71      	ldr	r3, [pc, #452]	; (80022d0 <HAL_DMA_Init+0x424>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b71      	ldr	r3, [pc, #452]	; (80022d4 <HAL_DMA_Init+0x428>)
 800210e:	4013      	ands	r3, r2
 8002110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002114:	d328      	bcc.n	8002168 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b28      	cmp	r3, #40	; 0x28
 800211c:	d903      	bls.n	8002126 <HAL_DMA_Init+0x27a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b2e      	cmp	r3, #46	; 0x2e
 8002124:	d917      	bls.n	8002156 <HAL_DMA_Init+0x2aa>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b3e      	cmp	r3, #62	; 0x3e
 800212c:	d903      	bls.n	8002136 <HAL_DMA_Init+0x28a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b42      	cmp	r3, #66	; 0x42
 8002134:	d90f      	bls.n	8002156 <HAL_DMA_Init+0x2aa>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b46      	cmp	r3, #70	; 0x46
 800213c:	d903      	bls.n	8002146 <HAL_DMA_Init+0x29a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b48      	cmp	r3, #72	; 0x48
 8002144:	d907      	bls.n	8002156 <HAL_DMA_Init+0x2aa>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b4e      	cmp	r3, #78	; 0x4e
 800214c:	d905      	bls.n	800215a <HAL_DMA_Init+0x2ae>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b52      	cmp	r3, #82	; 0x52
 8002154:	d801      	bhi.n	800215a <HAL_DMA_Init+0x2ae>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <HAL_DMA_Init+0x2b0>
 800215a:	2300      	movs	r3, #0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002166:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f023 0307 	bic.w	r3, r3, #7
 800217e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	2b04      	cmp	r3, #4
 8002190:	d117      	bne.n	80021c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00e      	beq.n	80021c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f001 fdcf 	bl	8003d48 <DMA_CheckFifoParam>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2240      	movs	r2, #64	; 0x40
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e197      	b.n	80024f2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f001 fd0a 	bl	8003be4 <DMA_CalcBaseAndBitshift>
 80021d0:	4603      	mov	r3, r0
 80021d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	223f      	movs	r2, #63	; 0x3f
 80021de:	409a      	lsls	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	e0cd      	b.n	8002382 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a3b      	ldr	r2, [pc, #236]	; (80022d8 <HAL_DMA_Init+0x42c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d022      	beq.n	8002236 <HAL_DMA_Init+0x38a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a39      	ldr	r2, [pc, #228]	; (80022dc <HAL_DMA_Init+0x430>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01d      	beq.n	8002236 <HAL_DMA_Init+0x38a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a38      	ldr	r2, [pc, #224]	; (80022e0 <HAL_DMA_Init+0x434>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d018      	beq.n	8002236 <HAL_DMA_Init+0x38a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a36      	ldr	r2, [pc, #216]	; (80022e4 <HAL_DMA_Init+0x438>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <HAL_DMA_Init+0x38a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a35      	ldr	r2, [pc, #212]	; (80022e8 <HAL_DMA_Init+0x43c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d00e      	beq.n	8002236 <HAL_DMA_Init+0x38a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a33      	ldr	r2, [pc, #204]	; (80022ec <HAL_DMA_Init+0x440>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d009      	beq.n	8002236 <HAL_DMA_Init+0x38a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a32      	ldr	r2, [pc, #200]	; (80022f0 <HAL_DMA_Init+0x444>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d004      	beq.n	8002236 <HAL_DMA_Init+0x38a>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a30      	ldr	r2, [pc, #192]	; (80022f4 <HAL_DMA_Init+0x448>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d101      	bne.n	800223a <HAL_DMA_Init+0x38e>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_DMA_Init+0x390>
 800223a:	2300      	movs	r3, #0
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8097 	beq.w	8002370 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <HAL_DMA_Init+0x42c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d021      	beq.n	8002290 <HAL_DMA_Init+0x3e4>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a22      	ldr	r2, [pc, #136]	; (80022dc <HAL_DMA_Init+0x430>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01c      	beq.n	8002290 <HAL_DMA_Init+0x3e4>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <HAL_DMA_Init+0x434>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d017      	beq.n	8002290 <HAL_DMA_Init+0x3e4>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1f      	ldr	r2, [pc, #124]	; (80022e4 <HAL_DMA_Init+0x438>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d012      	beq.n	8002290 <HAL_DMA_Init+0x3e4>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a1e      	ldr	r2, [pc, #120]	; (80022e8 <HAL_DMA_Init+0x43c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00d      	beq.n	8002290 <HAL_DMA_Init+0x3e4>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <HAL_DMA_Init+0x440>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d008      	beq.n	8002290 <HAL_DMA_Init+0x3e4>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <HAL_DMA_Init+0x444>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d003      	beq.n	8002290 <HAL_DMA_Init+0x3e4>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <HAL_DMA_Init+0x448>)
 800228e:	4293      	cmp	r3, r2
 8002290:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2202      	movs	r2, #2
 8002296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_DMA_Init+0x44c>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b40      	cmp	r3, #64	; 0x40
 80022b8:	d020      	beq.n	80022fc <HAL_DMA_Init+0x450>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b80      	cmp	r3, #128	; 0x80
 80022c0:	d102      	bne.n	80022c8 <HAL_DMA_Init+0x41c>
 80022c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022c6:	e01a      	b.n	80022fe <HAL_DMA_Init+0x452>
 80022c8:	2300      	movs	r3, #0
 80022ca:	e018      	b.n	80022fe <HAL_DMA_Init+0x452>
 80022cc:	fe10803f 	.word	0xfe10803f
 80022d0:	5c001000 	.word	0x5c001000
 80022d4:	ffff0000 	.word	0xffff0000
 80022d8:	58025408 	.word	0x58025408
 80022dc:	5802541c 	.word	0x5802541c
 80022e0:	58025430 	.word	0x58025430
 80022e4:	58025444 	.word	0x58025444
 80022e8:	58025458 	.word	0x58025458
 80022ec:	5802546c 	.word	0x5802546c
 80022f0:	58025480 	.word	0x58025480
 80022f4:	58025494 	.word	0x58025494
 80022f8:	fffe000f 	.word	0xfffe000f
 80022fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68d2      	ldr	r2, [r2, #12]
 8002302:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002304:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800230c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002314:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800231c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002324:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800232c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b6e      	ldr	r3, [pc, #440]	; (80024fc <HAL_DMA_Init+0x650>)
 8002344:	4413      	add	r3, r2
 8002346:	4a6e      	ldr	r2, [pc, #440]	; (8002500 <HAL_DMA_Init+0x654>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	009a      	lsls	r2, r3, #2
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f001 fc45 	bl	8003be4 <DMA_CalcBaseAndBitshift>
 800235a:	4603      	mov	r3, r0
 800235c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	2201      	movs	r2, #1
 8002368:	409a      	lsls	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	e008      	b.n	8002382 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2240      	movs	r2, #64	; 0x40
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2203      	movs	r2, #3
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e0b7      	b.n	80024f2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a5f      	ldr	r2, [pc, #380]	; (8002504 <HAL_DMA_Init+0x658>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d072      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a5d      	ldr	r2, [pc, #372]	; (8002508 <HAL_DMA_Init+0x65c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d06d      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a5c      	ldr	r2, [pc, #368]	; (800250c <HAL_DMA_Init+0x660>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d068      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a5a      	ldr	r2, [pc, #360]	; (8002510 <HAL_DMA_Init+0x664>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d063      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a59      	ldr	r2, [pc, #356]	; (8002514 <HAL_DMA_Init+0x668>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d05e      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a57      	ldr	r2, [pc, #348]	; (8002518 <HAL_DMA_Init+0x66c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d059      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a56      	ldr	r2, [pc, #344]	; (800251c <HAL_DMA_Init+0x670>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d054      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a54      	ldr	r2, [pc, #336]	; (8002520 <HAL_DMA_Init+0x674>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d04f      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a53      	ldr	r2, [pc, #332]	; (8002524 <HAL_DMA_Init+0x678>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d04a      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a51      	ldr	r2, [pc, #324]	; (8002528 <HAL_DMA_Init+0x67c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d045      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a50      	ldr	r2, [pc, #320]	; (800252c <HAL_DMA_Init+0x680>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d040      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a4e      	ldr	r2, [pc, #312]	; (8002530 <HAL_DMA_Init+0x684>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d03b      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a4d      	ldr	r2, [pc, #308]	; (8002534 <HAL_DMA_Init+0x688>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d036      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a4b      	ldr	r2, [pc, #300]	; (8002538 <HAL_DMA_Init+0x68c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d031      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a4a      	ldr	r2, [pc, #296]	; (800253c <HAL_DMA_Init+0x690>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d02c      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a48      	ldr	r2, [pc, #288]	; (8002540 <HAL_DMA_Init+0x694>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d027      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a47      	ldr	r2, [pc, #284]	; (8002544 <HAL_DMA_Init+0x698>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d022      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a45      	ldr	r2, [pc, #276]	; (8002548 <HAL_DMA_Init+0x69c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d01d      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a44      	ldr	r2, [pc, #272]	; (800254c <HAL_DMA_Init+0x6a0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d018      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a42      	ldr	r2, [pc, #264]	; (8002550 <HAL_DMA_Init+0x6a4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a41      	ldr	r2, [pc, #260]	; (8002554 <HAL_DMA_Init+0x6a8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d00e      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a3f      	ldr	r2, [pc, #252]	; (8002558 <HAL_DMA_Init+0x6ac>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d009      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a3e      	ldr	r2, [pc, #248]	; (800255c <HAL_DMA_Init+0x6b0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d004      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a3c      	ldr	r2, [pc, #240]	; (8002560 <HAL_DMA_Init+0x6b4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d101      	bne.n	8002476 <HAL_DMA_Init+0x5ca>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_DMA_Init+0x5cc>
 8002476:	2300      	movs	r3, #0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d032      	beq.n	80024e2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f001 fcdf 	bl	8003e40 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b80      	cmp	r3, #128	; 0x80
 8002488:	d102      	bne.n	8002490 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d010      	beq.n	80024d0 <HAL_DMA_Init+0x624>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d80c      	bhi.n	80024d0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f001 fd5c 	bl	8003f74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	e008      	b.n	80024e2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	a7fdabf8 	.word	0xa7fdabf8
 8002500:	cccccccd 	.word	0xcccccccd
 8002504:	40020010 	.word	0x40020010
 8002508:	40020028 	.word	0x40020028
 800250c:	40020040 	.word	0x40020040
 8002510:	40020058 	.word	0x40020058
 8002514:	40020070 	.word	0x40020070
 8002518:	40020088 	.word	0x40020088
 800251c:	400200a0 	.word	0x400200a0
 8002520:	400200b8 	.word	0x400200b8
 8002524:	40020410 	.word	0x40020410
 8002528:	40020428 	.word	0x40020428
 800252c:	40020440 	.word	0x40020440
 8002530:	40020458 	.word	0x40020458
 8002534:	40020470 	.word	0x40020470
 8002538:	40020488 	.word	0x40020488
 800253c:	400204a0 	.word	0x400204a0
 8002540:	400204b8 	.word	0x400204b8
 8002544:	58025408 	.word	0x58025408
 8002548:	5802541c 	.word	0x5802541c
 800254c:	58025430 	.word	0x58025430
 8002550:	58025444 	.word	0x58025444
 8002554:	58025458 	.word	0x58025458
 8002558:	5802546c 	.word	0x5802546c
 800255c:	58025480 	.word	0x58025480
 8002560:	58025494 	.word	0x58025494

08002564 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e226      	b.n	80029ce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_DMA_Start_IT+0x2a>
 800258a:	2302      	movs	r3, #2
 800258c:	e21f      	b.n	80029ce <HAL_DMA_Start_IT+0x46a>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	f040 820a 	bne.w	80029b8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a68      	ldr	r2, [pc, #416]	; (8002758 <HAL_DMA_Start_IT+0x1f4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d04a      	beq.n	8002652 <HAL_DMA_Start_IT+0xee>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a66      	ldr	r2, [pc, #408]	; (800275c <HAL_DMA_Start_IT+0x1f8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d045      	beq.n	8002652 <HAL_DMA_Start_IT+0xee>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a65      	ldr	r2, [pc, #404]	; (8002760 <HAL_DMA_Start_IT+0x1fc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d040      	beq.n	8002652 <HAL_DMA_Start_IT+0xee>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a63      	ldr	r2, [pc, #396]	; (8002764 <HAL_DMA_Start_IT+0x200>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d03b      	beq.n	8002652 <HAL_DMA_Start_IT+0xee>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a62      	ldr	r2, [pc, #392]	; (8002768 <HAL_DMA_Start_IT+0x204>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d036      	beq.n	8002652 <HAL_DMA_Start_IT+0xee>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a60      	ldr	r2, [pc, #384]	; (800276c <HAL_DMA_Start_IT+0x208>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d031      	beq.n	8002652 <HAL_DMA_Start_IT+0xee>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a5f      	ldr	r2, [pc, #380]	; (8002770 <HAL_DMA_Start_IT+0x20c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d02c      	beq.n	8002652 <HAL_DMA_Start_IT+0xee>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a5d      	ldr	r2, [pc, #372]	; (8002774 <HAL_DMA_Start_IT+0x210>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d027      	beq.n	8002652 <HAL_DMA_Start_IT+0xee>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a5c      	ldr	r2, [pc, #368]	; (8002778 <HAL_DMA_Start_IT+0x214>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d022      	beq.n	8002652 <HAL_DMA_Start_IT+0xee>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a5a      	ldr	r2, [pc, #360]	; (800277c <HAL_DMA_Start_IT+0x218>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01d      	beq.n	8002652 <HAL_DMA_Start_IT+0xee>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a59      	ldr	r2, [pc, #356]	; (8002780 <HAL_DMA_Start_IT+0x21c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d018      	beq.n	8002652 <HAL_DMA_Start_IT+0xee>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a57      	ldr	r2, [pc, #348]	; (8002784 <HAL_DMA_Start_IT+0x220>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_DMA_Start_IT+0xee>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a56      	ldr	r2, [pc, #344]	; (8002788 <HAL_DMA_Start_IT+0x224>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00e      	beq.n	8002652 <HAL_DMA_Start_IT+0xee>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a54      	ldr	r2, [pc, #336]	; (800278c <HAL_DMA_Start_IT+0x228>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_DMA_Start_IT+0xee>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a53      	ldr	r2, [pc, #332]	; (8002790 <HAL_DMA_Start_IT+0x22c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_DMA_Start_IT+0xee>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a51      	ldr	r2, [pc, #324]	; (8002794 <HAL_DMA_Start_IT+0x230>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d108      	bne.n	8002664 <HAL_DMA_Start_IT+0x100>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0201 	bic.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e007      	b.n	8002674 <HAL_DMA_Start_IT+0x110>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f001 f906 	bl	800388c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a34      	ldr	r2, [pc, #208]	; (8002758 <HAL_DMA_Start_IT+0x1f4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d04a      	beq.n	8002720 <HAL_DMA_Start_IT+0x1bc>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a33      	ldr	r2, [pc, #204]	; (800275c <HAL_DMA_Start_IT+0x1f8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d045      	beq.n	8002720 <HAL_DMA_Start_IT+0x1bc>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a31      	ldr	r2, [pc, #196]	; (8002760 <HAL_DMA_Start_IT+0x1fc>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d040      	beq.n	8002720 <HAL_DMA_Start_IT+0x1bc>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a30      	ldr	r2, [pc, #192]	; (8002764 <HAL_DMA_Start_IT+0x200>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d03b      	beq.n	8002720 <HAL_DMA_Start_IT+0x1bc>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a2e      	ldr	r2, [pc, #184]	; (8002768 <HAL_DMA_Start_IT+0x204>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d036      	beq.n	8002720 <HAL_DMA_Start_IT+0x1bc>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a2d      	ldr	r2, [pc, #180]	; (800276c <HAL_DMA_Start_IT+0x208>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d031      	beq.n	8002720 <HAL_DMA_Start_IT+0x1bc>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a2b      	ldr	r2, [pc, #172]	; (8002770 <HAL_DMA_Start_IT+0x20c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d02c      	beq.n	8002720 <HAL_DMA_Start_IT+0x1bc>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a2a      	ldr	r2, [pc, #168]	; (8002774 <HAL_DMA_Start_IT+0x210>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d027      	beq.n	8002720 <HAL_DMA_Start_IT+0x1bc>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a28      	ldr	r2, [pc, #160]	; (8002778 <HAL_DMA_Start_IT+0x214>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d022      	beq.n	8002720 <HAL_DMA_Start_IT+0x1bc>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a27      	ldr	r2, [pc, #156]	; (800277c <HAL_DMA_Start_IT+0x218>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d01d      	beq.n	8002720 <HAL_DMA_Start_IT+0x1bc>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a25      	ldr	r2, [pc, #148]	; (8002780 <HAL_DMA_Start_IT+0x21c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d018      	beq.n	8002720 <HAL_DMA_Start_IT+0x1bc>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a24      	ldr	r2, [pc, #144]	; (8002784 <HAL_DMA_Start_IT+0x220>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d013      	beq.n	8002720 <HAL_DMA_Start_IT+0x1bc>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a22      	ldr	r2, [pc, #136]	; (8002788 <HAL_DMA_Start_IT+0x224>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00e      	beq.n	8002720 <HAL_DMA_Start_IT+0x1bc>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a21      	ldr	r2, [pc, #132]	; (800278c <HAL_DMA_Start_IT+0x228>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d009      	beq.n	8002720 <HAL_DMA_Start_IT+0x1bc>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <HAL_DMA_Start_IT+0x22c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d004      	beq.n	8002720 <HAL_DMA_Start_IT+0x1bc>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <HAL_DMA_Start_IT+0x230>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d101      	bne.n	8002724 <HAL_DMA_Start_IT+0x1c0>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <HAL_DMA_Start_IT+0x1c2>
 8002724:	2300      	movs	r3, #0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d036      	beq.n	8002798 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 021e 	bic.w	r2, r3, #30
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0216 	orr.w	r2, r2, #22
 800273c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d03e      	beq.n	80027c4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0208 	orr.w	r2, r2, #8
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e035      	b.n	80027c4 <HAL_DMA_Start_IT+0x260>
 8002758:	40020010 	.word	0x40020010
 800275c:	40020028 	.word	0x40020028
 8002760:	40020040 	.word	0x40020040
 8002764:	40020058 	.word	0x40020058
 8002768:	40020070 	.word	0x40020070
 800276c:	40020088 	.word	0x40020088
 8002770:	400200a0 	.word	0x400200a0
 8002774:	400200b8 	.word	0x400200b8
 8002778:	40020410 	.word	0x40020410
 800277c:	40020428 	.word	0x40020428
 8002780:	40020440 	.word	0x40020440
 8002784:	40020458 	.word	0x40020458
 8002788:	40020470 	.word	0x40020470
 800278c:	40020488 	.word	0x40020488
 8002790:	400204a0 	.word	0x400204a0
 8002794:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 020e 	bic.w	r2, r3, #14
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 020a 	orr.w	r2, r2, #10
 80027aa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0204 	orr.w	r2, r2, #4
 80027c2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a83      	ldr	r2, [pc, #524]	; (80029d8 <HAL_DMA_Start_IT+0x474>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d072      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a82      	ldr	r2, [pc, #520]	; (80029dc <HAL_DMA_Start_IT+0x478>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d06d      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a80      	ldr	r2, [pc, #512]	; (80029e0 <HAL_DMA_Start_IT+0x47c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d068      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a7f      	ldr	r2, [pc, #508]	; (80029e4 <HAL_DMA_Start_IT+0x480>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d063      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a7d      	ldr	r2, [pc, #500]	; (80029e8 <HAL_DMA_Start_IT+0x484>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d05e      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a7c      	ldr	r2, [pc, #496]	; (80029ec <HAL_DMA_Start_IT+0x488>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d059      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a7a      	ldr	r2, [pc, #488]	; (80029f0 <HAL_DMA_Start_IT+0x48c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d054      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a79      	ldr	r2, [pc, #484]	; (80029f4 <HAL_DMA_Start_IT+0x490>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d04f      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a77      	ldr	r2, [pc, #476]	; (80029f8 <HAL_DMA_Start_IT+0x494>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d04a      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a76      	ldr	r2, [pc, #472]	; (80029fc <HAL_DMA_Start_IT+0x498>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d045      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a74      	ldr	r2, [pc, #464]	; (8002a00 <HAL_DMA_Start_IT+0x49c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d040      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a73      	ldr	r2, [pc, #460]	; (8002a04 <HAL_DMA_Start_IT+0x4a0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d03b      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a71      	ldr	r2, [pc, #452]	; (8002a08 <HAL_DMA_Start_IT+0x4a4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d036      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a70      	ldr	r2, [pc, #448]	; (8002a0c <HAL_DMA_Start_IT+0x4a8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d031      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a6e      	ldr	r2, [pc, #440]	; (8002a10 <HAL_DMA_Start_IT+0x4ac>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d02c      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a6d      	ldr	r2, [pc, #436]	; (8002a14 <HAL_DMA_Start_IT+0x4b0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d027      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a6b      	ldr	r2, [pc, #428]	; (8002a18 <HAL_DMA_Start_IT+0x4b4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d022      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6a      	ldr	r2, [pc, #424]	; (8002a1c <HAL_DMA_Start_IT+0x4b8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d01d      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a68      	ldr	r2, [pc, #416]	; (8002a20 <HAL_DMA_Start_IT+0x4bc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d018      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a67      	ldr	r2, [pc, #412]	; (8002a24 <HAL_DMA_Start_IT+0x4c0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a65      	ldr	r2, [pc, #404]	; (8002a28 <HAL_DMA_Start_IT+0x4c4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00e      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a64      	ldr	r2, [pc, #400]	; (8002a2c <HAL_DMA_Start_IT+0x4c8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a62      	ldr	r2, [pc, #392]	; (8002a30 <HAL_DMA_Start_IT+0x4cc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_DMA_Start_IT+0x350>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a61      	ldr	r2, [pc, #388]	; (8002a34 <HAL_DMA_Start_IT+0x4d0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d101      	bne.n	80028b8 <HAL_DMA_Start_IT+0x354>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_DMA_Start_IT+0x356>
 80028b8:	2300      	movs	r3, #0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d01a      	beq.n	80028f4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028da:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d007      	beq.n	80028f4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a37      	ldr	r2, [pc, #220]	; (80029d8 <HAL_DMA_Start_IT+0x474>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d04a      	beq.n	8002994 <HAL_DMA_Start_IT+0x430>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a36      	ldr	r2, [pc, #216]	; (80029dc <HAL_DMA_Start_IT+0x478>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d045      	beq.n	8002994 <HAL_DMA_Start_IT+0x430>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a34      	ldr	r2, [pc, #208]	; (80029e0 <HAL_DMA_Start_IT+0x47c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d040      	beq.n	8002994 <HAL_DMA_Start_IT+0x430>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a33      	ldr	r2, [pc, #204]	; (80029e4 <HAL_DMA_Start_IT+0x480>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d03b      	beq.n	8002994 <HAL_DMA_Start_IT+0x430>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a31      	ldr	r2, [pc, #196]	; (80029e8 <HAL_DMA_Start_IT+0x484>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d036      	beq.n	8002994 <HAL_DMA_Start_IT+0x430>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a30      	ldr	r2, [pc, #192]	; (80029ec <HAL_DMA_Start_IT+0x488>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d031      	beq.n	8002994 <HAL_DMA_Start_IT+0x430>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a2e      	ldr	r2, [pc, #184]	; (80029f0 <HAL_DMA_Start_IT+0x48c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d02c      	beq.n	8002994 <HAL_DMA_Start_IT+0x430>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a2d      	ldr	r2, [pc, #180]	; (80029f4 <HAL_DMA_Start_IT+0x490>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d027      	beq.n	8002994 <HAL_DMA_Start_IT+0x430>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a2b      	ldr	r2, [pc, #172]	; (80029f8 <HAL_DMA_Start_IT+0x494>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d022      	beq.n	8002994 <HAL_DMA_Start_IT+0x430>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a2a      	ldr	r2, [pc, #168]	; (80029fc <HAL_DMA_Start_IT+0x498>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d01d      	beq.n	8002994 <HAL_DMA_Start_IT+0x430>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a28      	ldr	r2, [pc, #160]	; (8002a00 <HAL_DMA_Start_IT+0x49c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d018      	beq.n	8002994 <HAL_DMA_Start_IT+0x430>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a27      	ldr	r2, [pc, #156]	; (8002a04 <HAL_DMA_Start_IT+0x4a0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d013      	beq.n	8002994 <HAL_DMA_Start_IT+0x430>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a25      	ldr	r2, [pc, #148]	; (8002a08 <HAL_DMA_Start_IT+0x4a4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00e      	beq.n	8002994 <HAL_DMA_Start_IT+0x430>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a24      	ldr	r2, [pc, #144]	; (8002a0c <HAL_DMA_Start_IT+0x4a8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d009      	beq.n	8002994 <HAL_DMA_Start_IT+0x430>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a22      	ldr	r2, [pc, #136]	; (8002a10 <HAL_DMA_Start_IT+0x4ac>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d004      	beq.n	8002994 <HAL_DMA_Start_IT+0x430>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a21      	ldr	r2, [pc, #132]	; (8002a14 <HAL_DMA_Start_IT+0x4b0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d108      	bne.n	80029a6 <HAL_DMA_Start_IT+0x442>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	e012      	b.n	80029cc <HAL_DMA_Start_IT+0x468>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0201 	orr.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	e009      	b.n	80029cc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40020010 	.word	0x40020010
 80029dc:	40020028 	.word	0x40020028
 80029e0:	40020040 	.word	0x40020040
 80029e4:	40020058 	.word	0x40020058
 80029e8:	40020070 	.word	0x40020070
 80029ec:	40020088 	.word	0x40020088
 80029f0:	400200a0 	.word	0x400200a0
 80029f4:	400200b8 	.word	0x400200b8
 80029f8:	40020410 	.word	0x40020410
 80029fc:	40020428 	.word	0x40020428
 8002a00:	40020440 	.word	0x40020440
 8002a04:	40020458 	.word	0x40020458
 8002a08:	40020470 	.word	0x40020470
 8002a0c:	40020488 	.word	0x40020488
 8002a10:	400204a0 	.word	0x400204a0
 8002a14:	400204b8 	.word	0x400204b8
 8002a18:	58025408 	.word	0x58025408
 8002a1c:	5802541c 	.word	0x5802541c
 8002a20:	58025430 	.word	0x58025430
 8002a24:	58025444 	.word	0x58025444
 8002a28:	58025458 	.word	0x58025458
 8002a2c:	5802546c 	.word	0x5802546c
 8002a30:	58025480 	.word	0x58025480
 8002a34:	58025494 	.word	0x58025494

08002a38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a44:	4b67      	ldr	r3, [pc, #412]	; (8002be4 <HAL_DMA_IRQHandler+0x1ac>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a67      	ldr	r2, [pc, #412]	; (8002be8 <HAL_DMA_IRQHandler+0x1b0>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	0a9b      	lsrs	r3, r3, #10
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a5f      	ldr	r2, [pc, #380]	; (8002bec <HAL_DMA_IRQHandler+0x1b4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d04a      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xd2>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a5d      	ldr	r2, [pc, #372]	; (8002bf0 <HAL_DMA_IRQHandler+0x1b8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d045      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xd2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a5c      	ldr	r2, [pc, #368]	; (8002bf4 <HAL_DMA_IRQHandler+0x1bc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d040      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xd2>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a5a      	ldr	r2, [pc, #360]	; (8002bf8 <HAL_DMA_IRQHandler+0x1c0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d03b      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xd2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a59      	ldr	r2, [pc, #356]	; (8002bfc <HAL_DMA_IRQHandler+0x1c4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d036      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xd2>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a57      	ldr	r2, [pc, #348]	; (8002c00 <HAL_DMA_IRQHandler+0x1c8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d031      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xd2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a56      	ldr	r2, [pc, #344]	; (8002c04 <HAL_DMA_IRQHandler+0x1cc>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d02c      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xd2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a54      	ldr	r2, [pc, #336]	; (8002c08 <HAL_DMA_IRQHandler+0x1d0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d027      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xd2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a53      	ldr	r2, [pc, #332]	; (8002c0c <HAL_DMA_IRQHandler+0x1d4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d022      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xd2>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a51      	ldr	r2, [pc, #324]	; (8002c10 <HAL_DMA_IRQHandler+0x1d8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d01d      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xd2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a50      	ldr	r2, [pc, #320]	; (8002c14 <HAL_DMA_IRQHandler+0x1dc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d018      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xd2>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a4e      	ldr	r2, [pc, #312]	; (8002c18 <HAL_DMA_IRQHandler+0x1e0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d013      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xd2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a4d      	ldr	r2, [pc, #308]	; (8002c1c <HAL_DMA_IRQHandler+0x1e4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00e      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xd2>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a4b      	ldr	r2, [pc, #300]	; (8002c20 <HAL_DMA_IRQHandler+0x1e8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d009      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xd2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a4a      	ldr	r2, [pc, #296]	; (8002c24 <HAL_DMA_IRQHandler+0x1ec>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d004      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xd2>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a48      	ldr	r2, [pc, #288]	; (8002c28 <HAL_DMA_IRQHandler+0x1f0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d101      	bne.n	8002b0e <HAL_DMA_IRQHandler+0xd6>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_DMA_IRQHandler+0xd8>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 842b 	beq.w	800336c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2208      	movs	r2, #8
 8002b20:	409a      	lsls	r2, r3
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 80a2 	beq.w	8002c70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a2e      	ldr	r2, [pc, #184]	; (8002bec <HAL_DMA_IRQHandler+0x1b4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d04a      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x194>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a2d      	ldr	r2, [pc, #180]	; (8002bf0 <HAL_DMA_IRQHandler+0x1b8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d045      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x194>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a2b      	ldr	r2, [pc, #172]	; (8002bf4 <HAL_DMA_IRQHandler+0x1bc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d040      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x194>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2a      	ldr	r2, [pc, #168]	; (8002bf8 <HAL_DMA_IRQHandler+0x1c0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d03b      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x194>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a28      	ldr	r2, [pc, #160]	; (8002bfc <HAL_DMA_IRQHandler+0x1c4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d036      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x194>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a27      	ldr	r2, [pc, #156]	; (8002c00 <HAL_DMA_IRQHandler+0x1c8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d031      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x194>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a25      	ldr	r2, [pc, #148]	; (8002c04 <HAL_DMA_IRQHandler+0x1cc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d02c      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x194>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a24      	ldr	r2, [pc, #144]	; (8002c08 <HAL_DMA_IRQHandler+0x1d0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d027      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x194>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <HAL_DMA_IRQHandler+0x1d4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d022      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x194>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a21      	ldr	r2, [pc, #132]	; (8002c10 <HAL_DMA_IRQHandler+0x1d8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d01d      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x194>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1f      	ldr	r2, [pc, #124]	; (8002c14 <HAL_DMA_IRQHandler+0x1dc>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d018      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x194>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1e      	ldr	r2, [pc, #120]	; (8002c18 <HAL_DMA_IRQHandler+0x1e0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d013      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x194>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <HAL_DMA_IRQHandler+0x1e4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00e      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x194>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1b      	ldr	r2, [pc, #108]	; (8002c20 <HAL_DMA_IRQHandler+0x1e8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d009      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x194>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <HAL_DMA_IRQHandler+0x1ec>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d004      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x194>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a18      	ldr	r2, [pc, #96]	; (8002c28 <HAL_DMA_IRQHandler+0x1f0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d12f      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x1f4>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	bf14      	ite	ne
 8002bda:	2301      	movne	r3, #1
 8002bdc:	2300      	moveq	r3, #0
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	e02e      	b.n	8002c40 <HAL_DMA_IRQHandler+0x208>
 8002be2:	bf00      	nop
 8002be4:	24000000 	.word	0x24000000
 8002be8:	1b4e81b5 	.word	0x1b4e81b5
 8002bec:	40020010 	.word	0x40020010
 8002bf0:	40020028 	.word	0x40020028
 8002bf4:	40020040 	.word	0x40020040
 8002bf8:	40020058 	.word	0x40020058
 8002bfc:	40020070 	.word	0x40020070
 8002c00:	40020088 	.word	0x40020088
 8002c04:	400200a0 	.word	0x400200a0
 8002c08:	400200b8 	.word	0x400200b8
 8002c0c:	40020410 	.word	0x40020410
 8002c10:	40020428 	.word	0x40020428
 8002c14:	40020440 	.word	0x40020440
 8002c18:	40020458 	.word	0x40020458
 8002c1c:	40020470 	.word	0x40020470
 8002c20:	40020488 	.word	0x40020488
 8002c24:	400204a0 	.word	0x400204a0
 8002c28:	400204b8 	.word	0x400204b8
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bf14      	ite	ne
 8002c3a:	2301      	movne	r3, #1
 8002c3c:	2300      	moveq	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d015      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0204 	bic.w	r2, r2, #4
 8002c52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c68:	f043 0201 	orr.w	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d06e      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a69      	ldr	r2, [pc, #420]	; (8002e30 <HAL_DMA_IRQHandler+0x3f8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d04a      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2ee>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a67      	ldr	r2, [pc, #412]	; (8002e34 <HAL_DMA_IRQHandler+0x3fc>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d045      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2ee>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a66      	ldr	r2, [pc, #408]	; (8002e38 <HAL_DMA_IRQHandler+0x400>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d040      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2ee>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a64      	ldr	r2, [pc, #400]	; (8002e3c <HAL_DMA_IRQHandler+0x404>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d03b      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2ee>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a63      	ldr	r2, [pc, #396]	; (8002e40 <HAL_DMA_IRQHandler+0x408>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d036      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2ee>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a61      	ldr	r2, [pc, #388]	; (8002e44 <HAL_DMA_IRQHandler+0x40c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d031      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2ee>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a60      	ldr	r2, [pc, #384]	; (8002e48 <HAL_DMA_IRQHandler+0x410>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d02c      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2ee>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a5e      	ldr	r2, [pc, #376]	; (8002e4c <HAL_DMA_IRQHandler+0x414>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d027      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2ee>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a5d      	ldr	r2, [pc, #372]	; (8002e50 <HAL_DMA_IRQHandler+0x418>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d022      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2ee>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a5b      	ldr	r2, [pc, #364]	; (8002e54 <HAL_DMA_IRQHandler+0x41c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01d      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2ee>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a5a      	ldr	r2, [pc, #360]	; (8002e58 <HAL_DMA_IRQHandler+0x420>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d018      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2ee>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a58      	ldr	r2, [pc, #352]	; (8002e5c <HAL_DMA_IRQHandler+0x424>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2ee>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a57      	ldr	r2, [pc, #348]	; (8002e60 <HAL_DMA_IRQHandler+0x428>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2ee>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a55      	ldr	r2, [pc, #340]	; (8002e64 <HAL_DMA_IRQHandler+0x42c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2ee>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a54      	ldr	r2, [pc, #336]	; (8002e68 <HAL_DMA_IRQHandler+0x430>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2ee>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a52      	ldr	r2, [pc, #328]	; (8002e6c <HAL_DMA_IRQHandler+0x434>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d10a      	bne.n	8002d3c <HAL_DMA_IRQHandler+0x304>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e003      	b.n	8002d44 <HAL_DMA_IRQHandler+0x30c>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2300      	movs	r3, #0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00d      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	2201      	movs	r2, #1
 8002d52:	409a      	lsls	r2, r3
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	f043 0202 	orr.w	r2, r3, #2
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 808f 	beq.w	8002e98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a2c      	ldr	r2, [pc, #176]	; (8002e30 <HAL_DMA_IRQHandler+0x3f8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d04a      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x3e2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a2a      	ldr	r2, [pc, #168]	; (8002e34 <HAL_DMA_IRQHandler+0x3fc>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d045      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x3e2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a29      	ldr	r2, [pc, #164]	; (8002e38 <HAL_DMA_IRQHandler+0x400>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d040      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x3e2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a27      	ldr	r2, [pc, #156]	; (8002e3c <HAL_DMA_IRQHandler+0x404>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d03b      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x3e2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a26      	ldr	r2, [pc, #152]	; (8002e40 <HAL_DMA_IRQHandler+0x408>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d036      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x3e2>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a24      	ldr	r2, [pc, #144]	; (8002e44 <HAL_DMA_IRQHandler+0x40c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d031      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x3e2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a23      	ldr	r2, [pc, #140]	; (8002e48 <HAL_DMA_IRQHandler+0x410>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d02c      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x3e2>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a21      	ldr	r2, [pc, #132]	; (8002e4c <HAL_DMA_IRQHandler+0x414>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d027      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x3e2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a20      	ldr	r2, [pc, #128]	; (8002e50 <HAL_DMA_IRQHandler+0x418>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d022      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x3e2>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1e      	ldr	r2, [pc, #120]	; (8002e54 <HAL_DMA_IRQHandler+0x41c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d01d      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x3e2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <HAL_DMA_IRQHandler+0x420>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d018      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x3e2>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1b      	ldr	r2, [pc, #108]	; (8002e5c <HAL_DMA_IRQHandler+0x424>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x3e2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <HAL_DMA_IRQHandler+0x428>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00e      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x3e2>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <HAL_DMA_IRQHandler+0x42c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d009      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x3e2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <HAL_DMA_IRQHandler+0x430>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x3e2>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <HAL_DMA_IRQHandler+0x434>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d12a      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x438>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf14      	ite	ne
 8002e28:	2301      	movne	r3, #1
 8002e2a:	2300      	moveq	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e023      	b.n	8002e78 <HAL_DMA_IRQHandler+0x440>
 8002e30:	40020010 	.word	0x40020010
 8002e34:	40020028 	.word	0x40020028
 8002e38:	40020040 	.word	0x40020040
 8002e3c:	40020058 	.word	0x40020058
 8002e40:	40020070 	.word	0x40020070
 8002e44:	40020088 	.word	0x40020088
 8002e48:	400200a0 	.word	0x400200a0
 8002e4c:	400200b8 	.word	0x400200b8
 8002e50:	40020410 	.word	0x40020410
 8002e54:	40020428 	.word	0x40020428
 8002e58:	40020440 	.word	0x40020440
 8002e5c:	40020458 	.word	0x40020458
 8002e60:	40020470 	.word	0x40020470
 8002e64:	40020488 	.word	0x40020488
 8002e68:	400204a0 	.word	0x400204a0
 8002e6c:	400204b8 	.word	0x400204b8
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2300      	movs	r3, #0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00d      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	2204      	movs	r2, #4
 8002e86:	409a      	lsls	r2, r3
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	f043 0204 	orr.w	r2, r3, #4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80a6 	beq.w	8002ffa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a85      	ldr	r2, [pc, #532]	; (80030c8 <HAL_DMA_IRQHandler+0x690>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d04a      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x516>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a83      	ldr	r2, [pc, #524]	; (80030cc <HAL_DMA_IRQHandler+0x694>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d045      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x516>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a82      	ldr	r2, [pc, #520]	; (80030d0 <HAL_DMA_IRQHandler+0x698>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d040      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x516>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a80      	ldr	r2, [pc, #512]	; (80030d4 <HAL_DMA_IRQHandler+0x69c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d03b      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x516>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a7f      	ldr	r2, [pc, #508]	; (80030d8 <HAL_DMA_IRQHandler+0x6a0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d036      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x516>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a7d      	ldr	r2, [pc, #500]	; (80030dc <HAL_DMA_IRQHandler+0x6a4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d031      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x516>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a7c      	ldr	r2, [pc, #496]	; (80030e0 <HAL_DMA_IRQHandler+0x6a8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d02c      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x516>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a7a      	ldr	r2, [pc, #488]	; (80030e4 <HAL_DMA_IRQHandler+0x6ac>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d027      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x516>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a79      	ldr	r2, [pc, #484]	; (80030e8 <HAL_DMA_IRQHandler+0x6b0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d022      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x516>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a77      	ldr	r2, [pc, #476]	; (80030ec <HAL_DMA_IRQHandler+0x6b4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01d      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x516>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a76      	ldr	r2, [pc, #472]	; (80030f0 <HAL_DMA_IRQHandler+0x6b8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d018      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x516>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a74      	ldr	r2, [pc, #464]	; (80030f4 <HAL_DMA_IRQHandler+0x6bc>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x516>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a73      	ldr	r2, [pc, #460]	; (80030f8 <HAL_DMA_IRQHandler+0x6c0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00e      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x516>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a71      	ldr	r2, [pc, #452]	; (80030fc <HAL_DMA_IRQHandler+0x6c4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d009      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x516>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a70      	ldr	r2, [pc, #448]	; (8003100 <HAL_DMA_IRQHandler+0x6c8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d004      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x516>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a6e      	ldr	r2, [pc, #440]	; (8003104 <HAL_DMA_IRQHandler+0x6cc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d10a      	bne.n	8002f64 <HAL_DMA_IRQHandler+0x52c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf14      	ite	ne
 8002f5c:	2301      	movne	r3, #1
 8002f5e:	2300      	moveq	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e009      	b.n	8002f78 <HAL_DMA_IRQHandler+0x540>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bf14      	ite	ne
 8002f72:	2301      	movne	r3, #1
 8002f74:	2300      	moveq	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d03e      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	2210      	movs	r2, #16
 8002f86:	409a      	lsls	r2, r3
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d018      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d108      	bne.n	8002fba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d024      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
 8002fb8:	e01f      	b.n	8002ffa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d01b      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
 8002fca:	e016      	b.n	8002ffa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d107      	bne.n	8002fea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0208 	bic.w	r2, r2, #8
 8002fe8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	2220      	movs	r2, #32
 8003004:	409a      	lsls	r2, r3
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 8110 	beq.w	8003230 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a2c      	ldr	r2, [pc, #176]	; (80030c8 <HAL_DMA_IRQHandler+0x690>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d04a      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x678>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a2b      	ldr	r2, [pc, #172]	; (80030cc <HAL_DMA_IRQHandler+0x694>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d045      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x678>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a29      	ldr	r2, [pc, #164]	; (80030d0 <HAL_DMA_IRQHandler+0x698>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d040      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x678>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a28      	ldr	r2, [pc, #160]	; (80030d4 <HAL_DMA_IRQHandler+0x69c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d03b      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x678>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a26      	ldr	r2, [pc, #152]	; (80030d8 <HAL_DMA_IRQHandler+0x6a0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d036      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x678>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a25      	ldr	r2, [pc, #148]	; (80030dc <HAL_DMA_IRQHandler+0x6a4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d031      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x678>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a23      	ldr	r2, [pc, #140]	; (80030e0 <HAL_DMA_IRQHandler+0x6a8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d02c      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x678>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a22      	ldr	r2, [pc, #136]	; (80030e4 <HAL_DMA_IRQHandler+0x6ac>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d027      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x678>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a20      	ldr	r2, [pc, #128]	; (80030e8 <HAL_DMA_IRQHandler+0x6b0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d022      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x678>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1f      	ldr	r2, [pc, #124]	; (80030ec <HAL_DMA_IRQHandler+0x6b4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d01d      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x678>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <HAL_DMA_IRQHandler+0x6b8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d018      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x678>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <HAL_DMA_IRQHandler+0x6bc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d013      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x678>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <HAL_DMA_IRQHandler+0x6c0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00e      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x678>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a19      	ldr	r2, [pc, #100]	; (80030fc <HAL_DMA_IRQHandler+0x6c4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d009      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x678>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a17      	ldr	r2, [pc, #92]	; (8003100 <HAL_DMA_IRQHandler+0x6c8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d004      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x678>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a16      	ldr	r2, [pc, #88]	; (8003104 <HAL_DMA_IRQHandler+0x6cc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d12b      	bne.n	8003108 <HAL_DMA_IRQHandler+0x6d0>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf14      	ite	ne
 80030be:	2301      	movne	r3, #1
 80030c0:	2300      	moveq	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	e02a      	b.n	800311c <HAL_DMA_IRQHandler+0x6e4>
 80030c6:	bf00      	nop
 80030c8:	40020010 	.word	0x40020010
 80030cc:	40020028 	.word	0x40020028
 80030d0:	40020040 	.word	0x40020040
 80030d4:	40020058 	.word	0x40020058
 80030d8:	40020070 	.word	0x40020070
 80030dc:	40020088 	.word	0x40020088
 80030e0:	400200a0 	.word	0x400200a0
 80030e4:	400200b8 	.word	0x400200b8
 80030e8:	40020410 	.word	0x40020410
 80030ec:	40020428 	.word	0x40020428
 80030f0:	40020440 	.word	0x40020440
 80030f4:	40020458 	.word	0x40020458
 80030f8:	40020470 	.word	0x40020470
 80030fc:	40020488 	.word	0x40020488
 8003100:	400204a0 	.word	0x400204a0
 8003104:	400204b8 	.word	0x400204b8
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf14      	ite	ne
 8003116:	2301      	movne	r3, #1
 8003118:	2300      	moveq	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8087 	beq.w	8003230 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	2220      	movs	r2, #32
 800312c:	409a      	lsls	r2, r3
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b04      	cmp	r3, #4
 800313c:	d139      	bne.n	80031b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0216 	bic.w	r2, r2, #22
 800314c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800315c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d103      	bne.n	800316e <HAL_DMA_IRQHandler+0x736>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0208 	bic.w	r2, r2, #8
 800317c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	223f      	movs	r2, #63	; 0x3f
 8003188:	409a      	lsls	r2, r3
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 834a 	beq.w	800383c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
          }
          return;
 80031b0:	e344      	b.n	800383c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d018      	beq.n	80031f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d108      	bne.n	80031e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d02c      	beq.n	8003230 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	4798      	blx	r3
 80031de:	e027      	b.n	8003230 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d023      	beq.n	8003230 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	4798      	blx	r3
 80031f0:	e01e      	b.n	8003230 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10f      	bne.n	8003220 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0210 	bic.w	r2, r2, #16
 800320e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8306 	beq.w	8003846 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8088 	beq.w	8003358 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2204      	movs	r2, #4
 800324c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a7a      	ldr	r2, [pc, #488]	; (8003440 <HAL_DMA_IRQHandler+0xa08>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d04a      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x8b8>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a79      	ldr	r2, [pc, #484]	; (8003444 <HAL_DMA_IRQHandler+0xa0c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d045      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x8b8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a77      	ldr	r2, [pc, #476]	; (8003448 <HAL_DMA_IRQHandler+0xa10>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d040      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x8b8>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a76      	ldr	r2, [pc, #472]	; (800344c <HAL_DMA_IRQHandler+0xa14>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d03b      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x8b8>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a74      	ldr	r2, [pc, #464]	; (8003450 <HAL_DMA_IRQHandler+0xa18>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d036      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x8b8>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a73      	ldr	r2, [pc, #460]	; (8003454 <HAL_DMA_IRQHandler+0xa1c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d031      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x8b8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a71      	ldr	r2, [pc, #452]	; (8003458 <HAL_DMA_IRQHandler+0xa20>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d02c      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x8b8>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a70      	ldr	r2, [pc, #448]	; (800345c <HAL_DMA_IRQHandler+0xa24>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d027      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x8b8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a6e      	ldr	r2, [pc, #440]	; (8003460 <HAL_DMA_IRQHandler+0xa28>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d022      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x8b8>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a6d      	ldr	r2, [pc, #436]	; (8003464 <HAL_DMA_IRQHandler+0xa2c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d01d      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x8b8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a6b      	ldr	r2, [pc, #428]	; (8003468 <HAL_DMA_IRQHandler+0xa30>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d018      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x8b8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6a      	ldr	r2, [pc, #424]	; (800346c <HAL_DMA_IRQHandler+0xa34>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d013      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x8b8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a68      	ldr	r2, [pc, #416]	; (8003470 <HAL_DMA_IRQHandler+0xa38>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00e      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x8b8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a67      	ldr	r2, [pc, #412]	; (8003474 <HAL_DMA_IRQHandler+0xa3c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d009      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x8b8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a65      	ldr	r2, [pc, #404]	; (8003478 <HAL_DMA_IRQHandler+0xa40>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d004      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x8b8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a64      	ldr	r2, [pc, #400]	; (800347c <HAL_DMA_IRQHandler+0xa44>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d108      	bne.n	8003302 <HAL_DMA_IRQHandler+0x8ca>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	e007      	b.n	8003312 <HAL_DMA_IRQHandler+0x8da>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3301      	adds	r3, #1
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331a:	429a      	cmp	r2, r3
 800331c:	d307      	bcc.n	800332e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f2      	bne.n	8003312 <HAL_DMA_IRQHandler+0x8da>
 800332c:	e000      	b.n	8003330 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800332e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2203      	movs	r2, #3
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003346:	e003      	b.n	8003350 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8272 	beq.w	8003846 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
 800336a:	e26c      	b.n	8003846 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a43      	ldr	r2, [pc, #268]	; (8003480 <HAL_DMA_IRQHandler+0xa48>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d022      	beq.n	80033bc <HAL_DMA_IRQHandler+0x984>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a42      	ldr	r2, [pc, #264]	; (8003484 <HAL_DMA_IRQHandler+0xa4c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d01d      	beq.n	80033bc <HAL_DMA_IRQHandler+0x984>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a40      	ldr	r2, [pc, #256]	; (8003488 <HAL_DMA_IRQHandler+0xa50>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d018      	beq.n	80033bc <HAL_DMA_IRQHandler+0x984>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a3f      	ldr	r2, [pc, #252]	; (800348c <HAL_DMA_IRQHandler+0xa54>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d013      	beq.n	80033bc <HAL_DMA_IRQHandler+0x984>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a3d      	ldr	r2, [pc, #244]	; (8003490 <HAL_DMA_IRQHandler+0xa58>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00e      	beq.n	80033bc <HAL_DMA_IRQHandler+0x984>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a3c      	ldr	r2, [pc, #240]	; (8003494 <HAL_DMA_IRQHandler+0xa5c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d009      	beq.n	80033bc <HAL_DMA_IRQHandler+0x984>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a3a      	ldr	r2, [pc, #232]	; (8003498 <HAL_DMA_IRQHandler+0xa60>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d004      	beq.n	80033bc <HAL_DMA_IRQHandler+0x984>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a39      	ldr	r2, [pc, #228]	; (800349c <HAL_DMA_IRQHandler+0xa64>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d101      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x988>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <HAL_DMA_IRQHandler+0x98a>
 80033c0:	2300      	movs	r3, #0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 823f 	beq.w	8003846 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	2204      	movs	r2, #4
 80033da:	409a      	lsls	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80cd 	beq.w	8003580 <HAL_DMA_IRQHandler+0xb48>
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80c7 	beq.w	8003580 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f6:	f003 031f 	and.w	r3, r3, #31
 80033fa:	2204      	movs	r2, #4
 80033fc:	409a      	lsls	r2, r3
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d049      	beq.n	80034a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8210 	beq.w	8003840 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003428:	e20a      	b.n	8003840 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 8206 	beq.w	8003840 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800343c:	e200      	b.n	8003840 <HAL_DMA_IRQHandler+0xe08>
 800343e:	bf00      	nop
 8003440:	40020010 	.word	0x40020010
 8003444:	40020028 	.word	0x40020028
 8003448:	40020040 	.word	0x40020040
 800344c:	40020058 	.word	0x40020058
 8003450:	40020070 	.word	0x40020070
 8003454:	40020088 	.word	0x40020088
 8003458:	400200a0 	.word	0x400200a0
 800345c:	400200b8 	.word	0x400200b8
 8003460:	40020410 	.word	0x40020410
 8003464:	40020428 	.word	0x40020428
 8003468:	40020440 	.word	0x40020440
 800346c:	40020458 	.word	0x40020458
 8003470:	40020470 	.word	0x40020470
 8003474:	40020488 	.word	0x40020488
 8003478:	400204a0 	.word	0x400204a0
 800347c:	400204b8 	.word	0x400204b8
 8003480:	58025408 	.word	0x58025408
 8003484:	5802541c 	.word	0x5802541c
 8003488:	58025430 	.word	0x58025430
 800348c:	58025444 	.word	0x58025444
 8003490:	58025458 	.word	0x58025458
 8003494:	5802546c 	.word	0x5802546c
 8003498:	58025480 	.word	0x58025480
 800349c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d160      	bne.n	800356c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a7f      	ldr	r2, [pc, #508]	; (80036ac <HAL_DMA_IRQHandler+0xc74>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d04a      	beq.n	800354a <HAL_DMA_IRQHandler+0xb12>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a7d      	ldr	r2, [pc, #500]	; (80036b0 <HAL_DMA_IRQHandler+0xc78>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d045      	beq.n	800354a <HAL_DMA_IRQHandler+0xb12>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a7c      	ldr	r2, [pc, #496]	; (80036b4 <HAL_DMA_IRQHandler+0xc7c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d040      	beq.n	800354a <HAL_DMA_IRQHandler+0xb12>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a7a      	ldr	r2, [pc, #488]	; (80036b8 <HAL_DMA_IRQHandler+0xc80>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d03b      	beq.n	800354a <HAL_DMA_IRQHandler+0xb12>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a79      	ldr	r2, [pc, #484]	; (80036bc <HAL_DMA_IRQHandler+0xc84>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d036      	beq.n	800354a <HAL_DMA_IRQHandler+0xb12>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a77      	ldr	r2, [pc, #476]	; (80036c0 <HAL_DMA_IRQHandler+0xc88>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d031      	beq.n	800354a <HAL_DMA_IRQHandler+0xb12>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a76      	ldr	r2, [pc, #472]	; (80036c4 <HAL_DMA_IRQHandler+0xc8c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d02c      	beq.n	800354a <HAL_DMA_IRQHandler+0xb12>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a74      	ldr	r2, [pc, #464]	; (80036c8 <HAL_DMA_IRQHandler+0xc90>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d027      	beq.n	800354a <HAL_DMA_IRQHandler+0xb12>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a73      	ldr	r2, [pc, #460]	; (80036cc <HAL_DMA_IRQHandler+0xc94>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d022      	beq.n	800354a <HAL_DMA_IRQHandler+0xb12>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a71      	ldr	r2, [pc, #452]	; (80036d0 <HAL_DMA_IRQHandler+0xc98>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01d      	beq.n	800354a <HAL_DMA_IRQHandler+0xb12>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a70      	ldr	r2, [pc, #448]	; (80036d4 <HAL_DMA_IRQHandler+0xc9c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d018      	beq.n	800354a <HAL_DMA_IRQHandler+0xb12>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a6e      	ldr	r2, [pc, #440]	; (80036d8 <HAL_DMA_IRQHandler+0xca0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <HAL_DMA_IRQHandler+0xb12>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6d      	ldr	r2, [pc, #436]	; (80036dc <HAL_DMA_IRQHandler+0xca4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00e      	beq.n	800354a <HAL_DMA_IRQHandler+0xb12>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a6b      	ldr	r2, [pc, #428]	; (80036e0 <HAL_DMA_IRQHandler+0xca8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d009      	beq.n	800354a <HAL_DMA_IRQHandler+0xb12>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a6a      	ldr	r2, [pc, #424]	; (80036e4 <HAL_DMA_IRQHandler+0xcac>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d004      	beq.n	800354a <HAL_DMA_IRQHandler+0xb12>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a68      	ldr	r2, [pc, #416]	; (80036e8 <HAL_DMA_IRQHandler+0xcb0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d108      	bne.n	800355c <HAL_DMA_IRQHandler+0xb24>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0208 	bic.w	r2, r2, #8
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	e007      	b.n	800356c <HAL_DMA_IRQHandler+0xb34>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0204 	bic.w	r2, r2, #4
 800356a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8165 	beq.w	8003840 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800357e:	e15f      	b.n	8003840 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	2202      	movs	r2, #2
 800358a:	409a      	lsls	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80c5 	beq.w	8003720 <HAL_DMA_IRQHandler+0xce8>
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80bf 	beq.w	8003720 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	2202      	movs	r2, #2
 80035ac:	409a      	lsls	r2, r3
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d018      	beq.n	80035ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 813a 	beq.w	8003844 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035d8:	e134      	b.n	8003844 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8130 	beq.w	8003844 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035ec:	e12a      	b.n	8003844 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f040 8089 	bne.w	800370c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2b      	ldr	r2, [pc, #172]	; (80036ac <HAL_DMA_IRQHandler+0xc74>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d04a      	beq.n	800369a <HAL_DMA_IRQHandler+0xc62>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a29      	ldr	r2, [pc, #164]	; (80036b0 <HAL_DMA_IRQHandler+0xc78>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d045      	beq.n	800369a <HAL_DMA_IRQHandler+0xc62>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a28      	ldr	r2, [pc, #160]	; (80036b4 <HAL_DMA_IRQHandler+0xc7c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d040      	beq.n	800369a <HAL_DMA_IRQHandler+0xc62>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a26      	ldr	r2, [pc, #152]	; (80036b8 <HAL_DMA_IRQHandler+0xc80>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d03b      	beq.n	800369a <HAL_DMA_IRQHandler+0xc62>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a25      	ldr	r2, [pc, #148]	; (80036bc <HAL_DMA_IRQHandler+0xc84>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d036      	beq.n	800369a <HAL_DMA_IRQHandler+0xc62>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a23      	ldr	r2, [pc, #140]	; (80036c0 <HAL_DMA_IRQHandler+0xc88>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d031      	beq.n	800369a <HAL_DMA_IRQHandler+0xc62>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a22      	ldr	r2, [pc, #136]	; (80036c4 <HAL_DMA_IRQHandler+0xc8c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d02c      	beq.n	800369a <HAL_DMA_IRQHandler+0xc62>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a20      	ldr	r2, [pc, #128]	; (80036c8 <HAL_DMA_IRQHandler+0xc90>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d027      	beq.n	800369a <HAL_DMA_IRQHandler+0xc62>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <HAL_DMA_IRQHandler+0xc94>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d022      	beq.n	800369a <HAL_DMA_IRQHandler+0xc62>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <HAL_DMA_IRQHandler+0xc98>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01d      	beq.n	800369a <HAL_DMA_IRQHandler+0xc62>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1c      	ldr	r2, [pc, #112]	; (80036d4 <HAL_DMA_IRQHandler+0xc9c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d018      	beq.n	800369a <HAL_DMA_IRQHandler+0xc62>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1a      	ldr	r2, [pc, #104]	; (80036d8 <HAL_DMA_IRQHandler+0xca0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_DMA_IRQHandler+0xc62>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a19      	ldr	r2, [pc, #100]	; (80036dc <HAL_DMA_IRQHandler+0xca4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00e      	beq.n	800369a <HAL_DMA_IRQHandler+0xc62>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a17      	ldr	r2, [pc, #92]	; (80036e0 <HAL_DMA_IRQHandler+0xca8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d009      	beq.n	800369a <HAL_DMA_IRQHandler+0xc62>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a16      	ldr	r2, [pc, #88]	; (80036e4 <HAL_DMA_IRQHandler+0xcac>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d004      	beq.n	800369a <HAL_DMA_IRQHandler+0xc62>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a14      	ldr	r2, [pc, #80]	; (80036e8 <HAL_DMA_IRQHandler+0xcb0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d128      	bne.n	80036ec <HAL_DMA_IRQHandler+0xcb4>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0214 	bic.w	r2, r2, #20
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	e027      	b.n	80036fc <HAL_DMA_IRQHandler+0xcc4>
 80036ac:	40020010 	.word	0x40020010
 80036b0:	40020028 	.word	0x40020028
 80036b4:	40020040 	.word	0x40020040
 80036b8:	40020058 	.word	0x40020058
 80036bc:	40020070 	.word	0x40020070
 80036c0:	40020088 	.word	0x40020088
 80036c4:	400200a0 	.word	0x400200a0
 80036c8:	400200b8 	.word	0x400200b8
 80036cc:	40020410 	.word	0x40020410
 80036d0:	40020428 	.word	0x40020428
 80036d4:	40020440 	.word	0x40020440
 80036d8:	40020458 	.word	0x40020458
 80036dc:	40020470 	.word	0x40020470
 80036e0:	40020488 	.word	0x40020488
 80036e4:	400204a0 	.word	0x400204a0
 80036e8:	400204b8 	.word	0x400204b8
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 020a 	bic.w	r2, r2, #10
 80036fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 8097 	beq.w	8003844 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800371e:	e091      	b.n	8003844 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	2208      	movs	r2, #8
 800372a:	409a      	lsls	r2, r3
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 8088 	beq.w	8003846 <HAL_DMA_IRQHandler+0xe0e>
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 8082 	beq.w	8003846 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a41      	ldr	r2, [pc, #260]	; (800384c <HAL_DMA_IRQHandler+0xe14>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d04a      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xdaa>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a3f      	ldr	r2, [pc, #252]	; (8003850 <HAL_DMA_IRQHandler+0xe18>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d045      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xdaa>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a3e      	ldr	r2, [pc, #248]	; (8003854 <HAL_DMA_IRQHandler+0xe1c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d040      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xdaa>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a3c      	ldr	r2, [pc, #240]	; (8003858 <HAL_DMA_IRQHandler+0xe20>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d03b      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xdaa>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a3b      	ldr	r2, [pc, #236]	; (800385c <HAL_DMA_IRQHandler+0xe24>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d036      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xdaa>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a39      	ldr	r2, [pc, #228]	; (8003860 <HAL_DMA_IRQHandler+0xe28>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d031      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xdaa>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a38      	ldr	r2, [pc, #224]	; (8003864 <HAL_DMA_IRQHandler+0xe2c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d02c      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xdaa>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a36      	ldr	r2, [pc, #216]	; (8003868 <HAL_DMA_IRQHandler+0xe30>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d027      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xdaa>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a35      	ldr	r2, [pc, #212]	; (800386c <HAL_DMA_IRQHandler+0xe34>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d022      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xdaa>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a33      	ldr	r2, [pc, #204]	; (8003870 <HAL_DMA_IRQHandler+0xe38>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01d      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xdaa>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a32      	ldr	r2, [pc, #200]	; (8003874 <HAL_DMA_IRQHandler+0xe3c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d018      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xdaa>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a30      	ldr	r2, [pc, #192]	; (8003878 <HAL_DMA_IRQHandler+0xe40>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xdaa>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a2f      	ldr	r2, [pc, #188]	; (800387c <HAL_DMA_IRQHandler+0xe44>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00e      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xdaa>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a2d      	ldr	r2, [pc, #180]	; (8003880 <HAL_DMA_IRQHandler+0xe48>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d009      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xdaa>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2c      	ldr	r2, [pc, #176]	; (8003884 <HAL_DMA_IRQHandler+0xe4c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d004      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xdaa>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a2a      	ldr	r2, [pc, #168]	; (8003888 <HAL_DMA_IRQHandler+0xe50>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d108      	bne.n	80037f4 <HAL_DMA_IRQHandler+0xdbc>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 021c 	bic.w	r2, r2, #28
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e007      	b.n	8003804 <HAL_DMA_IRQHandler+0xdcc>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 020e 	bic.w	r2, r2, #14
 8003802:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	2201      	movs	r2, #1
 800380e:	409a      	lsls	r2, r3
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
 800383a:	e004      	b.n	8003846 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800383c:	bf00      	nop
 800383e:	e002      	b.n	8003846 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003840:	bf00      	nop
 8003842:	e000      	b.n	8003846 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003844:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003846:	3728      	adds	r7, #40	; 0x28
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40020010 	.word	0x40020010
 8003850:	40020028 	.word	0x40020028
 8003854:	40020040 	.word	0x40020040
 8003858:	40020058 	.word	0x40020058
 800385c:	40020070 	.word	0x40020070
 8003860:	40020088 	.word	0x40020088
 8003864:	400200a0 	.word	0x400200a0
 8003868:	400200b8 	.word	0x400200b8
 800386c:	40020410 	.word	0x40020410
 8003870:	40020428 	.word	0x40020428
 8003874:	40020440 	.word	0x40020440
 8003878:	40020458 	.word	0x40020458
 800387c:	40020470 	.word	0x40020470
 8003880:	40020488 	.word	0x40020488
 8003884:	400204a0 	.word	0x400204a0
 8003888:	400204b8 	.word	0x400204b8

0800388c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a7f      	ldr	r2, [pc, #508]	; (8003aa8 <DMA_SetConfig+0x21c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d072      	beq.n	8003996 <DMA_SetConfig+0x10a>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a7d      	ldr	r2, [pc, #500]	; (8003aac <DMA_SetConfig+0x220>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d06d      	beq.n	8003996 <DMA_SetConfig+0x10a>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a7c      	ldr	r2, [pc, #496]	; (8003ab0 <DMA_SetConfig+0x224>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d068      	beq.n	8003996 <DMA_SetConfig+0x10a>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a7a      	ldr	r2, [pc, #488]	; (8003ab4 <DMA_SetConfig+0x228>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d063      	beq.n	8003996 <DMA_SetConfig+0x10a>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a79      	ldr	r2, [pc, #484]	; (8003ab8 <DMA_SetConfig+0x22c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d05e      	beq.n	8003996 <DMA_SetConfig+0x10a>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a77      	ldr	r2, [pc, #476]	; (8003abc <DMA_SetConfig+0x230>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d059      	beq.n	8003996 <DMA_SetConfig+0x10a>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a76      	ldr	r2, [pc, #472]	; (8003ac0 <DMA_SetConfig+0x234>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d054      	beq.n	8003996 <DMA_SetConfig+0x10a>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a74      	ldr	r2, [pc, #464]	; (8003ac4 <DMA_SetConfig+0x238>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d04f      	beq.n	8003996 <DMA_SetConfig+0x10a>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a73      	ldr	r2, [pc, #460]	; (8003ac8 <DMA_SetConfig+0x23c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d04a      	beq.n	8003996 <DMA_SetConfig+0x10a>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a71      	ldr	r2, [pc, #452]	; (8003acc <DMA_SetConfig+0x240>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d045      	beq.n	8003996 <DMA_SetConfig+0x10a>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a70      	ldr	r2, [pc, #448]	; (8003ad0 <DMA_SetConfig+0x244>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d040      	beq.n	8003996 <DMA_SetConfig+0x10a>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a6e      	ldr	r2, [pc, #440]	; (8003ad4 <DMA_SetConfig+0x248>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d03b      	beq.n	8003996 <DMA_SetConfig+0x10a>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a6d      	ldr	r2, [pc, #436]	; (8003ad8 <DMA_SetConfig+0x24c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d036      	beq.n	8003996 <DMA_SetConfig+0x10a>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a6b      	ldr	r2, [pc, #428]	; (8003adc <DMA_SetConfig+0x250>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d031      	beq.n	8003996 <DMA_SetConfig+0x10a>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a6a      	ldr	r2, [pc, #424]	; (8003ae0 <DMA_SetConfig+0x254>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d02c      	beq.n	8003996 <DMA_SetConfig+0x10a>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a68      	ldr	r2, [pc, #416]	; (8003ae4 <DMA_SetConfig+0x258>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d027      	beq.n	8003996 <DMA_SetConfig+0x10a>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a67      	ldr	r2, [pc, #412]	; (8003ae8 <DMA_SetConfig+0x25c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d022      	beq.n	8003996 <DMA_SetConfig+0x10a>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a65      	ldr	r2, [pc, #404]	; (8003aec <DMA_SetConfig+0x260>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01d      	beq.n	8003996 <DMA_SetConfig+0x10a>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a64      	ldr	r2, [pc, #400]	; (8003af0 <DMA_SetConfig+0x264>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d018      	beq.n	8003996 <DMA_SetConfig+0x10a>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a62      	ldr	r2, [pc, #392]	; (8003af4 <DMA_SetConfig+0x268>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d013      	beq.n	8003996 <DMA_SetConfig+0x10a>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a61      	ldr	r2, [pc, #388]	; (8003af8 <DMA_SetConfig+0x26c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00e      	beq.n	8003996 <DMA_SetConfig+0x10a>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a5f      	ldr	r2, [pc, #380]	; (8003afc <DMA_SetConfig+0x270>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d009      	beq.n	8003996 <DMA_SetConfig+0x10a>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a5e      	ldr	r2, [pc, #376]	; (8003b00 <DMA_SetConfig+0x274>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d004      	beq.n	8003996 <DMA_SetConfig+0x10a>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a5c      	ldr	r2, [pc, #368]	; (8003b04 <DMA_SetConfig+0x278>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d101      	bne.n	800399a <DMA_SetConfig+0x10e>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <DMA_SetConfig+0x110>
 800399a:	2300      	movs	r3, #0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00d      	beq.n	80039bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d004      	beq.n	80039bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a39      	ldr	r2, [pc, #228]	; (8003aa8 <DMA_SetConfig+0x21c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d04a      	beq.n	8003a5c <DMA_SetConfig+0x1d0>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a38      	ldr	r2, [pc, #224]	; (8003aac <DMA_SetConfig+0x220>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d045      	beq.n	8003a5c <DMA_SetConfig+0x1d0>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a36      	ldr	r2, [pc, #216]	; (8003ab0 <DMA_SetConfig+0x224>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d040      	beq.n	8003a5c <DMA_SetConfig+0x1d0>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a35      	ldr	r2, [pc, #212]	; (8003ab4 <DMA_SetConfig+0x228>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d03b      	beq.n	8003a5c <DMA_SetConfig+0x1d0>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a33      	ldr	r2, [pc, #204]	; (8003ab8 <DMA_SetConfig+0x22c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d036      	beq.n	8003a5c <DMA_SetConfig+0x1d0>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a32      	ldr	r2, [pc, #200]	; (8003abc <DMA_SetConfig+0x230>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d031      	beq.n	8003a5c <DMA_SetConfig+0x1d0>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a30      	ldr	r2, [pc, #192]	; (8003ac0 <DMA_SetConfig+0x234>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d02c      	beq.n	8003a5c <DMA_SetConfig+0x1d0>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2f      	ldr	r2, [pc, #188]	; (8003ac4 <DMA_SetConfig+0x238>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d027      	beq.n	8003a5c <DMA_SetConfig+0x1d0>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a2d      	ldr	r2, [pc, #180]	; (8003ac8 <DMA_SetConfig+0x23c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d022      	beq.n	8003a5c <DMA_SetConfig+0x1d0>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a2c      	ldr	r2, [pc, #176]	; (8003acc <DMA_SetConfig+0x240>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d01d      	beq.n	8003a5c <DMA_SetConfig+0x1d0>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a2a      	ldr	r2, [pc, #168]	; (8003ad0 <DMA_SetConfig+0x244>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d018      	beq.n	8003a5c <DMA_SetConfig+0x1d0>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a29      	ldr	r2, [pc, #164]	; (8003ad4 <DMA_SetConfig+0x248>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d013      	beq.n	8003a5c <DMA_SetConfig+0x1d0>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a27      	ldr	r2, [pc, #156]	; (8003ad8 <DMA_SetConfig+0x24c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00e      	beq.n	8003a5c <DMA_SetConfig+0x1d0>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a26      	ldr	r2, [pc, #152]	; (8003adc <DMA_SetConfig+0x250>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d009      	beq.n	8003a5c <DMA_SetConfig+0x1d0>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a24      	ldr	r2, [pc, #144]	; (8003ae0 <DMA_SetConfig+0x254>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d004      	beq.n	8003a5c <DMA_SetConfig+0x1d0>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a23      	ldr	r2, [pc, #140]	; (8003ae4 <DMA_SetConfig+0x258>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <DMA_SetConfig+0x1d4>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <DMA_SetConfig+0x1d6>
 8003a60:	2300      	movs	r3, #0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d059      	beq.n	8003b1a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	223f      	movs	r2, #63	; 0x3f
 8003a70:	409a      	lsls	r2, r3
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a84:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b40      	cmp	r3, #64	; 0x40
 8003a94:	d138      	bne.n	8003b08 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003aa6:	e086      	b.n	8003bb6 <DMA_SetConfig+0x32a>
 8003aa8:	40020010 	.word	0x40020010
 8003aac:	40020028 	.word	0x40020028
 8003ab0:	40020040 	.word	0x40020040
 8003ab4:	40020058 	.word	0x40020058
 8003ab8:	40020070 	.word	0x40020070
 8003abc:	40020088 	.word	0x40020088
 8003ac0:	400200a0 	.word	0x400200a0
 8003ac4:	400200b8 	.word	0x400200b8
 8003ac8:	40020410 	.word	0x40020410
 8003acc:	40020428 	.word	0x40020428
 8003ad0:	40020440 	.word	0x40020440
 8003ad4:	40020458 	.word	0x40020458
 8003ad8:	40020470 	.word	0x40020470
 8003adc:	40020488 	.word	0x40020488
 8003ae0:	400204a0 	.word	0x400204a0
 8003ae4:	400204b8 	.word	0x400204b8
 8003ae8:	58025408 	.word	0x58025408
 8003aec:	5802541c 	.word	0x5802541c
 8003af0:	58025430 	.word	0x58025430
 8003af4:	58025444 	.word	0x58025444
 8003af8:	58025458 	.word	0x58025458
 8003afc:	5802546c 	.word	0x5802546c
 8003b00:	58025480 	.word	0x58025480
 8003b04:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	60da      	str	r2, [r3, #12]
}
 8003b18:	e04d      	b.n	8003bb6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a29      	ldr	r2, [pc, #164]	; (8003bc4 <DMA_SetConfig+0x338>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d022      	beq.n	8003b6a <DMA_SetConfig+0x2de>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <DMA_SetConfig+0x33c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d01d      	beq.n	8003b6a <DMA_SetConfig+0x2de>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a26      	ldr	r2, [pc, #152]	; (8003bcc <DMA_SetConfig+0x340>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d018      	beq.n	8003b6a <DMA_SetConfig+0x2de>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a24      	ldr	r2, [pc, #144]	; (8003bd0 <DMA_SetConfig+0x344>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <DMA_SetConfig+0x2de>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a23      	ldr	r2, [pc, #140]	; (8003bd4 <DMA_SetConfig+0x348>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00e      	beq.n	8003b6a <DMA_SetConfig+0x2de>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a21      	ldr	r2, [pc, #132]	; (8003bd8 <DMA_SetConfig+0x34c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d009      	beq.n	8003b6a <DMA_SetConfig+0x2de>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a20      	ldr	r2, [pc, #128]	; (8003bdc <DMA_SetConfig+0x350>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d004      	beq.n	8003b6a <DMA_SetConfig+0x2de>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1e      	ldr	r2, [pc, #120]	; (8003be0 <DMA_SetConfig+0x354>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d101      	bne.n	8003b6e <DMA_SetConfig+0x2e2>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <DMA_SetConfig+0x2e4>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d020      	beq.n	8003bb6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b40      	cmp	r3, #64	; 0x40
 8003b92:	d108      	bne.n	8003ba6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	60da      	str	r2, [r3, #12]
}
 8003ba4:	e007      	b.n	8003bb6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	60da      	str	r2, [r3, #12]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	58025408 	.word	0x58025408
 8003bc8:	5802541c 	.word	0x5802541c
 8003bcc:	58025430 	.word	0x58025430
 8003bd0:	58025444 	.word	0x58025444
 8003bd4:	58025458 	.word	0x58025458
 8003bd8:	5802546c 	.word	0x5802546c
 8003bdc:	58025480 	.word	0x58025480
 8003be0:	58025494 	.word	0x58025494

08003be4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a42      	ldr	r2, [pc, #264]	; (8003cfc <DMA_CalcBaseAndBitshift+0x118>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d04a      	beq.n	8003c8c <DMA_CalcBaseAndBitshift+0xa8>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a41      	ldr	r2, [pc, #260]	; (8003d00 <DMA_CalcBaseAndBitshift+0x11c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d045      	beq.n	8003c8c <DMA_CalcBaseAndBitshift+0xa8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a3f      	ldr	r2, [pc, #252]	; (8003d04 <DMA_CalcBaseAndBitshift+0x120>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d040      	beq.n	8003c8c <DMA_CalcBaseAndBitshift+0xa8>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a3e      	ldr	r2, [pc, #248]	; (8003d08 <DMA_CalcBaseAndBitshift+0x124>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d03b      	beq.n	8003c8c <DMA_CalcBaseAndBitshift+0xa8>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a3c      	ldr	r2, [pc, #240]	; (8003d0c <DMA_CalcBaseAndBitshift+0x128>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d036      	beq.n	8003c8c <DMA_CalcBaseAndBitshift+0xa8>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a3b      	ldr	r2, [pc, #236]	; (8003d10 <DMA_CalcBaseAndBitshift+0x12c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d031      	beq.n	8003c8c <DMA_CalcBaseAndBitshift+0xa8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a39      	ldr	r2, [pc, #228]	; (8003d14 <DMA_CalcBaseAndBitshift+0x130>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d02c      	beq.n	8003c8c <DMA_CalcBaseAndBitshift+0xa8>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a38      	ldr	r2, [pc, #224]	; (8003d18 <DMA_CalcBaseAndBitshift+0x134>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d027      	beq.n	8003c8c <DMA_CalcBaseAndBitshift+0xa8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a36      	ldr	r2, [pc, #216]	; (8003d1c <DMA_CalcBaseAndBitshift+0x138>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d022      	beq.n	8003c8c <DMA_CalcBaseAndBitshift+0xa8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a35      	ldr	r2, [pc, #212]	; (8003d20 <DMA_CalcBaseAndBitshift+0x13c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d01d      	beq.n	8003c8c <DMA_CalcBaseAndBitshift+0xa8>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a33      	ldr	r2, [pc, #204]	; (8003d24 <DMA_CalcBaseAndBitshift+0x140>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d018      	beq.n	8003c8c <DMA_CalcBaseAndBitshift+0xa8>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a32      	ldr	r2, [pc, #200]	; (8003d28 <DMA_CalcBaseAndBitshift+0x144>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d013      	beq.n	8003c8c <DMA_CalcBaseAndBitshift+0xa8>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a30      	ldr	r2, [pc, #192]	; (8003d2c <DMA_CalcBaseAndBitshift+0x148>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00e      	beq.n	8003c8c <DMA_CalcBaseAndBitshift+0xa8>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a2f      	ldr	r2, [pc, #188]	; (8003d30 <DMA_CalcBaseAndBitshift+0x14c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d009      	beq.n	8003c8c <DMA_CalcBaseAndBitshift+0xa8>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a2d      	ldr	r2, [pc, #180]	; (8003d34 <DMA_CalcBaseAndBitshift+0x150>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <DMA_CalcBaseAndBitshift+0xa8>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a2c      	ldr	r2, [pc, #176]	; (8003d38 <DMA_CalcBaseAndBitshift+0x154>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d101      	bne.n	8003c90 <DMA_CalcBaseAndBitshift+0xac>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <DMA_CalcBaseAndBitshift+0xae>
 8003c90:	2300      	movs	r3, #0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d024      	beq.n	8003ce0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	3b10      	subs	r3, #16
 8003c9e:	4a27      	ldr	r2, [pc, #156]	; (8003d3c <DMA_CalcBaseAndBitshift+0x158>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	4a24      	ldr	r2, [pc, #144]	; (8003d40 <DMA_CalcBaseAndBitshift+0x15c>)
 8003cb0:	5cd3      	ldrb	r3, [r2, r3]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d908      	bls.n	8003cd0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4b1f      	ldr	r3, [pc, #124]	; (8003d44 <DMA_CalcBaseAndBitshift+0x160>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	1d1a      	adds	r2, r3, #4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	659a      	str	r2, [r3, #88]	; 0x58
 8003cce:	e00d      	b.n	8003cec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b1b      	ldr	r3, [pc, #108]	; (8003d44 <DMA_CalcBaseAndBitshift+0x160>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8003cde:	e005      	b.n	8003cec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40020010 	.word	0x40020010
 8003d00:	40020028 	.word	0x40020028
 8003d04:	40020040 	.word	0x40020040
 8003d08:	40020058 	.word	0x40020058
 8003d0c:	40020070 	.word	0x40020070
 8003d10:	40020088 	.word	0x40020088
 8003d14:	400200a0 	.word	0x400200a0
 8003d18:	400200b8 	.word	0x400200b8
 8003d1c:	40020410 	.word	0x40020410
 8003d20:	40020428 	.word	0x40020428
 8003d24:	40020440 	.word	0x40020440
 8003d28:	40020458 	.word	0x40020458
 8003d2c:	40020470 	.word	0x40020470
 8003d30:	40020488 	.word	0x40020488
 8003d34:	400204a0 	.word	0x400204a0
 8003d38:	400204b8 	.word	0x400204b8
 8003d3c:	aaaaaaab 	.word	0xaaaaaaab
 8003d40:	0800b388 	.word	0x0800b388
 8003d44:	fffffc00 	.word	0xfffffc00

08003d48 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d120      	bne.n	8003d9e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d858      	bhi.n	8003e16 <DMA_CheckFifoParam+0xce>
 8003d64:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <DMA_CheckFifoParam+0x24>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d8f 	.word	0x08003d8f
 8003d74:	08003d7d 	.word	0x08003d7d
 8003d78:	08003e17 	.word	0x08003e17
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d048      	beq.n	8003e1a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d8c:	e045      	b.n	8003e1a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d96:	d142      	bne.n	8003e1e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d9c:	e03f      	b.n	8003e1e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da6:	d123      	bne.n	8003df0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d838      	bhi.n	8003e22 <DMA_CheckFifoParam+0xda>
 8003db0:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <DMA_CheckFifoParam+0x70>)
 8003db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db6:	bf00      	nop
 8003db8:	08003dc9 	.word	0x08003dc9
 8003dbc:	08003dcf 	.word	0x08003dcf
 8003dc0:	08003dc9 	.word	0x08003dc9
 8003dc4:	08003de1 	.word	0x08003de1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
        break;
 8003dcc:	e030      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d025      	beq.n	8003e26 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dde:	e022      	b.n	8003e26 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003de8:	d11f      	bne.n	8003e2a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dee:	e01c      	b.n	8003e2a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d902      	bls.n	8003dfe <DMA_CheckFifoParam+0xb6>
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d003      	beq.n	8003e04 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003dfc:	e018      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
        break;
 8003e02:	e015      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00e      	beq.n	8003e2e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
    break;
 8003e14:	e00b      	b.n	8003e2e <DMA_CheckFifoParam+0xe6>
        break;
 8003e16:	bf00      	nop
 8003e18:	e00a      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
        break;
 8003e1a:	bf00      	nop
 8003e1c:	e008      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
        break;
 8003e1e:	bf00      	nop
 8003e20:	e006      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
        break;
 8003e22:	bf00      	nop
 8003e24:	e004      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
        break;
 8003e26:	bf00      	nop
 8003e28:	e002      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
        break;
 8003e2a:	bf00      	nop
 8003e2c:	e000      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
    break;
 8003e2e:	bf00      	nop
    }
  }

  return status;
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop

08003e40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a38      	ldr	r2, [pc, #224]	; (8003f34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d022      	beq.n	8003e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a36      	ldr	r2, [pc, #216]	; (8003f38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d01d      	beq.n	8003e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a35      	ldr	r2, [pc, #212]	; (8003f3c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d018      	beq.n	8003e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a33      	ldr	r2, [pc, #204]	; (8003f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d013      	beq.n	8003e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a32      	ldr	r2, [pc, #200]	; (8003f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00e      	beq.n	8003e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a30      	ldr	r2, [pc, #192]	; (8003f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d009      	beq.n	8003e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a2f      	ldr	r2, [pc, #188]	; (8003f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a2d      	ldr	r2, [pc, #180]	; (8003f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d101      	bne.n	8003ea2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01a      	beq.n	8003ede <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	3b08      	subs	r3, #8
 8003eb0:	4a28      	ldr	r2, [pc, #160]	; (8003f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	091b      	lsrs	r3, r3, #4
 8003eb8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a24      	ldr	r2, [pc, #144]	; (8003f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003ecc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003edc:	e024      	b.n	8003f28 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	3b10      	subs	r3, #16
 8003ee6:	4a1e      	ldr	r2, [pc, #120]	; (8003f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	091b      	lsrs	r3, r3, #4
 8003eee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4a1c      	ldr	r2, [pc, #112]	; (8003f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d806      	bhi.n	8003f06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4a1b      	ldr	r2, [pc, #108]	; (8003f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d902      	bls.n	8003f06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3308      	adds	r3, #8
 8003f04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4b18      	ldr	r3, [pc, #96]	; (8003f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	461a      	mov	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a16      	ldr	r2, [pc, #88]	; (8003f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003f18:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	2201      	movs	r2, #1
 8003f22:	409a      	lsls	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	58025408 	.word	0x58025408
 8003f38:	5802541c 	.word	0x5802541c
 8003f3c:	58025430 	.word	0x58025430
 8003f40:	58025444 	.word	0x58025444
 8003f44:	58025458 	.word	0x58025458
 8003f48:	5802546c 	.word	0x5802546c
 8003f4c:	58025480 	.word	0x58025480
 8003f50:	58025494 	.word	0x58025494
 8003f54:	cccccccd 	.word	0xcccccccd
 8003f58:	16009600 	.word	0x16009600
 8003f5c:	58025880 	.word	0x58025880
 8003f60:	aaaaaaab 	.word	0xaaaaaaab
 8003f64:	400204b8 	.word	0x400204b8
 8003f68:	4002040f 	.word	0x4002040f
 8003f6c:	10008200 	.word	0x10008200
 8003f70:	40020880 	.word	0x40020880

08003f74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d04a      	beq.n	8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d847      	bhi.n	8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a25      	ldr	r2, [pc, #148]	; (800402c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d022      	beq.n	8003fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a24      	ldr	r2, [pc, #144]	; (8004030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d01d      	beq.n	8003fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a22      	ldr	r2, [pc, #136]	; (8004034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d018      	beq.n	8003fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a21      	ldr	r2, [pc, #132]	; (8004038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d013      	beq.n	8003fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1f      	ldr	r2, [pc, #124]	; (800403c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00e      	beq.n	8003fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1e      	ldr	r2, [pc, #120]	; (8004040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d009      	beq.n	8003fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1c      	ldr	r2, [pc, #112]	; (8004044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a1b      	ldr	r2, [pc, #108]	; (8004048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4b17      	ldr	r3, [pc, #92]	; (800404c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a15      	ldr	r2, [pc, #84]	; (8004050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003ffc:	671a      	str	r2, [r3, #112]	; 0x70
 8003ffe:	e009      	b.n	8004014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4b14      	ldr	r3, [pc, #80]	; (8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	461a      	mov	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a11      	ldr	r2, [pc, #68]	; (8004058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004012:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3b01      	subs	r3, #1
 8004018:	2201      	movs	r2, #1
 800401a:	409a      	lsls	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	58025408 	.word	0x58025408
 8004030:	5802541c 	.word	0x5802541c
 8004034:	58025430 	.word	0x58025430
 8004038:	58025444 	.word	0x58025444
 800403c:	58025458 	.word	0x58025458
 8004040:	5802546c 	.word	0x5802546c
 8004044:	58025480 	.word	0x58025480
 8004048:	58025494 	.word	0x58025494
 800404c:	1600963f 	.word	0x1600963f
 8004050:	58025940 	.word	0x58025940
 8004054:	1000823f 	.word	0x1000823f
 8004058:	40020940 	.word	0x40020940

0800405c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800405c:	b480      	push	{r7}
 800405e:	b089      	sub	sp, #36	; 0x24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800406a:	4b89      	ldr	r3, [pc, #548]	; (8004290 <HAL_GPIO_Init+0x234>)
 800406c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800406e:	e194      	b.n	800439a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	2101      	movs	r1, #1
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	fa01 f303 	lsl.w	r3, r1, r3
 800407c:	4013      	ands	r3, r2
 800407e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8186 	beq.w	8004394 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	2b01      	cmp	r3, #1
 8004092:	d005      	beq.n	80040a0 <HAL_GPIO_Init+0x44>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d130      	bne.n	8004102 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	2203      	movs	r2, #3
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4013      	ands	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040d6:	2201      	movs	r2, #1
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4013      	ands	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	091b      	lsrs	r3, r3, #4
 80040ec:	f003 0201 	and.w	r2, r3, #1
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b03      	cmp	r3, #3
 800410c:	d017      	beq.n	800413e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	2203      	movs	r2, #3
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d123      	bne.n	8004192 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	08da      	lsrs	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3208      	adds	r2, #8
 8004152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	220f      	movs	r2, #15
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	43db      	mvns	r3, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4013      	ands	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	08da      	lsrs	r2, r3, #3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3208      	adds	r2, #8
 800418c:	69b9      	ldr	r1, [r7, #24]
 800418e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	2203      	movs	r2, #3
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f003 0203 	and.w	r2, r3, #3
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 80e0 	beq.w	8004394 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041d4:	4b2f      	ldr	r3, [pc, #188]	; (8004294 <HAL_GPIO_Init+0x238>)
 80041d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041da:	4a2e      	ldr	r2, [pc, #184]	; (8004294 <HAL_GPIO_Init+0x238>)
 80041dc:	f043 0302 	orr.w	r3, r3, #2
 80041e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80041e4:	4b2b      	ldr	r3, [pc, #172]	; (8004294 <HAL_GPIO_Init+0x238>)
 80041e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041f2:	4a29      	ldr	r2, [pc, #164]	; (8004298 <HAL_GPIO_Init+0x23c>)
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	089b      	lsrs	r3, r3, #2
 80041f8:	3302      	adds	r3, #2
 80041fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	220f      	movs	r2, #15
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43db      	mvns	r3, r3
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4013      	ands	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a20      	ldr	r2, [pc, #128]	; (800429c <HAL_GPIO_Init+0x240>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d052      	beq.n	80042c4 <HAL_GPIO_Init+0x268>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a1f      	ldr	r2, [pc, #124]	; (80042a0 <HAL_GPIO_Init+0x244>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d031      	beq.n	800428a <HAL_GPIO_Init+0x22e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <HAL_GPIO_Init+0x248>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d02b      	beq.n	8004286 <HAL_GPIO_Init+0x22a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a1d      	ldr	r2, [pc, #116]	; (80042a8 <HAL_GPIO_Init+0x24c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d025      	beq.n	8004282 <HAL_GPIO_Init+0x226>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a1c      	ldr	r2, [pc, #112]	; (80042ac <HAL_GPIO_Init+0x250>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d01f      	beq.n	800427e <HAL_GPIO_Init+0x222>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a1b      	ldr	r2, [pc, #108]	; (80042b0 <HAL_GPIO_Init+0x254>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d019      	beq.n	800427a <HAL_GPIO_Init+0x21e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <HAL_GPIO_Init+0x258>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d013      	beq.n	8004276 <HAL_GPIO_Init+0x21a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a19      	ldr	r2, [pc, #100]	; (80042b8 <HAL_GPIO_Init+0x25c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00d      	beq.n	8004272 <HAL_GPIO_Init+0x216>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a18      	ldr	r2, [pc, #96]	; (80042bc <HAL_GPIO_Init+0x260>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d007      	beq.n	800426e <HAL_GPIO_Init+0x212>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a17      	ldr	r2, [pc, #92]	; (80042c0 <HAL_GPIO_Init+0x264>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d101      	bne.n	800426a <HAL_GPIO_Init+0x20e>
 8004266:	2309      	movs	r3, #9
 8004268:	e02d      	b.n	80042c6 <HAL_GPIO_Init+0x26a>
 800426a:	230a      	movs	r3, #10
 800426c:	e02b      	b.n	80042c6 <HAL_GPIO_Init+0x26a>
 800426e:	2308      	movs	r3, #8
 8004270:	e029      	b.n	80042c6 <HAL_GPIO_Init+0x26a>
 8004272:	2307      	movs	r3, #7
 8004274:	e027      	b.n	80042c6 <HAL_GPIO_Init+0x26a>
 8004276:	2306      	movs	r3, #6
 8004278:	e025      	b.n	80042c6 <HAL_GPIO_Init+0x26a>
 800427a:	2305      	movs	r3, #5
 800427c:	e023      	b.n	80042c6 <HAL_GPIO_Init+0x26a>
 800427e:	2304      	movs	r3, #4
 8004280:	e021      	b.n	80042c6 <HAL_GPIO_Init+0x26a>
 8004282:	2303      	movs	r3, #3
 8004284:	e01f      	b.n	80042c6 <HAL_GPIO_Init+0x26a>
 8004286:	2302      	movs	r3, #2
 8004288:	e01d      	b.n	80042c6 <HAL_GPIO_Init+0x26a>
 800428a:	2301      	movs	r3, #1
 800428c:	e01b      	b.n	80042c6 <HAL_GPIO_Init+0x26a>
 800428e:	bf00      	nop
 8004290:	58000080 	.word	0x58000080
 8004294:	58024400 	.word	0x58024400
 8004298:	58000400 	.word	0x58000400
 800429c:	58020000 	.word	0x58020000
 80042a0:	58020400 	.word	0x58020400
 80042a4:	58020800 	.word	0x58020800
 80042a8:	58020c00 	.word	0x58020c00
 80042ac:	58021000 	.word	0x58021000
 80042b0:	58021400 	.word	0x58021400
 80042b4:	58021800 	.word	0x58021800
 80042b8:	58021c00 	.word	0x58021c00
 80042bc:	58022000 	.word	0x58022000
 80042c0:	58022400 	.word	0x58022400
 80042c4:	2300      	movs	r3, #0
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	f002 0203 	and.w	r2, r2, #3
 80042cc:	0092      	lsls	r2, r2, #2
 80042ce:	4093      	lsls	r3, r2
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042d6:	4938      	ldr	r1, [pc, #224]	; (80043b8 <HAL_GPIO_Init+0x35c>)
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	089b      	lsrs	r3, r3, #2
 80042dc:	3302      	adds	r3, #2
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	43db      	mvns	r3, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4013      	ands	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800430a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	43db      	mvns	r3, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4013      	ands	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	3301      	adds	r3, #1
 8004398:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f47f ae63 	bne.w	8004070 <HAL_GPIO_Init+0x14>
  }
}
 80043aa:	bf00      	nop
 80043ac:	bf00      	nop
 80043ae:	3724      	adds	r7, #36	; 0x24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	58000400 	.word	0x58000400

080043bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	807b      	strh	r3, [r7, #2]
 80043c8:	4613      	mov	r3, r2
 80043ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043cc:	787b      	ldrb	r3, [r7, #1]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043d2:	887a      	ldrh	r2, [r7, #2]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80043d8:	e003      	b.n	80043e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80043da:	887b      	ldrh	r3, [r7, #2]
 80043dc:	041a      	lsls	r2, r3, #16
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	619a      	str	r2, [r3, #24]
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e10b      	b.n	800461a <HAL_I2S_Init+0x22a>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fc fa9e 	bl	8000958 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d107      	bne.n	8004442 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0201 	bic.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2200      	movs	r2, #0
 8004448:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b04      	cmp	r3, #4
 8004450:	d008      	beq.n	8004464 <HAL_I2S_Init+0x74>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b06      	cmp	r3, #6
 8004458:	d004      	beq.n	8004464 <HAL_I2S_Init+0x74>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b0a      	cmp	r3, #10
 8004460:	f040 8085 	bne.w	800456e <HAL_I2S_Init+0x17e>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d058      	beq.n	800451e <HAL_I2S_Init+0x12e>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8004474:	2302      	movs	r3, #2
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	e001      	b.n	800447e <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 800447a:	2301      	movs	r3, #1
 800447c:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b30      	cmp	r3, #48	; 0x30
 8004484:	d003      	beq.n	800448e <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800448a:	2bb0      	cmp	r3, #176	; 0xb0
 800448c:	d102      	bne.n	8004494 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 800448e:	2301      	movs	r3, #1
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	e001      	b.n	8004498 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8004498:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800449c:	f002 fa16 	bl	80068cc <HAL_RCCEx_GetPeriphCLKFreq>
 80044a0:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044aa:	d113      	bne.n	80044d4 <HAL_I2S_Init+0xe4>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80044ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	fa22 f303 	lsr.w	r3, r2, r3
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	461a      	mov	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	3305      	adds	r3, #5
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e014      	b.n	80044fe <HAL_I2S_Init+0x10e>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80044d4:	2220      	movs	r2, #32
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	fb02 f303 	mul.w	r3, r2, r3
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	461a      	mov	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fa:	3305      	adds	r3, #5
 80044fc:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4a48      	ldr	r2, [pc, #288]	; (8004624 <HAL_I2S_Init+0x234>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	08db      	lsrs	r3, r3, #3
 8004508:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	085b      	lsrs	r3, r3, #1
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	e003      	b.n	8004526 <HAL_I2S_Init+0x136>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 800451e:	2302      	movs	r3, #2
 8004520:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8004522:	2300      	movs	r3, #0
 8004524:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d102      	bne.n	8004532 <HAL_I2S_Init+0x142>
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d002      	beq.n	8004538 <HAL_I2S_Init+0x148>
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	2bff      	cmp	r3, #255	; 0xff
 8004536:	d907      	bls.n	8004548 <HAL_I2S_Init+0x158>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453c:	f043 0210 	orr.w	r2, r3, #16
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e068      	b.n	800461a <HAL_I2S_Init+0x22a>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_I2S_Init+0x162>
    {
      i2sodd = 1UL;
 800454e:	2301      	movs	r3, #1
 8004550:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004558:	4b33      	ldr	r3, [pc, #204]	; (8004628 <HAL_I2S_Init+0x238>)
 800455a:	4013      	ands	r3, r2
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	0411      	lsls	r1, r2, #16
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	0612      	lsls	r2, r2, #24
 8004564:	4311      	orrs	r1, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	430b      	orrs	r3, r1
 800456c:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004574:	4b2d      	ldr	r3, [pc, #180]	; (800462c <HAL_I2S_Init+0x23c>)
 8004576:	4013      	ands	r3, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6851      	ldr	r1, [r2, #4]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6892      	ldr	r2, [r2, #8]
 8004580:	4311      	orrs	r1, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	68d2      	ldr	r2, [r2, #12]
 8004586:	4311      	orrs	r1, r2
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6992      	ldr	r2, [r2, #24]
 800458c:	4311      	orrs	r1, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6a12      	ldr	r2, [r2, #32]
 8004592:	4311      	orrs	r1, r2
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004598:	4311      	orrs	r1, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6912      	ldr	r2, [r2, #16]
 800459e:	430a      	orrs	r2, r1
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f640 72f8 	movw	r2, #4088	; 0xff8
 80045b4:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045c4:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69da      	ldr	r2, [r3, #28]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d007      	beq.n	80045f4 <HAL_I2S_Init+0x204>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b06      	cmp	r3, #6
 80045ea:	d003      	beq.n	80045f4 <HAL_I2S_Init+0x204>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b0a      	cmp	r3, #10
 80045f2:	d10a      	bne.n	800460a <HAL_I2S_Init+0x21a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3720      	adds	r7, #32
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	cccccccd 	.word	0xcccccccd
 8004628:	fe00ffff 	.word	0xfe00ffff
 800462c:	fdff9040 	.word	0xfdff9040

08004630 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	4613      	mov	r3, r2
 800463c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_I2S_Receive_DMA+0x1e>
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e086      	b.n	8004760 <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	d001      	beq.n	8004662 <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 800465e:	2302      	movs	r3, #2
 8004660:	e07e      	b.n	8004760 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_I2S_Receive_DMA+0x42>
 800466e:	2302      	movs	r3, #2
 8004670:	e076      	b.n	8004760 <HAL_I2S_Receive_DMA+0x130>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2204      	movs	r2, #4
 800467e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pRxBuffPtr  = pData;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = Size;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	88fa      	ldrh	r2, [r7, #6]
 8004692:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	88fa      	ldrh	r2, [r7, #6]
 8004698:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	865a      	strh	r2, [r3, #50]	; 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b0:	4a2d      	ldr	r2, [pc, #180]	; (8004768 <HAL_I2S_Receive_DMA+0x138>)
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b8:	4a2c      	ldr	r2, [pc, #176]	; (800476c <HAL_I2S_Receive_DMA+0x13c>)
 80046ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c0:	4a2b      	ldr	r2, [pc, #172]	; (8004770 <HAL_I2S_Receive_DMA+0x140>)
 80046c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3330      	adds	r3, #48	; 0x30
 80046ce:	4619      	mov	r1, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d4:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80046da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80046dc:	f7fd ff42 	bl	8002564 <HAL_DMA_Start_IT>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d011      	beq.n	800470a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ea:	f043 0208 	orr.w	r2, r3, #8
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e02a      	b.n	8004760 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d107      	bne.n	8004728 <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004726:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d107      	bne.n	8004746 <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004754:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 800475e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	080049cf 	.word	0x080049cf
 800476c:	0800498d 	.word	0x0800498d
 8004770:	080049eb 	.word	0x080049eb

08004774 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t i2sier   = hi2s->Instance->IER;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	617b      	str	r3, [r7, #20]
  uint32_t i2ssr    = hi2s->Instance->SR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	613b      	str	r3, [r7, #16]
  uint32_t trigger  = i2sier & i2ssr;
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4013      	ands	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b04      	cmp	r3, #4
 800479e:	d12f      	bne.n	8004800 <HAL_I2S_IRQHandler+0x8c>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_OVR))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d008      	beq.n	80047bc <HAL_I2S_IRQHandler+0x48>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d103      	bne.n	80047bc <HAL_I2S_IRQHandler+0x48>
    {
      hi2s->RxISR(hi2s);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	4798      	blx	r3
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d01c      	beq.n	8004800 <HAL_I2S_IRQHandler+0x8c>
    {
      /* Disable RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXP | I2S_IT_ERR));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6919      	ldr	r1, [r3, #16]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	4b62      	ldr	r3, [pc, #392]	; (800495c <HAL_I2S_IRQHandler+0x1e8>)
 80047d2:	400b      	ands	r3, r1
 80047d4:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699a      	ldr	r2, [r3, #24]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047e4:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f2:	f043 0202 	orr.w	r2, r3, #2
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8bc 	bl	8004978 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b03      	cmp	r3, #3
 800480a:	d12f      	bne.n	800486c <HAL_I2S_IRQHandler+0xf8>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_UDR))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d008      	beq.n	8004828 <HAL_I2S_IRQHandler+0xb4>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d103      	bne.n	8004828 <HAL_I2S_IRQHandler+0xb4>
    {
      hi2s->TxISR(hi2s);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d01c      	beq.n	800486c <HAL_I2S_IRQHandler+0xf8>
    {
      /* Disable TXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_ERR));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 72b1 	bic.w	r2, r2, #354	; 0x162
 8004840:	611a      	str	r2, [r3, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699a      	ldr	r2, [r3, #24]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0220 	orr.w	r2, r2, #32
 8004850:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485e:	f043 0204 	orr.w	r2, r3, #4
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f886 	bl	8004978 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b05      	cmp	r3, #5
 8004876:	d16c      	bne.n	8004952 <HAL_I2S_IRQHandler+0x1de>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_DXP))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <HAL_I2S_IRQHandler+0x11e>
    {
      hi2s->TxISR(hi2s);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	4798      	blx	r3
      hi2s->RxISR(hi2s);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	4798      	blx	r3
    }
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_I2S_IRQHandler+0x13a>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d103      	bne.n	80048ae <HAL_I2S_IRQHandler+0x13a>
    {
      hi2s->RxISR(hi2s);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	4798      	blx	r3
    }
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_I2S_IRQHandler+0x156>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d103      	bne.n	80048ca <HAL_I2S_IRQHandler+0x156>
    {
      hi2s->TxISR(hi2s);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01c      	beq.n	800490e <HAL_I2S_IRQHandler+0x19a>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6919      	ldr	r1, [r3, #16]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4b20      	ldr	r3, [pc, #128]	; (8004960 <HAL_I2S_IRQHandler+0x1ec>)
 80048e0:	400b      	ands	r3, r1
 80048e2:	6113      	str	r3, [r2, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699a      	ldr	r2, [r3, #24]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0220 	orr.w	r2, r2, #32
 80048f2:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004900:	f043 0204 	orr.w	r2, r3, #4
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f835 	bl	8004978 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01c      	beq.n	8004952 <HAL_I2S_IRQHandler+0x1de>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6919      	ldr	r1, [r3, #16]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <HAL_I2S_IRQHandler+0x1ec>)
 8004924:	400b      	ands	r3, r1
 8004926:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004936:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004944:	f043 0202 	orr.w	r2, r3, #2
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f813 	bl	8004978 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004952:	bf00      	nop
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	fffffe9e 	.word	0xfffffe9e
 8004960:	fffffe9c 	.word	0xfffffe9c

08004964 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10e      	bne.n	80049c0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049b0:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	875a      	strh	r2, [r3, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f7fc f9d1 	bl	8000d68 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80049c6:	bf00      	nop
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b084      	sub	sp, #16
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f7ff ffc1 	bl	8004964 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80049e2:	bf00      	nop
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004a06:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a20:	f043 0208 	orr.w	r2, r3, #8
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7ff ffa5 	bl	8004978 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004a40:	4b19      	ldr	r3, [pc, #100]	; (8004aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d00a      	beq.n	8004a62 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a4c:	4b16      	ldr	r3, [pc, #88]	; (8004aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d001      	beq.n	8004a5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e01f      	b.n	8004a9e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e01d      	b.n	8004a9e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a62:	4b11      	ldr	r3, [pc, #68]	; (8004aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f023 0207 	bic.w	r2, r3, #7
 8004a6a:	490f      	ldr	r1, [pc, #60]	; (8004aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a72:	f7fd f8f3 	bl	8001c5c <HAL_GetTick>
 8004a76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a78:	e009      	b.n	8004a8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a7a:	f7fd f8ef 	bl	8001c5c <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a88:	d901      	bls.n	8004a8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e007      	b.n	8004a9e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a8e:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a9a:	d1ee      	bne.n	8004a7a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	58024800 	.word	0x58024800

08004aac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08c      	sub	sp, #48	; 0x30
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	f000 bc1d 	b.w	80052fa <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8087 	beq.w	8004bdc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ace:	4b99      	ldr	r3, [pc, #612]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ad8:	4b96      	ldr	r3, [pc, #600]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	d007      	beq.n	8004af4 <HAL_RCC_OscConfig+0x48>
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	2b18      	cmp	r3, #24
 8004ae8:	d110      	bne.n	8004b0c <HAL_RCC_OscConfig+0x60>
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d10b      	bne.n	8004b0c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af4:	4b8f      	ldr	r3, [pc, #572]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d06c      	beq.n	8004bda <HAL_RCC_OscConfig+0x12e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d168      	bne.n	8004bda <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e3f6      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b14:	d106      	bne.n	8004b24 <HAL_RCC_OscConfig+0x78>
 8004b16:	4b87      	ldr	r3, [pc, #540]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a86      	ldr	r2, [pc, #536]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e02e      	b.n	8004b82 <HAL_RCC_OscConfig+0xd6>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10c      	bne.n	8004b46 <HAL_RCC_OscConfig+0x9a>
 8004b2c:	4b81      	ldr	r3, [pc, #516]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a80      	ldr	r2, [pc, #512]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	4b7e      	ldr	r3, [pc, #504]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a7d      	ldr	r2, [pc, #500]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	e01d      	b.n	8004b82 <HAL_RCC_OscConfig+0xd6>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b4e:	d10c      	bne.n	8004b6a <HAL_RCC_OscConfig+0xbe>
 8004b50:	4b78      	ldr	r3, [pc, #480]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a77      	ldr	r2, [pc, #476]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	4b75      	ldr	r3, [pc, #468]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a74      	ldr	r2, [pc, #464]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e00b      	b.n	8004b82 <HAL_RCC_OscConfig+0xd6>
 8004b6a:	4b72      	ldr	r3, [pc, #456]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a71      	ldr	r2, [pc, #452]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	4b6f      	ldr	r3, [pc, #444]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a6e      	ldr	r2, [pc, #440]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b80:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d013      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fd f867 	bl	8001c5c <HAL_GetTick>
 8004b8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b92:	f7fd f863 	bl	8001c5c <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b64      	cmp	r3, #100	; 0x64
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e3aa      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ba4:	4b63      	ldr	r3, [pc, #396]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0xe6>
 8004bb0:	e014      	b.n	8004bdc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb2:	f7fd f853 	bl	8001c5c <HAL_GetTick>
 8004bb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bba:	f7fd f84f 	bl	8001c5c <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b64      	cmp	r3, #100	; 0x64
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e396      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bcc:	4b59      	ldr	r3, [pc, #356]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f0      	bne.n	8004bba <HAL_RCC_OscConfig+0x10e>
 8004bd8:	e000      	b.n	8004bdc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bda:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80cb 	beq.w	8004d80 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bea:	4b52      	ldr	r3, [pc, #328]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bf2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bf4:	4b4f      	ldr	r3, [pc, #316]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d007      	beq.n	8004c10 <HAL_RCC_OscConfig+0x164>
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	2b18      	cmp	r3, #24
 8004c04:	d156      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x208>
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d151      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c10:	4b48      	ldr	r3, [pc, #288]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_OscConfig+0x17c>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e368      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c28:	4b42      	ldr	r3, [pc, #264]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f023 0219 	bic.w	r2, r3, #25
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	493f      	ldr	r1, [pc, #252]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c3a:	f7fd f80f 	bl	8001c5c <HAL_GetTick>
 8004c3e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c42:	f7fd f80b 	bl	8001c5c <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e352      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c54:	4b37      	ldr	r3, [pc, #220]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c60:	f7fd f808 	bl	8001c74 <HAL_GetREVID>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d817      	bhi.n	8004c9e <HAL_RCC_OscConfig+0x1f2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d108      	bne.n	8004c88 <HAL_RCC_OscConfig+0x1dc>
 8004c76:	4b2f      	ldr	r3, [pc, #188]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c7e:	4a2d      	ldr	r2, [pc, #180]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c84:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c86:	e07b      	b.n	8004d80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c88:	4b2a      	ldr	r3, [pc, #168]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	031b      	lsls	r3, r3, #12
 8004c96:	4927      	ldr	r1, [pc, #156]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c9c:	e070      	b.n	8004d80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9e:	4b25      	ldr	r3, [pc, #148]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	4921      	ldr	r1, [pc, #132]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cb2:	e065      	b.n	8004d80 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d048      	beq.n	8004d4e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cbc:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f023 0219 	bic.w	r2, r3, #25
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	491a      	ldr	r1, [pc, #104]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cce:	f7fc ffc5 	bl	8001c5c <HAL_GetTick>
 8004cd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cd6:	f7fc ffc1 	bl	8001c5c <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e308      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ce8:	4b12      	ldr	r3, [pc, #72]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf4:	f7fc ffbe 	bl	8001c74 <HAL_GetREVID>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d81a      	bhi.n	8004d38 <HAL_RCC_OscConfig+0x28c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d108      	bne.n	8004d1c <HAL_RCC_OscConfig+0x270>
 8004d0a:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d12:	4a08      	ldr	r2, [pc, #32]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d18:	6053      	str	r3, [r2, #4]
 8004d1a:	e031      	b.n	8004d80 <HAL_RCC_OscConfig+0x2d4>
 8004d1c:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	031b      	lsls	r3, r3, #12
 8004d2a:	4902      	ldr	r1, [pc, #8]	; (8004d34 <HAL_RCC_OscConfig+0x288>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	604b      	str	r3, [r1, #4]
 8004d30:	e026      	b.n	8004d80 <HAL_RCC_OscConfig+0x2d4>
 8004d32:	bf00      	nop
 8004d34:	58024400 	.word	0x58024400
 8004d38:	4b9a      	ldr	r3, [pc, #616]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	061b      	lsls	r3, r3, #24
 8004d46:	4997      	ldr	r1, [pc, #604]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	604b      	str	r3, [r1, #4]
 8004d4c:	e018      	b.n	8004d80 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d4e:	4b95      	ldr	r3, [pc, #596]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a94      	ldr	r2, [pc, #592]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004d54:	f023 0301 	bic.w	r3, r3, #1
 8004d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5a:	f7fc ff7f 	bl	8001c5c <HAL_GetTick>
 8004d5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d62:	f7fc ff7b 	bl	8001c5c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e2c2      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d74:	4b8b      	ldr	r3, [pc, #556]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f0      	bne.n	8004d62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 80a9 	beq.w	8004ee0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d8e:	4b85      	ldr	r3, [pc, #532]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d98:	4b82      	ldr	r3, [pc, #520]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d007      	beq.n	8004db4 <HAL_RCC_OscConfig+0x308>
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b18      	cmp	r3, #24
 8004da8:	d13a      	bne.n	8004e20 <HAL_RCC_OscConfig+0x374>
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d135      	bne.n	8004e20 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004db4:	4b7b      	ldr	r3, [pc, #492]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_RCC_OscConfig+0x320>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	2b80      	cmp	r3, #128	; 0x80
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e296      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dcc:	f7fc ff52 	bl	8001c74 <HAL_GetREVID>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	f241 0203 	movw	r2, #4099	; 0x1003
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d817      	bhi.n	8004e0a <HAL_RCC_OscConfig+0x35e>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d108      	bne.n	8004df4 <HAL_RCC_OscConfig+0x348>
 8004de2:	4b70      	ldr	r3, [pc, #448]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004dea:	4a6e      	ldr	r2, [pc, #440]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004dec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004df0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004df2:	e075      	b.n	8004ee0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004df4:	4b6b      	ldr	r3, [pc, #428]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	069b      	lsls	r3, r3, #26
 8004e02:	4968      	ldr	r1, [pc, #416]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e08:	e06a      	b.n	8004ee0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e0a:	4b66      	ldr	r3, [pc, #408]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	061b      	lsls	r3, r3, #24
 8004e18:	4962      	ldr	r1, [pc, #392]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e1e:	e05f      	b.n	8004ee0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d042      	beq.n	8004eae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e28:	4b5e      	ldr	r3, [pc, #376]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a5d      	ldr	r2, [pc, #372]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e34:	f7fc ff12 	bl	8001c5c <HAL_GetTick>
 8004e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e3c:	f7fc ff0e 	bl	8001c5c <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e255      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e4e:	4b55      	ldr	r3, [pc, #340]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e5a:	f7fc ff0b 	bl	8001c74 <HAL_GetREVID>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d817      	bhi.n	8004e98 <HAL_RCC_OscConfig+0x3ec>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d108      	bne.n	8004e82 <HAL_RCC_OscConfig+0x3d6>
 8004e70:	4b4c      	ldr	r3, [pc, #304]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004e78:	4a4a      	ldr	r2, [pc, #296]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004e7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e7e:	6053      	str	r3, [r2, #4]
 8004e80:	e02e      	b.n	8004ee0 <HAL_RCC_OscConfig+0x434>
 8004e82:	4b48      	ldr	r3, [pc, #288]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	069b      	lsls	r3, r3, #26
 8004e90:	4944      	ldr	r1, [pc, #272]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	604b      	str	r3, [r1, #4]
 8004e96:	e023      	b.n	8004ee0 <HAL_RCC_OscConfig+0x434>
 8004e98:	4b42      	ldr	r3, [pc, #264]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	061b      	lsls	r3, r3, #24
 8004ea6:	493f      	ldr	r1, [pc, #252]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60cb      	str	r3, [r1, #12]
 8004eac:	e018      	b.n	8004ee0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004eae:	4b3d      	ldr	r3, [pc, #244]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a3c      	ldr	r2, [pc, #240]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eba:	f7fc fecf 	bl	8001c5c <HAL_GetTick>
 8004ebe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004ec2:	f7fc fecb 	bl	8001c5c <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e212      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ed4:	4b33      	ldr	r3, [pc, #204]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f0      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d036      	beq.n	8004f5a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d019      	beq.n	8004f28 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ef4:	4b2b      	ldr	r3, [pc, #172]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef8:	4a2a      	ldr	r2, [pc, #168]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004efa:	f043 0301 	orr.w	r3, r3, #1
 8004efe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f00:	f7fc feac 	bl	8001c5c <HAL_GetTick>
 8004f04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f08:	f7fc fea8 	bl	8001c5c <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e1ef      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f1a:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0x45c>
 8004f26:	e018      	b.n	8004f5a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f28:	4b1e      	ldr	r3, [pc, #120]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004f2e:	f023 0301 	bic.w	r3, r3, #1
 8004f32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f34:	f7fc fe92 	bl	8001c5c <HAL_GetTick>
 8004f38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f3c:	f7fc fe8e 	bl	8001c5c <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e1d5      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f4e:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d039      	beq.n	8004fda <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01c      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a0c      	ldr	r2, [pc, #48]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f7a:	f7fc fe6f 	bl	8001c5c <HAL_GetTick>
 8004f7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f82:	f7fc fe6b 	bl	8001c5c <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e1b2      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f94:	4b03      	ldr	r3, [pc, #12]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <HAL_RCC_OscConfig+0x4d6>
 8004fa0:	e01b      	b.n	8004fda <HAL_RCC_OscConfig+0x52e>
 8004fa2:	bf00      	nop
 8004fa4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fa8:	4b9b      	ldr	r3, [pc, #620]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a9a      	ldr	r2, [pc, #616]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8004fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fb4:	f7fc fe52 	bl	8001c5c <HAL_GetTick>
 8004fb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004fbc:	f7fc fe4e 	bl	8001c5c <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e195      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fce:	4b92      	ldr	r3, [pc, #584]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1f0      	bne.n	8004fbc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 8081 	beq.w	80050ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fe8:	4b8c      	ldr	r3, [pc, #560]	; (800521c <HAL_RCC_OscConfig+0x770>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a8b      	ldr	r2, [pc, #556]	; (800521c <HAL_RCC_OscConfig+0x770>)
 8004fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ff4:	f7fc fe32 	bl	8001c5c <HAL_GetTick>
 8004ff8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ffc:	f7fc fe2e 	bl	8001c5c <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b64      	cmp	r3, #100	; 0x64
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e175      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800500e:	4b83      	ldr	r3, [pc, #524]	; (800521c <HAL_RCC_OscConfig+0x770>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d106      	bne.n	8005030 <HAL_RCC_OscConfig+0x584>
 8005022:	4b7d      	ldr	r3, [pc, #500]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	4a7c      	ldr	r2, [pc, #496]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8005028:	f043 0301 	orr.w	r3, r3, #1
 800502c:	6713      	str	r3, [r2, #112]	; 0x70
 800502e:	e02d      	b.n	800508c <HAL_RCC_OscConfig+0x5e0>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10c      	bne.n	8005052 <HAL_RCC_OscConfig+0x5a6>
 8005038:	4b77      	ldr	r3, [pc, #476]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503c:	4a76      	ldr	r2, [pc, #472]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 800503e:	f023 0301 	bic.w	r3, r3, #1
 8005042:	6713      	str	r3, [r2, #112]	; 0x70
 8005044:	4b74      	ldr	r3, [pc, #464]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005048:	4a73      	ldr	r2, [pc, #460]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 800504a:	f023 0304 	bic.w	r3, r3, #4
 800504e:	6713      	str	r3, [r2, #112]	; 0x70
 8005050:	e01c      	b.n	800508c <HAL_RCC_OscConfig+0x5e0>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b05      	cmp	r3, #5
 8005058:	d10c      	bne.n	8005074 <HAL_RCC_OscConfig+0x5c8>
 800505a:	4b6f      	ldr	r3, [pc, #444]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505e:	4a6e      	ldr	r2, [pc, #440]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8005060:	f043 0304 	orr.w	r3, r3, #4
 8005064:	6713      	str	r3, [r2, #112]	; 0x70
 8005066:	4b6c      	ldr	r3, [pc, #432]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8005068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506a:	4a6b      	ldr	r2, [pc, #428]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	6713      	str	r3, [r2, #112]	; 0x70
 8005072:	e00b      	b.n	800508c <HAL_RCC_OscConfig+0x5e0>
 8005074:	4b68      	ldr	r3, [pc, #416]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005078:	4a67      	ldr	r2, [pc, #412]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 800507a:	f023 0301 	bic.w	r3, r3, #1
 800507e:	6713      	str	r3, [r2, #112]	; 0x70
 8005080:	4b65      	ldr	r3, [pc, #404]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005084:	4a64      	ldr	r2, [pc, #400]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8005086:	f023 0304 	bic.w	r3, r3, #4
 800508a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d015      	beq.n	80050c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005094:	f7fc fde2 	bl	8001c5c <HAL_GetTick>
 8005098:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f7fc fdde 	bl	8001c5c <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e123      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050b2:	4b59      	ldr	r3, [pc, #356]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0ee      	beq.n	800509c <HAL_RCC_OscConfig+0x5f0>
 80050be:	e014      	b.n	80050ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c0:	f7fc fdcc 	bl	8001c5c <HAL_GetTick>
 80050c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050c6:	e00a      	b.n	80050de <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050c8:	f7fc fdc8 	bl	8001c5c <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e10d      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050de:	4b4e      	ldr	r3, [pc, #312]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 80050e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1ee      	bne.n	80050c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 8102 	beq.w	80052f8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050f4:	4b48      	ldr	r3, [pc, #288]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050fc:	2b18      	cmp	r3, #24
 80050fe:	f000 80bd 	beq.w	800527c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	2b02      	cmp	r3, #2
 8005108:	f040 809e 	bne.w	8005248 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510c:	4b42      	ldr	r3, [pc, #264]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a41      	ldr	r2, [pc, #260]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8005112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7fc fda0 	bl	8001c5c <HAL_GetTick>
 800511c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005120:	f7fc fd9c 	bl	8001c5c <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e0e3      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005132:	4b39      	ldr	r3, [pc, #228]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800513e:	4b36      	ldr	r3, [pc, #216]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8005140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005142:	4b37      	ldr	r3, [pc, #220]	; (8005220 <HAL_RCC_OscConfig+0x774>)
 8005144:	4013      	ands	r3, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800514e:	0112      	lsls	r2, r2, #4
 8005150:	430a      	orrs	r2, r1
 8005152:	4931      	ldr	r1, [pc, #196]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8005154:	4313      	orrs	r3, r2
 8005156:	628b      	str	r3, [r1, #40]	; 0x28
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515c:	3b01      	subs	r3, #1
 800515e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005166:	3b01      	subs	r3, #1
 8005168:	025b      	lsls	r3, r3, #9
 800516a:	b29b      	uxth	r3, r3
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	3b01      	subs	r3, #1
 8005174:	041b      	lsls	r3, r3, #16
 8005176:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005180:	3b01      	subs	r3, #1
 8005182:	061b      	lsls	r3, r3, #24
 8005184:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005188:	4923      	ldr	r1, [pc, #140]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 800518a:	4313      	orrs	r3, r2
 800518c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800518e:	4b22      	ldr	r3, [pc, #136]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8005190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005192:	4a21      	ldr	r2, [pc, #132]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8005194:	f023 0301 	bic.w	r3, r3, #1
 8005198:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800519a:	4b1f      	ldr	r3, [pc, #124]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 800519c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800519e:	4b21      	ldr	r3, [pc, #132]	; (8005224 <HAL_RCC_OscConfig+0x778>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80051a6:	00d2      	lsls	r2, r2, #3
 80051a8:	491b      	ldr	r1, [pc, #108]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051ae:	4b1a      	ldr	r3, [pc, #104]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	f023 020c 	bic.w	r2, r3, #12
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	4917      	ldr	r1, [pc, #92]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051c0:	4b15      	ldr	r3, [pc, #84]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	f023 0202 	bic.w	r2, r3, #2
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051cc:	4912      	ldr	r1, [pc, #72]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051d2:	4b11      	ldr	r3, [pc, #68]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	4a10      	ldr	r2, [pc, #64]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 80051d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051de:	4b0e      	ldr	r3, [pc, #56]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	4a0d      	ldr	r2, [pc, #52]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 80051e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051ea:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	4a0a      	ldr	r2, [pc, #40]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 80051f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80051f6:	4b08      	ldr	r3, [pc, #32]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	4a07      	ldr	r2, [pc, #28]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 80051fc:	f043 0301 	orr.w	r3, r3, #1
 8005200:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a04      	ldr	r2, [pc, #16]	; (8005218 <HAL_RCC_OscConfig+0x76c>)
 8005208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800520c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520e:	f7fc fd25 	bl	8001c5c <HAL_GetTick>
 8005212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005214:	e011      	b.n	800523a <HAL_RCC_OscConfig+0x78e>
 8005216:	bf00      	nop
 8005218:	58024400 	.word	0x58024400
 800521c:	58024800 	.word	0x58024800
 8005220:	fffffc0c 	.word	0xfffffc0c
 8005224:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005228:	f7fc fd18 	bl	8001c5c <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e05f      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800523a:	4b32      	ldr	r3, [pc, #200]	; (8005304 <HAL_RCC_OscConfig+0x858>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0f0      	beq.n	8005228 <HAL_RCC_OscConfig+0x77c>
 8005246:	e057      	b.n	80052f8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005248:	4b2e      	ldr	r3, [pc, #184]	; (8005304 <HAL_RCC_OscConfig+0x858>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2d      	ldr	r2, [pc, #180]	; (8005304 <HAL_RCC_OscConfig+0x858>)
 800524e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fc fd02 	bl	8001c5c <HAL_GetTick>
 8005258:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525c:	f7fc fcfe 	bl	8001c5c <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e045      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800526e:	4b25      	ldr	r3, [pc, #148]	; (8005304 <HAL_RCC_OscConfig+0x858>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f0      	bne.n	800525c <HAL_RCC_OscConfig+0x7b0>
 800527a:	e03d      	b.n	80052f8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800527c:	4b21      	ldr	r3, [pc, #132]	; (8005304 <HAL_RCC_OscConfig+0x858>)
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005282:	4b20      	ldr	r3, [pc, #128]	; (8005304 <HAL_RCC_OscConfig+0x858>)
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005286:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	2b01      	cmp	r3, #1
 800528e:	d031      	beq.n	80052f4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f003 0203 	and.w	r2, r3, #3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800529a:	429a      	cmp	r2, r3
 800529c:	d12a      	bne.n	80052f4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	091b      	lsrs	r3, r3, #4
 80052a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d122      	bne.n	80052f4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d11a      	bne.n	80052f4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	0a5b      	lsrs	r3, r3, #9
 80052c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ca:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d111      	bne.n	80052f4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	0c1b      	lsrs	r3, r3, #16
 80052d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052de:	429a      	cmp	r2, r3
 80052e0:	d108      	bne.n	80052f4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	0e1b      	lsrs	r3, r3, #24
 80052e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d001      	beq.n	80052f8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3730      	adds	r7, #48	; 0x30
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	58024400 	.word	0x58024400

08005308 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e19c      	b.n	8005656 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800531c:	4b8a      	ldr	r3, [pc, #552]	; (8005548 <HAL_RCC_ClockConfig+0x240>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d910      	bls.n	800534c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800532a:	4b87      	ldr	r3, [pc, #540]	; (8005548 <HAL_RCC_ClockConfig+0x240>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f023 020f 	bic.w	r2, r3, #15
 8005332:	4985      	ldr	r1, [pc, #532]	; (8005548 <HAL_RCC_ClockConfig+0x240>)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	4313      	orrs	r3, r2
 8005338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800533a:	4b83      	ldr	r3, [pc, #524]	; (8005548 <HAL_RCC_ClockConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d001      	beq.n	800534c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e184      	b.n	8005656 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	d010      	beq.n	800537a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	4b7b      	ldr	r3, [pc, #492]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005364:	429a      	cmp	r2, r3
 8005366:	d908      	bls.n	800537a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005368:	4b78      	ldr	r3, [pc, #480]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	4975      	ldr	r1, [pc, #468]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 8005376:	4313      	orrs	r3, r2
 8005378:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d010      	beq.n	80053a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695a      	ldr	r2, [r3, #20]
 800538a:	4b70      	ldr	r3, [pc, #448]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005392:	429a      	cmp	r2, r3
 8005394:	d908      	bls.n	80053a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005396:	4b6d      	ldr	r3, [pc, #436]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	496a      	ldr	r1, [pc, #424]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d010      	beq.n	80053d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	699a      	ldr	r2, [r3, #24]
 80053b8:	4b64      	ldr	r3, [pc, #400]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d908      	bls.n	80053d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053c4:	4b61      	ldr	r3, [pc, #388]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	495e      	ldr	r1, [pc, #376]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d010      	beq.n	8005404 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69da      	ldr	r2, [r3, #28]
 80053e6:	4b59      	ldr	r3, [pc, #356]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d908      	bls.n	8005404 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80053f2:	4b56      	ldr	r3, [pc, #344]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	4953      	ldr	r1, [pc, #332]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 8005400:	4313      	orrs	r3, r2
 8005402:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d010      	beq.n	8005432 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	4b4d      	ldr	r3, [pc, #308]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	429a      	cmp	r2, r3
 800541e:	d908      	bls.n	8005432 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005420:	4b4a      	ldr	r3, [pc, #296]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f023 020f 	bic.w	r2, r3, #15
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	4947      	ldr	r1, [pc, #284]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 800542e:	4313      	orrs	r3, r2
 8005430:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d055      	beq.n	80054ea <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800543e:	4b43      	ldr	r3, [pc, #268]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	4940      	ldr	r1, [pc, #256]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 800544c:	4313      	orrs	r3, r2
 800544e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d107      	bne.n	8005468 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005458:	4b3c      	ldr	r3, [pc, #240]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d121      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e0f6      	b.n	8005656 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b03      	cmp	r3, #3
 800546e:	d107      	bne.n	8005480 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005470:	4b36      	ldr	r3, [pc, #216]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d115      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0ea      	b.n	8005656 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d107      	bne.n	8005498 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005488:	4b30      	ldr	r3, [pc, #192]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005490:	2b00      	cmp	r3, #0
 8005492:	d109      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e0de      	b.n	8005656 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005498:	4b2c      	ldr	r3, [pc, #176]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0d6      	b.n	8005656 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054a8:	4b28      	ldr	r3, [pc, #160]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f023 0207 	bic.w	r2, r3, #7
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	4925      	ldr	r1, [pc, #148]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ba:	f7fc fbcf 	bl	8001c5c <HAL_GetTick>
 80054be:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c0:	e00a      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054c2:	f7fc fbcb 	bl	8001c5c <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e0be      	b.n	8005656 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054d8:	4b1c      	ldr	r3, [pc, #112]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d1eb      	bne.n	80054c2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d010      	beq.n	8005518 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	4b14      	ldr	r3, [pc, #80]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	429a      	cmp	r2, r3
 8005504:	d208      	bcs.n	8005518 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005506:	4b11      	ldr	r3, [pc, #68]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f023 020f 	bic.w	r2, r3, #15
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	490e      	ldr	r1, [pc, #56]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 8005514:	4313      	orrs	r3, r2
 8005516:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005518:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <HAL_RCC_ClockConfig+0x240>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d214      	bcs.n	8005550 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005526:	4b08      	ldr	r3, [pc, #32]	; (8005548 <HAL_RCC_ClockConfig+0x240>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f023 020f 	bic.w	r2, r3, #15
 800552e:	4906      	ldr	r1, [pc, #24]	; (8005548 <HAL_RCC_ClockConfig+0x240>)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	4313      	orrs	r3, r2
 8005534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005536:	4b04      	ldr	r3, [pc, #16]	; (8005548 <HAL_RCC_ClockConfig+0x240>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d005      	beq.n	8005550 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e086      	b.n	8005656 <HAL_RCC_ClockConfig+0x34e>
 8005548:	52002000 	.word	0x52002000
 800554c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d010      	beq.n	800557e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	4b3f      	ldr	r3, [pc, #252]	; (8005660 <HAL_RCC_ClockConfig+0x358>)
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005568:	429a      	cmp	r2, r3
 800556a:	d208      	bcs.n	800557e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800556c:	4b3c      	ldr	r3, [pc, #240]	; (8005660 <HAL_RCC_ClockConfig+0x358>)
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	4939      	ldr	r1, [pc, #228]	; (8005660 <HAL_RCC_ClockConfig+0x358>)
 800557a:	4313      	orrs	r3, r2
 800557c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d010      	beq.n	80055ac <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	695a      	ldr	r2, [r3, #20]
 800558e:	4b34      	ldr	r3, [pc, #208]	; (8005660 <HAL_RCC_ClockConfig+0x358>)
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005596:	429a      	cmp	r2, r3
 8005598:	d208      	bcs.n	80055ac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800559a:	4b31      	ldr	r3, [pc, #196]	; (8005660 <HAL_RCC_ClockConfig+0x358>)
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	492e      	ldr	r1, [pc, #184]	; (8005660 <HAL_RCC_ClockConfig+0x358>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d010      	beq.n	80055da <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699a      	ldr	r2, [r3, #24]
 80055bc:	4b28      	ldr	r3, [pc, #160]	; (8005660 <HAL_RCC_ClockConfig+0x358>)
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d208      	bcs.n	80055da <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055c8:	4b25      	ldr	r3, [pc, #148]	; (8005660 <HAL_RCC_ClockConfig+0x358>)
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	4922      	ldr	r1, [pc, #136]	; (8005660 <HAL_RCC_ClockConfig+0x358>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d010      	beq.n	8005608 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69da      	ldr	r2, [r3, #28]
 80055ea:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <HAL_RCC_ClockConfig+0x358>)
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d208      	bcs.n	8005608 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80055f6:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <HAL_RCC_ClockConfig+0x358>)
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	4917      	ldr	r1, [pc, #92]	; (8005660 <HAL_RCC_ClockConfig+0x358>)
 8005604:	4313      	orrs	r3, r2
 8005606:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005608:	f000 f844 	bl	8005694 <HAL_RCC_GetSysClockFreq>
 800560c:	4602      	mov	r2, r0
 800560e:	4b14      	ldr	r3, [pc, #80]	; (8005660 <HAL_RCC_ClockConfig+0x358>)
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	0a1b      	lsrs	r3, r3, #8
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	4912      	ldr	r1, [pc, #72]	; (8005664 <HAL_RCC_ClockConfig+0x35c>)
 800561a:	5ccb      	ldrb	r3, [r1, r3]
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
 8005624:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005626:	4b0e      	ldr	r3, [pc, #56]	; (8005660 <HAL_RCC_ClockConfig+0x358>)
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	4a0d      	ldr	r2, [pc, #52]	; (8005664 <HAL_RCC_ClockConfig+0x35c>)
 8005630:	5cd3      	ldrb	r3, [r2, r3]
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	fa22 f303 	lsr.w	r3, r2, r3
 800563c:	4a0a      	ldr	r2, [pc, #40]	; (8005668 <HAL_RCC_ClockConfig+0x360>)
 800563e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005640:	4a0a      	ldr	r2, [pc, #40]	; (800566c <HAL_RCC_ClockConfig+0x364>)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005646:	4b0a      	ldr	r3, [pc, #40]	; (8005670 <HAL_RCC_ClockConfig+0x368>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f7fc fabc 	bl	8001bc8 <HAL_InitTick>
 8005650:	4603      	mov	r3, r0
 8005652:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005654:	7bfb      	ldrb	r3, [r7, #15]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	58024400 	.word	0x58024400
 8005664:	0800b378 	.word	0x0800b378
 8005668:	24000004 	.word	0x24000004
 800566c:	24000000 	.word	0x24000000
 8005670:	24000008 	.word	0x24000008

08005674 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8005678:	4b05      	ldr	r3, [pc, #20]	; (8005690 <HAL_RCC_EnableCSS+0x1c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a04      	ldr	r2, [pc, #16]	; (8005690 <HAL_RCC_EnableCSS+0x1c>)
 800567e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005682:	6013      	str	r3, [r2, #0]
}
 8005684:	bf00      	nop
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	58024400 	.word	0x58024400

08005694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005694:	b480      	push	{r7}
 8005696:	b089      	sub	sp, #36	; 0x24
 8005698:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800569a:	4bb3      	ldr	r3, [pc, #716]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056a2:	2b18      	cmp	r3, #24
 80056a4:	f200 8155 	bhi.w	8005952 <HAL_RCC_GetSysClockFreq+0x2be>
 80056a8:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	08005715 	.word	0x08005715
 80056b4:	08005953 	.word	0x08005953
 80056b8:	08005953 	.word	0x08005953
 80056bc:	08005953 	.word	0x08005953
 80056c0:	08005953 	.word	0x08005953
 80056c4:	08005953 	.word	0x08005953
 80056c8:	08005953 	.word	0x08005953
 80056cc:	08005953 	.word	0x08005953
 80056d0:	0800573b 	.word	0x0800573b
 80056d4:	08005953 	.word	0x08005953
 80056d8:	08005953 	.word	0x08005953
 80056dc:	08005953 	.word	0x08005953
 80056e0:	08005953 	.word	0x08005953
 80056e4:	08005953 	.word	0x08005953
 80056e8:	08005953 	.word	0x08005953
 80056ec:	08005953 	.word	0x08005953
 80056f0:	08005741 	.word	0x08005741
 80056f4:	08005953 	.word	0x08005953
 80056f8:	08005953 	.word	0x08005953
 80056fc:	08005953 	.word	0x08005953
 8005700:	08005953 	.word	0x08005953
 8005704:	08005953 	.word	0x08005953
 8005708:	08005953 	.word	0x08005953
 800570c:	08005953 	.word	0x08005953
 8005710:	08005747 	.word	0x08005747
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005714:	4b94      	ldr	r3, [pc, #592]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0320 	and.w	r3, r3, #32
 800571c:	2b00      	cmp	r3, #0
 800571e:	d009      	beq.n	8005734 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005720:	4b91      	ldr	r3, [pc, #580]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	08db      	lsrs	r3, r3, #3
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	4a90      	ldr	r2, [pc, #576]	; (800596c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
 8005730:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005732:	e111      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005734:	4b8d      	ldr	r3, [pc, #564]	; (800596c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005736:	61bb      	str	r3, [r7, #24]
    break;
 8005738:	e10e      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800573a:	4b8d      	ldr	r3, [pc, #564]	; (8005970 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800573c:	61bb      	str	r3, [r7, #24]
    break;
 800573e:	e10b      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005740:	4b8c      	ldr	r3, [pc, #560]	; (8005974 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005742:	61bb      	str	r3, [r7, #24]
    break;
 8005744:	e108      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005746:	4b88      	ldr	r3, [pc, #544]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005750:	4b85      	ldr	r3, [pc, #532]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005754:	091b      	lsrs	r3, r3, #4
 8005756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800575a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800575c:	4b82      	ldr	r3, [pc, #520]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005766:	4b80      	ldr	r3, [pc, #512]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576a:	08db      	lsrs	r3, r3, #3
 800576c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	fb02 f303 	mul.w	r3, r2, r3
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 80e1 	beq.w	800594c <HAL_RCC_GetSysClockFreq+0x2b8>
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b02      	cmp	r3, #2
 800578e:	f000 8083 	beq.w	8005898 <HAL_RCC_GetSysClockFreq+0x204>
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b02      	cmp	r3, #2
 8005796:	f200 80a1 	bhi.w	80058dc <HAL_RCC_GetSysClockFreq+0x248>
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <HAL_RCC_GetSysClockFreq+0x114>
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d056      	beq.n	8005854 <HAL_RCC_GetSysClockFreq+0x1c0>
 80057a6:	e099      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057a8:	4b6f      	ldr	r3, [pc, #444]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d02d      	beq.n	8005810 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057b4:	4b6c      	ldr	r3, [pc, #432]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	08db      	lsrs	r3, r3, #3
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	4a6b      	ldr	r2, [pc, #428]	; (800596c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057c0:	fa22 f303 	lsr.w	r3, r2, r3
 80057c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	ee07 3a90 	vmov	s15, r3
 80057cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057de:	4b62      	ldr	r3, [pc, #392]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80057f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005978 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800580e:	e087      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800597c <HAL_RCC_GetSysClockFreq+0x2e8>
 800581e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005822:	4b51      	ldr	r3, [pc, #324]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005832:	ed97 6a02 	vldr	s12, [r7, #8]
 8005836:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005978 <HAL_RCC_GetSysClockFreq+0x2e4>
 800583a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800583e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800584a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005852:	e065      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005980 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005866:	4b40      	ldr	r3, [pc, #256]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005876:	ed97 6a02 	vldr	s12, [r7, #8]
 800587a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005978 <HAL_RCC_GetSysClockFreq+0x2e4>
 800587e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800588a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800588e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005896:	e043      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	ee07 3a90 	vmov	s15, r3
 800589e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005984 <HAL_RCC_GetSysClockFreq+0x2f0>
 80058a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058aa:	4b2f      	ldr	r3, [pc, #188]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b2:	ee07 3a90 	vmov	s15, r3
 80058b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80058be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005978 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058da:	e021      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	ee07 3a90 	vmov	s15, r3
 80058e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005980 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ee:	4b1e      	ldr	r3, [pc, #120]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f6:	ee07 3a90 	vmov	s15, r3
 80058fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005902:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005978 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800590a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800590e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800591e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005920:	4b11      	ldr	r3, [pc, #68]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	0a5b      	lsrs	r3, r3, #9
 8005926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800592a:	3301      	adds	r3, #1
 800592c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	ee07 3a90 	vmov	s15, r3
 8005934:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005938:	edd7 6a07 	vldr	s13, [r7, #28]
 800593c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005944:	ee17 3a90 	vmov	r3, s15
 8005948:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800594a:	e005      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]
    break;
 8005950:	e002      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005952:	4b07      	ldr	r3, [pc, #28]	; (8005970 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005954:	61bb      	str	r3, [r7, #24]
    break;
 8005956:	bf00      	nop
  }

  return sysclockfreq;
 8005958:	69bb      	ldr	r3, [r7, #24]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3724      	adds	r7, #36	; 0x24
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	58024400 	.word	0x58024400
 800596c:	03d09000 	.word	0x03d09000
 8005970:	003d0900 	.word	0x003d0900
 8005974:	017d7840 	.word	0x017d7840
 8005978:	46000000 	.word	0x46000000
 800597c:	4c742400 	.word	0x4c742400
 8005980:	4a742400 	.word	0x4a742400
 8005984:	4bbebc20 	.word	0x4bbebc20

08005988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800598e:	f7ff fe81 	bl	8005694 <HAL_RCC_GetSysClockFreq>
 8005992:	4602      	mov	r2, r0
 8005994:	4b10      	ldr	r3, [pc, #64]	; (80059d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	0a1b      	lsrs	r3, r3, #8
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	490f      	ldr	r1, [pc, #60]	; (80059dc <HAL_RCC_GetHCLKFreq+0x54>)
 80059a0:	5ccb      	ldrb	r3, [r1, r3]
 80059a2:	f003 031f 	and.w	r3, r3, #31
 80059a6:	fa22 f303 	lsr.w	r3, r2, r3
 80059aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059ac:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	f003 030f 	and.w	r3, r3, #15
 80059b4:	4a09      	ldr	r2, [pc, #36]	; (80059dc <HAL_RCC_GetHCLKFreq+0x54>)
 80059b6:	5cd3      	ldrb	r3, [r2, r3]
 80059b8:	f003 031f 	and.w	r3, r3, #31
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	fa22 f303 	lsr.w	r3, r2, r3
 80059c2:	4a07      	ldr	r2, [pc, #28]	; (80059e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80059c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059c6:	4a07      	ldr	r2, [pc, #28]	; (80059e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059cc:	4b04      	ldr	r3, [pc, #16]	; (80059e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80059ce:	681b      	ldr	r3, [r3, #0]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	58024400 	.word	0x58024400
 80059dc:	0800b378 	.word	0x0800b378
 80059e0:	24000004 	.word	0x24000004
 80059e4:	24000000 	.word	0x24000000

080059e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80059ec:	f7ff ffcc 	bl	8005988 <HAL_RCC_GetHCLKFreq>
 80059f0:	4602      	mov	r2, r0
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	091b      	lsrs	r3, r3, #4
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	4904      	ldr	r1, [pc, #16]	; (8005a10 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059fe:	5ccb      	ldrb	r3, [r1, r3]
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	58024400 	.word	0x58024400
 8005a10:	0800b378 	.word	0x0800b378

08005a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a18:	f7ff ffb6 	bl	8005988 <HAL_RCC_GetHCLKFreq>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	0a1b      	lsrs	r3, r3, #8
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	4904      	ldr	r1, [pc, #16]	; (8005a3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a2a:	5ccb      	ldrb	r3, [r1, r3]
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	58024400 	.word	0x58024400
 8005a3c:	0800b378 	.word	0x0800b378

08005a40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a48:	2300      	movs	r3, #0
 8005a4a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d03f      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a64:	d02a      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a6a:	d824      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a70:	d018      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a76:	d81e      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a80:	d007      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a82:	e018      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a84:	4ba3      	ldr	r3, [pc, #652]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	4aa2      	ldr	r2, [pc, #648]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a90:	e015      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3304      	adds	r3, #4
 8005a96:	2102      	movs	r1, #2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 fff9 	bl	8007a90 <RCCEx_PLL2_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005aa2:	e00c      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3324      	adds	r3, #36	; 0x24
 8005aa8:	2102      	movs	r1, #2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f002 f8a2 	bl	8007bf4 <RCCEx_PLL3_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ab4:	e003      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8005aba:	e000      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ac4:	4b93      	ldr	r3, [pc, #588]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ad0:	4990      	ldr	r1, [pc, #576]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	650b      	str	r3, [r1, #80]	; 0x50
 8005ad6:	e001      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
 8005ada:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d03d      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d826      	bhi.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005af0:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af6:	bf00      	nop
 8005af8:	08005b0d 	.word	0x08005b0d
 8005afc:	08005b1b 	.word	0x08005b1b
 8005b00:	08005b2d 	.word	0x08005b2d
 8005b04:	08005b45 	.word	0x08005b45
 8005b08:	08005b45 	.word	0x08005b45
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b0c:	4b81      	ldr	r3, [pc, #516]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	4a80      	ldr	r2, [pc, #512]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b18:	e015      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	2100      	movs	r1, #0
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 ffb5 	bl	8007a90 <RCCEx_PLL2_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b2a:	e00c      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3324      	adds	r3, #36	; 0x24
 8005b30:	2100      	movs	r1, #0
 8005b32:	4618      	mov	r0, r3
 8005b34:	f002 f85e 	bl	8007bf4 <RCCEx_PLL3_Config>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b3c:	e003      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	75fb      	strb	r3, [r7, #23]
      break;
 8005b42:	e000      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b46:	7dfb      	ldrb	r3, [r7, #23]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d109      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b4c:	4b71      	ldr	r3, [pc, #452]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b50:	f023 0207 	bic.w	r2, r3, #7
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b58:	496e      	ldr	r1, [pc, #440]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	650b      	str	r3, [r1, #80]	; 0x50
 8005b5e:	e001      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
 8005b62:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d042      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b78:	d02b      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b7e:	d825      	bhi.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005b80:	2bc0      	cmp	r3, #192	; 0xc0
 8005b82:	d028      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b84:	2bc0      	cmp	r3, #192	; 0xc0
 8005b86:	d821      	bhi.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005b88:	2b80      	cmp	r3, #128	; 0x80
 8005b8a:	d016      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005b8c:	2b80      	cmp	r3, #128	; 0x80
 8005b8e:	d81d      	bhi.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005b94:	2b40      	cmp	r3, #64	; 0x40
 8005b96:	d007      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005b98:	e018      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b9a:	4b5e      	ldr	r3, [pc, #376]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	4a5d      	ldr	r2, [pc, #372]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ba6:	e017      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3304      	adds	r3, #4
 8005bac:	2100      	movs	r1, #0
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f001 ff6e 	bl	8007a90 <RCCEx_PLL2_Config>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005bb8:	e00e      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	3324      	adds	r3, #36	; 0x24
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f002 f817 	bl	8007bf4 <RCCEx_PLL3_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005bca:	e005      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd0:	e002      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005bd2:	bf00      	nop
 8005bd4:	e000      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005bd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d109      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005bde:	4b4d      	ldr	r3, [pc, #308]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bea:	494a      	ldr	r1, [pc, #296]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	650b      	str	r3, [r1, #80]	; 0x50
 8005bf0:	e001      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf2:	7dfb      	ldrb	r3, [r7, #23]
 8005bf4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d049      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c0c:	d030      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005c0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c12:	d82a      	bhi.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c18:	d02c      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005c1a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c1e:	d824      	bhi.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c24:	d018      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c2a:	d81e      	bhi.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c34:	d007      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005c36:	e018      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c38:	4b36      	ldr	r3, [pc, #216]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	4a35      	ldr	r2, [pc, #212]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c44:	e017      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f001 ff1f 	bl	8007a90 <RCCEx_PLL2_Config>
 8005c52:	4603      	mov	r3, r0
 8005c54:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005c56:	e00e      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3324      	adds	r3, #36	; 0x24
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f001 ffc8 	bl	8007bf4 <RCCEx_PLL3_Config>
 8005c64:	4603      	mov	r3, r0
 8005c66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c68:	e005      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c6e:	e002      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005c70:	bf00      	nop
 8005c72:	e000      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c76:	7dfb      	ldrb	r3, [r7, #23]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c7c:	4b25      	ldr	r3, [pc, #148]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c80:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c8a:	4922      	ldr	r1, [pc, #136]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	658b      	str	r3, [r1, #88]	; 0x58
 8005c90:	e001      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
 8005c94:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d04b      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cac:	d030      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005cae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cb2:	d82a      	bhi.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005cb4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cb8:	d02e      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005cba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cbe:	d824      	bhi.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005cc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cc4:	d018      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005cc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cca:	d81e      	bhi.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cd4:	d007      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005cd6:	e018      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd8:	4b0e      	ldr	r3, [pc, #56]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	4a0d      	ldr	r2, [pc, #52]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ce4:	e019      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	2100      	movs	r1, #0
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 fecf 	bl	8007a90 <RCCEx_PLL2_Config>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005cf6:	e010      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3324      	adds	r3, #36	; 0x24
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f001 ff78 	bl	8007bf4 <RCCEx_PLL3_Config>
 8005d04:	4603      	mov	r3, r0
 8005d06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d08:	e007      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0e:	e004      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005d10:	bf00      	nop
 8005d12:	e002      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005d14:	58024400 	.word	0x58024400
      break;
 8005d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d20:	4b99      	ldr	r3, [pc, #612]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d24:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d2e:	4996      	ldr	r1, [pc, #600]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	658b      	str	r3, [r1, #88]	; 0x58
 8005d34:	e001      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
 8005d38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d032      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d4a:	2b30      	cmp	r3, #48	; 0x30
 8005d4c:	d01c      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005d4e:	2b30      	cmp	r3, #48	; 0x30
 8005d50:	d817      	bhi.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d00c      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	d813      	bhi.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d016      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005d5e:	2b10      	cmp	r3, #16
 8005d60:	d10f      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d62:	4b89      	ldr	r3, [pc, #548]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	4a88      	ldr	r2, [pc, #544]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005d6e:	e00e      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3304      	adds	r3, #4
 8005d74:	2102      	movs	r1, #2
 8005d76:	4618      	mov	r0, r3
 8005d78:	f001 fe8a 	bl	8007a90 <RCCEx_PLL2_Config>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005d80:	e005      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	75fb      	strb	r3, [r7, #23]
      break;
 8005d86:	e002      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005d88:	bf00      	nop
 8005d8a:	e000      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d109      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d94:	4b7c      	ldr	r3, [pc, #496]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da0:	4979      	ldr	r1, [pc, #484]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005da6:	e001      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
 8005daa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d047      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dc0:	d030      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005dc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dc6:	d82a      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005dc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005dcc:	d02c      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005dce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005dd2:	d824      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd8:	d018      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dde:	d81e      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d003      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de8:	d007      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005dea:	e018      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dec:	4b66      	ldr	r3, [pc, #408]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	4a65      	ldr	r2, [pc, #404]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005df6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005df8:	e017      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	2100      	movs	r1, #0
 8005e00:	4618      	mov	r0, r3
 8005e02:	f001 fe45 	bl	8007a90 <RCCEx_PLL2_Config>
 8005e06:	4603      	mov	r3, r0
 8005e08:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e0a:	e00e      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3324      	adds	r3, #36	; 0x24
 8005e10:	2100      	movs	r1, #0
 8005e12:	4618      	mov	r0, r3
 8005e14:	f001 feee 	bl	8007bf4 <RCCEx_PLL3_Config>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e1c:	e005      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	75fb      	strb	r3, [r7, #23]
      break;
 8005e22:	e002      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005e24:	bf00      	nop
 8005e26:	e000      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d109      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e30:	4b55      	ldr	r3, [pc, #340]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e34:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e3c:	4952      	ldr	r1, [pc, #328]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	650b      	str	r3, [r1, #80]	; 0x50
 8005e42:	e001      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
 8005e46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d049      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e5c:	d02e      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005e5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e62:	d828      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005e64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e68:	d02a      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005e6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e6e:	d822      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005e70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e74:	d026      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005e76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e7a:	d81c      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e80:	d010      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e86:	d816      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01d      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e90:	d111      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	3304      	adds	r3, #4
 8005e96:	2101      	movs	r1, #1
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f001 fdf9 	bl	8007a90 <RCCEx_PLL2_Config>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005ea2:	e012      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3324      	adds	r3, #36	; 0x24
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 fea2 	bl	8007bf4 <RCCEx_PLL3_Config>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005eb4:	e009      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8005eba:	e006      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005ebc:	bf00      	nop
 8005ebe:	e004      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005ec0:	bf00      	nop
 8005ec2:	e002      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005ec4:	bf00      	nop
 8005ec6:	e000      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005ec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eca:	7dfb      	ldrb	r3, [r7, #23]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d109      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ed0:	4b2d      	ldr	r3, [pc, #180]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005edc:	492a      	ldr	r1, [pc, #168]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	650b      	str	r3, [r1, #80]	; 0x50
 8005ee2:	e001      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee4:	7dfb      	ldrb	r3, [r7, #23]
 8005ee6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d04d      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005efe:	d02e      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f04:	d828      	bhi.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0a:	d02a      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f10:	d822      	bhi.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005f12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f16:	d026      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005f18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f1c:	d81c      	bhi.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f22:	d010      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f28:	d816      	bhi.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01d      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f32:	d111      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3304      	adds	r3, #4
 8005f38:	2101      	movs	r1, #1
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f001 fda8 	bl	8007a90 <RCCEx_PLL2_Config>
 8005f40:	4603      	mov	r3, r0
 8005f42:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005f44:	e012      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	3324      	adds	r3, #36	; 0x24
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f001 fe51 	bl	8007bf4 <RCCEx_PLL3_Config>
 8005f52:	4603      	mov	r3, r0
 8005f54:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005f56:	e009      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f5c:	e006      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005f5e:	bf00      	nop
 8005f60:	e004      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005f62:	bf00      	nop
 8005f64:	e002      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005f66:	bf00      	nop
 8005f68:	e000      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f6c:	7dfb      	ldrb	r3, [r7, #23]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10c      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f72:	4b05      	ldr	r3, [pc, #20]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f80:	4901      	ldr	r1, [pc, #4]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	658b      	str	r3, [r1, #88]	; 0x58
 8005f86:	e003      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005f88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
 8005f8e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d02f      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fa4:	d00e      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005faa:	d814      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d015      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005fb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fb4:	d10f      	bne.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fb6:	4baf      	ldr	r3, [pc, #700]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fba:	4aae      	ldr	r2, [pc, #696]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005fc2:	e00c      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	2101      	movs	r1, #1
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f001 fd60 	bl	8007a90 <RCCEx_PLL2_Config>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005fd4:	e003      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8005fda:	e000      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d109      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fe4:	4ba3      	ldr	r3, [pc, #652]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ff0:	49a0      	ldr	r1, [pc, #640]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	650b      	str	r3, [r1, #80]	; 0x50
 8005ff6:	e001      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff8:	7dfb      	ldrb	r3, [r7, #23]
 8005ffa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d032      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600c:	2b03      	cmp	r3, #3
 800600e:	d81b      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006010:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006016:	bf00      	nop
 8006018:	0800604f 	.word	0x0800604f
 800601c:	08006029 	.word	0x08006029
 8006020:	08006037 	.word	0x08006037
 8006024:	0800604f 	.word	0x0800604f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006028:	4b92      	ldr	r3, [pc, #584]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	4a91      	ldr	r2, [pc, #580]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800602e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006032:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006034:	e00c      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3304      	adds	r3, #4
 800603a:	2102      	movs	r1, #2
 800603c:	4618      	mov	r0, r3
 800603e:	f001 fd27 	bl	8007a90 <RCCEx_PLL2_Config>
 8006042:	4603      	mov	r3, r0
 8006044:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006046:	e003      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	75fb      	strb	r3, [r7, #23]
      break;
 800604c:	e000      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800604e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006050:	7dfb      	ldrb	r3, [r7, #23]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d109      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006056:	4b87      	ldr	r3, [pc, #540]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800605a:	f023 0203 	bic.w	r2, r3, #3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006062:	4984      	ldr	r1, [pc, #528]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006064:	4313      	orrs	r3, r2
 8006066:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006068:	e001      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 8086 	beq.w	8006188 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800607c:	4b7e      	ldr	r3, [pc, #504]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a7d      	ldr	r2, [pc, #500]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006086:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006088:	f7fb fde8 	bl	8001c5c <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800608e:	e009      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006090:	f7fb fde4 	bl	8001c5c <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b64      	cmp	r3, #100	; 0x64
 800609c:	d902      	bls.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	75fb      	strb	r3, [r7, #23]
        break;
 80060a2:	e005      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060a4:	4b74      	ldr	r3, [pc, #464]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0ef      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d166      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80060b6:	4b6f      	ldr	r3, [pc, #444]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060c0:	4053      	eors	r3, r2
 80060c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d013      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060ca:	4b6a      	ldr	r3, [pc, #424]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060d4:	4b67      	ldr	r3, [pc, #412]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d8:	4a66      	ldr	r2, [pc, #408]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060de:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060e0:	4b64      	ldr	r3, [pc, #400]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e4:	4a63      	ldr	r2, [pc, #396]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80060ec:	4a61      	ldr	r2, [pc, #388]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060fc:	d115      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fe:	f7fb fdad 	bl	8001c5c <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006104:	e00b      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006106:	f7fb fda9 	bl	8001c5c <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	f241 3288 	movw	r2, #5000	; 0x1388
 8006114:	4293      	cmp	r3, r2
 8006116:	d902      	bls.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	75fb      	strb	r3, [r7, #23]
            break;
 800611c:	e005      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800611e:	4b55      	ldr	r3, [pc, #340]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d0ed      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800612a:	7dfb      	ldrb	r3, [r7, #23]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d126      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800613a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800613e:	d10d      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006140:	4b4c      	ldr	r3, [pc, #304]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800614e:	0919      	lsrs	r1, r3, #4
 8006150:	4b4a      	ldr	r3, [pc, #296]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006152:	400b      	ands	r3, r1
 8006154:	4947      	ldr	r1, [pc, #284]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006156:	4313      	orrs	r3, r2
 8006158:	610b      	str	r3, [r1, #16]
 800615a:	e005      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800615c:	4b45      	ldr	r3, [pc, #276]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	4a44      	ldr	r2, [pc, #272]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006162:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006166:	6113      	str	r3, [r2, #16]
 8006168:	4b42      	ldr	r3, [pc, #264]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800616a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006176:	493f      	ldr	r1, [pc, #252]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006178:	4313      	orrs	r3, r2
 800617a:	670b      	str	r3, [r1, #112]	; 0x70
 800617c:	e004      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800617e:	7dfb      	ldrb	r3, [r7, #23]
 8006180:	75bb      	strb	r3, [r7, #22]
 8006182:	e001      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006184:	7dfb      	ldrb	r3, [r7, #23]
 8006186:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 8085 	beq.w	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800619a:	2b28      	cmp	r3, #40	; 0x28
 800619c:	d866      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800619e:	a201      	add	r2, pc, #4	; (adr r2, 80061a4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80061a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a4:	08006281 	.word	0x08006281
 80061a8:	0800626d 	.word	0x0800626d
 80061ac:	0800626d 	.word	0x0800626d
 80061b0:	0800626d 	.word	0x0800626d
 80061b4:	0800626d 	.word	0x0800626d
 80061b8:	0800626d 	.word	0x0800626d
 80061bc:	0800626d 	.word	0x0800626d
 80061c0:	0800626d 	.word	0x0800626d
 80061c4:	08006249 	.word	0x08006249
 80061c8:	0800626d 	.word	0x0800626d
 80061cc:	0800626d 	.word	0x0800626d
 80061d0:	0800626d 	.word	0x0800626d
 80061d4:	0800626d 	.word	0x0800626d
 80061d8:	0800626d 	.word	0x0800626d
 80061dc:	0800626d 	.word	0x0800626d
 80061e0:	0800626d 	.word	0x0800626d
 80061e4:	0800625b 	.word	0x0800625b
 80061e8:	0800626d 	.word	0x0800626d
 80061ec:	0800626d 	.word	0x0800626d
 80061f0:	0800626d 	.word	0x0800626d
 80061f4:	0800626d 	.word	0x0800626d
 80061f8:	0800626d 	.word	0x0800626d
 80061fc:	0800626d 	.word	0x0800626d
 8006200:	0800626d 	.word	0x0800626d
 8006204:	08006281 	.word	0x08006281
 8006208:	0800626d 	.word	0x0800626d
 800620c:	0800626d 	.word	0x0800626d
 8006210:	0800626d 	.word	0x0800626d
 8006214:	0800626d 	.word	0x0800626d
 8006218:	0800626d 	.word	0x0800626d
 800621c:	0800626d 	.word	0x0800626d
 8006220:	0800626d 	.word	0x0800626d
 8006224:	08006281 	.word	0x08006281
 8006228:	0800626d 	.word	0x0800626d
 800622c:	0800626d 	.word	0x0800626d
 8006230:	0800626d 	.word	0x0800626d
 8006234:	0800626d 	.word	0x0800626d
 8006238:	0800626d 	.word	0x0800626d
 800623c:	0800626d 	.word	0x0800626d
 8006240:	0800626d 	.word	0x0800626d
 8006244:	08006281 	.word	0x08006281
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3304      	adds	r3, #4
 800624c:	2101      	movs	r1, #1
 800624e:	4618      	mov	r0, r3
 8006250:	f001 fc1e 	bl	8007a90 <RCCEx_PLL2_Config>
 8006254:	4603      	mov	r3, r0
 8006256:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006258:	e013      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	3324      	adds	r3, #36	; 0x24
 800625e:	2101      	movs	r1, #1
 8006260:	4618      	mov	r0, r3
 8006262:	f001 fcc7 	bl	8007bf4 <RCCEx_PLL3_Config>
 8006266:	4603      	mov	r3, r0
 8006268:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800626a:	e00a      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	75fb      	strb	r3, [r7, #23]
      break;
 8006270:	e007      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006272:	bf00      	nop
 8006274:	58024400 	.word	0x58024400
 8006278:	58024800 	.word	0x58024800
 800627c:	00ffffcf 	.word	0x00ffffcf
      break;
 8006280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006282:	7dfb      	ldrb	r3, [r7, #23]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d109      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006288:	4b96      	ldr	r3, [pc, #600]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800628a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006294:	4993      	ldr	r1, [pc, #588]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006296:	4313      	orrs	r3, r2
 8006298:	654b      	str	r3, [r1, #84]	; 0x54
 800629a:	e001      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d038      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062b0:	2b05      	cmp	r3, #5
 80062b2:	d821      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80062b4:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80062b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ba:	bf00      	nop
 80062bc:	080062ff 	.word	0x080062ff
 80062c0:	080062d5 	.word	0x080062d5
 80062c4:	080062e7 	.word	0x080062e7
 80062c8:	080062ff 	.word	0x080062ff
 80062cc:	080062ff 	.word	0x080062ff
 80062d0:	080062ff 	.word	0x080062ff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3304      	adds	r3, #4
 80062d8:	2101      	movs	r1, #1
 80062da:	4618      	mov	r0, r3
 80062dc:	f001 fbd8 	bl	8007a90 <RCCEx_PLL2_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80062e4:	e00c      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3324      	adds	r3, #36	; 0x24
 80062ea:	2101      	movs	r1, #1
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 fc81 	bl	8007bf4 <RCCEx_PLL3_Config>
 80062f2:	4603      	mov	r3, r0
 80062f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80062f6:	e003      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	75fb      	strb	r3, [r7, #23]
      break;
 80062fc:	e000      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80062fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006300:	7dfb      	ldrb	r3, [r7, #23]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d109      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006306:	4b77      	ldr	r3, [pc, #476]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630a:	f023 0207 	bic.w	r2, r3, #7
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006312:	4974      	ldr	r1, [pc, #464]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006314:	4313      	orrs	r3, r2
 8006316:	654b      	str	r3, [r1, #84]	; 0x54
 8006318:	e001      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	d03a      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006330:	2b05      	cmp	r3, #5
 8006332:	d821      	bhi.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006334:	a201      	add	r2, pc, #4	; (adr r2, 800633c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633a:	bf00      	nop
 800633c:	0800637f 	.word	0x0800637f
 8006340:	08006355 	.word	0x08006355
 8006344:	08006367 	.word	0x08006367
 8006348:	0800637f 	.word	0x0800637f
 800634c:	0800637f 	.word	0x0800637f
 8006350:	0800637f 	.word	0x0800637f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3304      	adds	r3, #4
 8006358:	2101      	movs	r1, #1
 800635a:	4618      	mov	r0, r3
 800635c:	f001 fb98 	bl	8007a90 <RCCEx_PLL2_Config>
 8006360:	4603      	mov	r3, r0
 8006362:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006364:	e00c      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	3324      	adds	r3, #36	; 0x24
 800636a:	2101      	movs	r1, #1
 800636c:	4618      	mov	r0, r3
 800636e:	f001 fc41 	bl	8007bf4 <RCCEx_PLL3_Config>
 8006372:	4603      	mov	r3, r0
 8006374:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006376:	e003      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	75fb      	strb	r3, [r7, #23]
      break;
 800637c:	e000      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800637e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10a      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006386:	4b57      	ldr	r3, [pc, #348]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638a:	f023 0207 	bic.w	r2, r3, #7
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006394:	4953      	ldr	r1, [pc, #332]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006396:	4313      	orrs	r3, r2
 8006398:	658b      	str	r3, [r1, #88]	; 0x58
 800639a:	e001      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639c:	7dfb      	ldrb	r3, [r7, #23]
 800639e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0320 	and.w	r3, r3, #32
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d04b      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063b6:	d02e      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80063b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063bc:	d828      	bhi.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80063be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c2:	d02a      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80063c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c8:	d822      	bhi.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80063ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063ce:	d026      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80063d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063d4:	d81c      	bhi.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80063d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063da:	d010      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80063dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063e0:	d816      	bhi.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01d      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80063e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063ea:	d111      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3304      	adds	r3, #4
 80063f0:	2100      	movs	r1, #0
 80063f2:	4618      	mov	r0, r3
 80063f4:	f001 fb4c 	bl	8007a90 <RCCEx_PLL2_Config>
 80063f8:	4603      	mov	r3, r0
 80063fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80063fc:	e012      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3324      	adds	r3, #36	; 0x24
 8006402:	2102      	movs	r1, #2
 8006404:	4618      	mov	r0, r3
 8006406:	f001 fbf5 	bl	8007bf4 <RCCEx_PLL3_Config>
 800640a:	4603      	mov	r3, r0
 800640c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800640e:	e009      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	75fb      	strb	r3, [r7, #23]
      break;
 8006414:	e006      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006416:	bf00      	nop
 8006418:	e004      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800641a:	bf00      	nop
 800641c:	e002      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800641e:	bf00      	nop
 8006420:	e000      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006422:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10a      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800642a:	4b2e      	ldr	r3, [pc, #184]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800642c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006438:	492a      	ldr	r1, [pc, #168]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800643a:	4313      	orrs	r3, r2
 800643c:	654b      	str	r3, [r1, #84]	; 0x54
 800643e:	e001      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006440:	7dfb      	ldrb	r3, [r7, #23]
 8006442:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644c:	2b00      	cmp	r3, #0
 800644e:	d04d      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006456:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800645a:	d02e      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800645c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006460:	d828      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006466:	d02a      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646c:	d822      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800646e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006472:	d026      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006474:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006478:	d81c      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800647a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800647e:	d010      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006484:	d816      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d01d      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800648a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800648e:	d111      	bne.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3304      	adds	r3, #4
 8006494:	2100      	movs	r1, #0
 8006496:	4618      	mov	r0, r3
 8006498:	f001 fafa 	bl	8007a90 <RCCEx_PLL2_Config>
 800649c:	4603      	mov	r3, r0
 800649e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80064a0:	e012      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	3324      	adds	r3, #36	; 0x24
 80064a6:	2102      	movs	r1, #2
 80064a8:	4618      	mov	r0, r3
 80064aa:	f001 fba3 	bl	8007bf4 <RCCEx_PLL3_Config>
 80064ae:	4603      	mov	r3, r0
 80064b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80064b2:	e009      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	75fb      	strb	r3, [r7, #23]
      break;
 80064b8:	e006      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80064ba:	bf00      	nop
 80064bc:	e004      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80064be:	bf00      	nop
 80064c0:	e002      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80064c2:	bf00      	nop
 80064c4:	e000      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80064c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10c      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064ce:	4b05      	ldr	r3, [pc, #20]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80064d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064dc:	4901      	ldr	r1, [pc, #4]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	658b      	str	r3, [r1, #88]	; 0x58
 80064e2:	e003      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80064e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d04b      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006502:	d02e      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006504:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006508:	d828      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800650a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800650e:	d02a      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006514:	d822      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006516:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800651a:	d026      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800651c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006520:	d81c      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006522:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006526:	d010      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800652c:	d816      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800652e:	2b00      	cmp	r3, #0
 8006530:	d01d      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006536:	d111      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3304      	adds	r3, #4
 800653c:	2100      	movs	r1, #0
 800653e:	4618      	mov	r0, r3
 8006540:	f001 faa6 	bl	8007a90 <RCCEx_PLL2_Config>
 8006544:	4603      	mov	r3, r0
 8006546:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006548:	e012      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3324      	adds	r3, #36	; 0x24
 800654e:	2102      	movs	r1, #2
 8006550:	4618      	mov	r0, r3
 8006552:	f001 fb4f 	bl	8007bf4 <RCCEx_PLL3_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800655a:	e009      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	75fb      	strb	r3, [r7, #23]
      break;
 8006560:	e006      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006562:	bf00      	nop
 8006564:	e004      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006566:	bf00      	nop
 8006568:	e002      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800656a:	bf00      	nop
 800656c:	e000      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800656e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006570:	7dfb      	ldrb	r3, [r7, #23]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10a      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006576:	4b9d      	ldr	r3, [pc, #628]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006584:	4999      	ldr	r1, [pc, #612]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006586:	4313      	orrs	r3, r2
 8006588:	658b      	str	r3, [r1, #88]	; 0x58
 800658a:	e001      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658c:	7dfb      	ldrb	r3, [r7, #23]
 800658e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01a      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a6:	d10a      	bne.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3324      	adds	r3, #36	; 0x24
 80065ac:	2102      	movs	r1, #2
 80065ae:	4618      	mov	r0, r3
 80065b0:	f001 fb20 	bl	8007bf4 <RCCEx_PLL3_Config>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80065be:	4b8b      	ldr	r3, [pc, #556]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065cc:	4987      	ldr	r1, [pc, #540]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0310 	and.w	r3, r3, #16
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d01a      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e8:	d10a      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3324      	adds	r3, #36	; 0x24
 80065ee:	2102      	movs	r1, #2
 80065f0:	4618      	mov	r0, r3
 80065f2:	f001 faff 	bl	8007bf4 <RCCEx_PLL3_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006600:	4b7a      	ldr	r3, [pc, #488]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800660e:	4977      	ldr	r1, [pc, #476]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006610:	4313      	orrs	r3, r2
 8006612:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d034      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800662a:	d01d      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800662c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006630:	d817      	bhi.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800663a:	d009      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800663c:	e011      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3304      	adds	r3, #4
 8006642:	2100      	movs	r1, #0
 8006644:	4618      	mov	r0, r3
 8006646:	f001 fa23 	bl	8007a90 <RCCEx_PLL2_Config>
 800664a:	4603      	mov	r3, r0
 800664c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800664e:	e00c      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3324      	adds	r3, #36	; 0x24
 8006654:	2102      	movs	r1, #2
 8006656:	4618      	mov	r0, r3
 8006658:	f001 facc 	bl	8007bf4 <RCCEx_PLL3_Config>
 800665c:	4603      	mov	r3, r0
 800665e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006660:	e003      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	75fb      	strb	r3, [r7, #23]
      break;
 8006666:	e000      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800666a:	7dfb      	ldrb	r3, [r7, #23]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10a      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006670:	4b5e      	ldr	r3, [pc, #376]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800667e:	495b      	ldr	r1, [pc, #364]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006680:	4313      	orrs	r3, r2
 8006682:	658b      	str	r3, [r1, #88]	; 0x58
 8006684:	e001      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006686:	7dfb      	ldrb	r3, [r7, #23]
 8006688:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d033      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800669c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066a0:	d01c      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80066a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066a6:	d816      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80066a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ac:	d003      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80066ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066b2:	d007      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80066b4:	e00f      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066b6:	4b4d      	ldr	r3, [pc, #308]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ba:	4a4c      	ldr	r2, [pc, #304]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80066c2:	e00c      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3324      	adds	r3, #36	; 0x24
 80066c8:	2101      	movs	r1, #1
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 fa92 	bl	8007bf4 <RCCEx_PLL3_Config>
 80066d0:	4603      	mov	r3, r0
 80066d2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80066d4:	e003      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	75fb      	strb	r3, [r7, #23]
      break;
 80066da:	e000      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80066dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10a      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066e4:	4b41      	ldr	r3, [pc, #260]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066f2:	493e      	ldr	r1, [pc, #248]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	654b      	str	r3, [r1, #84]	; 0x54
 80066f8:	e001      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
 80066fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d029      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006716:	d007      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006718:	e00f      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800671a:	4b34      	ldr	r3, [pc, #208]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800671c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671e:	4a33      	ldr	r2, [pc, #204]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006724:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006726:	e00b      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3304      	adds	r3, #4
 800672c:	2102      	movs	r1, #2
 800672e:	4618      	mov	r0, r3
 8006730:	f001 f9ae 	bl	8007a90 <RCCEx_PLL2_Config>
 8006734:	4603      	mov	r3, r0
 8006736:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006738:	e002      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	75fb      	strb	r3, [r7, #23]
      break;
 800673e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006740:	7dfb      	ldrb	r3, [r7, #23]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d109      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006746:	4b29      	ldr	r3, [pc, #164]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006752:	4926      	ldr	r1, [pc, #152]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006754:	4313      	orrs	r3, r2
 8006756:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006758:	e001      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675a:	7dfb      	ldrb	r3, [r7, #23]
 800675c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	3324      	adds	r3, #36	; 0x24
 800676e:	2102      	movs	r1, #2
 8006770:	4618      	mov	r0, r3
 8006772:	f001 fa3f 	bl	8007bf4 <RCCEx_PLL3_Config>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d033      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006794:	d017      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800679a:	d811      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800679c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a0:	d013      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80067a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a6:	d80b      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d010      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80067ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b0:	d106      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b2:	4b0e      	ldr	r3, [pc, #56]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b6:	4a0d      	ldr	r2, [pc, #52]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80067be:	e007      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	75fb      	strb	r3, [r7, #23]
      break;
 80067c4:	e004      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80067c6:	bf00      	nop
 80067c8:	e002      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80067ca:	bf00      	nop
 80067cc:	e000      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80067ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10c      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067d6:	4b05      	ldr	r3, [pc, #20]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067e2:	4902      	ldr	r1, [pc, #8]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	654b      	str	r3, [r1, #84]	; 0x54
 80067e8:	e004      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80067ea:	bf00      	nop
 80067ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
 80067f2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d008      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006800:	4b31      	ldr	r3, [pc, #196]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006804:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680c:	492e      	ldr	r1, [pc, #184]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800680e:	4313      	orrs	r3, r2
 8006810:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d009      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800681e:	4b2a      	ldr	r3, [pc, #168]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800682c:	4926      	ldr	r1, [pc, #152]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800682e:	4313      	orrs	r3, r2
 8006830:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800683e:	4b22      	ldr	r3, [pc, #136]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006842:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800684a:	491f      	ldr	r1, [pc, #124]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800684c:	4313      	orrs	r3, r2
 800684e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00d      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800685c:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	4a19      	ldr	r2, [pc, #100]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006862:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006866:	6113      	str	r3, [r2, #16]
 8006868:	4b17      	ldr	r3, [pc, #92]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006872:	4915      	ldr	r1, [pc, #84]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006874:	4313      	orrs	r3, r2
 8006876:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	da08      	bge.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006880:	4b11      	ldr	r3, [pc, #68]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006884:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800688c:	490e      	ldr	r1, [pc, #56]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800688e:	4313      	orrs	r3, r2
 8006890:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d009      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800689e:	4b0a      	ldr	r3, [pc, #40]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ac:	4906      	ldr	r1, [pc, #24]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80068b2:	7dbb      	ldrb	r3, [r7, #22]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	e000      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	58024400 	.word	0x58024400

080068cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b090      	sub	sp, #64	; 0x40
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068da:	f040 8095 	bne.w	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80068de:	4b97      	ldr	r3, [pc, #604]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80068e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	f200 8088 	bhi.w	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80068f0:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80068f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	0800690d 	.word	0x0800690d
 80068fc:	08006935 	.word	0x08006935
 8006900:	0800695d 	.word	0x0800695d
 8006904:	080069f9 	.word	0x080069f9
 8006908:	08006985 	.word	0x08006985
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800690c:	4b8b      	ldr	r3, [pc, #556]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006918:	d108      	bne.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800691a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800691e:	4618      	mov	r0, r3
 8006920:	f000 ff64 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006928:	f000 bc94 	b.w	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006930:	f000 bc90 	b.w	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006934:	4b81      	ldr	r3, [pc, #516]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800693c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006940:	d108      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006942:	f107 0318 	add.w	r3, r7, #24
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fca8 	bl	800729c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006950:	f000 bc80 	b.w	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006958:	f000 bc7c 	b.w	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800695c:	4b77      	ldr	r3, [pc, #476]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006968:	d108      	bne.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800696a:	f107 030c 	add.w	r3, r7, #12
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fde8 	bl	8007544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006978:	f000 bc6c 	b.w	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800697c:	2300      	movs	r3, #0
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006980:	f000 bc68 	b.w	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006984:	4b6d      	ldr	r3, [pc, #436]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006988:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800698c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800698e:	4b6b      	ldr	r3, [pc, #428]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b04      	cmp	r3, #4
 8006998:	d10c      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800699a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699c:	2b00      	cmp	r3, #0
 800699e:	d109      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069a0:	4b66      	ldr	r3, [pc, #408]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	08db      	lsrs	r3, r3, #3
 80069a6:	f003 0303 	and.w	r3, r3, #3
 80069aa:	4a65      	ldr	r2, [pc, #404]	; (8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80069ac:	fa22 f303 	lsr.w	r3, r2, r3
 80069b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b2:	e01f      	b.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069b4:	4b61      	ldr	r3, [pc, #388]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c0:	d106      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80069c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069c8:	d102      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80069ca:	4b5e      	ldr	r3, [pc, #376]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80069cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ce:	e011      	b.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069d0:	4b5a      	ldr	r3, [pc, #360]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069dc:	d106      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80069de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069e4:	d102      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80069e6:	4b58      	ldr	r3, [pc, #352]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80069e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ea:	e003      	b.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80069f0:	f000 bc30 	b.w	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80069f4:	f000 bc2e 	b.w	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80069f8:	4b54      	ldr	r3, [pc, #336]	; (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069fc:	f000 bc2a 	b.w	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a04:	f000 bc26 	b.w	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a0e:	f040 809f 	bne.w	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006a12:	4b4a      	ldr	r3, [pc, #296]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a16:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006a1a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a22:	d04d      	beq.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a2a:	f200 8084 	bhi.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	2bc0      	cmp	r3, #192	; 0xc0
 8006a32:	d07d      	beq.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	2bc0      	cmp	r3, #192	; 0xc0
 8006a38:	d87d      	bhi.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	2b80      	cmp	r3, #128	; 0x80
 8006a3e:	d02d      	beq.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	2b80      	cmp	r3, #128	; 0x80
 8006a44:	d877      	bhi.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	2b40      	cmp	r3, #64	; 0x40
 8006a50:	d012      	beq.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006a52:	e070      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a54:	4b39      	ldr	r3, [pc, #228]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a60:	d107      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 fec0 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a70:	e3f0      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a76:	e3ed      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a78:	4b30      	ldr	r3, [pc, #192]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a84:	d107      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a86:	f107 0318 	add.w	r3, r7, #24
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fc06 	bl	800729c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a94:	e3de      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a9a:	e3db      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a9c:	4b27      	ldr	r3, [pc, #156]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa8:	d107      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aaa:	f107 030c 	add.w	r3, r7, #12
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 fd48 	bl	8007544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ab8:	e3cc      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006abe:	e3c9      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006ac0:	4b1e      	ldr	r3, [pc, #120]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ac8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006aca:	4b1c      	ldr	r3, [pc, #112]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0304 	and.w	r3, r3, #4
 8006ad2:	2b04      	cmp	r3, #4
 8006ad4:	d10c      	bne.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d109      	bne.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006adc:	4b17      	ldr	r3, [pc, #92]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	08db      	lsrs	r3, r3, #3
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	4a16      	ldr	r2, [pc, #88]	; (8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aee:	e01e      	b.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006af0:	4b12      	ldr	r3, [pc, #72]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006afc:	d106      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b04:	d102      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006b06:	4b0f      	ldr	r3, [pc, #60]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b0a:	e010      	b.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b0c:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b18:	d106      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b20:	d102      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006b22:	4b09      	ldr	r3, [pc, #36]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b26:	e002      	b.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006b2c:	e392      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006b2e:	e391      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b30:	4b06      	ldr	r3, [pc, #24]	; (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006b32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b34:	e38e      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b3a:	e38b      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006b3c:	58024400 	.word	0x58024400
 8006b40:	03d09000 	.word	0x03d09000
 8006b44:	003d0900 	.word	0x003d0900
 8006b48:	017d7840 	.word	0x017d7840
 8006b4c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b56:	f040 809c 	bne.w	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006b5a:	4b9d      	ldr	r3, [pc, #628]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b5e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006b62:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b6a:	d054      	beq.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b72:	f200 808b 	bhi.w	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b7c:	f000 8083 	beq.w	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b86:	f200 8081 	bhi.w	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b90:	d02f      	beq.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b98:	d878      	bhi.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d004      	beq.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ba6:	d012      	beq.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8006ba8:	e070      	b.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006baa:	4b89      	ldr	r3, [pc, #548]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bb6:	d107      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 fe15 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bc6:	e345      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bcc:	e342      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bce:	4b80      	ldr	r3, [pc, #512]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bda:	d107      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bdc:	f107 0318 	add.w	r3, r7, #24
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fb5b 	bl	800729c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bea:	e333      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bf0:	e330      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bf2:	4b77      	ldr	r3, [pc, #476]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bfe:	d107      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c00:	f107 030c 	add.w	r3, r7, #12
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fc9d 	bl	8007544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c0e:	e321      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006c10:	2300      	movs	r3, #0
 8006c12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c14:	e31e      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006c16:	4b6e      	ldr	r3, [pc, #440]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c20:	4b6b      	ldr	r3, [pc, #428]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d10c      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c32:	4b67      	ldr	r3, [pc, #412]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	08db      	lsrs	r3, r3, #3
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	4a65      	ldr	r2, [pc, #404]	; (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c44:	e01e      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c46:	4b62      	ldr	r3, [pc, #392]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c52:	d106      	bne.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c5a:	d102      	bne.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006c5c:	4b5e      	ldr	r3, [pc, #376]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c60:	e010      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c62:	4b5b      	ldr	r3, [pc, #364]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c6e:	d106      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c76:	d102      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006c78:	4b58      	ldr	r3, [pc, #352]	; (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c7c:	e002      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006c82:	e2e7      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006c84:	e2e6      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c86:	4b56      	ldr	r3, [pc, #344]	; (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c8a:	e2e3      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c90:	e2e0      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c98:	f040 80a7 	bne.w	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006c9c:	4b4c      	ldr	r3, [pc, #304]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006ca4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cac:	d055      	beq.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cb4:	f200 8096 	bhi.w	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006cbe:	f000 8084 	beq.w	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006cc8:	f200 808c 	bhi.w	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cd2:	d030      	beq.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cda:	f200 8083 	bhi.w	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d004      	beq.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cea:	d012      	beq.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006cec:	e07a      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cee:	4b38      	ldr	r3, [pc, #224]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cfa:	d107      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 fd73 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d0a:	e2a3      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d10:	e2a0      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d12:	4b2f      	ldr	r3, [pc, #188]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d1e:	d107      	bne.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d20:	f107 0318 	add.w	r3, r7, #24
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fab9 	bl	800729c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006d2e:	e291      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006d30:	2300      	movs	r3, #0
 8006d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d34:	e28e      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d36:	4b26      	ldr	r3, [pc, #152]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d42:	d107      	bne.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d44:	f107 030c 	add.w	r3, r7, #12
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 fbfb 	bl	8007544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d52:	e27f      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006d54:	2300      	movs	r3, #0
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d58:	e27c      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006d5a:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d62:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d64:	4b1a      	ldr	r3, [pc, #104]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d10c      	bne.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d109      	bne.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d76:	4b16      	ldr	r3, [pc, #88]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	08db      	lsrs	r3, r3, #3
 8006d7c:	f003 0303 	and.w	r3, r3, #3
 8006d80:	4a14      	ldr	r2, [pc, #80]	; (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006d82:	fa22 f303 	lsr.w	r3, r2, r3
 8006d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d88:	e01e      	b.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d8a:	4b11      	ldr	r3, [pc, #68]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d96:	d106      	bne.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d9e:	d102      	bne.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006da0:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da4:	e010      	b.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006da6:	4b0a      	ldr	r3, [pc, #40]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006db2:	d106      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dba:	d102      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006dbc:	4b07      	ldr	r3, [pc, #28]	; (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dc0:	e002      	b.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006dc6:	e245      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006dc8:	e244      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006dca:	4b05      	ldr	r3, [pc, #20]	; (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dce:	e241      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006dd0:	58024400 	.word	0x58024400
 8006dd4:	03d09000 	.word	0x03d09000
 8006dd8:	003d0900 	.word	0x003d0900
 8006ddc:	017d7840 	.word	0x017d7840
 8006de0:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006de8:	e234      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df0:	f040 809c 	bne.w	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006df4:	4b9b      	ldr	r3, [pc, #620]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006dfc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e04:	d054      	beq.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8006e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e0c:	f200 808b 	bhi.w	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e16:	f000 8083 	beq.w	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e20:	f200 8081 	bhi.w	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e2a:	d02f      	beq.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e32:	d878      	bhi.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d004      	beq.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e40:	d012      	beq.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006e42:	e070      	b.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e44:	4b87      	ldr	r3, [pc, #540]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e50:	d107      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fcc8 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e60:	e1f8      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e66:	e1f5      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e68:	4b7e      	ldr	r3, [pc, #504]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e74:	d107      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e76:	f107 0318 	add.w	r3, r7, #24
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 fa0e 	bl	800729c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e84:	e1e6      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e8a:	e1e3      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e8c:	4b75      	ldr	r3, [pc, #468]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e98:	d107      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e9a:	f107 030c 	add.w	r3, r7, #12
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fb50 	bl	8007544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ea8:	e1d4      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eae:	e1d1      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006eb0:	4b6c      	ldr	r3, [pc, #432]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006eb8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006eba:	4b6a      	ldr	r3, [pc, #424]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0304 	and.w	r3, r3, #4
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d10c      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d109      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ecc:	4b65      	ldr	r3, [pc, #404]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	08db      	lsrs	r3, r3, #3
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	4a64      	ldr	r2, [pc, #400]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8006ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8006edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ede:	e01e      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ee0:	4b60      	ldr	r3, [pc, #384]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eec:	d106      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8006eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ef4:	d102      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006ef6:	4b5d      	ldr	r3, [pc, #372]	; (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8006ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006efa:	e010      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006efc:	4b59      	ldr	r3, [pc, #356]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f08:	d106      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f10:	d102      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006f12:	4b57      	ldr	r3, [pc, #348]	; (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f16:	e002      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006f1c:	e19a      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006f1e:	e199      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f20:	4b54      	ldr	r3, [pc, #336]	; (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f24:	e196      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006f26:	2300      	movs	r3, #0
 8006f28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f2a:	e193      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f32:	d173      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006f34:	4b4b      	ldr	r3, [pc, #300]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f3c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f44:	d02f      	beq.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f4c:	d863      	bhi.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d004      	beq.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8006f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f5a:	d012      	beq.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8006f5c:	e05b      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f5e:	4b41      	ldr	r3, [pc, #260]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f6a:	d107      	bne.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f6c:	f107 0318 	add.w	r3, r7, #24
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 f993 	bl	800729c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f7a:	e16b      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f80:	e168      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f82:	4b38      	ldr	r3, [pc, #224]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f8e:	d107      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f90:	f107 030c 	add.w	r3, r7, #12
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 fad5 	bl	8007544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f9e:	e159      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fa4:	e156      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006fa6:	4b2f      	ldr	r3, [pc, #188]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006faa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fae:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fb0:	4b2c      	ldr	r3, [pc, #176]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d10c      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8006fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d109      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fc2:	4b28      	ldr	r3, [pc, #160]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	08db      	lsrs	r3, r3, #3
 8006fc8:	f003 0303 	and.w	r3, r3, #3
 8006fcc:	4a26      	ldr	r2, [pc, #152]	; (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8006fce:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd4:	e01e      	b.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fd6:	4b23      	ldr	r3, [pc, #140]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fe2:	d106      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8006fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fea:	d102      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006fec:	4b1f      	ldr	r3, [pc, #124]	; (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ff0:	e010      	b.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ff2:	4b1c      	ldr	r3, [pc, #112]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ffe:	d106      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8007000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007006:	d102      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007008:	4b19      	ldr	r3, [pc, #100]	; (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800700a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800700c:	e002      	b.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007012:	e11f      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007014:	e11e      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800701a:	e11b      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007022:	d13e      	bne.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007024:	4b0f      	ldr	r3, [pc, #60]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800702c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800702e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007030:	2b00      	cmp	r3, #0
 8007032:	d004      	beq.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800703a:	d01d      	beq.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800703c:	e02e      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800703e:	4b09      	ldr	r3, [pc, #36]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007046:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800704a:	d107      	bne.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800704c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007050:	4618      	mov	r0, r3
 8007052:	f000 fbcb 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800705a:	e0fb      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800705c:	2300      	movs	r3, #0
 800705e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007060:	e0f8      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007062:	bf00      	nop
 8007064:	58024400 	.word	0x58024400
 8007068:	03d09000 	.word	0x03d09000
 800706c:	003d0900 	.word	0x003d0900
 8007070:	017d7840 	.word	0x017d7840
 8007074:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007078:	4b79      	ldr	r3, [pc, #484]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007080:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007084:	d107      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007086:	f107 0318 	add.w	r3, r7, #24
 800708a:	4618      	mov	r0, r3
 800708c:	f000 f906 	bl	800729c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007094:	e0de      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800709a:	e0db      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800709c:	2300      	movs	r3, #0
 800709e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070a0:	e0d8      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070a8:	f040 8085 	bne.w	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80070ac:	4b6c      	ldr	r3, [pc, #432]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80070b4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80070b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070bc:	d06b      	beq.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070c4:	d874      	bhi.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80070c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070cc:	d056      	beq.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80070ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d4:	d86c      	bhi.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80070d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070dc:	d03b      	beq.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070e4:	d864      	bhi.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80070e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ec:	d021      	beq.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070f4:	d85c      	bhi.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d004      	beq.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007102:	d004      	beq.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8007104:	e054      	b.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007106:	f000 f8b3 	bl	8007270 <HAL_RCCEx_GetD3PCLK1Freq>
 800710a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800710c:	e0a2      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800710e:	4b54      	ldr	r3, [pc, #336]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800711a:	d107      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800711c:	f107 0318 	add.w	r3, r7, #24
 8007120:	4618      	mov	r0, r3
 8007122:	f000 f8bb 	bl	800729c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800712a:	e093      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800712c:	2300      	movs	r3, #0
 800712e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007130:	e090      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007132:	4b4b      	ldr	r3, [pc, #300]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800713a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800713e:	d107      	bne.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007140:	f107 030c 	add.w	r3, r7, #12
 8007144:	4618      	mov	r0, r3
 8007146:	f000 f9fd 	bl	8007544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800714e:	e081      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007150:	2300      	movs	r3, #0
 8007152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007154:	e07e      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007156:	4b42      	ldr	r3, [pc, #264]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0304 	and.w	r3, r3, #4
 800715e:	2b04      	cmp	r3, #4
 8007160:	d109      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007162:	4b3f      	ldr	r3, [pc, #252]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	08db      	lsrs	r3, r3, #3
 8007168:	f003 0303 	and.w	r3, r3, #3
 800716c:	4a3d      	ldr	r2, [pc, #244]	; (8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800716e:	fa22 f303 	lsr.w	r3, r2, r3
 8007172:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007174:	e06e      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800717a:	e06b      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800717c:	4b38      	ldr	r3, [pc, #224]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007188:	d102      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800718a:	4b37      	ldr	r3, [pc, #220]	; (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800718c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800718e:	e061      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007190:	2300      	movs	r3, #0
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007194:	e05e      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007196:	4b32      	ldr	r3, [pc, #200]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071a2:	d102      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 80071a4:	4b31      	ldr	r3, [pc, #196]	; (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071a8:	e054      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ae:	e051      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071b4:	e04e      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071bc:	d148      	bne.n	8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80071be:	4b28      	ldr	r3, [pc, #160]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80071c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071c6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80071c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071ce:	d02a      	beq.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80071d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071d6:	d838      	bhi.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d004      	beq.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071e4:	d00d      	beq.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80071e6:	e030      	b.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80071e8:	4b1d      	ldr	r3, [pc, #116]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071f4:	d102      	bne.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 80071f6:	4b1d      	ldr	r3, [pc, #116]	; (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80071f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071fa:	e02b      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007200:	e028      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007202:	4b17      	ldr	r3, [pc, #92]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800720a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800720e:	d107      	bne.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007214:	4618      	mov	r0, r3
 8007216:	f000 fae9 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800721e:	e019      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007220:	2300      	movs	r3, #0
 8007222:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007224:	e016      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007226:	4b0e      	ldr	r3, [pc, #56]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800722e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007232:	d107      	bne.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007234:	f107 0318 	add.w	r3, r7, #24
 8007238:	4618      	mov	r0, r3
 800723a:	f000 f82f 	bl	800729c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007242:	e007      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007244:	2300      	movs	r3, #0
 8007246:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007248:	e004      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800724e:	e001      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8007250:	2300      	movs	r3, #0
 8007252:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007256:	4618      	mov	r0, r3
 8007258:	3740      	adds	r7, #64	; 0x40
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	58024400 	.word	0x58024400
 8007264:	03d09000 	.word	0x03d09000
 8007268:	003d0900 	.word	0x003d0900
 800726c:	017d7840 	.word	0x017d7840

08007270 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007274:	f7fe fb88 	bl	8005988 <HAL_RCC_GetHCLKFreq>
 8007278:	4602      	mov	r2, r0
 800727a:	4b06      	ldr	r3, [pc, #24]	; (8007294 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	091b      	lsrs	r3, r3, #4
 8007280:	f003 0307 	and.w	r3, r3, #7
 8007284:	4904      	ldr	r1, [pc, #16]	; (8007298 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007286:	5ccb      	ldrb	r3, [r1, r3]
 8007288:	f003 031f 	and.w	r3, r3, #31
 800728c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007290:	4618      	mov	r0, r3
 8007292:	bd80      	pop	{r7, pc}
 8007294:	58024400 	.word	0x58024400
 8007298:	0800b378 	.word	0x0800b378

0800729c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800729c:	b480      	push	{r7}
 800729e:	b089      	sub	sp, #36	; 0x24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072a4:	4ba1      	ldr	r3, [pc, #644]	; (800752c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80072ae:	4b9f      	ldr	r3, [pc, #636]	; (800752c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b2:	0b1b      	lsrs	r3, r3, #12
 80072b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80072ba:	4b9c      	ldr	r3, [pc, #624]	; (800752c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	091b      	lsrs	r3, r3, #4
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80072c6:	4b99      	ldr	r3, [pc, #612]	; (800752c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ca:	08db      	lsrs	r3, r3, #3
 80072cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8111 	beq.w	800750c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	f000 8083 	beq.w	80073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	f200 80a1 	bhi.w	800743c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d056      	beq.n	80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007306:	e099      	b.n	800743c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007308:	4b88      	ldr	r3, [pc, #544]	; (800752c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0320 	and.w	r3, r3, #32
 8007310:	2b00      	cmp	r3, #0
 8007312:	d02d      	beq.n	8007370 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007314:	4b85      	ldr	r3, [pc, #532]	; (800752c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	08db      	lsrs	r3, r3, #3
 800731a:	f003 0303 	and.w	r3, r3, #3
 800731e:	4a84      	ldr	r2, [pc, #528]	; (8007530 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007320:	fa22 f303 	lsr.w	r3, r2, r3
 8007324:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	ee07 3a90 	vmov	s15, r3
 800732c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733e:	4b7b      	ldr	r3, [pc, #492]	; (800752c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007352:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800736e:	e087      	b.n	8007480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007538 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800737e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007382:	4b6a      	ldr	r3, [pc, #424]	; (800752c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007392:	ed97 6a03 	vldr	s12, [r7, #12]
 8007396:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800739a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800739e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073b2:	e065      	b.n	8007480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800753c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c6:	4b59      	ldr	r3, [pc, #356]	; (800752c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073f6:	e043      	b.n	8007480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007402:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007540 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740a:	4b48      	ldr	r3, [pc, #288]	; (800752c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741a:	ed97 6a03 	vldr	s12, [r7, #12]
 800741e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800742e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800743a:	e021      	b.n	8007480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007446:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800753c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800744a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744e:	4b37      	ldr	r3, [pc, #220]	; (800752c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007462:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800747e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007480:	4b2a      	ldr	r3, [pc, #168]	; (800752c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007484:	0a5b      	lsrs	r3, r3, #9
 8007486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800749a:	edd7 6a07 	vldr	s13, [r7, #28]
 800749e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074a6:	ee17 2a90 	vmov	r2, s15
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80074ae:	4b1f      	ldr	r3, [pc, #124]	; (800752c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b2:	0c1b      	lsrs	r3, r3, #16
 80074b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b8:	ee07 3a90 	vmov	s15, r3
 80074bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80074cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074d4:	ee17 2a90 	vmov	r2, s15
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80074dc:	4b13      	ldr	r3, [pc, #76]	; (800752c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e0:	0e1b      	lsrs	r3, r3, #24
 80074e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007502:	ee17 2a90 	vmov	r2, s15
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800750a:	e008      	b.n	800751e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	609a      	str	r2, [r3, #8]
}
 800751e:	bf00      	nop
 8007520:	3724      	adds	r7, #36	; 0x24
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	58024400 	.word	0x58024400
 8007530:	03d09000 	.word	0x03d09000
 8007534:	46000000 	.word	0x46000000
 8007538:	4c742400 	.word	0x4c742400
 800753c:	4a742400 	.word	0x4a742400
 8007540:	4bbebc20 	.word	0x4bbebc20

08007544 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007544:	b480      	push	{r7}
 8007546:	b089      	sub	sp, #36	; 0x24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800754c:	4ba1      	ldr	r3, [pc, #644]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800754e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007550:	f003 0303 	and.w	r3, r3, #3
 8007554:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007556:	4b9f      	ldr	r3, [pc, #636]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755a:	0d1b      	lsrs	r3, r3, #20
 800755c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007560:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007562:	4b9c      	ldr	r3, [pc, #624]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007566:	0a1b      	lsrs	r3, r3, #8
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800756e:	4b99      	ldr	r3, [pc, #612]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007572:	08db      	lsrs	r3, r3, #3
 8007574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	fb02 f303 	mul.w	r3, r2, r3
 800757e:	ee07 3a90 	vmov	s15, r3
 8007582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007586:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 8111 	beq.w	80077b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	2b02      	cmp	r3, #2
 8007596:	f000 8083 	beq.w	80076a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	2b02      	cmp	r3, #2
 800759e:	f200 80a1 	bhi.w	80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d003      	beq.n	80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d056      	beq.n	800765c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80075ae:	e099      	b.n	80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075b0:	4b88      	ldr	r3, [pc, #544]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0320 	and.w	r3, r3, #32
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d02d      	beq.n	8007618 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075bc:	4b85      	ldr	r3, [pc, #532]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	08db      	lsrs	r3, r3, #3
 80075c2:	f003 0303 	and.w	r3, r3, #3
 80075c6:	4a84      	ldr	r2, [pc, #528]	; (80077d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80075c8:	fa22 f303 	lsr.w	r3, r2, r3
 80075cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	ee07 3a90 	vmov	s15, r3
 80075d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e6:	4b7b      	ldr	r3, [pc, #492]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ee:	ee07 3a90 	vmov	s15, r3
 80075f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800760a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007612:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007616:	e087      	b.n	8007728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	ee07 3a90 	vmov	s15, r3
 800761e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007622:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80077e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762a:	4b6a      	ldr	r3, [pc, #424]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763a:	ed97 6a03 	vldr	s12, [r7, #12]
 800763e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800764e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800765a:	e065      	b.n	8007728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80077e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800766a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800766e:	4b59      	ldr	r3, [pc, #356]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800767e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007682:	eddf 5a56 	vldr	s11, [pc, #344]	; 80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800768e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800769e:	e043      	b.n	8007728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80077e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80076ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b2:	4b48      	ldr	r3, [pc, #288]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076e2:	e021      	b.n	8007728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80077e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f6:	4b37      	ldr	r3, [pc, #220]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007706:	ed97 6a03 	vldr	s12, [r7, #12]
 800770a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800770e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800771a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800771e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007722:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007726:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007728:	4b2a      	ldr	r3, [pc, #168]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800772a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772c:	0a5b      	lsrs	r3, r3, #9
 800772e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800773e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007742:	edd7 6a07 	vldr	s13, [r7, #28]
 8007746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800774a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800774e:	ee17 2a90 	vmov	r2, s15
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007756:	4b1f      	ldr	r3, [pc, #124]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	0c1b      	lsrs	r3, r3, #16
 800775c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007760:	ee07 3a90 	vmov	s15, r3
 8007764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800776c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007770:	edd7 6a07 	vldr	s13, [r7, #28]
 8007774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800777c:	ee17 2a90 	vmov	r2, s15
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007784:	4b13      	ldr	r3, [pc, #76]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	0e1b      	lsrs	r3, r3, #24
 800778a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007796:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800779a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800779e:	edd7 6a07 	vldr	s13, [r7, #28]
 80077a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077aa:	ee17 2a90 	vmov	r2, s15
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80077b2:	e008      	b.n	80077c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	609a      	str	r2, [r3, #8]
}
 80077c6:	bf00      	nop
 80077c8:	3724      	adds	r7, #36	; 0x24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	58024400 	.word	0x58024400
 80077d8:	03d09000 	.word	0x03d09000
 80077dc:	46000000 	.word	0x46000000
 80077e0:	4c742400 	.word	0x4c742400
 80077e4:	4a742400 	.word	0x4a742400
 80077e8:	4bbebc20 	.word	0x4bbebc20

080077ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b089      	sub	sp, #36	; 0x24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077f4:	4ba0      	ldr	r3, [pc, #640]	; (8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	f003 0303 	and.w	r3, r3, #3
 80077fc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80077fe:	4b9e      	ldr	r3, [pc, #632]	; (8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007802:	091b      	lsrs	r3, r3, #4
 8007804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007808:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800780a:	4b9b      	ldr	r3, [pc, #620]	; (8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800780c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007814:	4b98      	ldr	r3, [pc, #608]	; (8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007818:	08db      	lsrs	r3, r3, #3
 800781a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	fb02 f303 	mul.w	r3, r2, r3
 8007824:	ee07 3a90 	vmov	s15, r3
 8007828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800782c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 8111 	beq.w	8007a5a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	2b02      	cmp	r3, #2
 800783c:	f000 8083 	beq.w	8007946 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	2b02      	cmp	r3, #2
 8007844:	f200 80a1 	bhi.w	800798a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d056      	beq.n	8007902 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007854:	e099      	b.n	800798a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007856:	4b88      	ldr	r3, [pc, #544]	; (8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0320 	and.w	r3, r3, #32
 800785e:	2b00      	cmp	r3, #0
 8007860:	d02d      	beq.n	80078be <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007862:	4b85      	ldr	r3, [pc, #532]	; (8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	08db      	lsrs	r3, r3, #3
 8007868:	f003 0303 	and.w	r3, r3, #3
 800786c:	4a83      	ldr	r2, [pc, #524]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800786e:	fa22 f303 	lsr.w	r3, r2, r3
 8007872:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	ee07 3a90 	vmov	s15, r3
 8007884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007888:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800788c:	4b7a      	ldr	r3, [pc, #488]	; (8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800788e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007894:	ee07 3a90 	vmov	s15, r3
 8007898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800789c:	ed97 6a03 	vldr	s12, [r7, #12]
 80078a0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007a80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80078bc:	e087      	b.n	80079ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	ee07 3a90 	vmov	s15, r3
 80078c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007a84 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80078cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d0:	4b69      	ldr	r3, [pc, #420]	; (8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d8:	ee07 3a90 	vmov	s15, r3
 80078dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80078e4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007a80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007900:	e065      	b.n	80079ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	ee07 3a90 	vmov	s15, r3
 8007908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007a88 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007914:	4b58      	ldr	r3, [pc, #352]	; (8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800791c:	ee07 3a90 	vmov	s15, r3
 8007920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007924:	ed97 6a03 	vldr	s12, [r7, #12]
 8007928:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007a80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800792c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007934:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007938:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800793c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007940:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007944:	e043      	b.n	80079ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	ee07 3a90 	vmov	s15, r3
 800794c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007950:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007958:	4b47      	ldr	r3, [pc, #284]	; (8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007960:	ee07 3a90 	vmov	s15, r3
 8007964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007968:	ed97 6a03 	vldr	s12, [r7, #12]
 800796c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007a80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800797c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007984:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007988:	e021      	b.n	80079ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	ee07 3a90 	vmov	s15, r3
 8007990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007994:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007a84 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800799c:	4b36      	ldr	r3, [pc, #216]	; (8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800799e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a4:	ee07 3a90 	vmov	s15, r3
 80079a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80079b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007a80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80079ce:	4b2a      	ldr	r3, [pc, #168]	; (8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	0a5b      	lsrs	r3, r3, #9
 80079d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d8:	ee07 3a90 	vmov	s15, r3
 80079dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80079ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079f4:	ee17 2a90 	vmov	r2, s15
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80079fc:	4b1e      	ldr	r3, [pc, #120]	; (8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a00:	0c1b      	lsrs	r3, r3, #16
 8007a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a06:	ee07 3a90 	vmov	s15, r3
 8007a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a16:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a22:	ee17 2a90 	vmov	r2, s15
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007a2a:	4b13      	ldr	r3, [pc, #76]	; (8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2e:	0e1b      	lsrs	r3, r3, #24
 8007a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a34:	ee07 3a90 	vmov	s15, r3
 8007a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a44:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a50:	ee17 2a90 	vmov	r2, s15
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007a58:	e008      	b.n	8007a6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	609a      	str	r2, [r3, #8]
}
 8007a6c:	bf00      	nop
 8007a6e:	3724      	adds	r7, #36	; 0x24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	58024400 	.word	0x58024400
 8007a7c:	03d09000 	.word	0x03d09000
 8007a80:	46000000 	.word	0x46000000
 8007a84:	4c742400 	.word	0x4c742400
 8007a88:	4a742400 	.word	0x4a742400
 8007a8c:	4bbebc20 	.word	0x4bbebc20

08007a90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a9e:	4b53      	ldr	r3, [pc, #332]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d101      	bne.n	8007aae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e099      	b.n	8007be2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007aae:	4b4f      	ldr	r3, [pc, #316]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a4e      	ldr	r2, [pc, #312]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007ab4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aba:	f7fa f8cf 	bl	8001c5c <HAL_GetTick>
 8007abe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ac0:	e008      	b.n	8007ad4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007ac2:	f7fa f8cb 	bl	8001c5c <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d901      	bls.n	8007ad4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e086      	b.n	8007be2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ad4:	4b45      	ldr	r3, [pc, #276]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1f0      	bne.n	8007ac2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007ae0:	4b42      	ldr	r3, [pc, #264]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	031b      	lsls	r3, r3, #12
 8007aee:	493f      	ldr	r1, [pc, #252]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	628b      	str	r3, [r1, #40]	; 0x28
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	025b      	lsls	r3, r3, #9
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	041b      	lsls	r3, r3, #16
 8007b12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b16:	431a      	orrs	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	061b      	lsls	r3, r3, #24
 8007b20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b24:	4931      	ldr	r1, [pc, #196]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b2a:	4b30      	ldr	r3, [pc, #192]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	492d      	ldr	r1, [pc, #180]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b3c:	4b2b      	ldr	r3, [pc, #172]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	f023 0220 	bic.w	r2, r3, #32
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	4928      	ldr	r1, [pc, #160]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b4e:	4b27      	ldr	r3, [pc, #156]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	4a26      	ldr	r2, [pc, #152]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007b54:	f023 0310 	bic.w	r3, r3, #16
 8007b58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b5a:	4b24      	ldr	r3, [pc, #144]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b5e:	4b24      	ldr	r3, [pc, #144]	; (8007bf0 <RCCEx_PLL2_Config+0x160>)
 8007b60:	4013      	ands	r3, r2
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	69d2      	ldr	r2, [r2, #28]
 8007b66:	00d2      	lsls	r2, r2, #3
 8007b68:	4920      	ldr	r1, [pc, #128]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b6e:	4b1f      	ldr	r3, [pc, #124]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b72:	4a1e      	ldr	r2, [pc, #120]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007b74:	f043 0310 	orr.w	r3, r3, #16
 8007b78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d106      	bne.n	8007b8e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b80:	4b1a      	ldr	r3, [pc, #104]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b84:	4a19      	ldr	r2, [pc, #100]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007b86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b8c:	e00f      	b.n	8007bae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d106      	bne.n	8007ba2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b94:	4b15      	ldr	r3, [pc, #84]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	4a14      	ldr	r2, [pc, #80]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ba0:	e005      	b.n	8007bae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007ba2:	4b12      	ldr	r3, [pc, #72]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	4a11      	ldr	r2, [pc, #68]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007bae:	4b0f      	ldr	r3, [pc, #60]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a0e      	ldr	r2, [pc, #56]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007bb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bba:	f7fa f84f 	bl	8001c5c <HAL_GetTick>
 8007bbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bc0:	e008      	b.n	8007bd4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007bc2:	f7fa f84b 	bl	8001c5c <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d901      	bls.n	8007bd4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e006      	b.n	8007be2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bd4:	4b05      	ldr	r3, [pc, #20]	; (8007bec <RCCEx_PLL2_Config+0x15c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0f0      	beq.n	8007bc2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	58024400 	.word	0x58024400
 8007bf0:	ffff0007 	.word	0xffff0007

08007bf4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c02:	4b53      	ldr	r3, [pc, #332]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c06:	f003 0303 	and.w	r3, r3, #3
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d101      	bne.n	8007c12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e099      	b.n	8007d46 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c12:	4b4f      	ldr	r3, [pc, #316]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a4e      	ldr	r2, [pc, #312]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c1e:	f7fa f81d 	bl	8001c5c <HAL_GetTick>
 8007c22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c24:	e008      	b.n	8007c38 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007c26:	f7fa f819 	bl	8001c5c <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d901      	bls.n	8007c38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e086      	b.n	8007d46 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c38:	4b45      	ldr	r3, [pc, #276]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1f0      	bne.n	8007c26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c44:	4b42      	ldr	r3, [pc, #264]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c48:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	051b      	lsls	r3, r3, #20
 8007c52:	493f      	ldr	r1, [pc, #252]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	628b      	str	r3, [r1, #40]	; 0x28
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	025b      	lsls	r3, r3, #9
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	041b      	lsls	r3, r3, #16
 8007c76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	061b      	lsls	r3, r3, #24
 8007c84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c88:	4931      	ldr	r1, [pc, #196]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c8e:	4b30      	ldr	r3, [pc, #192]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	492d      	ldr	r1, [pc, #180]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ca0:	4b2b      	ldr	r3, [pc, #172]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	4928      	ldr	r1, [pc, #160]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007cb2:	4b27      	ldr	r3, [pc, #156]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb6:	4a26      	ldr	r2, [pc, #152]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007cbe:	4b24      	ldr	r3, [pc, #144]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cc2:	4b24      	ldr	r3, [pc, #144]	; (8007d54 <RCCEx_PLL3_Config+0x160>)
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	69d2      	ldr	r2, [r2, #28]
 8007cca:	00d2      	lsls	r2, r2, #3
 8007ccc:	4920      	ldr	r1, [pc, #128]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007cd2:	4b1f      	ldr	r3, [pc, #124]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	4a1e      	ldr	r2, [pc, #120]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d106      	bne.n	8007cf2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007ce4:	4b1a      	ldr	r3, [pc, #104]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	4a19      	ldr	r2, [pc, #100]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007cea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007cee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cf0:	e00f      	b.n	8007d12 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d106      	bne.n	8007d06 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007cf8:	4b15      	ldr	r3, [pc, #84]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfc:	4a14      	ldr	r2, [pc, #80]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007cfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d04:	e005      	b.n	8007d12 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d06:	4b12      	ldr	r3, [pc, #72]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0a:	4a11      	ldr	r2, [pc, #68]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007d0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d12:	4b0f      	ldr	r3, [pc, #60]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a0e      	ldr	r2, [pc, #56]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d1e:	f7f9 ff9d 	bl	8001c5c <HAL_GetTick>
 8007d22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d24:	e008      	b.n	8007d38 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d26:	f7f9 ff99 	bl	8001c5c <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d901      	bls.n	8007d38 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e006      	b.n	8007d46 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d38:	4b05      	ldr	r3, [pc, #20]	; (8007d50 <RCCEx_PLL3_Config+0x15c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d0f0      	beq.n	8007d26 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	58024400 	.word	0x58024400
 8007d54:	ffff0007 	.word	0xffff0007

08007d58 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e0f1      	b.n	8007f4e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a78      	ldr	r2, [pc, #480]	; (8007f58 <HAL_SPI_Init+0x200>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d00f      	beq.n	8007d9a <HAL_SPI_Init+0x42>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a77      	ldr	r2, [pc, #476]	; (8007f5c <HAL_SPI_Init+0x204>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00a      	beq.n	8007d9a <HAL_SPI_Init+0x42>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a75      	ldr	r2, [pc, #468]	; (8007f60 <HAL_SPI_Init+0x208>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d005      	beq.n	8007d9a <HAL_SPI_Init+0x42>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	2b0f      	cmp	r3, #15
 8007d94:	d901      	bls.n	8007d9a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e0d9      	b.n	8007f4e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f8e2 	bl	8007f64 <SPI_GetPacketSize>
 8007da0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a6c      	ldr	r2, [pc, #432]	; (8007f58 <HAL_SPI_Init+0x200>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d00c      	beq.n	8007dc6 <HAL_SPI_Init+0x6e>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a6a      	ldr	r2, [pc, #424]	; (8007f5c <HAL_SPI_Init+0x204>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d007      	beq.n	8007dc6 <HAL_SPI_Init+0x6e>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a69      	ldr	r2, [pc, #420]	; (8007f60 <HAL_SPI_Init+0x208>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d002      	beq.n	8007dc6 <HAL_SPI_Init+0x6e>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2b08      	cmp	r3, #8
 8007dc4:	d811      	bhi.n	8007dea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007dca:	4a63      	ldr	r2, [pc, #396]	; (8007f58 <HAL_SPI_Init+0x200>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d009      	beq.n	8007de4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a61      	ldr	r2, [pc, #388]	; (8007f5c <HAL_SPI_Init+0x204>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d004      	beq.n	8007de4 <HAL_SPI_Init+0x8c>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a60      	ldr	r2, [pc, #384]	; (8007f60 <HAL_SPI_Init+0x208>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d104      	bne.n	8007dee <HAL_SPI_Init+0x96>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b10      	cmp	r3, #16
 8007de8:	d901      	bls.n	8007dee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e0af      	b.n	8007f4e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d106      	bne.n	8007e08 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7f9 f9ee 	bl	80011e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f022 0201 	bic.w	r2, r2, #1
 8007e1e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007e2a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e34:	d119      	bne.n	8007e6a <HAL_SPI_Init+0x112>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e3e:	d103      	bne.n	8007e48 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d008      	beq.n	8007e5a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10c      	bne.n	8007e6a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007e54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e58:	d107      	bne.n	8007e6a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e68:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	69da      	ldr	r2, [r3, #28]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e72:	431a      	orrs	r2, r3
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	431a      	orrs	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7c:	ea42 0103 	orr.w	r1, r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	68da      	ldr	r2, [r3, #12]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	430a      	orrs	r2, r1
 8007e8a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	431a      	orrs	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	431a      	orrs	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eca:	ea42 0103 	orr.w	r1, r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d113      	bne.n	8007f0a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ef4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f08:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 0201 	bic.w	r2, r2, #1
 8007f18:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00a      	beq.n	8007f3c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	40013000 	.word	0x40013000
 8007f5c:	40003800 	.word	0x40003800
 8007f60:	40003c00 	.word	0x40003c00

08007f64 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f70:	095b      	lsrs	r3, r3, #5
 8007f72:	3301      	adds	r3, #1
 8007f74:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	3307      	adds	r3, #7
 8007f82:	08db      	lsrs	r3, r3, #3
 8007f84:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	fb02 f303 	mul.w	r3, r2, r3
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e049      	b.n	8008040 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d106      	bne.n	8007fc6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7f9 fc4d 	bl	8001860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2202      	movs	r2, #2
 8007fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4610      	mov	r0, r2
 8007fda:	f000 fbb1 	bl	8008740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e049      	b.n	80080ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d106      	bne.n	8008074 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f841 	bl	80080f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3304      	adds	r3, #4
 8008084:	4619      	mov	r1, r3
 8008086:	4610      	mov	r0, r2
 8008088:	f000 fb5a 	bl	8008740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b083      	sub	sp, #12
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080fe:	bf00      	nop
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
	...

0800810c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d109      	bne.n	8008130 <HAL_TIM_PWM_Start+0x24>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b01      	cmp	r3, #1
 8008126:	bf14      	ite	ne
 8008128:	2301      	movne	r3, #1
 800812a:	2300      	moveq	r3, #0
 800812c:	b2db      	uxtb	r3, r3
 800812e:	e03c      	b.n	80081aa <HAL_TIM_PWM_Start+0x9e>
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2b04      	cmp	r3, #4
 8008134:	d109      	bne.n	800814a <HAL_TIM_PWM_Start+0x3e>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b01      	cmp	r3, #1
 8008140:	bf14      	ite	ne
 8008142:	2301      	movne	r3, #1
 8008144:	2300      	moveq	r3, #0
 8008146:	b2db      	uxtb	r3, r3
 8008148:	e02f      	b.n	80081aa <HAL_TIM_PWM_Start+0x9e>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b08      	cmp	r3, #8
 800814e:	d109      	bne.n	8008164 <HAL_TIM_PWM_Start+0x58>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b01      	cmp	r3, #1
 800815a:	bf14      	ite	ne
 800815c:	2301      	movne	r3, #1
 800815e:	2300      	moveq	r3, #0
 8008160:	b2db      	uxtb	r3, r3
 8008162:	e022      	b.n	80081aa <HAL_TIM_PWM_Start+0x9e>
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b0c      	cmp	r3, #12
 8008168:	d109      	bne.n	800817e <HAL_TIM_PWM_Start+0x72>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b01      	cmp	r3, #1
 8008174:	bf14      	ite	ne
 8008176:	2301      	movne	r3, #1
 8008178:	2300      	moveq	r3, #0
 800817a:	b2db      	uxtb	r3, r3
 800817c:	e015      	b.n	80081aa <HAL_TIM_PWM_Start+0x9e>
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b10      	cmp	r3, #16
 8008182:	d109      	bne.n	8008198 <HAL_TIM_PWM_Start+0x8c>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b01      	cmp	r3, #1
 800818e:	bf14      	ite	ne
 8008190:	2301      	movne	r3, #1
 8008192:	2300      	moveq	r3, #0
 8008194:	b2db      	uxtb	r3, r3
 8008196:	e008      	b.n	80081aa <HAL_TIM_PWM_Start+0x9e>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	bf14      	ite	ne
 80081a4:	2301      	movne	r3, #1
 80081a6:	2300      	moveq	r3, #0
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e0a1      	b.n	80082f6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d104      	bne.n	80081c2 <HAL_TIM_PWM_Start+0xb6>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081c0:	e023      	b.n	800820a <HAL_TIM_PWM_Start+0xfe>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b04      	cmp	r3, #4
 80081c6:	d104      	bne.n	80081d2 <HAL_TIM_PWM_Start+0xc6>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2202      	movs	r2, #2
 80081cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081d0:	e01b      	b.n	800820a <HAL_TIM_PWM_Start+0xfe>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d104      	bne.n	80081e2 <HAL_TIM_PWM_Start+0xd6>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2202      	movs	r2, #2
 80081dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081e0:	e013      	b.n	800820a <HAL_TIM_PWM_Start+0xfe>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b0c      	cmp	r3, #12
 80081e6:	d104      	bne.n	80081f2 <HAL_TIM_PWM_Start+0xe6>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081f0:	e00b      	b.n	800820a <HAL_TIM_PWM_Start+0xfe>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b10      	cmp	r3, #16
 80081f6:	d104      	bne.n	8008202 <HAL_TIM_PWM_Start+0xf6>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2202      	movs	r2, #2
 80081fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008200:	e003      	b.n	800820a <HAL_TIM_PWM_Start+0xfe>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2202      	movs	r2, #2
 8008206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2201      	movs	r2, #1
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 fea2 	bl	8008f5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a38      	ldr	r2, [pc, #224]	; (8008300 <HAL_TIM_PWM_Start+0x1f4>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d013      	beq.n	800824a <HAL_TIM_PWM_Start+0x13e>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a37      	ldr	r2, [pc, #220]	; (8008304 <HAL_TIM_PWM_Start+0x1f8>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d00e      	beq.n	800824a <HAL_TIM_PWM_Start+0x13e>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a35      	ldr	r2, [pc, #212]	; (8008308 <HAL_TIM_PWM_Start+0x1fc>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d009      	beq.n	800824a <HAL_TIM_PWM_Start+0x13e>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a34      	ldr	r2, [pc, #208]	; (800830c <HAL_TIM_PWM_Start+0x200>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d004      	beq.n	800824a <HAL_TIM_PWM_Start+0x13e>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a32      	ldr	r2, [pc, #200]	; (8008310 <HAL_TIM_PWM_Start+0x204>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d101      	bne.n	800824e <HAL_TIM_PWM_Start+0x142>
 800824a:	2301      	movs	r3, #1
 800824c:	e000      	b.n	8008250 <HAL_TIM_PWM_Start+0x144>
 800824e:	2300      	movs	r3, #0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d007      	beq.n	8008264 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008262:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a25      	ldr	r2, [pc, #148]	; (8008300 <HAL_TIM_PWM_Start+0x1f4>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d022      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x1a8>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008276:	d01d      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x1a8>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a25      	ldr	r2, [pc, #148]	; (8008314 <HAL_TIM_PWM_Start+0x208>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d018      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x1a8>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a24      	ldr	r2, [pc, #144]	; (8008318 <HAL_TIM_PWM_Start+0x20c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d013      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x1a8>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a22      	ldr	r2, [pc, #136]	; (800831c <HAL_TIM_PWM_Start+0x210>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00e      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x1a8>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a1a      	ldr	r2, [pc, #104]	; (8008304 <HAL_TIM_PWM_Start+0x1f8>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d009      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x1a8>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a1e      	ldr	r2, [pc, #120]	; (8008320 <HAL_TIM_PWM_Start+0x214>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d004      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x1a8>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a16      	ldr	r2, [pc, #88]	; (8008308 <HAL_TIM_PWM_Start+0x1fc>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d115      	bne.n	80082e0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	4b1a      	ldr	r3, [pc, #104]	; (8008324 <HAL_TIM_PWM_Start+0x218>)
 80082bc:	4013      	ands	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2b06      	cmp	r3, #6
 80082c4:	d015      	beq.n	80082f2 <HAL_TIM_PWM_Start+0x1e6>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082cc:	d011      	beq.n	80082f2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f042 0201 	orr.w	r2, r2, #1
 80082dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082de:	e008      	b.n	80082f2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f042 0201 	orr.w	r2, r2, #1
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	e000      	b.n	80082f4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	40010000 	.word	0x40010000
 8008304:	40010400 	.word	0x40010400
 8008308:	40014000 	.word	0x40014000
 800830c:	40014400 	.word	0x40014400
 8008310:	40014800 	.word	0x40014800
 8008314:	40000400 	.word	0x40000400
 8008318:	40000800 	.word	0x40000800
 800831c:	40000c00 	.word	0x40000c00
 8008320:	40001800 	.word	0x40001800
 8008324:	00010007 	.word	0x00010007

08008328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800833e:	2b01      	cmp	r3, #1
 8008340:	d101      	bne.n	8008346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008342:	2302      	movs	r3, #2
 8008344:	e0ff      	b.n	8008546 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b14      	cmp	r3, #20
 8008352:	f200 80f0 	bhi.w	8008536 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008356:	a201      	add	r2, pc, #4	; (adr r2, 800835c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835c:	080083b1 	.word	0x080083b1
 8008360:	08008537 	.word	0x08008537
 8008364:	08008537 	.word	0x08008537
 8008368:	08008537 	.word	0x08008537
 800836c:	080083f1 	.word	0x080083f1
 8008370:	08008537 	.word	0x08008537
 8008374:	08008537 	.word	0x08008537
 8008378:	08008537 	.word	0x08008537
 800837c:	08008433 	.word	0x08008433
 8008380:	08008537 	.word	0x08008537
 8008384:	08008537 	.word	0x08008537
 8008388:	08008537 	.word	0x08008537
 800838c:	08008473 	.word	0x08008473
 8008390:	08008537 	.word	0x08008537
 8008394:	08008537 	.word	0x08008537
 8008398:	08008537 	.word	0x08008537
 800839c:	080084b5 	.word	0x080084b5
 80083a0:	08008537 	.word	0x08008537
 80083a4:	08008537 	.word	0x08008537
 80083a8:	08008537 	.word	0x08008537
 80083ac:	080084f5 	.word	0x080084f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68b9      	ldr	r1, [r7, #8]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 fa5c 	bl	8008874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	699a      	ldr	r2, [r3, #24]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f042 0208 	orr.w	r2, r2, #8
 80083ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	699a      	ldr	r2, [r3, #24]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f022 0204 	bic.w	r2, r2, #4
 80083da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6999      	ldr	r1, [r3, #24]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	691a      	ldr	r2, [r3, #16]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	619a      	str	r2, [r3, #24]
      break;
 80083ee:	e0a5      	b.n	800853c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68b9      	ldr	r1, [r7, #8]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 facc 	bl	8008994 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	699a      	ldr	r2, [r3, #24]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800840a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	699a      	ldr	r2, [r3, #24]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800841a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6999      	ldr	r1, [r3, #24]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	021a      	lsls	r2, r3, #8
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	619a      	str	r2, [r3, #24]
      break;
 8008430:	e084      	b.n	800853c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68b9      	ldr	r1, [r7, #8]
 8008438:	4618      	mov	r0, r3
 800843a:	f000 fb35 	bl	8008aa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69da      	ldr	r2, [r3, #28]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f042 0208 	orr.w	r2, r2, #8
 800844c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	69da      	ldr	r2, [r3, #28]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f022 0204 	bic.w	r2, r2, #4
 800845c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	69d9      	ldr	r1, [r3, #28]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	691a      	ldr	r2, [r3, #16]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	430a      	orrs	r2, r1
 800846e:	61da      	str	r2, [r3, #28]
      break;
 8008470:	e064      	b.n	800853c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68b9      	ldr	r1, [r7, #8]
 8008478:	4618      	mov	r0, r3
 800847a:	f000 fb9d 	bl	8008bb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	69da      	ldr	r2, [r3, #28]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800848c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	69da      	ldr	r2, [r3, #28]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800849c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	69d9      	ldr	r1, [r3, #28]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	021a      	lsls	r2, r3, #8
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	61da      	str	r2, [r3, #28]
      break;
 80084b2:	e043      	b.n	800853c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68b9      	ldr	r1, [r7, #8]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 fbe6 	bl	8008c8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f042 0208 	orr.w	r2, r2, #8
 80084ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f022 0204 	bic.w	r2, r2, #4
 80084de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	691a      	ldr	r2, [r3, #16]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80084f2:	e023      	b.n	800853c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68b9      	ldr	r1, [r7, #8]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 fc2a 	bl	8008d54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800850e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800851e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	021a      	lsls	r2, r3, #8
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008534:	e002      	b.n	800853c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	75fb      	strb	r3, [r7, #23]
      break;
 800853a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008544:	7dfb      	ldrb	r3, [r7, #23]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop

08008550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008564:	2b01      	cmp	r3, #1
 8008566:	d101      	bne.n	800856c <HAL_TIM_ConfigClockSource+0x1c>
 8008568:	2302      	movs	r3, #2
 800856a:	e0dc      	b.n	8008726 <HAL_TIM_ConfigClockSource+0x1d6>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2202      	movs	r2, #2
 8008578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	4b6a      	ldr	r3, [pc, #424]	; (8008730 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008588:	4013      	ands	r3, r2
 800858a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008592:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a64      	ldr	r2, [pc, #400]	; (8008734 <HAL_TIM_ConfigClockSource+0x1e4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	f000 80a9 	beq.w	80086fa <HAL_TIM_ConfigClockSource+0x1aa>
 80085a8:	4a62      	ldr	r2, [pc, #392]	; (8008734 <HAL_TIM_ConfigClockSource+0x1e4>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	f200 80ae 	bhi.w	800870c <HAL_TIM_ConfigClockSource+0x1bc>
 80085b0:	4a61      	ldr	r2, [pc, #388]	; (8008738 <HAL_TIM_ConfigClockSource+0x1e8>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	f000 80a1 	beq.w	80086fa <HAL_TIM_ConfigClockSource+0x1aa>
 80085b8:	4a5f      	ldr	r2, [pc, #380]	; (8008738 <HAL_TIM_ConfigClockSource+0x1e8>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	f200 80a6 	bhi.w	800870c <HAL_TIM_ConfigClockSource+0x1bc>
 80085c0:	4a5e      	ldr	r2, [pc, #376]	; (800873c <HAL_TIM_ConfigClockSource+0x1ec>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	f000 8099 	beq.w	80086fa <HAL_TIM_ConfigClockSource+0x1aa>
 80085c8:	4a5c      	ldr	r2, [pc, #368]	; (800873c <HAL_TIM_ConfigClockSource+0x1ec>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	f200 809e 	bhi.w	800870c <HAL_TIM_ConfigClockSource+0x1bc>
 80085d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80085d4:	f000 8091 	beq.w	80086fa <HAL_TIM_ConfigClockSource+0x1aa>
 80085d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80085dc:	f200 8096 	bhi.w	800870c <HAL_TIM_ConfigClockSource+0x1bc>
 80085e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085e4:	f000 8089 	beq.w	80086fa <HAL_TIM_ConfigClockSource+0x1aa>
 80085e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085ec:	f200 808e 	bhi.w	800870c <HAL_TIM_ConfigClockSource+0x1bc>
 80085f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085f4:	d03e      	beq.n	8008674 <HAL_TIM_ConfigClockSource+0x124>
 80085f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085fa:	f200 8087 	bhi.w	800870c <HAL_TIM_ConfigClockSource+0x1bc>
 80085fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008602:	f000 8086 	beq.w	8008712 <HAL_TIM_ConfigClockSource+0x1c2>
 8008606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800860a:	d87f      	bhi.n	800870c <HAL_TIM_ConfigClockSource+0x1bc>
 800860c:	2b70      	cmp	r3, #112	; 0x70
 800860e:	d01a      	beq.n	8008646 <HAL_TIM_ConfigClockSource+0xf6>
 8008610:	2b70      	cmp	r3, #112	; 0x70
 8008612:	d87b      	bhi.n	800870c <HAL_TIM_ConfigClockSource+0x1bc>
 8008614:	2b60      	cmp	r3, #96	; 0x60
 8008616:	d050      	beq.n	80086ba <HAL_TIM_ConfigClockSource+0x16a>
 8008618:	2b60      	cmp	r3, #96	; 0x60
 800861a:	d877      	bhi.n	800870c <HAL_TIM_ConfigClockSource+0x1bc>
 800861c:	2b50      	cmp	r3, #80	; 0x50
 800861e:	d03c      	beq.n	800869a <HAL_TIM_ConfigClockSource+0x14a>
 8008620:	2b50      	cmp	r3, #80	; 0x50
 8008622:	d873      	bhi.n	800870c <HAL_TIM_ConfigClockSource+0x1bc>
 8008624:	2b40      	cmp	r3, #64	; 0x40
 8008626:	d058      	beq.n	80086da <HAL_TIM_ConfigClockSource+0x18a>
 8008628:	2b40      	cmp	r3, #64	; 0x40
 800862a:	d86f      	bhi.n	800870c <HAL_TIM_ConfigClockSource+0x1bc>
 800862c:	2b30      	cmp	r3, #48	; 0x30
 800862e:	d064      	beq.n	80086fa <HAL_TIM_ConfigClockSource+0x1aa>
 8008630:	2b30      	cmp	r3, #48	; 0x30
 8008632:	d86b      	bhi.n	800870c <HAL_TIM_ConfigClockSource+0x1bc>
 8008634:	2b20      	cmp	r3, #32
 8008636:	d060      	beq.n	80086fa <HAL_TIM_ConfigClockSource+0x1aa>
 8008638:	2b20      	cmp	r3, #32
 800863a:	d867      	bhi.n	800870c <HAL_TIM_ConfigClockSource+0x1bc>
 800863c:	2b00      	cmp	r3, #0
 800863e:	d05c      	beq.n	80086fa <HAL_TIM_ConfigClockSource+0x1aa>
 8008640:	2b10      	cmp	r3, #16
 8008642:	d05a      	beq.n	80086fa <HAL_TIM_ConfigClockSource+0x1aa>
 8008644:	e062      	b.n	800870c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6818      	ldr	r0, [r3, #0]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	6899      	ldr	r1, [r3, #8]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	f000 fc61 	bl	8008f1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008668:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	609a      	str	r2, [r3, #8]
      break;
 8008672:	e04f      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6818      	ldr	r0, [r3, #0]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	6899      	ldr	r1, [r3, #8]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	f000 fc4a 	bl	8008f1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689a      	ldr	r2, [r3, #8]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008696:	609a      	str	r2, [r3, #8]
      break;
 8008698:	e03c      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6818      	ldr	r0, [r3, #0]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	6859      	ldr	r1, [r3, #4]
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	461a      	mov	r2, r3
 80086a8:	f000 fbba 	bl	8008e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2150      	movs	r1, #80	; 0x50
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fc14 	bl	8008ee0 <TIM_ITRx_SetConfig>
      break;
 80086b8:	e02c      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6818      	ldr	r0, [r3, #0]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	6859      	ldr	r1, [r3, #4]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	461a      	mov	r2, r3
 80086c8:	f000 fbd9 	bl	8008e7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2160      	movs	r1, #96	; 0x60
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 fc04 	bl	8008ee0 <TIM_ITRx_SetConfig>
      break;
 80086d8:	e01c      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6818      	ldr	r0, [r3, #0]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	6859      	ldr	r1, [r3, #4]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	461a      	mov	r2, r3
 80086e8:	f000 fb9a 	bl	8008e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2140      	movs	r1, #64	; 0x40
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 fbf4 	bl	8008ee0 <TIM_ITRx_SetConfig>
      break;
 80086f8:	e00c      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4619      	mov	r1, r3
 8008704:	4610      	mov	r0, r2
 8008706:	f000 fbeb 	bl	8008ee0 <TIM_ITRx_SetConfig>
      break;
 800870a:	e003      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	73fb      	strb	r3, [r7, #15]
      break;
 8008710:	e000      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008712:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008724:	7bfb      	ldrb	r3, [r7, #15]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	ffceff88 	.word	0xffceff88
 8008734:	00100040 	.word	0x00100040
 8008738:	00100030 	.word	0x00100030
 800873c:	00100020 	.word	0x00100020

08008740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a40      	ldr	r2, [pc, #256]	; (8008854 <TIM_Base_SetConfig+0x114>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d013      	beq.n	8008780 <TIM_Base_SetConfig+0x40>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800875e:	d00f      	beq.n	8008780 <TIM_Base_SetConfig+0x40>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a3d      	ldr	r2, [pc, #244]	; (8008858 <TIM_Base_SetConfig+0x118>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00b      	beq.n	8008780 <TIM_Base_SetConfig+0x40>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a3c      	ldr	r2, [pc, #240]	; (800885c <TIM_Base_SetConfig+0x11c>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d007      	beq.n	8008780 <TIM_Base_SetConfig+0x40>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a3b      	ldr	r2, [pc, #236]	; (8008860 <TIM_Base_SetConfig+0x120>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d003      	beq.n	8008780 <TIM_Base_SetConfig+0x40>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a3a      	ldr	r2, [pc, #232]	; (8008864 <TIM_Base_SetConfig+0x124>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d108      	bne.n	8008792 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a2f      	ldr	r2, [pc, #188]	; (8008854 <TIM_Base_SetConfig+0x114>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d01f      	beq.n	80087da <TIM_Base_SetConfig+0x9a>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087a0:	d01b      	beq.n	80087da <TIM_Base_SetConfig+0x9a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a2c      	ldr	r2, [pc, #176]	; (8008858 <TIM_Base_SetConfig+0x118>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d017      	beq.n	80087da <TIM_Base_SetConfig+0x9a>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a2b      	ldr	r2, [pc, #172]	; (800885c <TIM_Base_SetConfig+0x11c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d013      	beq.n	80087da <TIM_Base_SetConfig+0x9a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a2a      	ldr	r2, [pc, #168]	; (8008860 <TIM_Base_SetConfig+0x120>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d00f      	beq.n	80087da <TIM_Base_SetConfig+0x9a>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a29      	ldr	r2, [pc, #164]	; (8008864 <TIM_Base_SetConfig+0x124>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d00b      	beq.n	80087da <TIM_Base_SetConfig+0x9a>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a28      	ldr	r2, [pc, #160]	; (8008868 <TIM_Base_SetConfig+0x128>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d007      	beq.n	80087da <TIM_Base_SetConfig+0x9a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a27      	ldr	r2, [pc, #156]	; (800886c <TIM_Base_SetConfig+0x12c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d003      	beq.n	80087da <TIM_Base_SetConfig+0x9a>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a26      	ldr	r2, [pc, #152]	; (8008870 <TIM_Base_SetConfig+0x130>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d108      	bne.n	80087ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	689a      	ldr	r2, [r3, #8]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a10      	ldr	r2, [pc, #64]	; (8008854 <TIM_Base_SetConfig+0x114>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d00f      	beq.n	8008838 <TIM_Base_SetConfig+0xf8>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a12      	ldr	r2, [pc, #72]	; (8008864 <TIM_Base_SetConfig+0x124>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d00b      	beq.n	8008838 <TIM_Base_SetConfig+0xf8>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a11      	ldr	r2, [pc, #68]	; (8008868 <TIM_Base_SetConfig+0x128>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d007      	beq.n	8008838 <TIM_Base_SetConfig+0xf8>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a10      	ldr	r2, [pc, #64]	; (800886c <TIM_Base_SetConfig+0x12c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d003      	beq.n	8008838 <TIM_Base_SetConfig+0xf8>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a0f      	ldr	r2, [pc, #60]	; (8008870 <TIM_Base_SetConfig+0x130>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d103      	bne.n	8008840 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	691a      	ldr	r2, [r3, #16]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	615a      	str	r2, [r3, #20]
}
 8008846:	bf00      	nop
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	40010000 	.word	0x40010000
 8008858:	40000400 	.word	0x40000400
 800885c:	40000800 	.word	0x40000800
 8008860:	40000c00 	.word	0x40000c00
 8008864:	40010400 	.word	0x40010400
 8008868:	40014000 	.word	0x40014000
 800886c:	40014400 	.word	0x40014400
 8008870:	40014800 	.word	0x40014800

08008874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	f023 0201 	bic.w	r2, r3, #1
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	4b37      	ldr	r3, [pc, #220]	; (800897c <TIM_OC1_SetConfig+0x108>)
 80088a0:	4013      	ands	r3, r2
 80088a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f023 0303 	bic.w	r3, r3, #3
 80088aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	f023 0302 	bic.w	r3, r3, #2
 80088bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a2d      	ldr	r2, [pc, #180]	; (8008980 <TIM_OC1_SetConfig+0x10c>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d00f      	beq.n	80088f0 <TIM_OC1_SetConfig+0x7c>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a2c      	ldr	r2, [pc, #176]	; (8008984 <TIM_OC1_SetConfig+0x110>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d00b      	beq.n	80088f0 <TIM_OC1_SetConfig+0x7c>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a2b      	ldr	r2, [pc, #172]	; (8008988 <TIM_OC1_SetConfig+0x114>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d007      	beq.n	80088f0 <TIM_OC1_SetConfig+0x7c>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a2a      	ldr	r2, [pc, #168]	; (800898c <TIM_OC1_SetConfig+0x118>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d003      	beq.n	80088f0 <TIM_OC1_SetConfig+0x7c>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a29      	ldr	r2, [pc, #164]	; (8008990 <TIM_OC1_SetConfig+0x11c>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d10c      	bne.n	800890a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f023 0308 	bic.w	r3, r3, #8
 80088f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	4313      	orrs	r3, r2
 8008900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f023 0304 	bic.w	r3, r3, #4
 8008908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a1c      	ldr	r2, [pc, #112]	; (8008980 <TIM_OC1_SetConfig+0x10c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d00f      	beq.n	8008932 <TIM_OC1_SetConfig+0xbe>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a1b      	ldr	r2, [pc, #108]	; (8008984 <TIM_OC1_SetConfig+0x110>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d00b      	beq.n	8008932 <TIM_OC1_SetConfig+0xbe>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a1a      	ldr	r2, [pc, #104]	; (8008988 <TIM_OC1_SetConfig+0x114>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d007      	beq.n	8008932 <TIM_OC1_SetConfig+0xbe>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a19      	ldr	r2, [pc, #100]	; (800898c <TIM_OC1_SetConfig+0x118>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d003      	beq.n	8008932 <TIM_OC1_SetConfig+0xbe>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a18      	ldr	r2, [pc, #96]	; (8008990 <TIM_OC1_SetConfig+0x11c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d111      	bne.n	8008956 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	4313      	orrs	r3, r2
 800894a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	4313      	orrs	r3, r2
 8008954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	621a      	str	r2, [r3, #32]
}
 8008970:	bf00      	nop
 8008972:	371c      	adds	r7, #28
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	fffeff8f 	.word	0xfffeff8f
 8008980:	40010000 	.word	0x40010000
 8008984:	40010400 	.word	0x40010400
 8008988:	40014000 	.word	0x40014000
 800898c:	40014400 	.word	0x40014400
 8008990:	40014800 	.word	0x40014800

08008994 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008994:	b480      	push	{r7}
 8008996:	b087      	sub	sp, #28
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	f023 0210 	bic.w	r2, r3, #16
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	4b34      	ldr	r3, [pc, #208]	; (8008a90 <TIM_OC2_SetConfig+0xfc>)
 80089c0:	4013      	ands	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	021b      	lsls	r3, r3, #8
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f023 0320 	bic.w	r3, r3, #32
 80089de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	011b      	lsls	r3, r3, #4
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a29      	ldr	r2, [pc, #164]	; (8008a94 <TIM_OC2_SetConfig+0x100>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d003      	beq.n	80089fc <TIM_OC2_SetConfig+0x68>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a28      	ldr	r2, [pc, #160]	; (8008a98 <TIM_OC2_SetConfig+0x104>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d10d      	bne.n	8008a18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	011b      	lsls	r3, r3, #4
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a1e      	ldr	r2, [pc, #120]	; (8008a94 <TIM_OC2_SetConfig+0x100>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d00f      	beq.n	8008a40 <TIM_OC2_SetConfig+0xac>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a1d      	ldr	r2, [pc, #116]	; (8008a98 <TIM_OC2_SetConfig+0x104>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d00b      	beq.n	8008a40 <TIM_OC2_SetConfig+0xac>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a1c      	ldr	r2, [pc, #112]	; (8008a9c <TIM_OC2_SetConfig+0x108>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d007      	beq.n	8008a40 <TIM_OC2_SetConfig+0xac>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a1b      	ldr	r2, [pc, #108]	; (8008aa0 <TIM_OC2_SetConfig+0x10c>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d003      	beq.n	8008a40 <TIM_OC2_SetConfig+0xac>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a1a      	ldr	r2, [pc, #104]	; (8008aa4 <TIM_OC2_SetConfig+0x110>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d113      	bne.n	8008a68 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	621a      	str	r2, [r3, #32]
}
 8008a82:	bf00      	nop
 8008a84:	371c      	adds	r7, #28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	feff8fff 	.word	0xfeff8fff
 8008a94:	40010000 	.word	0x40010000
 8008a98:	40010400 	.word	0x40010400
 8008a9c:	40014000 	.word	0x40014000
 8008aa0:	40014400 	.word	0x40014400
 8008aa4:	40014800 	.word	0x40014800

08008aa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b087      	sub	sp, #28
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	4b33      	ldr	r3, [pc, #204]	; (8008ba0 <TIM_OC3_SetConfig+0xf8>)
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f023 0303 	bic.w	r3, r3, #3
 8008ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	021b      	lsls	r3, r3, #8
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a28      	ldr	r2, [pc, #160]	; (8008ba4 <TIM_OC3_SetConfig+0xfc>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d003      	beq.n	8008b0e <TIM_OC3_SetConfig+0x66>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a27      	ldr	r2, [pc, #156]	; (8008ba8 <TIM_OC3_SetConfig+0x100>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d10d      	bne.n	8008b2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	021b      	lsls	r3, r3, #8
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a1d      	ldr	r2, [pc, #116]	; (8008ba4 <TIM_OC3_SetConfig+0xfc>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d00f      	beq.n	8008b52 <TIM_OC3_SetConfig+0xaa>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a1c      	ldr	r2, [pc, #112]	; (8008ba8 <TIM_OC3_SetConfig+0x100>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00b      	beq.n	8008b52 <TIM_OC3_SetConfig+0xaa>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a1b      	ldr	r2, [pc, #108]	; (8008bac <TIM_OC3_SetConfig+0x104>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d007      	beq.n	8008b52 <TIM_OC3_SetConfig+0xaa>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a1a      	ldr	r2, [pc, #104]	; (8008bb0 <TIM_OC3_SetConfig+0x108>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d003      	beq.n	8008b52 <TIM_OC3_SetConfig+0xaa>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a19      	ldr	r2, [pc, #100]	; (8008bb4 <TIM_OC3_SetConfig+0x10c>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d113      	bne.n	8008b7a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	011b      	lsls	r3, r3, #4
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	011b      	lsls	r3, r3, #4
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	621a      	str	r2, [r3, #32]
}
 8008b94:	bf00      	nop
 8008b96:	371c      	adds	r7, #28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	fffeff8f 	.word	0xfffeff8f
 8008ba4:	40010000 	.word	0x40010000
 8008ba8:	40010400 	.word	0x40010400
 8008bac:	40014000 	.word	0x40014000
 8008bb0:	40014400 	.word	0x40014400
 8008bb4:	40014800 	.word	0x40014800

08008bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b087      	sub	sp, #28
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	4b24      	ldr	r3, [pc, #144]	; (8008c74 <TIM_OC4_SetConfig+0xbc>)
 8008be4:	4013      	ands	r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	021b      	lsls	r3, r3, #8
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	031b      	lsls	r3, r3, #12
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a19      	ldr	r2, [pc, #100]	; (8008c78 <TIM_OC4_SetConfig+0xc0>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d00f      	beq.n	8008c38 <TIM_OC4_SetConfig+0x80>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a18      	ldr	r2, [pc, #96]	; (8008c7c <TIM_OC4_SetConfig+0xc4>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d00b      	beq.n	8008c38 <TIM_OC4_SetConfig+0x80>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a17      	ldr	r2, [pc, #92]	; (8008c80 <TIM_OC4_SetConfig+0xc8>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d007      	beq.n	8008c38 <TIM_OC4_SetConfig+0x80>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a16      	ldr	r2, [pc, #88]	; (8008c84 <TIM_OC4_SetConfig+0xcc>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d003      	beq.n	8008c38 <TIM_OC4_SetConfig+0x80>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a15      	ldr	r2, [pc, #84]	; (8008c88 <TIM_OC4_SetConfig+0xd0>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d109      	bne.n	8008c4c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	019b      	lsls	r3, r3, #6
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	621a      	str	r2, [r3, #32]
}
 8008c66:	bf00      	nop
 8008c68:	371c      	adds	r7, #28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	feff8fff 	.word	0xfeff8fff
 8008c78:	40010000 	.word	0x40010000
 8008c7c:	40010400 	.word	0x40010400
 8008c80:	40014000 	.word	0x40014000
 8008c84:	40014400 	.word	0x40014400
 8008c88:	40014800 	.word	0x40014800

08008c8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	4b21      	ldr	r3, [pc, #132]	; (8008d3c <TIM_OC5_SetConfig+0xb0>)
 8008cb8:	4013      	ands	r3, r2
 8008cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ccc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	041b      	lsls	r3, r3, #16
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a18      	ldr	r2, [pc, #96]	; (8008d40 <TIM_OC5_SetConfig+0xb4>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d00f      	beq.n	8008d02 <TIM_OC5_SetConfig+0x76>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a17      	ldr	r2, [pc, #92]	; (8008d44 <TIM_OC5_SetConfig+0xb8>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d00b      	beq.n	8008d02 <TIM_OC5_SetConfig+0x76>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a16      	ldr	r2, [pc, #88]	; (8008d48 <TIM_OC5_SetConfig+0xbc>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d007      	beq.n	8008d02 <TIM_OC5_SetConfig+0x76>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a15      	ldr	r2, [pc, #84]	; (8008d4c <TIM_OC5_SetConfig+0xc0>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d003      	beq.n	8008d02 <TIM_OC5_SetConfig+0x76>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a14      	ldr	r2, [pc, #80]	; (8008d50 <TIM_OC5_SetConfig+0xc4>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d109      	bne.n	8008d16 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	021b      	lsls	r3, r3, #8
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	685a      	ldr	r2, [r3, #4]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	621a      	str	r2, [r3, #32]
}
 8008d30:	bf00      	nop
 8008d32:	371c      	adds	r7, #28
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	fffeff8f 	.word	0xfffeff8f
 8008d40:	40010000 	.word	0x40010000
 8008d44:	40010400 	.word	0x40010400
 8008d48:	40014000 	.word	0x40014000
 8008d4c:	40014400 	.word	0x40014400
 8008d50:	40014800 	.word	0x40014800

08008d54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b087      	sub	sp, #28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	4b22      	ldr	r3, [pc, #136]	; (8008e08 <TIM_OC6_SetConfig+0xb4>)
 8008d80:	4013      	ands	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	021b      	lsls	r3, r3, #8
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	051b      	lsls	r3, r3, #20
 8008d9e:	693a      	ldr	r2, [r7, #16]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a19      	ldr	r2, [pc, #100]	; (8008e0c <TIM_OC6_SetConfig+0xb8>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d00f      	beq.n	8008dcc <TIM_OC6_SetConfig+0x78>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a18      	ldr	r2, [pc, #96]	; (8008e10 <TIM_OC6_SetConfig+0xbc>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d00b      	beq.n	8008dcc <TIM_OC6_SetConfig+0x78>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a17      	ldr	r2, [pc, #92]	; (8008e14 <TIM_OC6_SetConfig+0xc0>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d007      	beq.n	8008dcc <TIM_OC6_SetConfig+0x78>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a16      	ldr	r2, [pc, #88]	; (8008e18 <TIM_OC6_SetConfig+0xc4>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d003      	beq.n	8008dcc <TIM_OC6_SetConfig+0x78>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a15      	ldr	r2, [pc, #84]	; (8008e1c <TIM_OC6_SetConfig+0xc8>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d109      	bne.n	8008de0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	029b      	lsls	r3, r3, #10
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	621a      	str	r2, [r3, #32]
}
 8008dfa:	bf00      	nop
 8008dfc:	371c      	adds	r7, #28
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	feff8fff 	.word	0xfeff8fff
 8008e0c:	40010000 	.word	0x40010000
 8008e10:	40010400 	.word	0x40010400
 8008e14:	40014000 	.word	0x40014000
 8008e18:	40014400 	.word	0x40014400
 8008e1c:	40014800 	.word	0x40014800

08008e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b087      	sub	sp, #28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6a1b      	ldr	r3, [r3, #32]
 8008e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	f023 0201 	bic.w	r2, r3, #1
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	011b      	lsls	r3, r3, #4
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f023 030a 	bic.w	r3, r3, #10
 8008e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	621a      	str	r2, [r3, #32]
}
 8008e72:	bf00      	nop
 8008e74:	371c      	adds	r7, #28
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b087      	sub	sp, #28
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	60b9      	str	r1, [r7, #8]
 8008e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	f023 0210 	bic.w	r2, r3, #16
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	699b      	ldr	r3, [r3, #24]
 8008e9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6a1b      	ldr	r3, [r3, #32]
 8008ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ea8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	031b      	lsls	r3, r3, #12
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008eba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	011b      	lsls	r3, r3, #4
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	621a      	str	r2, [r3, #32]
}
 8008ed2:	bf00      	nop
 8008ed4:	371c      	adds	r7, #28
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
	...

08008ee0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4b09      	ldr	r3, [pc, #36]	; (8008f18 <TIM_ITRx_SetConfig+0x38>)
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ef8:	683a      	ldr	r2, [r7, #0]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	f043 0307 	orr.w	r3, r3, #7
 8008f02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	609a      	str	r2, [r3, #8]
}
 8008f0a:	bf00      	nop
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	ffcfff8f 	.word	0xffcfff8f

08008f1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b087      	sub	sp, #28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
 8008f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	021a      	lsls	r2, r3, #8
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	697a      	ldr	r2, [r7, #20]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	697a      	ldr	r2, [r7, #20]
 8008f4e:	609a      	str	r2, [r3, #8]
}
 8008f50:	bf00      	nop
 8008f52:	371c      	adds	r7, #28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b087      	sub	sp, #28
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	f003 031f 	and.w	r3, r3, #31
 8008f6e:	2201      	movs	r2, #1
 8008f70:	fa02 f303 	lsl.w	r3, r2, r3
 8008f74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6a1a      	ldr	r2, [r3, #32]
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	43db      	mvns	r3, r3
 8008f7e:	401a      	ands	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6a1a      	ldr	r2, [r3, #32]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	f003 031f 	and.w	r3, r3, #31
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	fa01 f303 	lsl.w	r3, r1, r3
 8008f94:	431a      	orrs	r2, r3
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	621a      	str	r2, [r3, #32]
}
 8008f9a:	bf00      	nop
 8008f9c:	371c      	adds	r7, #28
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
	...

08008fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d101      	bne.n	8008fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	e06d      	b.n	800909c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a30      	ldr	r2, [pc, #192]	; (80090a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d004      	beq.n	8008ff4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a2f      	ldr	r2, [pc, #188]	; (80090ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d108      	bne.n	8009006 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ffa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	4313      	orrs	r3, r2
 8009004:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800900c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	4313      	orrs	r3, r2
 8009016:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a20      	ldr	r2, [pc, #128]	; (80090a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d022      	beq.n	8009070 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009032:	d01d      	beq.n	8009070 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a1d      	ldr	r2, [pc, #116]	; (80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d018      	beq.n	8009070 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a1c      	ldr	r2, [pc, #112]	; (80090b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d013      	beq.n	8009070 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a1a      	ldr	r2, [pc, #104]	; (80090b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d00e      	beq.n	8009070 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a15      	ldr	r2, [pc, #84]	; (80090ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d009      	beq.n	8009070 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a16      	ldr	r2, [pc, #88]	; (80090bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d004      	beq.n	8009070 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a15      	ldr	r2, [pc, #84]	; (80090c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d10c      	bne.n	800908a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009076:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	4313      	orrs	r3, r2
 8009080:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3714      	adds	r7, #20
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	40010000 	.word	0x40010000
 80090ac:	40010400 	.word	0x40010400
 80090b0:	40000400 	.word	0x40000400
 80090b4:	40000800 	.word	0x40000800
 80090b8:	40000c00 	.word	0x40000c00
 80090bc:	40001800 	.word	0x40001800
 80090c0:	40014000 	.word	0x40014000

080090c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090ce:	2300      	movs	r3, #0
 80090d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d101      	bne.n	80090e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090dc:	2302      	movs	r3, #2
 80090de:	e065      	b.n	80091ac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	4313      	orrs	r3, r2
 8009102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	4313      	orrs	r3, r2
 8009110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4313      	orrs	r3, r2
 800911e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	4313      	orrs	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009146:	4313      	orrs	r3, r2
 8009148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	041b      	lsls	r3, r3, #16
 8009156:	4313      	orrs	r3, r2
 8009158:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a16      	ldr	r2, [pc, #88]	; (80091b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d004      	beq.n	800916e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a14      	ldr	r2, [pc, #80]	; (80091bc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d115      	bne.n	800919a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	051b      	lsls	r3, r3, #20
 800917a:	4313      	orrs	r3, r2
 800917c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	69db      	ldr	r3, [r3, #28]
 8009188:	4313      	orrs	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	4313      	orrs	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	40010000 	.word	0x40010000
 80091bc:	40010400 	.word	0x40010400

080091c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e042      	b.n	8009258 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d106      	bne.n	80091ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f7f8 fc25 	bl	8001a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2224      	movs	r2, #36	; 0x24
 80091ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f022 0201 	bic.w	r2, r2, #1
 8009200:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f8c2 	bl	800938c <UART_SetConfig>
 8009208:	4603      	mov	r3, r0
 800920a:	2b01      	cmp	r3, #1
 800920c:	d101      	bne.n	8009212 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e022      	b.n	8009258 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fe1e 	bl	8009e5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800922e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689a      	ldr	r2, [r3, #8]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800923e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f042 0201 	orr.w	r2, r2, #1
 800924e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fea5 	bl	8009fa0 <UART_CheckIdleState>
 8009256:	4603      	mov	r3, r0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08a      	sub	sp, #40	; 0x28
 8009264:	af02      	add	r7, sp, #8
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	603b      	str	r3, [r7, #0]
 800926c:	4613      	mov	r3, r2
 800926e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009276:	2b20      	cmp	r3, #32
 8009278:	f040 8083 	bne.w	8009382 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d002      	beq.n	8009288 <HAL_UART_Transmit+0x28>
 8009282:	88fb      	ldrh	r3, [r7, #6]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d101      	bne.n	800928c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	e07b      	b.n	8009384 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009292:	2b01      	cmp	r3, #1
 8009294:	d101      	bne.n	800929a <HAL_UART_Transmit+0x3a>
 8009296:	2302      	movs	r3, #2
 8009298:	e074      	b.n	8009384 <HAL_UART_Transmit+0x124>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2221      	movs	r2, #33	; 0x21
 80092ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092b2:	f7f8 fcd3 	bl	8001c5c <HAL_GetTick>
 80092b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	88fa      	ldrh	r2, [r7, #6]
 80092bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	88fa      	ldrh	r2, [r7, #6]
 80092c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092d0:	d108      	bne.n	80092e4 <HAL_UART_Transmit+0x84>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d104      	bne.n	80092e4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80092da:	2300      	movs	r3, #0
 80092dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	61bb      	str	r3, [r7, #24]
 80092e2:	e003      	b.n	80092ec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092e8:	2300      	movs	r3, #0
 80092ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80092f4:	e02c      	b.n	8009350 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2200      	movs	r2, #0
 80092fe:	2180      	movs	r1, #128	; 0x80
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 fe98 	bl	800a036 <UART_WaitOnFlagUntilTimeout>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e039      	b.n	8009384 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10b      	bne.n	800932e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	881b      	ldrh	r3, [r3, #0]
 800931a:	461a      	mov	r2, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009324:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	3302      	adds	r3, #2
 800932a:	61bb      	str	r3, [r7, #24]
 800932c:	e007      	b.n	800933e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	781a      	ldrb	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	3301      	adds	r3, #1
 800933c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009344:	b29b      	uxth	r3, r3
 8009346:	3b01      	subs	r3, #1
 8009348:	b29a      	uxth	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009356:	b29b      	uxth	r3, r3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1cc      	bne.n	80092f6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	2200      	movs	r2, #0
 8009364:	2140      	movs	r1, #64	; 0x40
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f000 fe65 	bl	800a036 <UART_WaitOnFlagUntilTimeout>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009372:	2303      	movs	r3, #3
 8009374:	e006      	b.n	8009384 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2220      	movs	r2, #32
 800937a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	e000      	b.n	8009384 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009382:	2302      	movs	r3, #2
  }
}
 8009384:	4618      	mov	r0, r3
 8009386:	3720      	adds	r7, #32
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800938c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009390:	b092      	sub	sp, #72	; 0x48
 8009392:	af00      	add	r7, sp, #0
 8009394:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	689a      	ldr	r2, [r3, #8]
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	431a      	orrs	r2, r3
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	431a      	orrs	r2, r3
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	4bbe      	ldr	r3, [pc, #760]	; (80096b4 <UART_SetConfig+0x328>)
 80093bc:	4013      	ands	r3, r2
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	6812      	ldr	r2, [r2, #0]
 80093c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093c4:	430b      	orrs	r3, r1
 80093c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	68da      	ldr	r2, [r3, #12]
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4ab3      	ldr	r2, [pc, #716]	; (80096b8 <UART_SetConfig+0x32c>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d004      	beq.n	80093f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093f4:	4313      	orrs	r3, r2
 80093f6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689a      	ldr	r2, [r3, #8]
 80093fe:	4baf      	ldr	r3, [pc, #700]	; (80096bc <UART_SetConfig+0x330>)
 8009400:	4013      	ands	r3, r2
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	6812      	ldr	r2, [r2, #0]
 8009406:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009408:	430b      	orrs	r3, r1
 800940a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009412:	f023 010f 	bic.w	r1, r3, #15
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	430a      	orrs	r2, r1
 8009420:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4aa6      	ldr	r2, [pc, #664]	; (80096c0 <UART_SetConfig+0x334>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d177      	bne.n	800951c <UART_SetConfig+0x190>
 800942c:	4ba5      	ldr	r3, [pc, #660]	; (80096c4 <UART_SetConfig+0x338>)
 800942e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009430:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009434:	2b28      	cmp	r3, #40	; 0x28
 8009436:	d86d      	bhi.n	8009514 <UART_SetConfig+0x188>
 8009438:	a201      	add	r2, pc, #4	; (adr r2, 8009440 <UART_SetConfig+0xb4>)
 800943a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943e:	bf00      	nop
 8009440:	080094e5 	.word	0x080094e5
 8009444:	08009515 	.word	0x08009515
 8009448:	08009515 	.word	0x08009515
 800944c:	08009515 	.word	0x08009515
 8009450:	08009515 	.word	0x08009515
 8009454:	08009515 	.word	0x08009515
 8009458:	08009515 	.word	0x08009515
 800945c:	08009515 	.word	0x08009515
 8009460:	080094ed 	.word	0x080094ed
 8009464:	08009515 	.word	0x08009515
 8009468:	08009515 	.word	0x08009515
 800946c:	08009515 	.word	0x08009515
 8009470:	08009515 	.word	0x08009515
 8009474:	08009515 	.word	0x08009515
 8009478:	08009515 	.word	0x08009515
 800947c:	08009515 	.word	0x08009515
 8009480:	080094f5 	.word	0x080094f5
 8009484:	08009515 	.word	0x08009515
 8009488:	08009515 	.word	0x08009515
 800948c:	08009515 	.word	0x08009515
 8009490:	08009515 	.word	0x08009515
 8009494:	08009515 	.word	0x08009515
 8009498:	08009515 	.word	0x08009515
 800949c:	08009515 	.word	0x08009515
 80094a0:	080094fd 	.word	0x080094fd
 80094a4:	08009515 	.word	0x08009515
 80094a8:	08009515 	.word	0x08009515
 80094ac:	08009515 	.word	0x08009515
 80094b0:	08009515 	.word	0x08009515
 80094b4:	08009515 	.word	0x08009515
 80094b8:	08009515 	.word	0x08009515
 80094bc:	08009515 	.word	0x08009515
 80094c0:	08009505 	.word	0x08009505
 80094c4:	08009515 	.word	0x08009515
 80094c8:	08009515 	.word	0x08009515
 80094cc:	08009515 	.word	0x08009515
 80094d0:	08009515 	.word	0x08009515
 80094d4:	08009515 	.word	0x08009515
 80094d8:	08009515 	.word	0x08009515
 80094dc:	08009515 	.word	0x08009515
 80094e0:	0800950d 	.word	0x0800950d
 80094e4:	2301      	movs	r3, #1
 80094e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ea:	e222      	b.n	8009932 <UART_SetConfig+0x5a6>
 80094ec:	2304      	movs	r3, #4
 80094ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094f2:	e21e      	b.n	8009932 <UART_SetConfig+0x5a6>
 80094f4:	2308      	movs	r3, #8
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094fa:	e21a      	b.n	8009932 <UART_SetConfig+0x5a6>
 80094fc:	2310      	movs	r3, #16
 80094fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009502:	e216      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009504:	2320      	movs	r3, #32
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800950a:	e212      	b.n	8009932 <UART_SetConfig+0x5a6>
 800950c:	2340      	movs	r3, #64	; 0x40
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009512:	e20e      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009514:	2380      	movs	r3, #128	; 0x80
 8009516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800951a:	e20a      	b.n	8009932 <UART_SetConfig+0x5a6>
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a69      	ldr	r2, [pc, #420]	; (80096c8 <UART_SetConfig+0x33c>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d130      	bne.n	8009588 <UART_SetConfig+0x1fc>
 8009526:	4b67      	ldr	r3, [pc, #412]	; (80096c4 <UART_SetConfig+0x338>)
 8009528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800952a:	f003 0307 	and.w	r3, r3, #7
 800952e:	2b05      	cmp	r3, #5
 8009530:	d826      	bhi.n	8009580 <UART_SetConfig+0x1f4>
 8009532:	a201      	add	r2, pc, #4	; (adr r2, 8009538 <UART_SetConfig+0x1ac>)
 8009534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009538:	08009551 	.word	0x08009551
 800953c:	08009559 	.word	0x08009559
 8009540:	08009561 	.word	0x08009561
 8009544:	08009569 	.word	0x08009569
 8009548:	08009571 	.word	0x08009571
 800954c:	08009579 	.word	0x08009579
 8009550:	2300      	movs	r3, #0
 8009552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009556:	e1ec      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009558:	2304      	movs	r3, #4
 800955a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800955e:	e1e8      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009560:	2308      	movs	r3, #8
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009566:	e1e4      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009568:	2310      	movs	r3, #16
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800956e:	e1e0      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009570:	2320      	movs	r3, #32
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009576:	e1dc      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009578:	2340      	movs	r3, #64	; 0x40
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800957e:	e1d8      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009580:	2380      	movs	r3, #128	; 0x80
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009586:	e1d4      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a4f      	ldr	r2, [pc, #316]	; (80096cc <UART_SetConfig+0x340>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d130      	bne.n	80095f4 <UART_SetConfig+0x268>
 8009592:	4b4c      	ldr	r3, [pc, #304]	; (80096c4 <UART_SetConfig+0x338>)
 8009594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009596:	f003 0307 	and.w	r3, r3, #7
 800959a:	2b05      	cmp	r3, #5
 800959c:	d826      	bhi.n	80095ec <UART_SetConfig+0x260>
 800959e:	a201      	add	r2, pc, #4	; (adr r2, 80095a4 <UART_SetConfig+0x218>)
 80095a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a4:	080095bd 	.word	0x080095bd
 80095a8:	080095c5 	.word	0x080095c5
 80095ac:	080095cd 	.word	0x080095cd
 80095b0:	080095d5 	.word	0x080095d5
 80095b4:	080095dd 	.word	0x080095dd
 80095b8:	080095e5 	.word	0x080095e5
 80095bc:	2300      	movs	r3, #0
 80095be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095c2:	e1b6      	b.n	8009932 <UART_SetConfig+0x5a6>
 80095c4:	2304      	movs	r3, #4
 80095c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ca:	e1b2      	b.n	8009932 <UART_SetConfig+0x5a6>
 80095cc:	2308      	movs	r3, #8
 80095ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095d2:	e1ae      	b.n	8009932 <UART_SetConfig+0x5a6>
 80095d4:	2310      	movs	r3, #16
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095da:	e1aa      	b.n	8009932 <UART_SetConfig+0x5a6>
 80095dc:	2320      	movs	r3, #32
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095e2:	e1a6      	b.n	8009932 <UART_SetConfig+0x5a6>
 80095e4:	2340      	movs	r3, #64	; 0x40
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ea:	e1a2      	b.n	8009932 <UART_SetConfig+0x5a6>
 80095ec:	2380      	movs	r3, #128	; 0x80
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095f2:	e19e      	b.n	8009932 <UART_SetConfig+0x5a6>
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a35      	ldr	r2, [pc, #212]	; (80096d0 <UART_SetConfig+0x344>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d130      	bne.n	8009660 <UART_SetConfig+0x2d4>
 80095fe:	4b31      	ldr	r3, [pc, #196]	; (80096c4 <UART_SetConfig+0x338>)
 8009600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009602:	f003 0307 	and.w	r3, r3, #7
 8009606:	2b05      	cmp	r3, #5
 8009608:	d826      	bhi.n	8009658 <UART_SetConfig+0x2cc>
 800960a:	a201      	add	r2, pc, #4	; (adr r2, 8009610 <UART_SetConfig+0x284>)
 800960c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009610:	08009629 	.word	0x08009629
 8009614:	08009631 	.word	0x08009631
 8009618:	08009639 	.word	0x08009639
 800961c:	08009641 	.word	0x08009641
 8009620:	08009649 	.word	0x08009649
 8009624:	08009651 	.word	0x08009651
 8009628:	2300      	movs	r3, #0
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800962e:	e180      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009630:	2304      	movs	r3, #4
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009636:	e17c      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009638:	2308      	movs	r3, #8
 800963a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800963e:	e178      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009640:	2310      	movs	r3, #16
 8009642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009646:	e174      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009648:	2320      	movs	r3, #32
 800964a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800964e:	e170      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009650:	2340      	movs	r3, #64	; 0x40
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009656:	e16c      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009658:	2380      	movs	r3, #128	; 0x80
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800965e:	e168      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a1b      	ldr	r2, [pc, #108]	; (80096d4 <UART_SetConfig+0x348>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d142      	bne.n	80096f0 <UART_SetConfig+0x364>
 800966a:	4b16      	ldr	r3, [pc, #88]	; (80096c4 <UART_SetConfig+0x338>)
 800966c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800966e:	f003 0307 	and.w	r3, r3, #7
 8009672:	2b05      	cmp	r3, #5
 8009674:	d838      	bhi.n	80096e8 <UART_SetConfig+0x35c>
 8009676:	a201      	add	r2, pc, #4	; (adr r2, 800967c <UART_SetConfig+0x2f0>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	08009695 	.word	0x08009695
 8009680:	0800969d 	.word	0x0800969d
 8009684:	080096a5 	.word	0x080096a5
 8009688:	080096ad 	.word	0x080096ad
 800968c:	080096d9 	.word	0x080096d9
 8009690:	080096e1 	.word	0x080096e1
 8009694:	2300      	movs	r3, #0
 8009696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800969a:	e14a      	b.n	8009932 <UART_SetConfig+0x5a6>
 800969c:	2304      	movs	r3, #4
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096a2:	e146      	b.n	8009932 <UART_SetConfig+0x5a6>
 80096a4:	2308      	movs	r3, #8
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096aa:	e142      	b.n	8009932 <UART_SetConfig+0x5a6>
 80096ac:	2310      	movs	r3, #16
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096b2:	e13e      	b.n	8009932 <UART_SetConfig+0x5a6>
 80096b4:	cfff69f3 	.word	0xcfff69f3
 80096b8:	58000c00 	.word	0x58000c00
 80096bc:	11fff4ff 	.word	0x11fff4ff
 80096c0:	40011000 	.word	0x40011000
 80096c4:	58024400 	.word	0x58024400
 80096c8:	40004400 	.word	0x40004400
 80096cc:	40004800 	.word	0x40004800
 80096d0:	40004c00 	.word	0x40004c00
 80096d4:	40005000 	.word	0x40005000
 80096d8:	2320      	movs	r3, #32
 80096da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096de:	e128      	b.n	8009932 <UART_SetConfig+0x5a6>
 80096e0:	2340      	movs	r3, #64	; 0x40
 80096e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096e6:	e124      	b.n	8009932 <UART_SetConfig+0x5a6>
 80096e8:	2380      	movs	r3, #128	; 0x80
 80096ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ee:	e120      	b.n	8009932 <UART_SetConfig+0x5a6>
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4acb      	ldr	r2, [pc, #812]	; (8009a24 <UART_SetConfig+0x698>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d176      	bne.n	80097e8 <UART_SetConfig+0x45c>
 80096fa:	4bcb      	ldr	r3, [pc, #812]	; (8009a28 <UART_SetConfig+0x69c>)
 80096fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009702:	2b28      	cmp	r3, #40	; 0x28
 8009704:	d86c      	bhi.n	80097e0 <UART_SetConfig+0x454>
 8009706:	a201      	add	r2, pc, #4	; (adr r2, 800970c <UART_SetConfig+0x380>)
 8009708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970c:	080097b1 	.word	0x080097b1
 8009710:	080097e1 	.word	0x080097e1
 8009714:	080097e1 	.word	0x080097e1
 8009718:	080097e1 	.word	0x080097e1
 800971c:	080097e1 	.word	0x080097e1
 8009720:	080097e1 	.word	0x080097e1
 8009724:	080097e1 	.word	0x080097e1
 8009728:	080097e1 	.word	0x080097e1
 800972c:	080097b9 	.word	0x080097b9
 8009730:	080097e1 	.word	0x080097e1
 8009734:	080097e1 	.word	0x080097e1
 8009738:	080097e1 	.word	0x080097e1
 800973c:	080097e1 	.word	0x080097e1
 8009740:	080097e1 	.word	0x080097e1
 8009744:	080097e1 	.word	0x080097e1
 8009748:	080097e1 	.word	0x080097e1
 800974c:	080097c1 	.word	0x080097c1
 8009750:	080097e1 	.word	0x080097e1
 8009754:	080097e1 	.word	0x080097e1
 8009758:	080097e1 	.word	0x080097e1
 800975c:	080097e1 	.word	0x080097e1
 8009760:	080097e1 	.word	0x080097e1
 8009764:	080097e1 	.word	0x080097e1
 8009768:	080097e1 	.word	0x080097e1
 800976c:	080097c9 	.word	0x080097c9
 8009770:	080097e1 	.word	0x080097e1
 8009774:	080097e1 	.word	0x080097e1
 8009778:	080097e1 	.word	0x080097e1
 800977c:	080097e1 	.word	0x080097e1
 8009780:	080097e1 	.word	0x080097e1
 8009784:	080097e1 	.word	0x080097e1
 8009788:	080097e1 	.word	0x080097e1
 800978c:	080097d1 	.word	0x080097d1
 8009790:	080097e1 	.word	0x080097e1
 8009794:	080097e1 	.word	0x080097e1
 8009798:	080097e1 	.word	0x080097e1
 800979c:	080097e1 	.word	0x080097e1
 80097a0:	080097e1 	.word	0x080097e1
 80097a4:	080097e1 	.word	0x080097e1
 80097a8:	080097e1 	.word	0x080097e1
 80097ac:	080097d9 	.word	0x080097d9
 80097b0:	2301      	movs	r3, #1
 80097b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097b6:	e0bc      	b.n	8009932 <UART_SetConfig+0x5a6>
 80097b8:	2304      	movs	r3, #4
 80097ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097be:	e0b8      	b.n	8009932 <UART_SetConfig+0x5a6>
 80097c0:	2308      	movs	r3, #8
 80097c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097c6:	e0b4      	b.n	8009932 <UART_SetConfig+0x5a6>
 80097c8:	2310      	movs	r3, #16
 80097ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ce:	e0b0      	b.n	8009932 <UART_SetConfig+0x5a6>
 80097d0:	2320      	movs	r3, #32
 80097d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097d6:	e0ac      	b.n	8009932 <UART_SetConfig+0x5a6>
 80097d8:	2340      	movs	r3, #64	; 0x40
 80097da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097de:	e0a8      	b.n	8009932 <UART_SetConfig+0x5a6>
 80097e0:	2380      	movs	r3, #128	; 0x80
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097e6:	e0a4      	b.n	8009932 <UART_SetConfig+0x5a6>
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a8f      	ldr	r2, [pc, #572]	; (8009a2c <UART_SetConfig+0x6a0>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d130      	bne.n	8009854 <UART_SetConfig+0x4c8>
 80097f2:	4b8d      	ldr	r3, [pc, #564]	; (8009a28 <UART_SetConfig+0x69c>)
 80097f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f6:	f003 0307 	and.w	r3, r3, #7
 80097fa:	2b05      	cmp	r3, #5
 80097fc:	d826      	bhi.n	800984c <UART_SetConfig+0x4c0>
 80097fe:	a201      	add	r2, pc, #4	; (adr r2, 8009804 <UART_SetConfig+0x478>)
 8009800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009804:	0800981d 	.word	0x0800981d
 8009808:	08009825 	.word	0x08009825
 800980c:	0800982d 	.word	0x0800982d
 8009810:	08009835 	.word	0x08009835
 8009814:	0800983d 	.word	0x0800983d
 8009818:	08009845 	.word	0x08009845
 800981c:	2300      	movs	r3, #0
 800981e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009822:	e086      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009824:	2304      	movs	r3, #4
 8009826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800982a:	e082      	b.n	8009932 <UART_SetConfig+0x5a6>
 800982c:	2308      	movs	r3, #8
 800982e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009832:	e07e      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009834:	2310      	movs	r3, #16
 8009836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800983a:	e07a      	b.n	8009932 <UART_SetConfig+0x5a6>
 800983c:	2320      	movs	r3, #32
 800983e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009842:	e076      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009844:	2340      	movs	r3, #64	; 0x40
 8009846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800984a:	e072      	b.n	8009932 <UART_SetConfig+0x5a6>
 800984c:	2380      	movs	r3, #128	; 0x80
 800984e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009852:	e06e      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a75      	ldr	r2, [pc, #468]	; (8009a30 <UART_SetConfig+0x6a4>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d130      	bne.n	80098c0 <UART_SetConfig+0x534>
 800985e:	4b72      	ldr	r3, [pc, #456]	; (8009a28 <UART_SetConfig+0x69c>)
 8009860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009862:	f003 0307 	and.w	r3, r3, #7
 8009866:	2b05      	cmp	r3, #5
 8009868:	d826      	bhi.n	80098b8 <UART_SetConfig+0x52c>
 800986a:	a201      	add	r2, pc, #4	; (adr r2, 8009870 <UART_SetConfig+0x4e4>)
 800986c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009870:	08009889 	.word	0x08009889
 8009874:	08009891 	.word	0x08009891
 8009878:	08009899 	.word	0x08009899
 800987c:	080098a1 	.word	0x080098a1
 8009880:	080098a9 	.word	0x080098a9
 8009884:	080098b1 	.word	0x080098b1
 8009888:	2300      	movs	r3, #0
 800988a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800988e:	e050      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009890:	2304      	movs	r3, #4
 8009892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009896:	e04c      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009898:	2308      	movs	r3, #8
 800989a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800989e:	e048      	b.n	8009932 <UART_SetConfig+0x5a6>
 80098a0:	2310      	movs	r3, #16
 80098a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a6:	e044      	b.n	8009932 <UART_SetConfig+0x5a6>
 80098a8:	2320      	movs	r3, #32
 80098aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ae:	e040      	b.n	8009932 <UART_SetConfig+0x5a6>
 80098b0:	2340      	movs	r3, #64	; 0x40
 80098b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098b6:	e03c      	b.n	8009932 <UART_SetConfig+0x5a6>
 80098b8:	2380      	movs	r3, #128	; 0x80
 80098ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098be:	e038      	b.n	8009932 <UART_SetConfig+0x5a6>
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a5b      	ldr	r2, [pc, #364]	; (8009a34 <UART_SetConfig+0x6a8>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d130      	bne.n	800992c <UART_SetConfig+0x5a0>
 80098ca:	4b57      	ldr	r3, [pc, #348]	; (8009a28 <UART_SetConfig+0x69c>)
 80098cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ce:	f003 0307 	and.w	r3, r3, #7
 80098d2:	2b05      	cmp	r3, #5
 80098d4:	d826      	bhi.n	8009924 <UART_SetConfig+0x598>
 80098d6:	a201      	add	r2, pc, #4	; (adr r2, 80098dc <UART_SetConfig+0x550>)
 80098d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098dc:	080098f5 	.word	0x080098f5
 80098e0:	080098fd 	.word	0x080098fd
 80098e4:	08009905 	.word	0x08009905
 80098e8:	0800990d 	.word	0x0800990d
 80098ec:	08009915 	.word	0x08009915
 80098f0:	0800991d 	.word	0x0800991d
 80098f4:	2302      	movs	r3, #2
 80098f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098fa:	e01a      	b.n	8009932 <UART_SetConfig+0x5a6>
 80098fc:	2304      	movs	r3, #4
 80098fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009902:	e016      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009904:	2308      	movs	r3, #8
 8009906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800990a:	e012      	b.n	8009932 <UART_SetConfig+0x5a6>
 800990c:	2310      	movs	r3, #16
 800990e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009912:	e00e      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009914:	2320      	movs	r3, #32
 8009916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800991a:	e00a      	b.n	8009932 <UART_SetConfig+0x5a6>
 800991c:	2340      	movs	r3, #64	; 0x40
 800991e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009922:	e006      	b.n	8009932 <UART_SetConfig+0x5a6>
 8009924:	2380      	movs	r3, #128	; 0x80
 8009926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800992a:	e002      	b.n	8009932 <UART_SetConfig+0x5a6>
 800992c:	2380      	movs	r3, #128	; 0x80
 800992e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a3f      	ldr	r2, [pc, #252]	; (8009a34 <UART_SetConfig+0x6a8>)
 8009938:	4293      	cmp	r3, r2
 800993a:	f040 80f8 	bne.w	8009b2e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800993e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009942:	2b20      	cmp	r3, #32
 8009944:	dc46      	bgt.n	80099d4 <UART_SetConfig+0x648>
 8009946:	2b02      	cmp	r3, #2
 8009948:	f2c0 8082 	blt.w	8009a50 <UART_SetConfig+0x6c4>
 800994c:	3b02      	subs	r3, #2
 800994e:	2b1e      	cmp	r3, #30
 8009950:	d87e      	bhi.n	8009a50 <UART_SetConfig+0x6c4>
 8009952:	a201      	add	r2, pc, #4	; (adr r2, 8009958 <UART_SetConfig+0x5cc>)
 8009954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009958:	080099db 	.word	0x080099db
 800995c:	08009a51 	.word	0x08009a51
 8009960:	080099e3 	.word	0x080099e3
 8009964:	08009a51 	.word	0x08009a51
 8009968:	08009a51 	.word	0x08009a51
 800996c:	08009a51 	.word	0x08009a51
 8009970:	080099f3 	.word	0x080099f3
 8009974:	08009a51 	.word	0x08009a51
 8009978:	08009a51 	.word	0x08009a51
 800997c:	08009a51 	.word	0x08009a51
 8009980:	08009a51 	.word	0x08009a51
 8009984:	08009a51 	.word	0x08009a51
 8009988:	08009a51 	.word	0x08009a51
 800998c:	08009a51 	.word	0x08009a51
 8009990:	08009a03 	.word	0x08009a03
 8009994:	08009a51 	.word	0x08009a51
 8009998:	08009a51 	.word	0x08009a51
 800999c:	08009a51 	.word	0x08009a51
 80099a0:	08009a51 	.word	0x08009a51
 80099a4:	08009a51 	.word	0x08009a51
 80099a8:	08009a51 	.word	0x08009a51
 80099ac:	08009a51 	.word	0x08009a51
 80099b0:	08009a51 	.word	0x08009a51
 80099b4:	08009a51 	.word	0x08009a51
 80099b8:	08009a51 	.word	0x08009a51
 80099bc:	08009a51 	.word	0x08009a51
 80099c0:	08009a51 	.word	0x08009a51
 80099c4:	08009a51 	.word	0x08009a51
 80099c8:	08009a51 	.word	0x08009a51
 80099cc:	08009a51 	.word	0x08009a51
 80099d0:	08009a43 	.word	0x08009a43
 80099d4:	2b40      	cmp	r3, #64	; 0x40
 80099d6:	d037      	beq.n	8009a48 <UART_SetConfig+0x6bc>
 80099d8:	e03a      	b.n	8009a50 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80099da:	f7fd fc49 	bl	8007270 <HAL_RCCEx_GetD3PCLK1Freq>
 80099de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80099e0:	e03c      	b.n	8009a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fd fc58 	bl	800729c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80099ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099f0:	e034      	b.n	8009a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099f2:	f107 0318 	add.w	r3, r7, #24
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fd fda4 	bl	8007544 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a00:	e02c      	b.n	8009a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a02:	4b09      	ldr	r3, [pc, #36]	; (8009a28 <UART_SetConfig+0x69c>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0320 	and.w	r3, r3, #32
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d016      	beq.n	8009a3c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a0e:	4b06      	ldr	r3, [pc, #24]	; (8009a28 <UART_SetConfig+0x69c>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	08db      	lsrs	r3, r3, #3
 8009a14:	f003 0303 	and.w	r3, r3, #3
 8009a18:	4a07      	ldr	r2, [pc, #28]	; (8009a38 <UART_SetConfig+0x6ac>)
 8009a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a20:	e01c      	b.n	8009a5c <UART_SetConfig+0x6d0>
 8009a22:	bf00      	nop
 8009a24:	40011400 	.word	0x40011400
 8009a28:	58024400 	.word	0x58024400
 8009a2c:	40007800 	.word	0x40007800
 8009a30:	40007c00 	.word	0x40007c00
 8009a34:	58000c00 	.word	0x58000c00
 8009a38:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009a3c:	4b9d      	ldr	r3, [pc, #628]	; (8009cb4 <UART_SetConfig+0x928>)
 8009a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a40:	e00c      	b.n	8009a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a42:	4b9d      	ldr	r3, [pc, #628]	; (8009cb8 <UART_SetConfig+0x92c>)
 8009a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a46:	e009      	b.n	8009a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a4e:	e005      	b.n	8009a5c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009a50:	2300      	movs	r3, #0
 8009a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009a5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 81de 	beq.w	8009e20 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	4a94      	ldr	r2, [pc, #592]	; (8009cbc <UART_SetConfig+0x930>)
 8009a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a72:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a76:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	4413      	add	r3, r2
 8009a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d305      	bcc.n	8009a94 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d903      	bls.n	8009a9c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009a9a:	e1c1      	b.n	8009e20 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	60bb      	str	r3, [r7, #8]
 8009aa2:	60fa      	str	r2, [r7, #12]
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	4a84      	ldr	r2, [pc, #528]	; (8009cbc <UART_SetConfig+0x930>)
 8009aaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	603b      	str	r3, [r7, #0]
 8009ab4:	607a      	str	r2, [r7, #4]
 8009ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009abe:	f7f6 fc5f 	bl	8000380 <__aeabi_uldivmod>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	4619      	mov	r1, r3
 8009aca:	f04f 0200 	mov.w	r2, #0
 8009ace:	f04f 0300 	mov.w	r3, #0
 8009ad2:	020b      	lsls	r3, r1, #8
 8009ad4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ad8:	0202      	lsls	r2, r0, #8
 8009ada:	6979      	ldr	r1, [r7, #20]
 8009adc:	6849      	ldr	r1, [r1, #4]
 8009ade:	0849      	lsrs	r1, r1, #1
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	4605      	mov	r5, r0
 8009ae6:	eb12 0804 	adds.w	r8, r2, r4
 8009aea:	eb43 0905 	adc.w	r9, r3, r5
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	469a      	mov	sl, r3
 8009af6:	4693      	mov	fp, r2
 8009af8:	4652      	mov	r2, sl
 8009afa:	465b      	mov	r3, fp
 8009afc:	4640      	mov	r0, r8
 8009afe:	4649      	mov	r1, r9
 8009b00:	f7f6 fc3e 	bl	8000380 <__aeabi_uldivmod>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4613      	mov	r3, r2
 8009b0a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b12:	d308      	bcc.n	8009b26 <UART_SetConfig+0x79a>
 8009b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b1a:	d204      	bcs.n	8009b26 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b22:	60da      	str	r2, [r3, #12]
 8009b24:	e17c      	b.n	8009e20 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009b2c:	e178      	b.n	8009e20 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b36:	f040 80c5 	bne.w	8009cc4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009b3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b3e:	2b20      	cmp	r3, #32
 8009b40:	dc48      	bgt.n	8009bd4 <UART_SetConfig+0x848>
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	db7b      	blt.n	8009c3e <UART_SetConfig+0x8b2>
 8009b46:	2b20      	cmp	r3, #32
 8009b48:	d879      	bhi.n	8009c3e <UART_SetConfig+0x8b2>
 8009b4a:	a201      	add	r2, pc, #4	; (adr r2, 8009b50 <UART_SetConfig+0x7c4>)
 8009b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b50:	08009bdb 	.word	0x08009bdb
 8009b54:	08009be3 	.word	0x08009be3
 8009b58:	08009c3f 	.word	0x08009c3f
 8009b5c:	08009c3f 	.word	0x08009c3f
 8009b60:	08009beb 	.word	0x08009beb
 8009b64:	08009c3f 	.word	0x08009c3f
 8009b68:	08009c3f 	.word	0x08009c3f
 8009b6c:	08009c3f 	.word	0x08009c3f
 8009b70:	08009bfb 	.word	0x08009bfb
 8009b74:	08009c3f 	.word	0x08009c3f
 8009b78:	08009c3f 	.word	0x08009c3f
 8009b7c:	08009c3f 	.word	0x08009c3f
 8009b80:	08009c3f 	.word	0x08009c3f
 8009b84:	08009c3f 	.word	0x08009c3f
 8009b88:	08009c3f 	.word	0x08009c3f
 8009b8c:	08009c3f 	.word	0x08009c3f
 8009b90:	08009c0b 	.word	0x08009c0b
 8009b94:	08009c3f 	.word	0x08009c3f
 8009b98:	08009c3f 	.word	0x08009c3f
 8009b9c:	08009c3f 	.word	0x08009c3f
 8009ba0:	08009c3f 	.word	0x08009c3f
 8009ba4:	08009c3f 	.word	0x08009c3f
 8009ba8:	08009c3f 	.word	0x08009c3f
 8009bac:	08009c3f 	.word	0x08009c3f
 8009bb0:	08009c3f 	.word	0x08009c3f
 8009bb4:	08009c3f 	.word	0x08009c3f
 8009bb8:	08009c3f 	.word	0x08009c3f
 8009bbc:	08009c3f 	.word	0x08009c3f
 8009bc0:	08009c3f 	.word	0x08009c3f
 8009bc4:	08009c3f 	.word	0x08009c3f
 8009bc8:	08009c3f 	.word	0x08009c3f
 8009bcc:	08009c3f 	.word	0x08009c3f
 8009bd0:	08009c31 	.word	0x08009c31
 8009bd4:	2b40      	cmp	r3, #64	; 0x40
 8009bd6:	d02e      	beq.n	8009c36 <UART_SetConfig+0x8aa>
 8009bd8:	e031      	b.n	8009c3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bda:	f7fb ff05 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8009bde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009be0:	e033      	b.n	8009c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009be2:	f7fb ff17 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 8009be6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009be8:	e02f      	b.n	8009c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fd fb54 	bl	800729c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bf8:	e027      	b.n	8009c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bfa:	f107 0318 	add.w	r3, r7, #24
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fd fca0 	bl	8007544 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c08:	e01f      	b.n	8009c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c0a:	4b2d      	ldr	r3, [pc, #180]	; (8009cc0 <UART_SetConfig+0x934>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f003 0320 	and.w	r3, r3, #32
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d009      	beq.n	8009c2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c16:	4b2a      	ldr	r3, [pc, #168]	; (8009cc0 <UART_SetConfig+0x934>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	08db      	lsrs	r3, r3, #3
 8009c1c:	f003 0303 	and.w	r3, r3, #3
 8009c20:	4a24      	ldr	r2, [pc, #144]	; (8009cb4 <UART_SetConfig+0x928>)
 8009c22:	fa22 f303 	lsr.w	r3, r2, r3
 8009c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c28:	e00f      	b.n	8009c4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009c2a:	4b22      	ldr	r3, [pc, #136]	; (8009cb4 <UART_SetConfig+0x928>)
 8009c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c2e:	e00c      	b.n	8009c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c30:	4b21      	ldr	r3, [pc, #132]	; (8009cb8 <UART_SetConfig+0x92c>)
 8009c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c34:	e009      	b.n	8009c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c3c:	e005      	b.n	8009c4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009c48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f000 80e7 	beq.w	8009e20 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c56:	4a19      	ldr	r2, [pc, #100]	; (8009cbc <UART_SetConfig+0x930>)
 8009c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c64:	005a      	lsls	r2, r3, #1
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	085b      	lsrs	r3, r3, #1
 8009c6c:	441a      	add	r2, r3
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c76:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7a:	2b0f      	cmp	r3, #15
 8009c7c:	d916      	bls.n	8009cac <UART_SetConfig+0x920>
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c84:	d212      	bcs.n	8009cac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	f023 030f 	bic.w	r3, r3, #15
 8009c8e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c92:	085b      	lsrs	r3, r3, #1
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	f003 0307 	and.w	r3, r3, #7
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009ca8:	60da      	str	r2, [r3, #12]
 8009caa:	e0b9      	b.n	8009e20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009cb2:	e0b5      	b.n	8009e20 <UART_SetConfig+0xa94>
 8009cb4:	03d09000 	.word	0x03d09000
 8009cb8:	003d0900 	.word	0x003d0900
 8009cbc:	0800b390 	.word	0x0800b390
 8009cc0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cc4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009cc8:	2b20      	cmp	r3, #32
 8009cca:	dc49      	bgt.n	8009d60 <UART_SetConfig+0x9d4>
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	db7c      	blt.n	8009dca <UART_SetConfig+0xa3e>
 8009cd0:	2b20      	cmp	r3, #32
 8009cd2:	d87a      	bhi.n	8009dca <UART_SetConfig+0xa3e>
 8009cd4:	a201      	add	r2, pc, #4	; (adr r2, 8009cdc <UART_SetConfig+0x950>)
 8009cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cda:	bf00      	nop
 8009cdc:	08009d67 	.word	0x08009d67
 8009ce0:	08009d6f 	.word	0x08009d6f
 8009ce4:	08009dcb 	.word	0x08009dcb
 8009ce8:	08009dcb 	.word	0x08009dcb
 8009cec:	08009d77 	.word	0x08009d77
 8009cf0:	08009dcb 	.word	0x08009dcb
 8009cf4:	08009dcb 	.word	0x08009dcb
 8009cf8:	08009dcb 	.word	0x08009dcb
 8009cfc:	08009d87 	.word	0x08009d87
 8009d00:	08009dcb 	.word	0x08009dcb
 8009d04:	08009dcb 	.word	0x08009dcb
 8009d08:	08009dcb 	.word	0x08009dcb
 8009d0c:	08009dcb 	.word	0x08009dcb
 8009d10:	08009dcb 	.word	0x08009dcb
 8009d14:	08009dcb 	.word	0x08009dcb
 8009d18:	08009dcb 	.word	0x08009dcb
 8009d1c:	08009d97 	.word	0x08009d97
 8009d20:	08009dcb 	.word	0x08009dcb
 8009d24:	08009dcb 	.word	0x08009dcb
 8009d28:	08009dcb 	.word	0x08009dcb
 8009d2c:	08009dcb 	.word	0x08009dcb
 8009d30:	08009dcb 	.word	0x08009dcb
 8009d34:	08009dcb 	.word	0x08009dcb
 8009d38:	08009dcb 	.word	0x08009dcb
 8009d3c:	08009dcb 	.word	0x08009dcb
 8009d40:	08009dcb 	.word	0x08009dcb
 8009d44:	08009dcb 	.word	0x08009dcb
 8009d48:	08009dcb 	.word	0x08009dcb
 8009d4c:	08009dcb 	.word	0x08009dcb
 8009d50:	08009dcb 	.word	0x08009dcb
 8009d54:	08009dcb 	.word	0x08009dcb
 8009d58:	08009dcb 	.word	0x08009dcb
 8009d5c:	08009dbd 	.word	0x08009dbd
 8009d60:	2b40      	cmp	r3, #64	; 0x40
 8009d62:	d02e      	beq.n	8009dc2 <UART_SetConfig+0xa36>
 8009d64:	e031      	b.n	8009dca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d66:	f7fb fe3f 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8009d6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d6c:	e033      	b.n	8009dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d6e:	f7fb fe51 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 8009d72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d74:	e02f      	b.n	8009dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fd fa8e 	bl	800729c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d84:	e027      	b.n	8009dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d86:	f107 0318 	add.w	r3, r7, #24
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fd fbda 	bl	8007544 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d94:	e01f      	b.n	8009dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d96:	4b2d      	ldr	r3, [pc, #180]	; (8009e4c <UART_SetConfig+0xac0>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 0320 	and.w	r3, r3, #32
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d009      	beq.n	8009db6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009da2:	4b2a      	ldr	r3, [pc, #168]	; (8009e4c <UART_SetConfig+0xac0>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	08db      	lsrs	r3, r3, #3
 8009da8:	f003 0303 	and.w	r3, r3, #3
 8009dac:	4a28      	ldr	r2, [pc, #160]	; (8009e50 <UART_SetConfig+0xac4>)
 8009dae:	fa22 f303 	lsr.w	r3, r2, r3
 8009db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009db4:	e00f      	b.n	8009dd6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009db6:	4b26      	ldr	r3, [pc, #152]	; (8009e50 <UART_SetConfig+0xac4>)
 8009db8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dba:	e00c      	b.n	8009dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009dbc:	4b25      	ldr	r3, [pc, #148]	; (8009e54 <UART_SetConfig+0xac8>)
 8009dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dc0:	e009      	b.n	8009dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dc8:	e005      	b.n	8009dd6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009dd4:	bf00      	nop
    }

    if (pclk != 0U)
 8009dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d021      	beq.n	8009e20 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de0:	4a1d      	ldr	r2, [pc, #116]	; (8009e58 <UART_SetConfig+0xacc>)
 8009de2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009de6:	461a      	mov	r2, r3
 8009de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dea:	fbb3 f2f2 	udiv	r2, r3, r2
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	085b      	lsrs	r3, r3, #1
 8009df4:	441a      	add	r2, r3
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dfe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e02:	2b0f      	cmp	r3, #15
 8009e04:	d909      	bls.n	8009e1a <UART_SetConfig+0xa8e>
 8009e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e0c:	d205      	bcs.n	8009e1a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	60da      	str	r2, [r3, #12]
 8009e18:	e002      	b.n	8009e20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	2201      	movs	r2, #1
 8009e24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	2200      	movs	r2, #0
 8009e34:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009e3c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3748      	adds	r7, #72	; 0x48
 8009e44:	46bd      	mov	sp, r7
 8009e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e4a:	bf00      	nop
 8009e4c:	58024400 	.word	0x58024400
 8009e50:	03d09000 	.word	0x03d09000
 8009e54:	003d0900 	.word	0x003d0900
 8009e58:	0800b390 	.word	0x0800b390

08009e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e68:	f003 0301 	and.w	r3, r3, #1
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00a      	beq.n	8009e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	430a      	orrs	r2, r1
 8009e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e8a:	f003 0302 	and.w	r3, r3, #2
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00a      	beq.n	8009ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	430a      	orrs	r2, r1
 8009ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eac:	f003 0304 	and.w	r3, r3, #4
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00a      	beq.n	8009eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	430a      	orrs	r2, r1
 8009ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ece:	f003 0308 	and.w	r3, r3, #8
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00a      	beq.n	8009eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	430a      	orrs	r2, r1
 8009eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef0:	f003 0310 	and.w	r3, r3, #16
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00a      	beq.n	8009f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f12:	f003 0320 	and.w	r3, r3, #32
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00a      	beq.n	8009f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	430a      	orrs	r2, r1
 8009f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d01a      	beq.n	8009f72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f5a:	d10a      	bne.n	8009f72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	430a      	orrs	r2, r1
 8009f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00a      	beq.n	8009f94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	430a      	orrs	r2, r1
 8009f92:	605a      	str	r2, [r3, #4]
  }
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af02      	add	r7, sp, #8
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fb0:	f7f7 fe54 	bl	8001c5c <HAL_GetTick>
 8009fb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 0308 	and.w	r3, r3, #8
 8009fc0:	2b08      	cmp	r3, #8
 8009fc2:	d10e      	bne.n	8009fe2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f82f 	bl	800a036 <UART_WaitOnFlagUntilTimeout>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d001      	beq.n	8009fe2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e025      	b.n	800a02e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 0304 	and.w	r3, r3, #4
 8009fec:	2b04      	cmp	r3, #4
 8009fee:	d10e      	bne.n	800a00e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ff4:	9300      	str	r3, [sp, #0]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f819 	bl	800a036 <UART_WaitOnFlagUntilTimeout>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a00a:	2303      	movs	r3, #3
 800a00c:	e00f      	b.n	800a02e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2220      	movs	r2, #32
 800a012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2220      	movs	r2, #32
 800a01a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b09c      	sub	sp, #112	; 0x70
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	60b9      	str	r1, [r7, #8]
 800a040:	603b      	str	r3, [r7, #0]
 800a042:	4613      	mov	r3, r2
 800a044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a046:	e0a9      	b.n	800a19c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04e:	f000 80a5 	beq.w	800a19c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a052:	f7f7 fe03 	bl	8001c5c <HAL_GetTick>
 800a056:	4602      	mov	r2, r0
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a05e:	429a      	cmp	r2, r3
 800a060:	d302      	bcc.n	800a068 <UART_WaitOnFlagUntilTimeout+0x32>
 800a062:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a064:	2b00      	cmp	r3, #0
 800a066:	d140      	bne.n	800a0ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a070:	e853 3f00 	ldrex	r3, [r3]
 800a074:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a078:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a07c:	667b      	str	r3, [r7, #100]	; 0x64
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	461a      	mov	r2, r3
 800a084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a086:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a088:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a08c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a08e:	e841 2300 	strex	r3, r2, [r1]
 800a092:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1e6      	bne.n	800a068 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	3308      	adds	r3, #8
 800a0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0a4:	e853 3f00 	ldrex	r3, [r3]
 800a0a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ac:	f023 0301 	bic.w	r3, r3, #1
 800a0b0:	663b      	str	r3, [r7, #96]	; 0x60
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	3308      	adds	r3, #8
 800a0b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a0ba:	64ba      	str	r2, [r7, #72]	; 0x48
 800a0bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0c2:	e841 2300 	strex	r3, r2, [r1]
 800a0c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1e5      	bne.n	800a09a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2220      	movs	r2, #32
 800a0d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2220      	movs	r2, #32
 800a0da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e069      	b.n	800a1be <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 0304 	and.w	r3, r3, #4
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d051      	beq.n	800a19c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	69db      	ldr	r3, [r3, #28]
 800a0fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a106:	d149      	bne.n	800a19c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a110:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11a:	e853 3f00 	ldrex	r3, [r3]
 800a11e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a126:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	461a      	mov	r2, r3
 800a12e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a130:	637b      	str	r3, [r7, #52]	; 0x34
 800a132:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a134:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a138:	e841 2300 	strex	r3, r2, [r1]
 800a13c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1e6      	bne.n	800a112 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	3308      	adds	r3, #8
 800a14a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	e853 3f00 	ldrex	r3, [r3]
 800a152:	613b      	str	r3, [r7, #16]
   return(result);
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	f023 0301 	bic.w	r3, r3, #1
 800a15a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	3308      	adds	r3, #8
 800a162:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a164:	623a      	str	r2, [r7, #32]
 800a166:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a168:	69f9      	ldr	r1, [r7, #28]
 800a16a:	6a3a      	ldr	r2, [r7, #32]
 800a16c:	e841 2300 	strex	r3, r2, [r1]
 800a170:	61bb      	str	r3, [r7, #24]
   return(result);
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1e5      	bne.n	800a144 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2220      	movs	r2, #32
 800a17c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2220      	movs	r2, #32
 800a184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2220      	movs	r2, #32
 800a18c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a198:	2303      	movs	r3, #3
 800a19a:	e010      	b.n	800a1be <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	69da      	ldr	r2, [r3, #28]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	bf0c      	ite	eq
 800a1ac:	2301      	moveq	r3, #1
 800a1ae:	2300      	movne	r3, #0
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	79fb      	ldrb	r3, [r7, #7]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	f43f af46 	beq.w	800a048 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3770      	adds	r7, #112	; 0x70
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a1c6:	b480      	push	{r7}
 800a1c8:	b085      	sub	sp, #20
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d101      	bne.n	800a1dc <HAL_UARTEx_DisableFifoMode+0x16>
 800a1d8:	2302      	movs	r3, #2
 800a1da:	e027      	b.n	800a22c <HAL_UARTEx_DisableFifoMode+0x66>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2224      	movs	r2, #36	; 0x24
 800a1e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f022 0201 	bic.w	r2, r2, #1
 800a202:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a20a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2220      	movs	r2, #32
 800a21e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d101      	bne.n	800a250 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a24c:	2302      	movs	r3, #2
 800a24e:	e02d      	b.n	800a2ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2224      	movs	r2, #36	; 0x24
 800a25c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f022 0201 	bic.w	r2, r2, #1
 800a276:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	430a      	orrs	r2, r1
 800a28a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f84f 	bl	800a330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2220      	movs	r2, #32
 800a29e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d101      	bne.n	800a2cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a2c8:	2302      	movs	r3, #2
 800a2ca:	e02d      	b.n	800a328 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2224      	movs	r2, #36	; 0x24
 800a2d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f022 0201 	bic.w	r2, r2, #1
 800a2f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	430a      	orrs	r2, r1
 800a306:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f811 	bl	800a330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2220      	movs	r2, #32
 800a31a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d108      	bne.n	800a352 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a350:	e031      	b.n	800a3b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a352:	2310      	movs	r3, #16
 800a354:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a356:	2310      	movs	r3, #16
 800a358:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	0e5b      	lsrs	r3, r3, #25
 800a362:	b2db      	uxtb	r3, r3
 800a364:	f003 0307 	and.w	r3, r3, #7
 800a368:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	0f5b      	lsrs	r3, r3, #29
 800a372:	b2db      	uxtb	r3, r3
 800a374:	f003 0307 	and.w	r3, r3, #7
 800a378:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a37a:	7bbb      	ldrb	r3, [r7, #14]
 800a37c:	7b3a      	ldrb	r2, [r7, #12]
 800a37e:	4911      	ldr	r1, [pc, #68]	; (800a3c4 <UARTEx_SetNbDataToProcess+0x94>)
 800a380:	5c8a      	ldrb	r2, [r1, r2]
 800a382:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a386:	7b3a      	ldrb	r2, [r7, #12]
 800a388:	490f      	ldr	r1, [pc, #60]	; (800a3c8 <UARTEx_SetNbDataToProcess+0x98>)
 800a38a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a38c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a390:	b29a      	uxth	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a398:	7bfb      	ldrb	r3, [r7, #15]
 800a39a:	7b7a      	ldrb	r2, [r7, #13]
 800a39c:	4909      	ldr	r1, [pc, #36]	; (800a3c4 <UARTEx_SetNbDataToProcess+0x94>)
 800a39e:	5c8a      	ldrb	r2, [r1, r2]
 800a3a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3a4:	7b7a      	ldrb	r2, [r7, #13]
 800a3a6:	4908      	ldr	r1, [pc, #32]	; (800a3c8 <UARTEx_SetNbDataToProcess+0x98>)
 800a3a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a3b6:	bf00      	nop
 800a3b8:	3714      	adds	r7, #20
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	0800b3a8 	.word	0x0800b3a8
 800a3c8:	0800b3b0 	.word	0x0800b3b0

0800a3cc <__errno>:
 800a3cc:	4b01      	ldr	r3, [pc, #4]	; (800a3d4 <__errno+0x8>)
 800a3ce:	6818      	ldr	r0, [r3, #0]
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	24000010 	.word	0x24000010

0800a3d8 <__libc_init_array>:
 800a3d8:	b570      	push	{r4, r5, r6, lr}
 800a3da:	4d0d      	ldr	r5, [pc, #52]	; (800a410 <__libc_init_array+0x38>)
 800a3dc:	4c0d      	ldr	r4, [pc, #52]	; (800a414 <__libc_init_array+0x3c>)
 800a3de:	1b64      	subs	r4, r4, r5
 800a3e0:	10a4      	asrs	r4, r4, #2
 800a3e2:	2600      	movs	r6, #0
 800a3e4:	42a6      	cmp	r6, r4
 800a3e6:	d109      	bne.n	800a3fc <__libc_init_array+0x24>
 800a3e8:	4d0b      	ldr	r5, [pc, #44]	; (800a418 <__libc_init_array+0x40>)
 800a3ea:	4c0c      	ldr	r4, [pc, #48]	; (800a41c <__libc_init_array+0x44>)
 800a3ec:	f000 ffae 	bl	800b34c <_init>
 800a3f0:	1b64      	subs	r4, r4, r5
 800a3f2:	10a4      	asrs	r4, r4, #2
 800a3f4:	2600      	movs	r6, #0
 800a3f6:	42a6      	cmp	r6, r4
 800a3f8:	d105      	bne.n	800a406 <__libc_init_array+0x2e>
 800a3fa:	bd70      	pop	{r4, r5, r6, pc}
 800a3fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a400:	4798      	blx	r3
 800a402:	3601      	adds	r6, #1
 800a404:	e7ee      	b.n	800a3e4 <__libc_init_array+0xc>
 800a406:	f855 3b04 	ldr.w	r3, [r5], #4
 800a40a:	4798      	blx	r3
 800a40c:	3601      	adds	r6, #1
 800a40e:	e7f2      	b.n	800a3f6 <__libc_init_array+0x1e>
 800a410:	0800b458 	.word	0x0800b458
 800a414:	0800b458 	.word	0x0800b458
 800a418:	0800b458 	.word	0x0800b458
 800a41c:	0800b45c 	.word	0x0800b45c

0800a420 <memset>:
 800a420:	4402      	add	r2, r0
 800a422:	4603      	mov	r3, r0
 800a424:	4293      	cmp	r3, r2
 800a426:	d100      	bne.n	800a42a <memset+0xa>
 800a428:	4770      	bx	lr
 800a42a:	f803 1b01 	strb.w	r1, [r3], #1
 800a42e:	e7f9      	b.n	800a424 <memset+0x4>

0800a430 <iprintf>:
 800a430:	b40f      	push	{r0, r1, r2, r3}
 800a432:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <iprintf+0x2c>)
 800a434:	b513      	push	{r0, r1, r4, lr}
 800a436:	681c      	ldr	r4, [r3, #0]
 800a438:	b124      	cbz	r4, 800a444 <iprintf+0x14>
 800a43a:	69a3      	ldr	r3, [r4, #24]
 800a43c:	b913      	cbnz	r3, 800a444 <iprintf+0x14>
 800a43e:	4620      	mov	r0, r4
 800a440:	f000 f866 	bl	800a510 <__sinit>
 800a444:	ab05      	add	r3, sp, #20
 800a446:	9a04      	ldr	r2, [sp, #16]
 800a448:	68a1      	ldr	r1, [r4, #8]
 800a44a:	9301      	str	r3, [sp, #4]
 800a44c:	4620      	mov	r0, r4
 800a44e:	f000 f9bd 	bl	800a7cc <_vfiprintf_r>
 800a452:	b002      	add	sp, #8
 800a454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a458:	b004      	add	sp, #16
 800a45a:	4770      	bx	lr
 800a45c:	24000010 	.word	0x24000010

0800a460 <std>:
 800a460:	2300      	movs	r3, #0
 800a462:	b510      	push	{r4, lr}
 800a464:	4604      	mov	r4, r0
 800a466:	e9c0 3300 	strd	r3, r3, [r0]
 800a46a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a46e:	6083      	str	r3, [r0, #8]
 800a470:	8181      	strh	r1, [r0, #12]
 800a472:	6643      	str	r3, [r0, #100]	; 0x64
 800a474:	81c2      	strh	r2, [r0, #14]
 800a476:	6183      	str	r3, [r0, #24]
 800a478:	4619      	mov	r1, r3
 800a47a:	2208      	movs	r2, #8
 800a47c:	305c      	adds	r0, #92	; 0x5c
 800a47e:	f7ff ffcf 	bl	800a420 <memset>
 800a482:	4b05      	ldr	r3, [pc, #20]	; (800a498 <std+0x38>)
 800a484:	6263      	str	r3, [r4, #36]	; 0x24
 800a486:	4b05      	ldr	r3, [pc, #20]	; (800a49c <std+0x3c>)
 800a488:	62a3      	str	r3, [r4, #40]	; 0x28
 800a48a:	4b05      	ldr	r3, [pc, #20]	; (800a4a0 <std+0x40>)
 800a48c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a48e:	4b05      	ldr	r3, [pc, #20]	; (800a4a4 <std+0x44>)
 800a490:	6224      	str	r4, [r4, #32]
 800a492:	6323      	str	r3, [r4, #48]	; 0x30
 800a494:	bd10      	pop	{r4, pc}
 800a496:	bf00      	nop
 800a498:	0800ad75 	.word	0x0800ad75
 800a49c:	0800ad97 	.word	0x0800ad97
 800a4a0:	0800adcf 	.word	0x0800adcf
 800a4a4:	0800adf3 	.word	0x0800adf3

0800a4a8 <_cleanup_r>:
 800a4a8:	4901      	ldr	r1, [pc, #4]	; (800a4b0 <_cleanup_r+0x8>)
 800a4aa:	f000 b8af 	b.w	800a60c <_fwalk_reent>
 800a4ae:	bf00      	nop
 800a4b0:	0800b0cd 	.word	0x0800b0cd

0800a4b4 <__sfmoreglue>:
 800a4b4:	b570      	push	{r4, r5, r6, lr}
 800a4b6:	2268      	movs	r2, #104	; 0x68
 800a4b8:	1e4d      	subs	r5, r1, #1
 800a4ba:	4355      	muls	r5, r2
 800a4bc:	460e      	mov	r6, r1
 800a4be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4c2:	f000 f8e5 	bl	800a690 <_malloc_r>
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	b140      	cbz	r0, 800a4dc <__sfmoreglue+0x28>
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	e9c0 1600 	strd	r1, r6, [r0]
 800a4d0:	300c      	adds	r0, #12
 800a4d2:	60a0      	str	r0, [r4, #8]
 800a4d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4d8:	f7ff ffa2 	bl	800a420 <memset>
 800a4dc:	4620      	mov	r0, r4
 800a4de:	bd70      	pop	{r4, r5, r6, pc}

0800a4e0 <__sfp_lock_acquire>:
 800a4e0:	4801      	ldr	r0, [pc, #4]	; (800a4e8 <__sfp_lock_acquire+0x8>)
 800a4e2:	f000 b8b3 	b.w	800a64c <__retarget_lock_acquire_recursive>
 800a4e6:	bf00      	nop
 800a4e8:	240004dd 	.word	0x240004dd

0800a4ec <__sfp_lock_release>:
 800a4ec:	4801      	ldr	r0, [pc, #4]	; (800a4f4 <__sfp_lock_release+0x8>)
 800a4ee:	f000 b8ae 	b.w	800a64e <__retarget_lock_release_recursive>
 800a4f2:	bf00      	nop
 800a4f4:	240004dd 	.word	0x240004dd

0800a4f8 <__sinit_lock_acquire>:
 800a4f8:	4801      	ldr	r0, [pc, #4]	; (800a500 <__sinit_lock_acquire+0x8>)
 800a4fa:	f000 b8a7 	b.w	800a64c <__retarget_lock_acquire_recursive>
 800a4fe:	bf00      	nop
 800a500:	240004de 	.word	0x240004de

0800a504 <__sinit_lock_release>:
 800a504:	4801      	ldr	r0, [pc, #4]	; (800a50c <__sinit_lock_release+0x8>)
 800a506:	f000 b8a2 	b.w	800a64e <__retarget_lock_release_recursive>
 800a50a:	bf00      	nop
 800a50c:	240004de 	.word	0x240004de

0800a510 <__sinit>:
 800a510:	b510      	push	{r4, lr}
 800a512:	4604      	mov	r4, r0
 800a514:	f7ff fff0 	bl	800a4f8 <__sinit_lock_acquire>
 800a518:	69a3      	ldr	r3, [r4, #24]
 800a51a:	b11b      	cbz	r3, 800a524 <__sinit+0x14>
 800a51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a520:	f7ff bff0 	b.w	800a504 <__sinit_lock_release>
 800a524:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a528:	6523      	str	r3, [r4, #80]	; 0x50
 800a52a:	4b13      	ldr	r3, [pc, #76]	; (800a578 <__sinit+0x68>)
 800a52c:	4a13      	ldr	r2, [pc, #76]	; (800a57c <__sinit+0x6c>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	62a2      	str	r2, [r4, #40]	; 0x28
 800a532:	42a3      	cmp	r3, r4
 800a534:	bf04      	itt	eq
 800a536:	2301      	moveq	r3, #1
 800a538:	61a3      	streq	r3, [r4, #24]
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 f820 	bl	800a580 <__sfp>
 800a540:	6060      	str	r0, [r4, #4]
 800a542:	4620      	mov	r0, r4
 800a544:	f000 f81c 	bl	800a580 <__sfp>
 800a548:	60a0      	str	r0, [r4, #8]
 800a54a:	4620      	mov	r0, r4
 800a54c:	f000 f818 	bl	800a580 <__sfp>
 800a550:	2200      	movs	r2, #0
 800a552:	60e0      	str	r0, [r4, #12]
 800a554:	2104      	movs	r1, #4
 800a556:	6860      	ldr	r0, [r4, #4]
 800a558:	f7ff ff82 	bl	800a460 <std>
 800a55c:	68a0      	ldr	r0, [r4, #8]
 800a55e:	2201      	movs	r2, #1
 800a560:	2109      	movs	r1, #9
 800a562:	f7ff ff7d 	bl	800a460 <std>
 800a566:	68e0      	ldr	r0, [r4, #12]
 800a568:	2202      	movs	r2, #2
 800a56a:	2112      	movs	r1, #18
 800a56c:	f7ff ff78 	bl	800a460 <std>
 800a570:	2301      	movs	r3, #1
 800a572:	61a3      	str	r3, [r4, #24]
 800a574:	e7d2      	b.n	800a51c <__sinit+0xc>
 800a576:	bf00      	nop
 800a578:	0800b3b8 	.word	0x0800b3b8
 800a57c:	0800a4a9 	.word	0x0800a4a9

0800a580 <__sfp>:
 800a580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a582:	4607      	mov	r7, r0
 800a584:	f7ff ffac 	bl	800a4e0 <__sfp_lock_acquire>
 800a588:	4b1e      	ldr	r3, [pc, #120]	; (800a604 <__sfp+0x84>)
 800a58a:	681e      	ldr	r6, [r3, #0]
 800a58c:	69b3      	ldr	r3, [r6, #24]
 800a58e:	b913      	cbnz	r3, 800a596 <__sfp+0x16>
 800a590:	4630      	mov	r0, r6
 800a592:	f7ff ffbd 	bl	800a510 <__sinit>
 800a596:	3648      	adds	r6, #72	; 0x48
 800a598:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a59c:	3b01      	subs	r3, #1
 800a59e:	d503      	bpl.n	800a5a8 <__sfp+0x28>
 800a5a0:	6833      	ldr	r3, [r6, #0]
 800a5a2:	b30b      	cbz	r3, 800a5e8 <__sfp+0x68>
 800a5a4:	6836      	ldr	r6, [r6, #0]
 800a5a6:	e7f7      	b.n	800a598 <__sfp+0x18>
 800a5a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5ac:	b9d5      	cbnz	r5, 800a5e4 <__sfp+0x64>
 800a5ae:	4b16      	ldr	r3, [pc, #88]	; (800a608 <__sfp+0x88>)
 800a5b0:	60e3      	str	r3, [r4, #12]
 800a5b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5b6:	6665      	str	r5, [r4, #100]	; 0x64
 800a5b8:	f000 f847 	bl	800a64a <__retarget_lock_init_recursive>
 800a5bc:	f7ff ff96 	bl	800a4ec <__sfp_lock_release>
 800a5c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5c8:	6025      	str	r5, [r4, #0]
 800a5ca:	61a5      	str	r5, [r4, #24]
 800a5cc:	2208      	movs	r2, #8
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5d4:	f7ff ff24 	bl	800a420 <memset>
 800a5d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e4:	3468      	adds	r4, #104	; 0x68
 800a5e6:	e7d9      	b.n	800a59c <__sfp+0x1c>
 800a5e8:	2104      	movs	r1, #4
 800a5ea:	4638      	mov	r0, r7
 800a5ec:	f7ff ff62 	bl	800a4b4 <__sfmoreglue>
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	6030      	str	r0, [r6, #0]
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d1d5      	bne.n	800a5a4 <__sfp+0x24>
 800a5f8:	f7ff ff78 	bl	800a4ec <__sfp_lock_release>
 800a5fc:	230c      	movs	r3, #12
 800a5fe:	603b      	str	r3, [r7, #0]
 800a600:	e7ee      	b.n	800a5e0 <__sfp+0x60>
 800a602:	bf00      	nop
 800a604:	0800b3b8 	.word	0x0800b3b8
 800a608:	ffff0001 	.word	0xffff0001

0800a60c <_fwalk_reent>:
 800a60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a610:	4606      	mov	r6, r0
 800a612:	4688      	mov	r8, r1
 800a614:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a618:	2700      	movs	r7, #0
 800a61a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a61e:	f1b9 0901 	subs.w	r9, r9, #1
 800a622:	d505      	bpl.n	800a630 <_fwalk_reent+0x24>
 800a624:	6824      	ldr	r4, [r4, #0]
 800a626:	2c00      	cmp	r4, #0
 800a628:	d1f7      	bne.n	800a61a <_fwalk_reent+0xe>
 800a62a:	4638      	mov	r0, r7
 800a62c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a630:	89ab      	ldrh	r3, [r5, #12]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d907      	bls.n	800a646 <_fwalk_reent+0x3a>
 800a636:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a63a:	3301      	adds	r3, #1
 800a63c:	d003      	beq.n	800a646 <_fwalk_reent+0x3a>
 800a63e:	4629      	mov	r1, r5
 800a640:	4630      	mov	r0, r6
 800a642:	47c0      	blx	r8
 800a644:	4307      	orrs	r7, r0
 800a646:	3568      	adds	r5, #104	; 0x68
 800a648:	e7e9      	b.n	800a61e <_fwalk_reent+0x12>

0800a64a <__retarget_lock_init_recursive>:
 800a64a:	4770      	bx	lr

0800a64c <__retarget_lock_acquire_recursive>:
 800a64c:	4770      	bx	lr

0800a64e <__retarget_lock_release_recursive>:
 800a64e:	4770      	bx	lr

0800a650 <sbrk_aligned>:
 800a650:	b570      	push	{r4, r5, r6, lr}
 800a652:	4e0e      	ldr	r6, [pc, #56]	; (800a68c <sbrk_aligned+0x3c>)
 800a654:	460c      	mov	r4, r1
 800a656:	6831      	ldr	r1, [r6, #0]
 800a658:	4605      	mov	r5, r0
 800a65a:	b911      	cbnz	r1, 800a662 <sbrk_aligned+0x12>
 800a65c:	f000 fb7a 	bl	800ad54 <_sbrk_r>
 800a660:	6030      	str	r0, [r6, #0]
 800a662:	4621      	mov	r1, r4
 800a664:	4628      	mov	r0, r5
 800a666:	f000 fb75 	bl	800ad54 <_sbrk_r>
 800a66a:	1c43      	adds	r3, r0, #1
 800a66c:	d00a      	beq.n	800a684 <sbrk_aligned+0x34>
 800a66e:	1cc4      	adds	r4, r0, #3
 800a670:	f024 0403 	bic.w	r4, r4, #3
 800a674:	42a0      	cmp	r0, r4
 800a676:	d007      	beq.n	800a688 <sbrk_aligned+0x38>
 800a678:	1a21      	subs	r1, r4, r0
 800a67a:	4628      	mov	r0, r5
 800a67c:	f000 fb6a 	bl	800ad54 <_sbrk_r>
 800a680:	3001      	adds	r0, #1
 800a682:	d101      	bne.n	800a688 <sbrk_aligned+0x38>
 800a684:	f04f 34ff 	mov.w	r4, #4294967295
 800a688:	4620      	mov	r0, r4
 800a68a:	bd70      	pop	{r4, r5, r6, pc}
 800a68c:	240004e4 	.word	0x240004e4

0800a690 <_malloc_r>:
 800a690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a694:	1ccd      	adds	r5, r1, #3
 800a696:	f025 0503 	bic.w	r5, r5, #3
 800a69a:	3508      	adds	r5, #8
 800a69c:	2d0c      	cmp	r5, #12
 800a69e:	bf38      	it	cc
 800a6a0:	250c      	movcc	r5, #12
 800a6a2:	2d00      	cmp	r5, #0
 800a6a4:	4607      	mov	r7, r0
 800a6a6:	db01      	blt.n	800a6ac <_malloc_r+0x1c>
 800a6a8:	42a9      	cmp	r1, r5
 800a6aa:	d905      	bls.n	800a6b8 <_malloc_r+0x28>
 800a6ac:	230c      	movs	r3, #12
 800a6ae:	603b      	str	r3, [r7, #0]
 800a6b0:	2600      	movs	r6, #0
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6b8:	4e2e      	ldr	r6, [pc, #184]	; (800a774 <_malloc_r+0xe4>)
 800a6ba:	f000 fdbb 	bl	800b234 <__malloc_lock>
 800a6be:	6833      	ldr	r3, [r6, #0]
 800a6c0:	461c      	mov	r4, r3
 800a6c2:	bb34      	cbnz	r4, 800a712 <_malloc_r+0x82>
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	4638      	mov	r0, r7
 800a6c8:	f7ff ffc2 	bl	800a650 <sbrk_aligned>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	d14d      	bne.n	800a76e <_malloc_r+0xde>
 800a6d2:	6834      	ldr	r4, [r6, #0]
 800a6d4:	4626      	mov	r6, r4
 800a6d6:	2e00      	cmp	r6, #0
 800a6d8:	d140      	bne.n	800a75c <_malloc_r+0xcc>
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	4631      	mov	r1, r6
 800a6de:	4638      	mov	r0, r7
 800a6e0:	eb04 0803 	add.w	r8, r4, r3
 800a6e4:	f000 fb36 	bl	800ad54 <_sbrk_r>
 800a6e8:	4580      	cmp	r8, r0
 800a6ea:	d13a      	bne.n	800a762 <_malloc_r+0xd2>
 800a6ec:	6821      	ldr	r1, [r4, #0]
 800a6ee:	3503      	adds	r5, #3
 800a6f0:	1a6d      	subs	r5, r5, r1
 800a6f2:	f025 0503 	bic.w	r5, r5, #3
 800a6f6:	3508      	adds	r5, #8
 800a6f8:	2d0c      	cmp	r5, #12
 800a6fa:	bf38      	it	cc
 800a6fc:	250c      	movcc	r5, #12
 800a6fe:	4629      	mov	r1, r5
 800a700:	4638      	mov	r0, r7
 800a702:	f7ff ffa5 	bl	800a650 <sbrk_aligned>
 800a706:	3001      	adds	r0, #1
 800a708:	d02b      	beq.n	800a762 <_malloc_r+0xd2>
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	442b      	add	r3, r5
 800a70e:	6023      	str	r3, [r4, #0]
 800a710:	e00e      	b.n	800a730 <_malloc_r+0xa0>
 800a712:	6822      	ldr	r2, [r4, #0]
 800a714:	1b52      	subs	r2, r2, r5
 800a716:	d41e      	bmi.n	800a756 <_malloc_r+0xc6>
 800a718:	2a0b      	cmp	r2, #11
 800a71a:	d916      	bls.n	800a74a <_malloc_r+0xba>
 800a71c:	1961      	adds	r1, r4, r5
 800a71e:	42a3      	cmp	r3, r4
 800a720:	6025      	str	r5, [r4, #0]
 800a722:	bf18      	it	ne
 800a724:	6059      	strne	r1, [r3, #4]
 800a726:	6863      	ldr	r3, [r4, #4]
 800a728:	bf08      	it	eq
 800a72a:	6031      	streq	r1, [r6, #0]
 800a72c:	5162      	str	r2, [r4, r5]
 800a72e:	604b      	str	r3, [r1, #4]
 800a730:	4638      	mov	r0, r7
 800a732:	f104 060b 	add.w	r6, r4, #11
 800a736:	f000 fd83 	bl	800b240 <__malloc_unlock>
 800a73a:	f026 0607 	bic.w	r6, r6, #7
 800a73e:	1d23      	adds	r3, r4, #4
 800a740:	1af2      	subs	r2, r6, r3
 800a742:	d0b6      	beq.n	800a6b2 <_malloc_r+0x22>
 800a744:	1b9b      	subs	r3, r3, r6
 800a746:	50a3      	str	r3, [r4, r2]
 800a748:	e7b3      	b.n	800a6b2 <_malloc_r+0x22>
 800a74a:	6862      	ldr	r2, [r4, #4]
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	bf0c      	ite	eq
 800a750:	6032      	streq	r2, [r6, #0]
 800a752:	605a      	strne	r2, [r3, #4]
 800a754:	e7ec      	b.n	800a730 <_malloc_r+0xa0>
 800a756:	4623      	mov	r3, r4
 800a758:	6864      	ldr	r4, [r4, #4]
 800a75a:	e7b2      	b.n	800a6c2 <_malloc_r+0x32>
 800a75c:	4634      	mov	r4, r6
 800a75e:	6876      	ldr	r6, [r6, #4]
 800a760:	e7b9      	b.n	800a6d6 <_malloc_r+0x46>
 800a762:	230c      	movs	r3, #12
 800a764:	603b      	str	r3, [r7, #0]
 800a766:	4638      	mov	r0, r7
 800a768:	f000 fd6a 	bl	800b240 <__malloc_unlock>
 800a76c:	e7a1      	b.n	800a6b2 <_malloc_r+0x22>
 800a76e:	6025      	str	r5, [r4, #0]
 800a770:	e7de      	b.n	800a730 <_malloc_r+0xa0>
 800a772:	bf00      	nop
 800a774:	240004e0 	.word	0x240004e0

0800a778 <__sfputc_r>:
 800a778:	6893      	ldr	r3, [r2, #8]
 800a77a:	3b01      	subs	r3, #1
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	b410      	push	{r4}
 800a780:	6093      	str	r3, [r2, #8]
 800a782:	da08      	bge.n	800a796 <__sfputc_r+0x1e>
 800a784:	6994      	ldr	r4, [r2, #24]
 800a786:	42a3      	cmp	r3, r4
 800a788:	db01      	blt.n	800a78e <__sfputc_r+0x16>
 800a78a:	290a      	cmp	r1, #10
 800a78c:	d103      	bne.n	800a796 <__sfputc_r+0x1e>
 800a78e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a792:	f000 bb33 	b.w	800adfc <__swbuf_r>
 800a796:	6813      	ldr	r3, [r2, #0]
 800a798:	1c58      	adds	r0, r3, #1
 800a79a:	6010      	str	r0, [r2, #0]
 800a79c:	7019      	strb	r1, [r3, #0]
 800a79e:	4608      	mov	r0, r1
 800a7a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <__sfputs_r>:
 800a7a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	460f      	mov	r7, r1
 800a7ac:	4614      	mov	r4, r2
 800a7ae:	18d5      	adds	r5, r2, r3
 800a7b0:	42ac      	cmp	r4, r5
 800a7b2:	d101      	bne.n	800a7b8 <__sfputs_r+0x12>
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	e007      	b.n	800a7c8 <__sfputs_r+0x22>
 800a7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7bc:	463a      	mov	r2, r7
 800a7be:	4630      	mov	r0, r6
 800a7c0:	f7ff ffda 	bl	800a778 <__sfputc_r>
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d1f3      	bne.n	800a7b0 <__sfputs_r+0xa>
 800a7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7cc <_vfiprintf_r>:
 800a7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d0:	460d      	mov	r5, r1
 800a7d2:	b09d      	sub	sp, #116	; 0x74
 800a7d4:	4614      	mov	r4, r2
 800a7d6:	4698      	mov	r8, r3
 800a7d8:	4606      	mov	r6, r0
 800a7da:	b118      	cbz	r0, 800a7e4 <_vfiprintf_r+0x18>
 800a7dc:	6983      	ldr	r3, [r0, #24]
 800a7de:	b90b      	cbnz	r3, 800a7e4 <_vfiprintf_r+0x18>
 800a7e0:	f7ff fe96 	bl	800a510 <__sinit>
 800a7e4:	4b89      	ldr	r3, [pc, #548]	; (800aa0c <_vfiprintf_r+0x240>)
 800a7e6:	429d      	cmp	r5, r3
 800a7e8:	d11b      	bne.n	800a822 <_vfiprintf_r+0x56>
 800a7ea:	6875      	ldr	r5, [r6, #4]
 800a7ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ee:	07d9      	lsls	r1, r3, #31
 800a7f0:	d405      	bmi.n	800a7fe <_vfiprintf_r+0x32>
 800a7f2:	89ab      	ldrh	r3, [r5, #12]
 800a7f4:	059a      	lsls	r2, r3, #22
 800a7f6:	d402      	bmi.n	800a7fe <_vfiprintf_r+0x32>
 800a7f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7fa:	f7ff ff27 	bl	800a64c <__retarget_lock_acquire_recursive>
 800a7fe:	89ab      	ldrh	r3, [r5, #12]
 800a800:	071b      	lsls	r3, r3, #28
 800a802:	d501      	bpl.n	800a808 <_vfiprintf_r+0x3c>
 800a804:	692b      	ldr	r3, [r5, #16]
 800a806:	b9eb      	cbnz	r3, 800a844 <_vfiprintf_r+0x78>
 800a808:	4629      	mov	r1, r5
 800a80a:	4630      	mov	r0, r6
 800a80c:	f000 fb5a 	bl	800aec4 <__swsetup_r>
 800a810:	b1c0      	cbz	r0, 800a844 <_vfiprintf_r+0x78>
 800a812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a814:	07dc      	lsls	r4, r3, #31
 800a816:	d50e      	bpl.n	800a836 <_vfiprintf_r+0x6a>
 800a818:	f04f 30ff 	mov.w	r0, #4294967295
 800a81c:	b01d      	add	sp, #116	; 0x74
 800a81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a822:	4b7b      	ldr	r3, [pc, #492]	; (800aa10 <_vfiprintf_r+0x244>)
 800a824:	429d      	cmp	r5, r3
 800a826:	d101      	bne.n	800a82c <_vfiprintf_r+0x60>
 800a828:	68b5      	ldr	r5, [r6, #8]
 800a82a:	e7df      	b.n	800a7ec <_vfiprintf_r+0x20>
 800a82c:	4b79      	ldr	r3, [pc, #484]	; (800aa14 <_vfiprintf_r+0x248>)
 800a82e:	429d      	cmp	r5, r3
 800a830:	bf08      	it	eq
 800a832:	68f5      	ldreq	r5, [r6, #12]
 800a834:	e7da      	b.n	800a7ec <_vfiprintf_r+0x20>
 800a836:	89ab      	ldrh	r3, [r5, #12]
 800a838:	0598      	lsls	r0, r3, #22
 800a83a:	d4ed      	bmi.n	800a818 <_vfiprintf_r+0x4c>
 800a83c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a83e:	f7ff ff06 	bl	800a64e <__retarget_lock_release_recursive>
 800a842:	e7e9      	b.n	800a818 <_vfiprintf_r+0x4c>
 800a844:	2300      	movs	r3, #0
 800a846:	9309      	str	r3, [sp, #36]	; 0x24
 800a848:	2320      	movs	r3, #32
 800a84a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a84e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a852:	2330      	movs	r3, #48	; 0x30
 800a854:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa18 <_vfiprintf_r+0x24c>
 800a858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a85c:	f04f 0901 	mov.w	r9, #1
 800a860:	4623      	mov	r3, r4
 800a862:	469a      	mov	sl, r3
 800a864:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a868:	b10a      	cbz	r2, 800a86e <_vfiprintf_r+0xa2>
 800a86a:	2a25      	cmp	r2, #37	; 0x25
 800a86c:	d1f9      	bne.n	800a862 <_vfiprintf_r+0x96>
 800a86e:	ebba 0b04 	subs.w	fp, sl, r4
 800a872:	d00b      	beq.n	800a88c <_vfiprintf_r+0xc0>
 800a874:	465b      	mov	r3, fp
 800a876:	4622      	mov	r2, r4
 800a878:	4629      	mov	r1, r5
 800a87a:	4630      	mov	r0, r6
 800a87c:	f7ff ff93 	bl	800a7a6 <__sfputs_r>
 800a880:	3001      	adds	r0, #1
 800a882:	f000 80aa 	beq.w	800a9da <_vfiprintf_r+0x20e>
 800a886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a888:	445a      	add	r2, fp
 800a88a:	9209      	str	r2, [sp, #36]	; 0x24
 800a88c:	f89a 3000 	ldrb.w	r3, [sl]
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 80a2 	beq.w	800a9da <_vfiprintf_r+0x20e>
 800a896:	2300      	movs	r3, #0
 800a898:	f04f 32ff 	mov.w	r2, #4294967295
 800a89c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8a0:	f10a 0a01 	add.w	sl, sl, #1
 800a8a4:	9304      	str	r3, [sp, #16]
 800a8a6:	9307      	str	r3, [sp, #28]
 800a8a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a8ae:	4654      	mov	r4, sl
 800a8b0:	2205      	movs	r2, #5
 800a8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b6:	4858      	ldr	r0, [pc, #352]	; (800aa18 <_vfiprintf_r+0x24c>)
 800a8b8:	f7f5 fd12 	bl	80002e0 <memchr>
 800a8bc:	9a04      	ldr	r2, [sp, #16]
 800a8be:	b9d8      	cbnz	r0, 800a8f8 <_vfiprintf_r+0x12c>
 800a8c0:	06d1      	lsls	r1, r2, #27
 800a8c2:	bf44      	itt	mi
 800a8c4:	2320      	movmi	r3, #32
 800a8c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8ca:	0713      	lsls	r3, r2, #28
 800a8cc:	bf44      	itt	mi
 800a8ce:	232b      	movmi	r3, #43	; 0x2b
 800a8d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8da:	d015      	beq.n	800a908 <_vfiprintf_r+0x13c>
 800a8dc:	9a07      	ldr	r2, [sp, #28]
 800a8de:	4654      	mov	r4, sl
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	f04f 0c0a 	mov.w	ip, #10
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8ec:	3b30      	subs	r3, #48	; 0x30
 800a8ee:	2b09      	cmp	r3, #9
 800a8f0:	d94e      	bls.n	800a990 <_vfiprintf_r+0x1c4>
 800a8f2:	b1b0      	cbz	r0, 800a922 <_vfiprintf_r+0x156>
 800a8f4:	9207      	str	r2, [sp, #28]
 800a8f6:	e014      	b.n	800a922 <_vfiprintf_r+0x156>
 800a8f8:	eba0 0308 	sub.w	r3, r0, r8
 800a8fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a900:	4313      	orrs	r3, r2
 800a902:	9304      	str	r3, [sp, #16]
 800a904:	46a2      	mov	sl, r4
 800a906:	e7d2      	b.n	800a8ae <_vfiprintf_r+0xe2>
 800a908:	9b03      	ldr	r3, [sp, #12]
 800a90a:	1d19      	adds	r1, r3, #4
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	9103      	str	r1, [sp, #12]
 800a910:	2b00      	cmp	r3, #0
 800a912:	bfbb      	ittet	lt
 800a914:	425b      	neglt	r3, r3
 800a916:	f042 0202 	orrlt.w	r2, r2, #2
 800a91a:	9307      	strge	r3, [sp, #28]
 800a91c:	9307      	strlt	r3, [sp, #28]
 800a91e:	bfb8      	it	lt
 800a920:	9204      	strlt	r2, [sp, #16]
 800a922:	7823      	ldrb	r3, [r4, #0]
 800a924:	2b2e      	cmp	r3, #46	; 0x2e
 800a926:	d10c      	bne.n	800a942 <_vfiprintf_r+0x176>
 800a928:	7863      	ldrb	r3, [r4, #1]
 800a92a:	2b2a      	cmp	r3, #42	; 0x2a
 800a92c:	d135      	bne.n	800a99a <_vfiprintf_r+0x1ce>
 800a92e:	9b03      	ldr	r3, [sp, #12]
 800a930:	1d1a      	adds	r2, r3, #4
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	9203      	str	r2, [sp, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	bfb8      	it	lt
 800a93a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a93e:	3402      	adds	r4, #2
 800a940:	9305      	str	r3, [sp, #20]
 800a942:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa28 <_vfiprintf_r+0x25c>
 800a946:	7821      	ldrb	r1, [r4, #0]
 800a948:	2203      	movs	r2, #3
 800a94a:	4650      	mov	r0, sl
 800a94c:	f7f5 fcc8 	bl	80002e0 <memchr>
 800a950:	b140      	cbz	r0, 800a964 <_vfiprintf_r+0x198>
 800a952:	2340      	movs	r3, #64	; 0x40
 800a954:	eba0 000a 	sub.w	r0, r0, sl
 800a958:	fa03 f000 	lsl.w	r0, r3, r0
 800a95c:	9b04      	ldr	r3, [sp, #16]
 800a95e:	4303      	orrs	r3, r0
 800a960:	3401      	adds	r4, #1
 800a962:	9304      	str	r3, [sp, #16]
 800a964:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a968:	482c      	ldr	r0, [pc, #176]	; (800aa1c <_vfiprintf_r+0x250>)
 800a96a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a96e:	2206      	movs	r2, #6
 800a970:	f7f5 fcb6 	bl	80002e0 <memchr>
 800a974:	2800      	cmp	r0, #0
 800a976:	d03f      	beq.n	800a9f8 <_vfiprintf_r+0x22c>
 800a978:	4b29      	ldr	r3, [pc, #164]	; (800aa20 <_vfiprintf_r+0x254>)
 800a97a:	bb1b      	cbnz	r3, 800a9c4 <_vfiprintf_r+0x1f8>
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	3307      	adds	r3, #7
 800a980:	f023 0307 	bic.w	r3, r3, #7
 800a984:	3308      	adds	r3, #8
 800a986:	9303      	str	r3, [sp, #12]
 800a988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a98a:	443b      	add	r3, r7
 800a98c:	9309      	str	r3, [sp, #36]	; 0x24
 800a98e:	e767      	b.n	800a860 <_vfiprintf_r+0x94>
 800a990:	fb0c 3202 	mla	r2, ip, r2, r3
 800a994:	460c      	mov	r4, r1
 800a996:	2001      	movs	r0, #1
 800a998:	e7a5      	b.n	800a8e6 <_vfiprintf_r+0x11a>
 800a99a:	2300      	movs	r3, #0
 800a99c:	3401      	adds	r4, #1
 800a99e:	9305      	str	r3, [sp, #20]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	f04f 0c0a 	mov.w	ip, #10
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9ac:	3a30      	subs	r2, #48	; 0x30
 800a9ae:	2a09      	cmp	r2, #9
 800a9b0:	d903      	bls.n	800a9ba <_vfiprintf_r+0x1ee>
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d0c5      	beq.n	800a942 <_vfiprintf_r+0x176>
 800a9b6:	9105      	str	r1, [sp, #20]
 800a9b8:	e7c3      	b.n	800a942 <_vfiprintf_r+0x176>
 800a9ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9be:	4604      	mov	r4, r0
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e7f0      	b.n	800a9a6 <_vfiprintf_r+0x1da>
 800a9c4:	ab03      	add	r3, sp, #12
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	462a      	mov	r2, r5
 800a9ca:	4b16      	ldr	r3, [pc, #88]	; (800aa24 <_vfiprintf_r+0x258>)
 800a9cc:	a904      	add	r1, sp, #16
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	f3af 8000 	nop.w
 800a9d4:	4607      	mov	r7, r0
 800a9d6:	1c78      	adds	r0, r7, #1
 800a9d8:	d1d6      	bne.n	800a988 <_vfiprintf_r+0x1bc>
 800a9da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9dc:	07d9      	lsls	r1, r3, #31
 800a9de:	d405      	bmi.n	800a9ec <_vfiprintf_r+0x220>
 800a9e0:	89ab      	ldrh	r3, [r5, #12]
 800a9e2:	059a      	lsls	r2, r3, #22
 800a9e4:	d402      	bmi.n	800a9ec <_vfiprintf_r+0x220>
 800a9e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9e8:	f7ff fe31 	bl	800a64e <__retarget_lock_release_recursive>
 800a9ec:	89ab      	ldrh	r3, [r5, #12]
 800a9ee:	065b      	lsls	r3, r3, #25
 800a9f0:	f53f af12 	bmi.w	800a818 <_vfiprintf_r+0x4c>
 800a9f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9f6:	e711      	b.n	800a81c <_vfiprintf_r+0x50>
 800a9f8:	ab03      	add	r3, sp, #12
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	462a      	mov	r2, r5
 800a9fe:	4b09      	ldr	r3, [pc, #36]	; (800aa24 <_vfiprintf_r+0x258>)
 800aa00:	a904      	add	r1, sp, #16
 800aa02:	4630      	mov	r0, r6
 800aa04:	f000 f880 	bl	800ab08 <_printf_i>
 800aa08:	e7e4      	b.n	800a9d4 <_vfiprintf_r+0x208>
 800aa0a:	bf00      	nop
 800aa0c:	0800b3dc 	.word	0x0800b3dc
 800aa10:	0800b3fc 	.word	0x0800b3fc
 800aa14:	0800b3bc 	.word	0x0800b3bc
 800aa18:	0800b41c 	.word	0x0800b41c
 800aa1c:	0800b426 	.word	0x0800b426
 800aa20:	00000000 	.word	0x00000000
 800aa24:	0800a7a7 	.word	0x0800a7a7
 800aa28:	0800b422 	.word	0x0800b422

0800aa2c <_printf_common>:
 800aa2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa30:	4616      	mov	r6, r2
 800aa32:	4699      	mov	r9, r3
 800aa34:	688a      	ldr	r2, [r1, #8]
 800aa36:	690b      	ldr	r3, [r1, #16]
 800aa38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	bfb8      	it	lt
 800aa40:	4613      	movlt	r3, r2
 800aa42:	6033      	str	r3, [r6, #0]
 800aa44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa48:	4607      	mov	r7, r0
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	b10a      	cbz	r2, 800aa52 <_printf_common+0x26>
 800aa4e:	3301      	adds	r3, #1
 800aa50:	6033      	str	r3, [r6, #0]
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	0699      	lsls	r1, r3, #26
 800aa56:	bf42      	ittt	mi
 800aa58:	6833      	ldrmi	r3, [r6, #0]
 800aa5a:	3302      	addmi	r3, #2
 800aa5c:	6033      	strmi	r3, [r6, #0]
 800aa5e:	6825      	ldr	r5, [r4, #0]
 800aa60:	f015 0506 	ands.w	r5, r5, #6
 800aa64:	d106      	bne.n	800aa74 <_printf_common+0x48>
 800aa66:	f104 0a19 	add.w	sl, r4, #25
 800aa6a:	68e3      	ldr	r3, [r4, #12]
 800aa6c:	6832      	ldr	r2, [r6, #0]
 800aa6e:	1a9b      	subs	r3, r3, r2
 800aa70:	42ab      	cmp	r3, r5
 800aa72:	dc26      	bgt.n	800aac2 <_printf_common+0x96>
 800aa74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa78:	1e13      	subs	r3, r2, #0
 800aa7a:	6822      	ldr	r2, [r4, #0]
 800aa7c:	bf18      	it	ne
 800aa7e:	2301      	movne	r3, #1
 800aa80:	0692      	lsls	r2, r2, #26
 800aa82:	d42b      	bmi.n	800aadc <_printf_common+0xb0>
 800aa84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa88:	4649      	mov	r1, r9
 800aa8a:	4638      	mov	r0, r7
 800aa8c:	47c0      	blx	r8
 800aa8e:	3001      	adds	r0, #1
 800aa90:	d01e      	beq.n	800aad0 <_printf_common+0xa4>
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	68e5      	ldr	r5, [r4, #12]
 800aa96:	6832      	ldr	r2, [r6, #0]
 800aa98:	f003 0306 	and.w	r3, r3, #6
 800aa9c:	2b04      	cmp	r3, #4
 800aa9e:	bf08      	it	eq
 800aaa0:	1aad      	subeq	r5, r5, r2
 800aaa2:	68a3      	ldr	r3, [r4, #8]
 800aaa4:	6922      	ldr	r2, [r4, #16]
 800aaa6:	bf0c      	ite	eq
 800aaa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aaac:	2500      	movne	r5, #0
 800aaae:	4293      	cmp	r3, r2
 800aab0:	bfc4      	itt	gt
 800aab2:	1a9b      	subgt	r3, r3, r2
 800aab4:	18ed      	addgt	r5, r5, r3
 800aab6:	2600      	movs	r6, #0
 800aab8:	341a      	adds	r4, #26
 800aaba:	42b5      	cmp	r5, r6
 800aabc:	d11a      	bne.n	800aaf4 <_printf_common+0xc8>
 800aabe:	2000      	movs	r0, #0
 800aac0:	e008      	b.n	800aad4 <_printf_common+0xa8>
 800aac2:	2301      	movs	r3, #1
 800aac4:	4652      	mov	r2, sl
 800aac6:	4649      	mov	r1, r9
 800aac8:	4638      	mov	r0, r7
 800aaca:	47c0      	blx	r8
 800aacc:	3001      	adds	r0, #1
 800aace:	d103      	bne.n	800aad8 <_printf_common+0xac>
 800aad0:	f04f 30ff 	mov.w	r0, #4294967295
 800aad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad8:	3501      	adds	r5, #1
 800aada:	e7c6      	b.n	800aa6a <_printf_common+0x3e>
 800aadc:	18e1      	adds	r1, r4, r3
 800aade:	1c5a      	adds	r2, r3, #1
 800aae0:	2030      	movs	r0, #48	; 0x30
 800aae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aae6:	4422      	add	r2, r4
 800aae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aaec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aaf0:	3302      	adds	r3, #2
 800aaf2:	e7c7      	b.n	800aa84 <_printf_common+0x58>
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	4622      	mov	r2, r4
 800aaf8:	4649      	mov	r1, r9
 800aafa:	4638      	mov	r0, r7
 800aafc:	47c0      	blx	r8
 800aafe:	3001      	adds	r0, #1
 800ab00:	d0e6      	beq.n	800aad0 <_printf_common+0xa4>
 800ab02:	3601      	adds	r6, #1
 800ab04:	e7d9      	b.n	800aaba <_printf_common+0x8e>
	...

0800ab08 <_printf_i>:
 800ab08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab0c:	7e0f      	ldrb	r7, [r1, #24]
 800ab0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab10:	2f78      	cmp	r7, #120	; 0x78
 800ab12:	4691      	mov	r9, r2
 800ab14:	4680      	mov	r8, r0
 800ab16:	460c      	mov	r4, r1
 800ab18:	469a      	mov	sl, r3
 800ab1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab1e:	d807      	bhi.n	800ab30 <_printf_i+0x28>
 800ab20:	2f62      	cmp	r7, #98	; 0x62
 800ab22:	d80a      	bhi.n	800ab3a <_printf_i+0x32>
 800ab24:	2f00      	cmp	r7, #0
 800ab26:	f000 80d8 	beq.w	800acda <_printf_i+0x1d2>
 800ab2a:	2f58      	cmp	r7, #88	; 0x58
 800ab2c:	f000 80a3 	beq.w	800ac76 <_printf_i+0x16e>
 800ab30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab38:	e03a      	b.n	800abb0 <_printf_i+0xa8>
 800ab3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab3e:	2b15      	cmp	r3, #21
 800ab40:	d8f6      	bhi.n	800ab30 <_printf_i+0x28>
 800ab42:	a101      	add	r1, pc, #4	; (adr r1, 800ab48 <_printf_i+0x40>)
 800ab44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab48:	0800aba1 	.word	0x0800aba1
 800ab4c:	0800abb5 	.word	0x0800abb5
 800ab50:	0800ab31 	.word	0x0800ab31
 800ab54:	0800ab31 	.word	0x0800ab31
 800ab58:	0800ab31 	.word	0x0800ab31
 800ab5c:	0800ab31 	.word	0x0800ab31
 800ab60:	0800abb5 	.word	0x0800abb5
 800ab64:	0800ab31 	.word	0x0800ab31
 800ab68:	0800ab31 	.word	0x0800ab31
 800ab6c:	0800ab31 	.word	0x0800ab31
 800ab70:	0800ab31 	.word	0x0800ab31
 800ab74:	0800acc1 	.word	0x0800acc1
 800ab78:	0800abe5 	.word	0x0800abe5
 800ab7c:	0800aca3 	.word	0x0800aca3
 800ab80:	0800ab31 	.word	0x0800ab31
 800ab84:	0800ab31 	.word	0x0800ab31
 800ab88:	0800ace3 	.word	0x0800ace3
 800ab8c:	0800ab31 	.word	0x0800ab31
 800ab90:	0800abe5 	.word	0x0800abe5
 800ab94:	0800ab31 	.word	0x0800ab31
 800ab98:	0800ab31 	.word	0x0800ab31
 800ab9c:	0800acab 	.word	0x0800acab
 800aba0:	682b      	ldr	r3, [r5, #0]
 800aba2:	1d1a      	adds	r2, r3, #4
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	602a      	str	r2, [r5, #0]
 800aba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abb0:	2301      	movs	r3, #1
 800abb2:	e0a3      	b.n	800acfc <_printf_i+0x1f4>
 800abb4:	6820      	ldr	r0, [r4, #0]
 800abb6:	6829      	ldr	r1, [r5, #0]
 800abb8:	0606      	lsls	r6, r0, #24
 800abba:	f101 0304 	add.w	r3, r1, #4
 800abbe:	d50a      	bpl.n	800abd6 <_printf_i+0xce>
 800abc0:	680e      	ldr	r6, [r1, #0]
 800abc2:	602b      	str	r3, [r5, #0]
 800abc4:	2e00      	cmp	r6, #0
 800abc6:	da03      	bge.n	800abd0 <_printf_i+0xc8>
 800abc8:	232d      	movs	r3, #45	; 0x2d
 800abca:	4276      	negs	r6, r6
 800abcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abd0:	485e      	ldr	r0, [pc, #376]	; (800ad4c <_printf_i+0x244>)
 800abd2:	230a      	movs	r3, #10
 800abd4:	e019      	b.n	800ac0a <_printf_i+0x102>
 800abd6:	680e      	ldr	r6, [r1, #0]
 800abd8:	602b      	str	r3, [r5, #0]
 800abda:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abde:	bf18      	it	ne
 800abe0:	b236      	sxthne	r6, r6
 800abe2:	e7ef      	b.n	800abc4 <_printf_i+0xbc>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	6820      	ldr	r0, [r4, #0]
 800abe8:	1d19      	adds	r1, r3, #4
 800abea:	6029      	str	r1, [r5, #0]
 800abec:	0601      	lsls	r1, r0, #24
 800abee:	d501      	bpl.n	800abf4 <_printf_i+0xec>
 800abf0:	681e      	ldr	r6, [r3, #0]
 800abf2:	e002      	b.n	800abfa <_printf_i+0xf2>
 800abf4:	0646      	lsls	r6, r0, #25
 800abf6:	d5fb      	bpl.n	800abf0 <_printf_i+0xe8>
 800abf8:	881e      	ldrh	r6, [r3, #0]
 800abfa:	4854      	ldr	r0, [pc, #336]	; (800ad4c <_printf_i+0x244>)
 800abfc:	2f6f      	cmp	r7, #111	; 0x6f
 800abfe:	bf0c      	ite	eq
 800ac00:	2308      	moveq	r3, #8
 800ac02:	230a      	movne	r3, #10
 800ac04:	2100      	movs	r1, #0
 800ac06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac0a:	6865      	ldr	r5, [r4, #4]
 800ac0c:	60a5      	str	r5, [r4, #8]
 800ac0e:	2d00      	cmp	r5, #0
 800ac10:	bfa2      	ittt	ge
 800ac12:	6821      	ldrge	r1, [r4, #0]
 800ac14:	f021 0104 	bicge.w	r1, r1, #4
 800ac18:	6021      	strge	r1, [r4, #0]
 800ac1a:	b90e      	cbnz	r6, 800ac20 <_printf_i+0x118>
 800ac1c:	2d00      	cmp	r5, #0
 800ac1e:	d04d      	beq.n	800acbc <_printf_i+0x1b4>
 800ac20:	4615      	mov	r5, r2
 800ac22:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac26:	fb03 6711 	mls	r7, r3, r1, r6
 800ac2a:	5dc7      	ldrb	r7, [r0, r7]
 800ac2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac30:	4637      	mov	r7, r6
 800ac32:	42bb      	cmp	r3, r7
 800ac34:	460e      	mov	r6, r1
 800ac36:	d9f4      	bls.n	800ac22 <_printf_i+0x11a>
 800ac38:	2b08      	cmp	r3, #8
 800ac3a:	d10b      	bne.n	800ac54 <_printf_i+0x14c>
 800ac3c:	6823      	ldr	r3, [r4, #0]
 800ac3e:	07de      	lsls	r6, r3, #31
 800ac40:	d508      	bpl.n	800ac54 <_printf_i+0x14c>
 800ac42:	6923      	ldr	r3, [r4, #16]
 800ac44:	6861      	ldr	r1, [r4, #4]
 800ac46:	4299      	cmp	r1, r3
 800ac48:	bfde      	ittt	le
 800ac4a:	2330      	movle	r3, #48	; 0x30
 800ac4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac50:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac54:	1b52      	subs	r2, r2, r5
 800ac56:	6122      	str	r2, [r4, #16]
 800ac58:	f8cd a000 	str.w	sl, [sp]
 800ac5c:	464b      	mov	r3, r9
 800ac5e:	aa03      	add	r2, sp, #12
 800ac60:	4621      	mov	r1, r4
 800ac62:	4640      	mov	r0, r8
 800ac64:	f7ff fee2 	bl	800aa2c <_printf_common>
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d14c      	bne.n	800ad06 <_printf_i+0x1fe>
 800ac6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac70:	b004      	add	sp, #16
 800ac72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac76:	4835      	ldr	r0, [pc, #212]	; (800ad4c <_printf_i+0x244>)
 800ac78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac7c:	6829      	ldr	r1, [r5, #0]
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac84:	6029      	str	r1, [r5, #0]
 800ac86:	061d      	lsls	r5, r3, #24
 800ac88:	d514      	bpl.n	800acb4 <_printf_i+0x1ac>
 800ac8a:	07df      	lsls	r7, r3, #31
 800ac8c:	bf44      	itt	mi
 800ac8e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac92:	6023      	strmi	r3, [r4, #0]
 800ac94:	b91e      	cbnz	r6, 800ac9e <_printf_i+0x196>
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	f023 0320 	bic.w	r3, r3, #32
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	2310      	movs	r3, #16
 800aca0:	e7b0      	b.n	800ac04 <_printf_i+0xfc>
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	f043 0320 	orr.w	r3, r3, #32
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	2378      	movs	r3, #120	; 0x78
 800acac:	4828      	ldr	r0, [pc, #160]	; (800ad50 <_printf_i+0x248>)
 800acae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acb2:	e7e3      	b.n	800ac7c <_printf_i+0x174>
 800acb4:	0659      	lsls	r1, r3, #25
 800acb6:	bf48      	it	mi
 800acb8:	b2b6      	uxthmi	r6, r6
 800acba:	e7e6      	b.n	800ac8a <_printf_i+0x182>
 800acbc:	4615      	mov	r5, r2
 800acbe:	e7bb      	b.n	800ac38 <_printf_i+0x130>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	6826      	ldr	r6, [r4, #0]
 800acc4:	6961      	ldr	r1, [r4, #20]
 800acc6:	1d18      	adds	r0, r3, #4
 800acc8:	6028      	str	r0, [r5, #0]
 800acca:	0635      	lsls	r5, r6, #24
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	d501      	bpl.n	800acd4 <_printf_i+0x1cc>
 800acd0:	6019      	str	r1, [r3, #0]
 800acd2:	e002      	b.n	800acda <_printf_i+0x1d2>
 800acd4:	0670      	lsls	r0, r6, #25
 800acd6:	d5fb      	bpl.n	800acd0 <_printf_i+0x1c8>
 800acd8:	8019      	strh	r1, [r3, #0]
 800acda:	2300      	movs	r3, #0
 800acdc:	6123      	str	r3, [r4, #16]
 800acde:	4615      	mov	r5, r2
 800ace0:	e7ba      	b.n	800ac58 <_printf_i+0x150>
 800ace2:	682b      	ldr	r3, [r5, #0]
 800ace4:	1d1a      	adds	r2, r3, #4
 800ace6:	602a      	str	r2, [r5, #0]
 800ace8:	681d      	ldr	r5, [r3, #0]
 800acea:	6862      	ldr	r2, [r4, #4]
 800acec:	2100      	movs	r1, #0
 800acee:	4628      	mov	r0, r5
 800acf0:	f7f5 faf6 	bl	80002e0 <memchr>
 800acf4:	b108      	cbz	r0, 800acfa <_printf_i+0x1f2>
 800acf6:	1b40      	subs	r0, r0, r5
 800acf8:	6060      	str	r0, [r4, #4]
 800acfa:	6863      	ldr	r3, [r4, #4]
 800acfc:	6123      	str	r3, [r4, #16]
 800acfe:	2300      	movs	r3, #0
 800ad00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad04:	e7a8      	b.n	800ac58 <_printf_i+0x150>
 800ad06:	6923      	ldr	r3, [r4, #16]
 800ad08:	462a      	mov	r2, r5
 800ad0a:	4649      	mov	r1, r9
 800ad0c:	4640      	mov	r0, r8
 800ad0e:	47d0      	blx	sl
 800ad10:	3001      	adds	r0, #1
 800ad12:	d0ab      	beq.n	800ac6c <_printf_i+0x164>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	079b      	lsls	r3, r3, #30
 800ad18:	d413      	bmi.n	800ad42 <_printf_i+0x23a>
 800ad1a:	68e0      	ldr	r0, [r4, #12]
 800ad1c:	9b03      	ldr	r3, [sp, #12]
 800ad1e:	4298      	cmp	r0, r3
 800ad20:	bfb8      	it	lt
 800ad22:	4618      	movlt	r0, r3
 800ad24:	e7a4      	b.n	800ac70 <_printf_i+0x168>
 800ad26:	2301      	movs	r3, #1
 800ad28:	4632      	mov	r2, r6
 800ad2a:	4649      	mov	r1, r9
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	47d0      	blx	sl
 800ad30:	3001      	adds	r0, #1
 800ad32:	d09b      	beq.n	800ac6c <_printf_i+0x164>
 800ad34:	3501      	adds	r5, #1
 800ad36:	68e3      	ldr	r3, [r4, #12]
 800ad38:	9903      	ldr	r1, [sp, #12]
 800ad3a:	1a5b      	subs	r3, r3, r1
 800ad3c:	42ab      	cmp	r3, r5
 800ad3e:	dcf2      	bgt.n	800ad26 <_printf_i+0x21e>
 800ad40:	e7eb      	b.n	800ad1a <_printf_i+0x212>
 800ad42:	2500      	movs	r5, #0
 800ad44:	f104 0619 	add.w	r6, r4, #25
 800ad48:	e7f5      	b.n	800ad36 <_printf_i+0x22e>
 800ad4a:	bf00      	nop
 800ad4c:	0800b42d 	.word	0x0800b42d
 800ad50:	0800b43e 	.word	0x0800b43e

0800ad54 <_sbrk_r>:
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	4d06      	ldr	r5, [pc, #24]	; (800ad70 <_sbrk_r+0x1c>)
 800ad58:	2300      	movs	r3, #0
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	4608      	mov	r0, r1
 800ad5e:	602b      	str	r3, [r5, #0]
 800ad60:	f7f6 fb9c 	bl	800149c <_sbrk>
 800ad64:	1c43      	adds	r3, r0, #1
 800ad66:	d102      	bne.n	800ad6e <_sbrk_r+0x1a>
 800ad68:	682b      	ldr	r3, [r5, #0]
 800ad6a:	b103      	cbz	r3, 800ad6e <_sbrk_r+0x1a>
 800ad6c:	6023      	str	r3, [r4, #0]
 800ad6e:	bd38      	pop	{r3, r4, r5, pc}
 800ad70:	240004e8 	.word	0x240004e8

0800ad74 <__sread>:
 800ad74:	b510      	push	{r4, lr}
 800ad76:	460c      	mov	r4, r1
 800ad78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad7c:	f000 fab2 	bl	800b2e4 <_read_r>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	bfab      	itete	ge
 800ad84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad86:	89a3      	ldrhlt	r3, [r4, #12]
 800ad88:	181b      	addge	r3, r3, r0
 800ad8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad8e:	bfac      	ite	ge
 800ad90:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad92:	81a3      	strhlt	r3, [r4, #12]
 800ad94:	bd10      	pop	{r4, pc}

0800ad96 <__swrite>:
 800ad96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9a:	461f      	mov	r7, r3
 800ad9c:	898b      	ldrh	r3, [r1, #12]
 800ad9e:	05db      	lsls	r3, r3, #23
 800ada0:	4605      	mov	r5, r0
 800ada2:	460c      	mov	r4, r1
 800ada4:	4616      	mov	r6, r2
 800ada6:	d505      	bpl.n	800adb4 <__swrite+0x1e>
 800ada8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adac:	2302      	movs	r3, #2
 800adae:	2200      	movs	r2, #0
 800adb0:	f000 f9c8 	bl	800b144 <_lseek_r>
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adbe:	81a3      	strh	r3, [r4, #12]
 800adc0:	4632      	mov	r2, r6
 800adc2:	463b      	mov	r3, r7
 800adc4:	4628      	mov	r0, r5
 800adc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adca:	f000 b869 	b.w	800aea0 <_write_r>

0800adce <__sseek>:
 800adce:	b510      	push	{r4, lr}
 800add0:	460c      	mov	r4, r1
 800add2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add6:	f000 f9b5 	bl	800b144 <_lseek_r>
 800adda:	1c43      	adds	r3, r0, #1
 800addc:	89a3      	ldrh	r3, [r4, #12]
 800adde:	bf15      	itete	ne
 800ade0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ade2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ade6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adea:	81a3      	strheq	r3, [r4, #12]
 800adec:	bf18      	it	ne
 800adee:	81a3      	strhne	r3, [r4, #12]
 800adf0:	bd10      	pop	{r4, pc}

0800adf2 <__sclose>:
 800adf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf6:	f000 b8d3 	b.w	800afa0 <_close_r>
	...

0800adfc <__swbuf_r>:
 800adfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfe:	460e      	mov	r6, r1
 800ae00:	4614      	mov	r4, r2
 800ae02:	4605      	mov	r5, r0
 800ae04:	b118      	cbz	r0, 800ae0e <__swbuf_r+0x12>
 800ae06:	6983      	ldr	r3, [r0, #24]
 800ae08:	b90b      	cbnz	r3, 800ae0e <__swbuf_r+0x12>
 800ae0a:	f7ff fb81 	bl	800a510 <__sinit>
 800ae0e:	4b21      	ldr	r3, [pc, #132]	; (800ae94 <__swbuf_r+0x98>)
 800ae10:	429c      	cmp	r4, r3
 800ae12:	d12b      	bne.n	800ae6c <__swbuf_r+0x70>
 800ae14:	686c      	ldr	r4, [r5, #4]
 800ae16:	69a3      	ldr	r3, [r4, #24]
 800ae18:	60a3      	str	r3, [r4, #8]
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	071a      	lsls	r2, r3, #28
 800ae1e:	d52f      	bpl.n	800ae80 <__swbuf_r+0x84>
 800ae20:	6923      	ldr	r3, [r4, #16]
 800ae22:	b36b      	cbz	r3, 800ae80 <__swbuf_r+0x84>
 800ae24:	6923      	ldr	r3, [r4, #16]
 800ae26:	6820      	ldr	r0, [r4, #0]
 800ae28:	1ac0      	subs	r0, r0, r3
 800ae2a:	6963      	ldr	r3, [r4, #20]
 800ae2c:	b2f6      	uxtb	r6, r6
 800ae2e:	4283      	cmp	r3, r0
 800ae30:	4637      	mov	r7, r6
 800ae32:	dc04      	bgt.n	800ae3e <__swbuf_r+0x42>
 800ae34:	4621      	mov	r1, r4
 800ae36:	4628      	mov	r0, r5
 800ae38:	f000 f948 	bl	800b0cc <_fflush_r>
 800ae3c:	bb30      	cbnz	r0, 800ae8c <__swbuf_r+0x90>
 800ae3e:	68a3      	ldr	r3, [r4, #8]
 800ae40:	3b01      	subs	r3, #1
 800ae42:	60a3      	str	r3, [r4, #8]
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	1c5a      	adds	r2, r3, #1
 800ae48:	6022      	str	r2, [r4, #0]
 800ae4a:	701e      	strb	r6, [r3, #0]
 800ae4c:	6963      	ldr	r3, [r4, #20]
 800ae4e:	3001      	adds	r0, #1
 800ae50:	4283      	cmp	r3, r0
 800ae52:	d004      	beq.n	800ae5e <__swbuf_r+0x62>
 800ae54:	89a3      	ldrh	r3, [r4, #12]
 800ae56:	07db      	lsls	r3, r3, #31
 800ae58:	d506      	bpl.n	800ae68 <__swbuf_r+0x6c>
 800ae5a:	2e0a      	cmp	r6, #10
 800ae5c:	d104      	bne.n	800ae68 <__swbuf_r+0x6c>
 800ae5e:	4621      	mov	r1, r4
 800ae60:	4628      	mov	r0, r5
 800ae62:	f000 f933 	bl	800b0cc <_fflush_r>
 800ae66:	b988      	cbnz	r0, 800ae8c <__swbuf_r+0x90>
 800ae68:	4638      	mov	r0, r7
 800ae6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae6c:	4b0a      	ldr	r3, [pc, #40]	; (800ae98 <__swbuf_r+0x9c>)
 800ae6e:	429c      	cmp	r4, r3
 800ae70:	d101      	bne.n	800ae76 <__swbuf_r+0x7a>
 800ae72:	68ac      	ldr	r4, [r5, #8]
 800ae74:	e7cf      	b.n	800ae16 <__swbuf_r+0x1a>
 800ae76:	4b09      	ldr	r3, [pc, #36]	; (800ae9c <__swbuf_r+0xa0>)
 800ae78:	429c      	cmp	r4, r3
 800ae7a:	bf08      	it	eq
 800ae7c:	68ec      	ldreq	r4, [r5, #12]
 800ae7e:	e7ca      	b.n	800ae16 <__swbuf_r+0x1a>
 800ae80:	4621      	mov	r1, r4
 800ae82:	4628      	mov	r0, r5
 800ae84:	f000 f81e 	bl	800aec4 <__swsetup_r>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d0cb      	beq.n	800ae24 <__swbuf_r+0x28>
 800ae8c:	f04f 37ff 	mov.w	r7, #4294967295
 800ae90:	e7ea      	b.n	800ae68 <__swbuf_r+0x6c>
 800ae92:	bf00      	nop
 800ae94:	0800b3dc 	.word	0x0800b3dc
 800ae98:	0800b3fc 	.word	0x0800b3fc
 800ae9c:	0800b3bc 	.word	0x0800b3bc

0800aea0 <_write_r>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	4d07      	ldr	r5, [pc, #28]	; (800aec0 <_write_r+0x20>)
 800aea4:	4604      	mov	r4, r0
 800aea6:	4608      	mov	r0, r1
 800aea8:	4611      	mov	r1, r2
 800aeaa:	2200      	movs	r2, #0
 800aeac:	602a      	str	r2, [r5, #0]
 800aeae:	461a      	mov	r2, r3
 800aeb0:	f7f6 faa4 	bl	80013fc <_write>
 800aeb4:	1c43      	adds	r3, r0, #1
 800aeb6:	d102      	bne.n	800aebe <_write_r+0x1e>
 800aeb8:	682b      	ldr	r3, [r5, #0]
 800aeba:	b103      	cbz	r3, 800aebe <_write_r+0x1e>
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	bd38      	pop	{r3, r4, r5, pc}
 800aec0:	240004e8 	.word	0x240004e8

0800aec4 <__swsetup_r>:
 800aec4:	4b32      	ldr	r3, [pc, #200]	; (800af90 <__swsetup_r+0xcc>)
 800aec6:	b570      	push	{r4, r5, r6, lr}
 800aec8:	681d      	ldr	r5, [r3, #0]
 800aeca:	4606      	mov	r6, r0
 800aecc:	460c      	mov	r4, r1
 800aece:	b125      	cbz	r5, 800aeda <__swsetup_r+0x16>
 800aed0:	69ab      	ldr	r3, [r5, #24]
 800aed2:	b913      	cbnz	r3, 800aeda <__swsetup_r+0x16>
 800aed4:	4628      	mov	r0, r5
 800aed6:	f7ff fb1b 	bl	800a510 <__sinit>
 800aeda:	4b2e      	ldr	r3, [pc, #184]	; (800af94 <__swsetup_r+0xd0>)
 800aedc:	429c      	cmp	r4, r3
 800aede:	d10f      	bne.n	800af00 <__swsetup_r+0x3c>
 800aee0:	686c      	ldr	r4, [r5, #4]
 800aee2:	89a3      	ldrh	r3, [r4, #12]
 800aee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aee8:	0719      	lsls	r1, r3, #28
 800aeea:	d42c      	bmi.n	800af46 <__swsetup_r+0x82>
 800aeec:	06dd      	lsls	r5, r3, #27
 800aeee:	d411      	bmi.n	800af14 <__swsetup_r+0x50>
 800aef0:	2309      	movs	r3, #9
 800aef2:	6033      	str	r3, [r6, #0]
 800aef4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aef8:	81a3      	strh	r3, [r4, #12]
 800aefa:	f04f 30ff 	mov.w	r0, #4294967295
 800aefe:	e03e      	b.n	800af7e <__swsetup_r+0xba>
 800af00:	4b25      	ldr	r3, [pc, #148]	; (800af98 <__swsetup_r+0xd4>)
 800af02:	429c      	cmp	r4, r3
 800af04:	d101      	bne.n	800af0a <__swsetup_r+0x46>
 800af06:	68ac      	ldr	r4, [r5, #8]
 800af08:	e7eb      	b.n	800aee2 <__swsetup_r+0x1e>
 800af0a:	4b24      	ldr	r3, [pc, #144]	; (800af9c <__swsetup_r+0xd8>)
 800af0c:	429c      	cmp	r4, r3
 800af0e:	bf08      	it	eq
 800af10:	68ec      	ldreq	r4, [r5, #12]
 800af12:	e7e6      	b.n	800aee2 <__swsetup_r+0x1e>
 800af14:	0758      	lsls	r0, r3, #29
 800af16:	d512      	bpl.n	800af3e <__swsetup_r+0x7a>
 800af18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af1a:	b141      	cbz	r1, 800af2e <__swsetup_r+0x6a>
 800af1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af20:	4299      	cmp	r1, r3
 800af22:	d002      	beq.n	800af2a <__swsetup_r+0x66>
 800af24:	4630      	mov	r0, r6
 800af26:	f000 f991 	bl	800b24c <_free_r>
 800af2a:	2300      	movs	r3, #0
 800af2c:	6363      	str	r3, [r4, #52]	; 0x34
 800af2e:	89a3      	ldrh	r3, [r4, #12]
 800af30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af34:	81a3      	strh	r3, [r4, #12]
 800af36:	2300      	movs	r3, #0
 800af38:	6063      	str	r3, [r4, #4]
 800af3a:	6923      	ldr	r3, [r4, #16]
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	89a3      	ldrh	r3, [r4, #12]
 800af40:	f043 0308 	orr.w	r3, r3, #8
 800af44:	81a3      	strh	r3, [r4, #12]
 800af46:	6923      	ldr	r3, [r4, #16]
 800af48:	b94b      	cbnz	r3, 800af5e <__swsetup_r+0x9a>
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af54:	d003      	beq.n	800af5e <__swsetup_r+0x9a>
 800af56:	4621      	mov	r1, r4
 800af58:	4630      	mov	r0, r6
 800af5a:	f000 f92b 	bl	800b1b4 <__smakebuf_r>
 800af5e:	89a0      	ldrh	r0, [r4, #12]
 800af60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af64:	f010 0301 	ands.w	r3, r0, #1
 800af68:	d00a      	beq.n	800af80 <__swsetup_r+0xbc>
 800af6a:	2300      	movs	r3, #0
 800af6c:	60a3      	str	r3, [r4, #8]
 800af6e:	6963      	ldr	r3, [r4, #20]
 800af70:	425b      	negs	r3, r3
 800af72:	61a3      	str	r3, [r4, #24]
 800af74:	6923      	ldr	r3, [r4, #16]
 800af76:	b943      	cbnz	r3, 800af8a <__swsetup_r+0xc6>
 800af78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af7c:	d1ba      	bne.n	800aef4 <__swsetup_r+0x30>
 800af7e:	bd70      	pop	{r4, r5, r6, pc}
 800af80:	0781      	lsls	r1, r0, #30
 800af82:	bf58      	it	pl
 800af84:	6963      	ldrpl	r3, [r4, #20]
 800af86:	60a3      	str	r3, [r4, #8]
 800af88:	e7f4      	b.n	800af74 <__swsetup_r+0xb0>
 800af8a:	2000      	movs	r0, #0
 800af8c:	e7f7      	b.n	800af7e <__swsetup_r+0xba>
 800af8e:	bf00      	nop
 800af90:	24000010 	.word	0x24000010
 800af94:	0800b3dc 	.word	0x0800b3dc
 800af98:	0800b3fc 	.word	0x0800b3fc
 800af9c:	0800b3bc 	.word	0x0800b3bc

0800afa0 <_close_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4d06      	ldr	r5, [pc, #24]	; (800afbc <_close_r+0x1c>)
 800afa4:	2300      	movs	r3, #0
 800afa6:	4604      	mov	r4, r0
 800afa8:	4608      	mov	r0, r1
 800afaa:	602b      	str	r3, [r5, #0]
 800afac:	f7f6 fa42 	bl	8001434 <_close>
 800afb0:	1c43      	adds	r3, r0, #1
 800afb2:	d102      	bne.n	800afba <_close_r+0x1a>
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	b103      	cbz	r3, 800afba <_close_r+0x1a>
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	240004e8 	.word	0x240004e8

0800afc0 <__sflush_r>:
 800afc0:	898a      	ldrh	r2, [r1, #12]
 800afc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc6:	4605      	mov	r5, r0
 800afc8:	0710      	lsls	r0, r2, #28
 800afca:	460c      	mov	r4, r1
 800afcc:	d458      	bmi.n	800b080 <__sflush_r+0xc0>
 800afce:	684b      	ldr	r3, [r1, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	dc05      	bgt.n	800afe0 <__sflush_r+0x20>
 800afd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	dc02      	bgt.n	800afe0 <__sflush_r+0x20>
 800afda:	2000      	movs	r0, #0
 800afdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afe2:	2e00      	cmp	r6, #0
 800afe4:	d0f9      	beq.n	800afda <__sflush_r+0x1a>
 800afe6:	2300      	movs	r3, #0
 800afe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afec:	682f      	ldr	r7, [r5, #0]
 800afee:	602b      	str	r3, [r5, #0]
 800aff0:	d032      	beq.n	800b058 <__sflush_r+0x98>
 800aff2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aff4:	89a3      	ldrh	r3, [r4, #12]
 800aff6:	075a      	lsls	r2, r3, #29
 800aff8:	d505      	bpl.n	800b006 <__sflush_r+0x46>
 800affa:	6863      	ldr	r3, [r4, #4]
 800affc:	1ac0      	subs	r0, r0, r3
 800affe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b000:	b10b      	cbz	r3, 800b006 <__sflush_r+0x46>
 800b002:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b004:	1ac0      	subs	r0, r0, r3
 800b006:	2300      	movs	r3, #0
 800b008:	4602      	mov	r2, r0
 800b00a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b00c:	6a21      	ldr	r1, [r4, #32]
 800b00e:	4628      	mov	r0, r5
 800b010:	47b0      	blx	r6
 800b012:	1c43      	adds	r3, r0, #1
 800b014:	89a3      	ldrh	r3, [r4, #12]
 800b016:	d106      	bne.n	800b026 <__sflush_r+0x66>
 800b018:	6829      	ldr	r1, [r5, #0]
 800b01a:	291d      	cmp	r1, #29
 800b01c:	d82c      	bhi.n	800b078 <__sflush_r+0xb8>
 800b01e:	4a2a      	ldr	r2, [pc, #168]	; (800b0c8 <__sflush_r+0x108>)
 800b020:	40ca      	lsrs	r2, r1
 800b022:	07d6      	lsls	r6, r2, #31
 800b024:	d528      	bpl.n	800b078 <__sflush_r+0xb8>
 800b026:	2200      	movs	r2, #0
 800b028:	6062      	str	r2, [r4, #4]
 800b02a:	04d9      	lsls	r1, r3, #19
 800b02c:	6922      	ldr	r2, [r4, #16]
 800b02e:	6022      	str	r2, [r4, #0]
 800b030:	d504      	bpl.n	800b03c <__sflush_r+0x7c>
 800b032:	1c42      	adds	r2, r0, #1
 800b034:	d101      	bne.n	800b03a <__sflush_r+0x7a>
 800b036:	682b      	ldr	r3, [r5, #0]
 800b038:	b903      	cbnz	r3, 800b03c <__sflush_r+0x7c>
 800b03a:	6560      	str	r0, [r4, #84]	; 0x54
 800b03c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b03e:	602f      	str	r7, [r5, #0]
 800b040:	2900      	cmp	r1, #0
 800b042:	d0ca      	beq.n	800afda <__sflush_r+0x1a>
 800b044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b048:	4299      	cmp	r1, r3
 800b04a:	d002      	beq.n	800b052 <__sflush_r+0x92>
 800b04c:	4628      	mov	r0, r5
 800b04e:	f000 f8fd 	bl	800b24c <_free_r>
 800b052:	2000      	movs	r0, #0
 800b054:	6360      	str	r0, [r4, #52]	; 0x34
 800b056:	e7c1      	b.n	800afdc <__sflush_r+0x1c>
 800b058:	6a21      	ldr	r1, [r4, #32]
 800b05a:	2301      	movs	r3, #1
 800b05c:	4628      	mov	r0, r5
 800b05e:	47b0      	blx	r6
 800b060:	1c41      	adds	r1, r0, #1
 800b062:	d1c7      	bne.n	800aff4 <__sflush_r+0x34>
 800b064:	682b      	ldr	r3, [r5, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d0c4      	beq.n	800aff4 <__sflush_r+0x34>
 800b06a:	2b1d      	cmp	r3, #29
 800b06c:	d001      	beq.n	800b072 <__sflush_r+0xb2>
 800b06e:	2b16      	cmp	r3, #22
 800b070:	d101      	bne.n	800b076 <__sflush_r+0xb6>
 800b072:	602f      	str	r7, [r5, #0]
 800b074:	e7b1      	b.n	800afda <__sflush_r+0x1a>
 800b076:	89a3      	ldrh	r3, [r4, #12]
 800b078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b07c:	81a3      	strh	r3, [r4, #12]
 800b07e:	e7ad      	b.n	800afdc <__sflush_r+0x1c>
 800b080:	690f      	ldr	r7, [r1, #16]
 800b082:	2f00      	cmp	r7, #0
 800b084:	d0a9      	beq.n	800afda <__sflush_r+0x1a>
 800b086:	0793      	lsls	r3, r2, #30
 800b088:	680e      	ldr	r6, [r1, #0]
 800b08a:	bf08      	it	eq
 800b08c:	694b      	ldreq	r3, [r1, #20]
 800b08e:	600f      	str	r7, [r1, #0]
 800b090:	bf18      	it	ne
 800b092:	2300      	movne	r3, #0
 800b094:	eba6 0807 	sub.w	r8, r6, r7
 800b098:	608b      	str	r3, [r1, #8]
 800b09a:	f1b8 0f00 	cmp.w	r8, #0
 800b09e:	dd9c      	ble.n	800afda <__sflush_r+0x1a>
 800b0a0:	6a21      	ldr	r1, [r4, #32]
 800b0a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0a4:	4643      	mov	r3, r8
 800b0a6:	463a      	mov	r2, r7
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	47b0      	blx	r6
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	dc06      	bgt.n	800b0be <__sflush_r+0xfe>
 800b0b0:	89a3      	ldrh	r3, [r4, #12]
 800b0b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0b6:	81a3      	strh	r3, [r4, #12]
 800b0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0bc:	e78e      	b.n	800afdc <__sflush_r+0x1c>
 800b0be:	4407      	add	r7, r0
 800b0c0:	eba8 0800 	sub.w	r8, r8, r0
 800b0c4:	e7e9      	b.n	800b09a <__sflush_r+0xda>
 800b0c6:	bf00      	nop
 800b0c8:	20400001 	.word	0x20400001

0800b0cc <_fflush_r>:
 800b0cc:	b538      	push	{r3, r4, r5, lr}
 800b0ce:	690b      	ldr	r3, [r1, #16]
 800b0d0:	4605      	mov	r5, r0
 800b0d2:	460c      	mov	r4, r1
 800b0d4:	b913      	cbnz	r3, 800b0dc <_fflush_r+0x10>
 800b0d6:	2500      	movs	r5, #0
 800b0d8:	4628      	mov	r0, r5
 800b0da:	bd38      	pop	{r3, r4, r5, pc}
 800b0dc:	b118      	cbz	r0, 800b0e6 <_fflush_r+0x1a>
 800b0de:	6983      	ldr	r3, [r0, #24]
 800b0e0:	b90b      	cbnz	r3, 800b0e6 <_fflush_r+0x1a>
 800b0e2:	f7ff fa15 	bl	800a510 <__sinit>
 800b0e6:	4b14      	ldr	r3, [pc, #80]	; (800b138 <_fflush_r+0x6c>)
 800b0e8:	429c      	cmp	r4, r3
 800b0ea:	d11b      	bne.n	800b124 <_fflush_r+0x58>
 800b0ec:	686c      	ldr	r4, [r5, #4]
 800b0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d0ef      	beq.n	800b0d6 <_fflush_r+0xa>
 800b0f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0f8:	07d0      	lsls	r0, r2, #31
 800b0fa:	d404      	bmi.n	800b106 <_fflush_r+0x3a>
 800b0fc:	0599      	lsls	r1, r3, #22
 800b0fe:	d402      	bmi.n	800b106 <_fflush_r+0x3a>
 800b100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b102:	f7ff faa3 	bl	800a64c <__retarget_lock_acquire_recursive>
 800b106:	4628      	mov	r0, r5
 800b108:	4621      	mov	r1, r4
 800b10a:	f7ff ff59 	bl	800afc0 <__sflush_r>
 800b10e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b110:	07da      	lsls	r2, r3, #31
 800b112:	4605      	mov	r5, r0
 800b114:	d4e0      	bmi.n	800b0d8 <_fflush_r+0xc>
 800b116:	89a3      	ldrh	r3, [r4, #12]
 800b118:	059b      	lsls	r3, r3, #22
 800b11a:	d4dd      	bmi.n	800b0d8 <_fflush_r+0xc>
 800b11c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b11e:	f7ff fa96 	bl	800a64e <__retarget_lock_release_recursive>
 800b122:	e7d9      	b.n	800b0d8 <_fflush_r+0xc>
 800b124:	4b05      	ldr	r3, [pc, #20]	; (800b13c <_fflush_r+0x70>)
 800b126:	429c      	cmp	r4, r3
 800b128:	d101      	bne.n	800b12e <_fflush_r+0x62>
 800b12a:	68ac      	ldr	r4, [r5, #8]
 800b12c:	e7df      	b.n	800b0ee <_fflush_r+0x22>
 800b12e:	4b04      	ldr	r3, [pc, #16]	; (800b140 <_fflush_r+0x74>)
 800b130:	429c      	cmp	r4, r3
 800b132:	bf08      	it	eq
 800b134:	68ec      	ldreq	r4, [r5, #12]
 800b136:	e7da      	b.n	800b0ee <_fflush_r+0x22>
 800b138:	0800b3dc 	.word	0x0800b3dc
 800b13c:	0800b3fc 	.word	0x0800b3fc
 800b140:	0800b3bc 	.word	0x0800b3bc

0800b144 <_lseek_r>:
 800b144:	b538      	push	{r3, r4, r5, lr}
 800b146:	4d07      	ldr	r5, [pc, #28]	; (800b164 <_lseek_r+0x20>)
 800b148:	4604      	mov	r4, r0
 800b14a:	4608      	mov	r0, r1
 800b14c:	4611      	mov	r1, r2
 800b14e:	2200      	movs	r2, #0
 800b150:	602a      	str	r2, [r5, #0]
 800b152:	461a      	mov	r2, r3
 800b154:	f7f6 f995 	bl	8001482 <_lseek>
 800b158:	1c43      	adds	r3, r0, #1
 800b15a:	d102      	bne.n	800b162 <_lseek_r+0x1e>
 800b15c:	682b      	ldr	r3, [r5, #0]
 800b15e:	b103      	cbz	r3, 800b162 <_lseek_r+0x1e>
 800b160:	6023      	str	r3, [r4, #0]
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	240004e8 	.word	0x240004e8

0800b168 <__swhatbuf_r>:
 800b168:	b570      	push	{r4, r5, r6, lr}
 800b16a:	460e      	mov	r6, r1
 800b16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b170:	2900      	cmp	r1, #0
 800b172:	b096      	sub	sp, #88	; 0x58
 800b174:	4614      	mov	r4, r2
 800b176:	461d      	mov	r5, r3
 800b178:	da08      	bge.n	800b18c <__swhatbuf_r+0x24>
 800b17a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b17e:	2200      	movs	r2, #0
 800b180:	602a      	str	r2, [r5, #0]
 800b182:	061a      	lsls	r2, r3, #24
 800b184:	d410      	bmi.n	800b1a8 <__swhatbuf_r+0x40>
 800b186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b18a:	e00e      	b.n	800b1aa <__swhatbuf_r+0x42>
 800b18c:	466a      	mov	r2, sp
 800b18e:	f000 f8bb 	bl	800b308 <_fstat_r>
 800b192:	2800      	cmp	r0, #0
 800b194:	dbf1      	blt.n	800b17a <__swhatbuf_r+0x12>
 800b196:	9a01      	ldr	r2, [sp, #4]
 800b198:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b19c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1a0:	425a      	negs	r2, r3
 800b1a2:	415a      	adcs	r2, r3
 800b1a4:	602a      	str	r2, [r5, #0]
 800b1a6:	e7ee      	b.n	800b186 <__swhatbuf_r+0x1e>
 800b1a8:	2340      	movs	r3, #64	; 0x40
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	b016      	add	sp, #88	; 0x58
 800b1b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b1b4 <__smakebuf_r>:
 800b1b4:	898b      	ldrh	r3, [r1, #12]
 800b1b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1b8:	079d      	lsls	r5, r3, #30
 800b1ba:	4606      	mov	r6, r0
 800b1bc:	460c      	mov	r4, r1
 800b1be:	d507      	bpl.n	800b1d0 <__smakebuf_r+0x1c>
 800b1c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1c4:	6023      	str	r3, [r4, #0]
 800b1c6:	6123      	str	r3, [r4, #16]
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	6163      	str	r3, [r4, #20]
 800b1cc:	b002      	add	sp, #8
 800b1ce:	bd70      	pop	{r4, r5, r6, pc}
 800b1d0:	ab01      	add	r3, sp, #4
 800b1d2:	466a      	mov	r2, sp
 800b1d4:	f7ff ffc8 	bl	800b168 <__swhatbuf_r>
 800b1d8:	9900      	ldr	r1, [sp, #0]
 800b1da:	4605      	mov	r5, r0
 800b1dc:	4630      	mov	r0, r6
 800b1de:	f7ff fa57 	bl	800a690 <_malloc_r>
 800b1e2:	b948      	cbnz	r0, 800b1f8 <__smakebuf_r+0x44>
 800b1e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1e8:	059a      	lsls	r2, r3, #22
 800b1ea:	d4ef      	bmi.n	800b1cc <__smakebuf_r+0x18>
 800b1ec:	f023 0303 	bic.w	r3, r3, #3
 800b1f0:	f043 0302 	orr.w	r3, r3, #2
 800b1f4:	81a3      	strh	r3, [r4, #12]
 800b1f6:	e7e3      	b.n	800b1c0 <__smakebuf_r+0xc>
 800b1f8:	4b0d      	ldr	r3, [pc, #52]	; (800b230 <__smakebuf_r+0x7c>)
 800b1fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800b1fc:	89a3      	ldrh	r3, [r4, #12]
 800b1fe:	6020      	str	r0, [r4, #0]
 800b200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b204:	81a3      	strh	r3, [r4, #12]
 800b206:	9b00      	ldr	r3, [sp, #0]
 800b208:	6163      	str	r3, [r4, #20]
 800b20a:	9b01      	ldr	r3, [sp, #4]
 800b20c:	6120      	str	r0, [r4, #16]
 800b20e:	b15b      	cbz	r3, 800b228 <__smakebuf_r+0x74>
 800b210:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b214:	4630      	mov	r0, r6
 800b216:	f000 f889 	bl	800b32c <_isatty_r>
 800b21a:	b128      	cbz	r0, 800b228 <__smakebuf_r+0x74>
 800b21c:	89a3      	ldrh	r3, [r4, #12]
 800b21e:	f023 0303 	bic.w	r3, r3, #3
 800b222:	f043 0301 	orr.w	r3, r3, #1
 800b226:	81a3      	strh	r3, [r4, #12]
 800b228:	89a0      	ldrh	r0, [r4, #12]
 800b22a:	4305      	orrs	r5, r0
 800b22c:	81a5      	strh	r5, [r4, #12]
 800b22e:	e7cd      	b.n	800b1cc <__smakebuf_r+0x18>
 800b230:	0800a4a9 	.word	0x0800a4a9

0800b234 <__malloc_lock>:
 800b234:	4801      	ldr	r0, [pc, #4]	; (800b23c <__malloc_lock+0x8>)
 800b236:	f7ff ba09 	b.w	800a64c <__retarget_lock_acquire_recursive>
 800b23a:	bf00      	nop
 800b23c:	240004dc 	.word	0x240004dc

0800b240 <__malloc_unlock>:
 800b240:	4801      	ldr	r0, [pc, #4]	; (800b248 <__malloc_unlock+0x8>)
 800b242:	f7ff ba04 	b.w	800a64e <__retarget_lock_release_recursive>
 800b246:	bf00      	nop
 800b248:	240004dc 	.word	0x240004dc

0800b24c <_free_r>:
 800b24c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b24e:	2900      	cmp	r1, #0
 800b250:	d044      	beq.n	800b2dc <_free_r+0x90>
 800b252:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b256:	9001      	str	r0, [sp, #4]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f1a1 0404 	sub.w	r4, r1, #4
 800b25e:	bfb8      	it	lt
 800b260:	18e4      	addlt	r4, r4, r3
 800b262:	f7ff ffe7 	bl	800b234 <__malloc_lock>
 800b266:	4a1e      	ldr	r2, [pc, #120]	; (800b2e0 <_free_r+0x94>)
 800b268:	9801      	ldr	r0, [sp, #4]
 800b26a:	6813      	ldr	r3, [r2, #0]
 800b26c:	b933      	cbnz	r3, 800b27c <_free_r+0x30>
 800b26e:	6063      	str	r3, [r4, #4]
 800b270:	6014      	str	r4, [r2, #0]
 800b272:	b003      	add	sp, #12
 800b274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b278:	f7ff bfe2 	b.w	800b240 <__malloc_unlock>
 800b27c:	42a3      	cmp	r3, r4
 800b27e:	d908      	bls.n	800b292 <_free_r+0x46>
 800b280:	6825      	ldr	r5, [r4, #0]
 800b282:	1961      	adds	r1, r4, r5
 800b284:	428b      	cmp	r3, r1
 800b286:	bf01      	itttt	eq
 800b288:	6819      	ldreq	r1, [r3, #0]
 800b28a:	685b      	ldreq	r3, [r3, #4]
 800b28c:	1949      	addeq	r1, r1, r5
 800b28e:	6021      	streq	r1, [r4, #0]
 800b290:	e7ed      	b.n	800b26e <_free_r+0x22>
 800b292:	461a      	mov	r2, r3
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	b10b      	cbz	r3, 800b29c <_free_r+0x50>
 800b298:	42a3      	cmp	r3, r4
 800b29a:	d9fa      	bls.n	800b292 <_free_r+0x46>
 800b29c:	6811      	ldr	r1, [r2, #0]
 800b29e:	1855      	adds	r5, r2, r1
 800b2a0:	42a5      	cmp	r5, r4
 800b2a2:	d10b      	bne.n	800b2bc <_free_r+0x70>
 800b2a4:	6824      	ldr	r4, [r4, #0]
 800b2a6:	4421      	add	r1, r4
 800b2a8:	1854      	adds	r4, r2, r1
 800b2aa:	42a3      	cmp	r3, r4
 800b2ac:	6011      	str	r1, [r2, #0]
 800b2ae:	d1e0      	bne.n	800b272 <_free_r+0x26>
 800b2b0:	681c      	ldr	r4, [r3, #0]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	6053      	str	r3, [r2, #4]
 800b2b6:	4421      	add	r1, r4
 800b2b8:	6011      	str	r1, [r2, #0]
 800b2ba:	e7da      	b.n	800b272 <_free_r+0x26>
 800b2bc:	d902      	bls.n	800b2c4 <_free_r+0x78>
 800b2be:	230c      	movs	r3, #12
 800b2c0:	6003      	str	r3, [r0, #0]
 800b2c2:	e7d6      	b.n	800b272 <_free_r+0x26>
 800b2c4:	6825      	ldr	r5, [r4, #0]
 800b2c6:	1961      	adds	r1, r4, r5
 800b2c8:	428b      	cmp	r3, r1
 800b2ca:	bf04      	itt	eq
 800b2cc:	6819      	ldreq	r1, [r3, #0]
 800b2ce:	685b      	ldreq	r3, [r3, #4]
 800b2d0:	6063      	str	r3, [r4, #4]
 800b2d2:	bf04      	itt	eq
 800b2d4:	1949      	addeq	r1, r1, r5
 800b2d6:	6021      	streq	r1, [r4, #0]
 800b2d8:	6054      	str	r4, [r2, #4]
 800b2da:	e7ca      	b.n	800b272 <_free_r+0x26>
 800b2dc:	b003      	add	sp, #12
 800b2de:	bd30      	pop	{r4, r5, pc}
 800b2e0:	240004e0 	.word	0x240004e0

0800b2e4 <_read_r>:
 800b2e4:	b538      	push	{r3, r4, r5, lr}
 800b2e6:	4d07      	ldr	r5, [pc, #28]	; (800b304 <_read_r+0x20>)
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	4608      	mov	r0, r1
 800b2ec:	4611      	mov	r1, r2
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	602a      	str	r2, [r5, #0]
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	f7f6 f865 	bl	80013c2 <_read>
 800b2f8:	1c43      	adds	r3, r0, #1
 800b2fa:	d102      	bne.n	800b302 <_read_r+0x1e>
 800b2fc:	682b      	ldr	r3, [r5, #0]
 800b2fe:	b103      	cbz	r3, 800b302 <_read_r+0x1e>
 800b300:	6023      	str	r3, [r4, #0]
 800b302:	bd38      	pop	{r3, r4, r5, pc}
 800b304:	240004e8 	.word	0x240004e8

0800b308 <_fstat_r>:
 800b308:	b538      	push	{r3, r4, r5, lr}
 800b30a:	4d07      	ldr	r5, [pc, #28]	; (800b328 <_fstat_r+0x20>)
 800b30c:	2300      	movs	r3, #0
 800b30e:	4604      	mov	r4, r0
 800b310:	4608      	mov	r0, r1
 800b312:	4611      	mov	r1, r2
 800b314:	602b      	str	r3, [r5, #0]
 800b316:	f7f6 f899 	bl	800144c <_fstat>
 800b31a:	1c43      	adds	r3, r0, #1
 800b31c:	d102      	bne.n	800b324 <_fstat_r+0x1c>
 800b31e:	682b      	ldr	r3, [r5, #0]
 800b320:	b103      	cbz	r3, 800b324 <_fstat_r+0x1c>
 800b322:	6023      	str	r3, [r4, #0]
 800b324:	bd38      	pop	{r3, r4, r5, pc}
 800b326:	bf00      	nop
 800b328:	240004e8 	.word	0x240004e8

0800b32c <_isatty_r>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	4d06      	ldr	r5, [pc, #24]	; (800b348 <_isatty_r+0x1c>)
 800b330:	2300      	movs	r3, #0
 800b332:	4604      	mov	r4, r0
 800b334:	4608      	mov	r0, r1
 800b336:	602b      	str	r3, [r5, #0]
 800b338:	f7f6 f898 	bl	800146c <_isatty>
 800b33c:	1c43      	adds	r3, r0, #1
 800b33e:	d102      	bne.n	800b346 <_isatty_r+0x1a>
 800b340:	682b      	ldr	r3, [r5, #0]
 800b342:	b103      	cbz	r3, 800b346 <_isatty_r+0x1a>
 800b344:	6023      	str	r3, [r4, #0]
 800b346:	bd38      	pop	{r3, r4, r5, pc}
 800b348:	240004e8 	.word	0x240004e8

0800b34c <_init>:
 800b34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b34e:	bf00      	nop
 800b350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b352:	bc08      	pop	{r3}
 800b354:	469e      	mov	lr, r3
 800b356:	4770      	bx	lr

0800b358 <_fini>:
 800b358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35a:	bf00      	nop
 800b35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b35e:	bc08      	pop	{r3}
 800b360:	469e      	mov	lr, r3
 800b362:	4770      	bx	lr
