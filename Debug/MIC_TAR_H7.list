
MIC_TAR_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e80c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006fb4  0800eaac  0800eaac  0001eaac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015a60  08015a60  00025a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015a68  08015a68  00025a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015a6c  08015a6c  00025a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08015a70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000cb4  24000108  08015b78  00030108  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000dbc  08015b78  00030dbc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020317  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003bfe  00000000  00000000  0005044d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016a8  00000000  00000000  00054050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014f8  00000000  00000000  000556f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ade5  00000000  00000000  00056bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002077d  00000000  00000000  000919d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d109  00000000  00000000  000b2152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0021f25b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000677c  00000000  00000000  0021f2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000108 	.word	0x24000108
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ea94 	.word	0x0800ea94

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400010c 	.word	0x2400010c
 80002dc:	0800ea94 	.word	0x0800ea94

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_DMA_Init+0x5c>)
 800068c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000690:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <MX_DMA_Init+0x5c>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_DMA_Init+0x5c>)
 800069c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2102      	movs	r1, #2
 80006ac:	200b      	movs	r0, #11
 80006ae:	f003 fcde 	bl	800406e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006b2:	200b      	movs	r0, #11
 80006b4:	f003 fcf5 	bl	80040a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2102      	movs	r1, #2
 80006bc:	200c      	movs	r0, #12
 80006be:	f003 fcd6 	bl	800406e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006c2:	200c      	movs	r0, #12
 80006c4:	f003 fced 	bl	80040a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 2, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2102      	movs	r1, #2
 80006cc:	200d      	movs	r0, #13
 80006ce:	f003 fcce 	bl	800406e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80006d2:	200d      	movs	r0, #13
 80006d4:	f003 fce5 	bl	80040a2 <HAL_NVIC_EnableIRQ>

}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	58024400 	.word	0x58024400

080006e4 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fa:	4b53      	ldr	r3, [pc, #332]	; (8000848 <MX_GPIO_Init+0x164>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4a51      	ldr	r2, [pc, #324]	; (8000848 <MX_GPIO_Init+0x164>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4b4f      	ldr	r3, [pc, #316]	; (8000848 <MX_GPIO_Init+0x164>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f003 0310 	and.w	r3, r3, #16
 8000714:	61bb      	str	r3, [r7, #24]
 8000716:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000718:	4b4b      	ldr	r3, [pc, #300]	; (8000848 <MX_GPIO_Init+0x164>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071e:	4a4a      	ldr	r2, [pc, #296]	; (8000848 <MX_GPIO_Init+0x164>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000728:	4b47      	ldr	r3, [pc, #284]	; (8000848 <MX_GPIO_Init+0x164>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	4b44      	ldr	r3, [pc, #272]	; (8000848 <MX_GPIO_Init+0x164>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a42      	ldr	r2, [pc, #264]	; (8000848 <MX_GPIO_Init+0x164>)
 800073e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b40      	ldr	r3, [pc, #256]	; (8000848 <MX_GPIO_Init+0x164>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000754:	4b3c      	ldr	r3, [pc, #240]	; (8000848 <MX_GPIO_Init+0x164>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	4a3b      	ldr	r2, [pc, #236]	; (8000848 <MX_GPIO_Init+0x164>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000764:	4b38      	ldr	r3, [pc, #224]	; (8000848 <MX_GPIO_Init+0x164>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b35      	ldr	r3, [pc, #212]	; (8000848 <MX_GPIO_Init+0x164>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	4a33      	ldr	r2, [pc, #204]	; (8000848 <MX_GPIO_Init+0x164>)
 800077a:	f043 0302 	orr.w	r3, r3, #2
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000782:	4b31      	ldr	r3, [pc, #196]	; (8000848 <MX_GPIO_Init+0x164>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000788:	f003 0302 	and.w	r3, r3, #2
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000790:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <MX_GPIO_Init+0x164>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000796:	4a2c      	ldr	r2, [pc, #176]	; (8000848 <MX_GPIO_Init+0x164>)
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a0:	4b29      	ldr	r3, [pc, #164]	; (8000848 <MX_GPIO_Init+0x164>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2108      	movs	r1, #8
 80007b2:	4826      	ldr	r0, [pc, #152]	; (800084c <MX_GPIO_Init+0x168>)
 80007b4:	f005 ff30 	bl	8006618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 80007be:	4823      	ldr	r0, [pc, #140]	; (800084c <MX_GPIO_Init+0x168>)
 80007c0:	f005 ff2a 	bl	8006618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	4821      	ldr	r0, [pc, #132]	; (8000850 <MX_GPIO_Init+0x16c>)
 80007ca:	f005 ff25 	bl	8006618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007ce:	2308      	movs	r3, #8
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	4819      	ldr	r0, [pc, #100]	; (800084c <MX_GPIO_Init+0x168>)
 80007e6:	f005 fd4f 	bl	8006288 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80007ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007f4:	2302      	movs	r3, #2
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4815      	ldr	r0, [pc, #84]	; (8000854 <MX_GPIO_Init+0x170>)
 8000800:	f005 fd42 	bl	8006288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 8000804:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	480b      	ldr	r0, [pc, #44]	; (800084c <MX_GPIO_Init+0x168>)
 800081e:	f005 fd33 	bl	8006288 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_GPIO_Init+0x16c>)
 800083a:	f005 fd25 	bl	8006288 <HAL_GPIO_Init>

}
 800083e:	bf00      	nop
 8000840:	3730      	adds	r7, #48	; 0x30
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	58024400 	.word	0x58024400
 800084c:	58021000 	.word	0x58021000
 8000850:	58020c00 	.word	0x58020c00
 8000854:	58020800 	.word	0x58020800

08000858 <MX_I2S1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi3_rx;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_I2S1_Init+0x60>)
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <MX_I2S1_Init+0x64>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_I2S1_Init+0x60>)
 8000864:	2206      	movs	r2, #6
 8000866:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_I2S1_Init+0x60>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_I2S1_Init+0x60>)
 8000870:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000874:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_I2S1_Init+0x60>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_I2S1_Init+0x60>)
 800087e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000882:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_I2S1_Init+0x60>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_I2S1_Init+0x60>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_I2S1_Init+0x60>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_I2S1_Init+0x60>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_ENABLE;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_I2S1_Init+0x60>)
 800089e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_I2S1_Init+0x60>)
 80008a6:	f005 feeb 	bl	8006680 <HAL_I2S_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 80008b0:	f000 fd28 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	24000124 	.word	0x24000124
 80008bc:	40013000 	.word	0x40013000

080008c0 <MX_I2S2_Init>:
/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80008c4:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_I2S2_Init+0x60>)
 80008c6:	4a17      	ldr	r2, [pc, #92]	; (8000924 <MX_I2S2_Init+0x64>)
 80008c8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_I2S2_Init+0x60>)
 80008cc:	2206      	movs	r2, #6
 80008ce:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_I2S2_Init+0x60>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_I2S2_Init+0x60>)
 80008d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008dc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_I2S2_Init+0x60>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_I2S2_Init+0x60>)
 80008e6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80008ea:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_I2S2_Init+0x60>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_I2S2_Init+0x60>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_I2S2_Init+0x60>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_I2S2_Init+0x60>)
 8000900:	2200      	movs	r2, #0
 8000902:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_ENABLE;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_I2S2_Init+0x60>)
 8000906:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_I2S2_Init+0x60>)
 800090e:	f005 feb7 	bl	8006680 <HAL_I2S_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2S2_Init+0x5c>
  {
    Error_Handler();
 8000918:	f000 fcf4 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	24000178 	.word	0x24000178
 8000924:	40003800 	.word	0x40003800

08000928 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_I2S3_Init+0x60>)
 800092e:	4a17      	ldr	r2, [pc, #92]	; (800098c <MX_I2S3_Init+0x64>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_I2S3_Init+0x60>)
 8000934:	2206      	movs	r2, #6
 8000936:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_I2S3_Init+0x60>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_I2S3_Init+0x60>)
 8000940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000944:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_I2S3_Init+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_I2S3_Init+0x60>)
 800094e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000952:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_I2S3_Init+0x60>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_I2S3_Init+0x60>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_I2S3_Init+0x60>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_I2S3_Init+0x60>)
 8000968:	2200      	movs	r2, #0
 800096a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_ENABLE;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_I2S3_Init+0x60>)
 800096e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000972:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_I2S3_Init+0x60>)
 8000976:	f005 fe83 	bl	8006680 <HAL_I2S_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_I2S3_Init+0x5c>
  {
    Error_Handler();
 8000980:	f000 fcc0 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	240001cc 	.word	0x240001cc
 800098c:	40003c00 	.word	0x40003c00

08000990 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b090      	sub	sp, #64	; 0x40
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a8d      	ldr	r2, [pc, #564]	; (8000be4 <HAL_I2S_MspInit+0x254>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	f040 8081 	bne.w	8000ab6 <HAL_I2S_MspInit+0x126>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009b4:	4b8c      	ldr	r3, [pc, #560]	; (8000be8 <HAL_I2S_MspInit+0x258>)
 80009b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009ba:	4a8b      	ldr	r2, [pc, #556]	; (8000be8 <HAL_I2S_MspInit+0x258>)
 80009bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80009c4:	4b88      	ldr	r3, [pc, #544]	; (8000be8 <HAL_I2S_MspInit+0x258>)
 80009c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80009d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b85      	ldr	r3, [pc, #532]	; (8000be8 <HAL_I2S_MspInit+0x258>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	4a83      	ldr	r2, [pc, #524]	; (8000be8 <HAL_I2S_MspInit+0x258>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e2:	4b81      	ldr	r3, [pc, #516]	; (8000be8 <HAL_I2S_MspInit+0x258>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009f0:	2330      	movs	r3, #48	; 0x30
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a00:	2305      	movs	r3, #5
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4878      	ldr	r0, [pc, #480]	; (8000bec <HAL_I2S_MspInit+0x25c>)
 8000a0c:	f005 fc3c 	bl	8006288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a10:	2340      	movs	r3, #64	; 0x40
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a20:	2305      	movs	r3, #5
 8000a22:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4870      	ldr	r0, [pc, #448]	; (8000bec <HAL_I2S_MspInit+0x25c>)
 8000a2c:	f005 fc2c 	bl	8006288 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8000a30:	4b6f      	ldr	r3, [pc, #444]	; (8000bf0 <HAL_I2S_MspInit+0x260>)
 8000a32:	4a70      	ldr	r2, [pc, #448]	; (8000bf4 <HAL_I2S_MspInit+0x264>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000a36:	4b6e      	ldr	r3, [pc, #440]	; (8000bf0 <HAL_I2S_MspInit+0x260>)
 8000a38:	2225      	movs	r2, #37	; 0x25
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b6c      	ldr	r3, [pc, #432]	; (8000bf0 <HAL_I2S_MspInit+0x260>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b6b      	ldr	r3, [pc, #428]	; (8000bf0 <HAL_I2S_MspInit+0x260>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b69      	ldr	r3, [pc, #420]	; (8000bf0 <HAL_I2S_MspInit+0x260>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a50:	4b67      	ldr	r3, [pc, #412]	; (8000bf0 <HAL_I2S_MspInit+0x260>)
 8000a52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a58:	4b65      	ldr	r3, [pc, #404]	; (8000bf0 <HAL_I2S_MspInit+0x260>)
 8000a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b63      	ldr	r3, [pc, #396]	; (8000bf0 <HAL_I2S_MspInit+0x260>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a68:	4b61      	ldr	r3, [pc, #388]	; (8000bf0 <HAL_I2S_MspInit+0x260>)
 8000a6a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a6e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a70:	4b5f      	ldr	r3, [pc, #380]	; (8000bf0 <HAL_I2S_MspInit+0x260>)
 8000a72:	2204      	movs	r2, #4
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a76:	4b5e      	ldr	r3, [pc, #376]	; (8000bf0 <HAL_I2S_MspInit+0x260>)
 8000a78:	2203      	movs	r2, #3
 8000a7a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000a7c:	4b5c      	ldr	r3, [pc, #368]	; (8000bf0 <HAL_I2S_MspInit+0x260>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000a82:	4b5b      	ldr	r3, [pc, #364]	; (8000bf0 <HAL_I2S_MspInit+0x260>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a88:	4859      	ldr	r0, [pc, #356]	; (8000bf0 <HAL_I2S_MspInit+0x260>)
 8000a8a:	f003 fb25 	bl	80040d8 <HAL_DMA_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_I2S_MspInit+0x108>
    {
      Error_Handler();
 8000a94:	f000 fc36 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi1_rx);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a55      	ldr	r2, [pc, #340]	; (8000bf0 <HAL_I2S_MspInit+0x260>)
 8000a9c:	649a      	str	r2, [r3, #72]	; 0x48
 8000a9e:	4a54      	ldr	r2, [pc, #336]	; (8000bf0 <HAL_I2S_MspInit+0x260>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	2023      	movs	r0, #35	; 0x23
 8000aaa:	f003 fae0 	bl	800406e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000aae:	2023      	movs	r0, #35	; 0x23
 8000ab0:	f003 faf7 	bl	80040a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ab4:	e152      	b.n	8000d5c <HAL_I2S_MspInit+0x3cc>
  else if(i2sHandle->Instance==SPI2)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a4f      	ldr	r2, [pc, #316]	; (8000bf8 <HAL_I2S_MspInit+0x268>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	f040 80a5 	bne.w	8000c0c <HAL_I2S_MspInit+0x27c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ac2:	4b49      	ldr	r3, [pc, #292]	; (8000be8 <HAL_I2S_MspInit+0x258>)
 8000ac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ac8:	4a47      	ldr	r2, [pc, #284]	; (8000be8 <HAL_I2S_MspInit+0x258>)
 8000aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ace:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ad2:	4b45      	ldr	r3, [pc, #276]	; (8000be8 <HAL_I2S_MspInit+0x258>)
 8000ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000adc:	623b      	str	r3, [r7, #32]
 8000ade:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae0:	4b41      	ldr	r3, [pc, #260]	; (8000be8 <HAL_I2S_MspInit+0x258>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae6:	4a40      	ldr	r2, [pc, #256]	; (8000be8 <HAL_I2S_MspInit+0x258>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af0:	4b3d      	ldr	r3, [pc, #244]	; (8000be8 <HAL_I2S_MspInit+0x258>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b3a      	ldr	r3, [pc, #232]	; (8000be8 <HAL_I2S_MspInit+0x258>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b04:	4a38      	ldr	r2, [pc, #224]	; (8000be8 <HAL_I2S_MspInit+0x258>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0e:	4b36      	ldr	r3, [pc, #216]	; (8000be8 <HAL_I2S_MspInit+0x258>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b14:	f003 0302 	and.w	r3, r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b24:	2302      	movs	r3, #2
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b2c:	2305      	movs	r3, #5
 8000b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b34:	4619      	mov	r1, r3
 8000b36:	4831      	ldr	r0, [pc, #196]	; (8000bfc <HAL_I2S_MspInit+0x26c>)
 8000b38:	f005 fba6 	bl	8006288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000b3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b4e:	2305      	movs	r3, #5
 8000b50:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b56:	4619      	mov	r1, r3
 8000b58:	4829      	ldr	r0, [pc, #164]	; (8000c00 <HAL_I2S_MspInit+0x270>)
 8000b5a:	f005 fb95 	bl	8006288 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8000b5e:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <HAL_I2S_MspInit+0x274>)
 8000b60:	4a29      	ldr	r2, [pc, #164]	; (8000c08 <HAL_I2S_MspInit+0x278>)
 8000b62:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <HAL_I2S_MspInit+0x274>)
 8000b66:	2227      	movs	r2, #39	; 0x27
 8000b68:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6a:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <HAL_I2S_MspInit+0x274>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b70:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <HAL_I2S_MspInit+0x274>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b76:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <HAL_I2S_MspInit+0x274>)
 8000b78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b7c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <HAL_I2S_MspInit+0x274>)
 8000b80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b84:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <HAL_I2S_MspInit+0x274>)
 8000b88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b8c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <HAL_I2S_MspInit+0x274>)
 8000b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b94:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <HAL_I2S_MspInit+0x274>)
 8000b98:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b9c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <HAL_I2S_MspInit+0x274>)
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <HAL_I2S_MspInit+0x274>)
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <HAL_I2S_MspInit+0x274>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <HAL_I2S_MspInit+0x274>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000bb6:	4813      	ldr	r0, [pc, #76]	; (8000c04 <HAL_I2S_MspInit+0x274>)
 8000bb8:	f003 fa8e 	bl	80040d8 <HAL_DMA_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_I2S_MspInit+0x236>
      Error_Handler();
 8000bc2:	f000 fb9f 	bl	8001304 <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <HAL_I2S_MspInit+0x274>)
 8000bca:	649a      	str	r2, [r3, #72]	; 0x48
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <HAL_I2S_MspInit+0x274>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	2024      	movs	r0, #36	; 0x24
 8000bd8:	f003 fa49 	bl	800406e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000bdc:	2024      	movs	r0, #36	; 0x24
 8000bde:	f003 fa60 	bl	80040a2 <HAL_NVIC_EnableIRQ>
}
 8000be2:	e0bb      	b.n	8000d5c <HAL_I2S_MspInit+0x3cc>
 8000be4:	40013000 	.word	0x40013000
 8000be8:	58024400 	.word	0x58024400
 8000bec:	58020000 	.word	0x58020000
 8000bf0:	24000220 	.word	0x24000220
 8000bf4:	40020010 	.word	0x40020010
 8000bf8:	40003800 	.word	0x40003800
 8000bfc:	58020800 	.word	0x58020800
 8000c00:	58020400 	.word	0x58020400
 8000c04:	24000298 	.word	0x24000298
 8000c08:	40020028 	.word	0x40020028
  else if(i2sHandle->Instance==SPI3)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a54      	ldr	r2, [pc, #336]	; (8000d64 <HAL_I2S_MspInit+0x3d4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	f040 80a2 	bne.w	8000d5c <HAL_I2S_MspInit+0x3cc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c18:	4b53      	ldr	r3, [pc, #332]	; (8000d68 <HAL_I2S_MspInit+0x3d8>)
 8000c1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1e:	4a52      	ldr	r2, [pc, #328]	; (8000d68 <HAL_I2S_MspInit+0x3d8>)
 8000c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c28:	4b4f      	ldr	r3, [pc, #316]	; (8000d68 <HAL_I2S_MspInit+0x3d8>)
 8000c2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b4c      	ldr	r3, [pc, #304]	; (8000d68 <HAL_I2S_MspInit+0x3d8>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	4a4a      	ldr	r2, [pc, #296]	; (8000d68 <HAL_I2S_MspInit+0x3d8>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c46:	4b48      	ldr	r3, [pc, #288]	; (8000d68 <HAL_I2S_MspInit+0x3d8>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c54:	4b44      	ldr	r3, [pc, #272]	; (8000d68 <HAL_I2S_MspInit+0x3d8>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	4a43      	ldr	r2, [pc, #268]	; (8000d68 <HAL_I2S_MspInit+0x3d8>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c64:	4b40      	ldr	r3, [pc, #256]	; (8000d68 <HAL_I2S_MspInit+0x3d8>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c84:	2306      	movs	r3, #6
 8000c86:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4837      	ldr	r0, [pc, #220]	; (8000d6c <HAL_I2S_MspInit+0x3dc>)
 8000c90:	f005 fafa 	bl	8006288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ca6:	2306      	movs	r3, #6
 8000ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cae:	4619      	mov	r1, r3
 8000cb0:	482f      	ldr	r0, [pc, #188]	; (8000d70 <HAL_I2S_MspInit+0x3e0>)
 8000cb2:	f005 fae9 	bl	8006288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cc8:	2306      	movs	r3, #6
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4827      	ldr	r0, [pc, #156]	; (8000d70 <HAL_I2S_MspInit+0x3e0>)
 8000cd4:	f005 fad8 	bl	8006288 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream2;
 8000cd8:	4b26      	ldr	r3, [pc, #152]	; (8000d74 <HAL_I2S_MspInit+0x3e4>)
 8000cda:	4a27      	ldr	r2, [pc, #156]	; (8000d78 <HAL_I2S_MspInit+0x3e8>)
 8000cdc:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8000cde:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <HAL_I2S_MspInit+0x3e4>)
 8000ce0:	223d      	movs	r2, #61	; 0x3d
 8000ce2:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce4:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <HAL_I2S_MspInit+0x3e4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cea:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <HAL_I2S_MspInit+0x3e4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf0:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <HAL_I2S_MspInit+0x3e4>)
 8000cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cf6:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <HAL_I2S_MspInit+0x3e4>)
 8000cfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cfe:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d00:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <HAL_I2S_MspInit+0x3e4>)
 8000d02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d06:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <HAL_I2S_MspInit+0x3e4>)
 8000d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d0e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <HAL_I2S_MspInit+0x3e4>)
 8000d12:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d16:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <HAL_I2S_MspInit+0x3e4>)
 8000d1a:	2204      	movs	r2, #4
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_I2S_MspInit+0x3e4>)
 8000d20:	2203      	movs	r2, #3
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <HAL_I2S_MspInit+0x3e4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_I2S_MspInit+0x3e4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8000d30:	4810      	ldr	r0, [pc, #64]	; (8000d74 <HAL_I2S_MspInit+0x3e4>)
 8000d32:	f003 f9d1 	bl	80040d8 <HAL_DMA_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_I2S_MspInit+0x3b0>
      Error_Handler();
 8000d3c:	f000 fae2 	bl	8001304 <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi3_rx);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a0c      	ldr	r2, [pc, #48]	; (8000d74 <HAL_I2S_MspInit+0x3e4>)
 8000d44:	649a      	str	r2, [r3, #72]	; 0x48
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <HAL_I2S_MspInit+0x3e4>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2101      	movs	r1, #1
 8000d50:	2033      	movs	r0, #51	; 0x33
 8000d52:	f003 f98c 	bl	800406e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000d56:	2033      	movs	r0, #51	; 0x33
 8000d58:	f003 f9a3 	bl	80040a2 <HAL_NVIC_EnableIRQ>
}
 8000d5c:	bf00      	nop
 8000d5e:	3740      	adds	r7, #64	; 0x40
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40003c00 	.word	0x40003c00
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	58020000 	.word	0x58020000
 8000d70:	58020800 	.word	0x58020800
 8000d74:	24000310 	.word	0x24000310
 8000d78:	40020040 	.word	0x40020040

08000d7c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8000d84:	1d39      	adds	r1, r7, #4
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <__io_putchar+0x20>)
 8000d8e:	f00b fc2e 	bl	800c5ee <HAL_UART_Transmit>
    return ch;
 8000d92:	687b      	ldr	r3, [r7, #4]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	240007c8 	.word	0x240007c8

08000da0 <HAL_I2S_RxCpltCallback>:
/*
 * 重写printf
 */

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

	if(hi2s==&hi2s1){
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a86      	ldr	r2, [pc, #536]	; (8000fc4 <HAL_I2S_RxCpltCallback+0x224>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d149      	bne.n	8000e44 <HAL_I2S_RxCpltCallback+0xa4>
		//10 0
		//11 1
		if(hi2s1_Data[0] & 0x800000){//negative
 8000db0:	4b85      	ldr	r3, [pc, #532]	; (8000fc8 <HAL_I2S_RxCpltCallback+0x228>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00a      	beq.n	8000dd2 <HAL_I2S_RxCpltCallback+0x32>
			hi2s_Data_s[0][Times[0]]=(0xff000000 | hi2s1_Data[0]);
 8000dbc:	4b82      	ldr	r3, [pc, #520]	; (8000fc8 <HAL_I2S_RxCpltCallback+0x228>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f043 417f 	orr.w	r1, r3, #4278190080	; 0xff000000
 8000dc4:	4b81      	ldr	r3, [pc, #516]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b81      	ldr	r3, [pc, #516]	; (8000fd0 <HAL_I2S_RxCpltCallback+0x230>)
 8000dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000dd0:	e00a      	b.n	8000de8 <HAL_I2S_RxCpltCallback+0x48>
		}else{//positive
			hi2s_Data_s[0][Times[0]]=0x00ffffff & hi2s1_Data[0];
 8000dd2:	4b7d      	ldr	r3, [pc, #500]	; (8000fc8 <HAL_I2S_RxCpltCallback+0x228>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b7c      	ldr	r3, [pc, #496]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
 8000de2:	4a7b      	ldr	r2, [pc, #492]	; (8000fd0 <HAL_I2S_RxCpltCallback+0x230>)
 8000de4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}

		if(hi2s1_Data[1] & 0x800000){//negative
 8000de8:	4b77      	ldr	r3, [pc, #476]	; (8000fc8 <HAL_I2S_RxCpltCallback+0x228>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00b      	beq.n	8000e0c <HAL_I2S_RxCpltCallback+0x6c>
			hi2s_Data_s[1][Times[0]]=0xff000000 | hi2s1_Data[1];
 8000df4:	4b74      	ldr	r3, [pc, #464]	; (8000fc8 <HAL_I2S_RxCpltCallback+0x228>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8000dfc:	4b73      	ldr	r3, [pc, #460]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4611      	mov	r1, r2
 8000e02:	4a73      	ldr	r2, [pc, #460]	; (8000fd0 <HAL_I2S_RxCpltCallback+0x230>)
 8000e04:	3320      	adds	r3, #32
 8000e06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000e0a:	e00a      	b.n	8000e22 <HAL_I2S_RxCpltCallback+0x82>
		}else{//positive
			hi2s_Data_s[1][Times[0]]=0x00ffffff & hi2s1_Data[1];
 8000e0c:	4b6e      	ldr	r3, [pc, #440]	; (8000fc8 <HAL_I2S_RxCpltCallback+0x228>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b6e      	ldr	r3, [pc, #440]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000e1a:	496d      	ldr	r1, [pc, #436]	; (8000fd0 <HAL_I2S_RxCpltCallback+0x230>)
 8000e1c:	3320      	adds	r3, #32
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		printf("%d",&hi2s_Data_s[1][Times[0]]);
 8000e22:	4b6a      	ldr	r3, [pc, #424]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	3320      	adds	r3, #32
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4a69      	ldr	r2, [pc, #420]	; (8000fd0 <HAL_I2S_RxCpltCallback+0x230>)
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4868      	ldr	r0, [pc, #416]	; (8000fd4 <HAL_I2S_RxCpltCallback+0x234>)
 8000e32:	f00c fcc5 	bl	800d7c0 <iprintf>
		Times[0]++;
 8000e36:	4b65      	ldr	r3, [pc, #404]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b63      	ldr	r3, [pc, #396]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	e0a2      	b.n	8000f8a <HAL_I2S_RxCpltCallback+0x1ea>
		}


	else if(hi2s==&hi2s2){
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a64      	ldr	r2, [pc, #400]	; (8000fd8 <HAL_I2S_RxCpltCallback+0x238>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d14a      	bne.n	8000ee2 <HAL_I2S_RxCpltCallback+0x142>
		//10 0
		//11 1
		if(hi2s2_Data[0] & 0x800000){//negative
 8000e4c:	4b63      	ldr	r3, [pc, #396]	; (8000fdc <HAL_I2S_RxCpltCallback+0x23c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00b      	beq.n	8000e70 <HAL_I2S_RxCpltCallback+0xd0>
			hi2s_Data_s[2][Times[1]]=0xff000000 | hi2s2_Data[0];
 8000e58:	4b60      	ldr	r3, [pc, #384]	; (8000fdc <HAL_I2S_RxCpltCallback+0x23c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8000e60:	4b5a      	ldr	r3, [pc, #360]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000e62:	785b      	ldrb	r3, [r3, #1]
 8000e64:	4611      	mov	r1, r2
 8000e66:	4a5a      	ldr	r2, [pc, #360]	; (8000fd0 <HAL_I2S_RxCpltCallback+0x230>)
 8000e68:	3340      	adds	r3, #64	; 0x40
 8000e6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000e6e:	e00a      	b.n	8000e86 <HAL_I2S_RxCpltCallback+0xe6>
		}else{//positive
			hi2s_Data_s[2][Times[1]]=0x00ffffff & hi2s2_Data[0];
 8000e70:	4b5a      	ldr	r3, [pc, #360]	; (8000fdc <HAL_I2S_RxCpltCallback+0x23c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b55      	ldr	r3, [pc, #340]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000e78:	785b      	ldrb	r3, [r3, #1]
 8000e7a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000e7e:	4954      	ldr	r1, [pc, #336]	; (8000fd0 <HAL_I2S_RxCpltCallback+0x230>)
 8000e80:	3340      	adds	r3, #64	; 0x40
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if(hi2s2_Data[1] & 0x800000){//negative
 8000e86:	4b55      	ldr	r3, [pc, #340]	; (8000fdc <HAL_I2S_RxCpltCallback+0x23c>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00b      	beq.n	8000eaa <HAL_I2S_RxCpltCallback+0x10a>
			hi2s_Data_s[3][Times[1]]=0xff000000 | hi2s2_Data[1];
 8000e92:	4b52      	ldr	r3, [pc, #328]	; (8000fdc <HAL_I2S_RxCpltCallback+0x23c>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8000e9a:	4b4c      	ldr	r3, [pc, #304]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000e9c:	785b      	ldrb	r3, [r3, #1]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4a4b      	ldr	r2, [pc, #300]	; (8000fd0 <HAL_I2S_RxCpltCallback+0x230>)
 8000ea2:	3360      	adds	r3, #96	; 0x60
 8000ea4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ea8:	e00a      	b.n	8000ec0 <HAL_I2S_RxCpltCallback+0x120>
		}else{//positive
			hi2s_Data_s[3][Times[1]]=0x00ffffff & hi2s2_Data[1];
 8000eaa:	4b4c      	ldr	r3, [pc, #304]	; (8000fdc <HAL_I2S_RxCpltCallback+0x23c>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000eb2:	785b      	ldrb	r3, [r3, #1]
 8000eb4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000eb8:	4945      	ldr	r1, [pc, #276]	; (8000fd0 <HAL_I2S_RxCpltCallback+0x230>)
 8000eba:	3360      	adds	r3, #96	; 0x60
 8000ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		printf("%d",&hi2s_Data_s[2][Times[1]]);
 8000ec0:	4b42      	ldr	r3, [pc, #264]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000ec2:	785b      	ldrb	r3, [r3, #1]
 8000ec4:	3340      	adds	r3, #64	; 0x40
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4a41      	ldr	r2, [pc, #260]	; (8000fd0 <HAL_I2S_RxCpltCallback+0x230>)
 8000eca:	4413      	add	r3, r2
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4841      	ldr	r0, [pc, #260]	; (8000fd4 <HAL_I2S_RxCpltCallback+0x234>)
 8000ed0:	f00c fc76 	bl	800d7c0 <iprintf>
		Times[1]++;
 8000ed4:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000ed6:	785b      	ldrb	r3, [r3, #1]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000ede:	705a      	strb	r2, [r3, #1]
 8000ee0:	e053      	b.n	8000f8a <HAL_I2S_RxCpltCallback+0x1ea>
		}

	else if(hi2s==&hi2s3){
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a3e      	ldr	r2, [pc, #248]	; (8000fe0 <HAL_I2S_RxCpltCallback+0x240>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d14f      	bne.n	8000f8a <HAL_I2S_RxCpltCallback+0x1ea>
		//10 0
		//11 1
		if(hi2s3_Data[0] & 0x800000){//negative
 8000eea:	4b3e      	ldr	r3, [pc, #248]	; (8000fe4 <HAL_I2S_RxCpltCallback+0x244>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00b      	beq.n	8000f0e <HAL_I2S_RxCpltCallback+0x16e>
			hi2s_Data_s[4][Times[2]]=0xff000000 | hi2s3_Data[0];
 8000ef6:	4b3b      	ldr	r3, [pc, #236]	; (8000fe4 <HAL_I2S_RxCpltCallback+0x244>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8000efe:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000f00:	789b      	ldrb	r3, [r3, #2]
 8000f02:	4611      	mov	r1, r2
 8000f04:	4a32      	ldr	r2, [pc, #200]	; (8000fd0 <HAL_I2S_RxCpltCallback+0x230>)
 8000f06:	3380      	adds	r3, #128	; 0x80
 8000f08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f0c:	e00a      	b.n	8000f24 <HAL_I2S_RxCpltCallback+0x184>
		}else{//positive
			hi2s_Data_s[4][Times[2]]=0x00ffffff & hi2s3_Data[0];
 8000f0e:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <HAL_I2S_RxCpltCallback+0x244>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000f16:	789b      	ldrb	r3, [r3, #2]
 8000f18:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000f1c:	492c      	ldr	r1, [pc, #176]	; (8000fd0 <HAL_I2S_RxCpltCallback+0x230>)
 8000f1e:	3380      	adds	r3, #128	; 0x80
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if(hi2s3_Data[1] & 0x800000){//negative
 8000f24:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <HAL_I2S_RxCpltCallback+0x244>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00b      	beq.n	8000f48 <HAL_I2S_RxCpltCallback+0x1a8>
			hi2s_Data_s[5][Times[2]]=0xff000000 | hi2s3_Data[1];
 8000f30:	4b2c      	ldr	r3, [pc, #176]	; (8000fe4 <HAL_I2S_RxCpltCallback+0x244>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000f3a:	789b      	ldrb	r3, [r3, #2]
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	4a24      	ldr	r2, [pc, #144]	; (8000fd0 <HAL_I2S_RxCpltCallback+0x230>)
 8000f40:	33a0      	adds	r3, #160	; 0xa0
 8000f42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f46:	e00a      	b.n	8000f5e <HAL_I2S_RxCpltCallback+0x1be>
		}else{//positive
			hi2s_Data_s[5][Times[2]]=0x00ffffff & hi2s3_Data[1];
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <HAL_I2S_RxCpltCallback+0x244>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000f50:	789b      	ldrb	r3, [r3, #2]
 8000f52:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000f56:	491e      	ldr	r1, [pc, #120]	; (8000fd0 <HAL_I2S_RxCpltCallback+0x230>)
 8000f58:	33a0      	adds	r3, #160	; 0xa0
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		printf("%d,%d\r\n",&hi2s_Data_s[4][Times[2]],&hi2s_Data_s[5][Times[2]]);
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000f60:	789b      	ldrb	r3, [r3, #2]
 8000f62:	3380      	adds	r3, #128	; 0x80
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4a1a      	ldr	r2, [pc, #104]	; (8000fd0 <HAL_I2S_RxCpltCallback+0x230>)
 8000f68:	1899      	adds	r1, r3, r2
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000f6c:	789b      	ldrb	r3, [r3, #2]
 8000f6e:	33a0      	adds	r3, #160	; 0xa0
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4a17      	ldr	r2, [pc, #92]	; (8000fd0 <HAL_I2S_RxCpltCallback+0x230>)
 8000f74:	4413      	add	r3, r2
 8000f76:	461a      	mov	r2, r3
 8000f78:	481b      	ldr	r0, [pc, #108]	; (8000fe8 <HAL_I2S_RxCpltCallback+0x248>)
 8000f7a:	f00c fc21 	bl	800d7c0 <iprintf>

		Times[2]++;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000f80:	789b      	ldrb	r3, [r3, #2]
 8000f82:	3301      	adds	r3, #1
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000f88:	709a      	strb	r2, [r3, #2]
		}

	if((Times[0]==MAX_DATA_NUM)&&(Times[1]==MAX_DATA_NUM)&&(Times[2]==MAX_DATA_NUM))
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b20      	cmp	r3, #32
 8000f90:	d114      	bne.n	8000fbc <HAL_I2S_RxCpltCallback+0x21c>
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000f94:	785b      	ldrb	r3, [r3, #1]
 8000f96:	2b20      	cmp	r3, #32
 8000f98:	d110      	bne.n	8000fbc <HAL_I2S_RxCpltCallback+0x21c>
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000f9c:	789b      	ldrb	r3, [r3, #2]
 8000f9e:	2b20      	cmp	r3, #32
 8000fa0:	d10c      	bne.n	8000fbc <HAL_I2S_RxCpltCallback+0x21c>
	{
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8000fa2:	2108      	movs	r1, #8
 8000fa4:	4811      	ldr	r0, [pc, #68]	; (8000fec <HAL_I2S_RxCpltCallback+0x24c>)
 8000fa6:	f005 fb50 	bl	800664a <HAL_GPIO_TogglePin>
		Times[0]=0;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
		Times[1]=0;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	705a      	strb	r2, [r3, #1]
		Times[2]=0;
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <HAL_I2S_RxCpltCallback+0x22c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	709a      	strb	r2, [r3, #2]

	}


}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	24000124 	.word	0x24000124
 8000fc8:	24000388 	.word	0x24000388
 8000fcc:	240006a0 	.word	0x240006a0
 8000fd0:	240003a0 	.word	0x240003a0
 8000fd4:	0800eaac 	.word	0x0800eaac
 8000fd8:	24000178 	.word	0x24000178
 8000fdc:	24000390 	.word	0x24000390
 8000fe0:	240001cc 	.word	0x240001cc
 8000fe4:	24000398 	.word	0x24000398
 8000fe8:	0800eab0 	.word	0x0800eab0
 8000fec:	58021000 	.word	0x58021000

08000ff0 <Servo_con>:


void Servo_con(float_t angel)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	ed87 0a01 	vstr	s0, [r7, #4]
	if(angel<=180&&angel>=0)
 8000ffa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ffe:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001070 <Servo_con+0x80>
 8001002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	d900      	bls.n	800100e <Servo_con+0x1e>
	{
		TIM3->CCR1=500+angel/180.0*2000.0;
	}

}
 800100c:	e01d      	b.n	800104a <Servo_con+0x5a>
	if(angel<=180&&angel>=0)
 800100e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001012:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	da00      	bge.n	800101e <Servo_con+0x2e>
}
 800101c:	e015      	b.n	800104a <Servo_con+0x5a>
		TIM3->CCR1=500+angel/180.0*2000.0;
 800101e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001022:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001026:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8001058 <Servo_con+0x68>
 800102a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800102e:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001060 <Servo_con+0x70>
 8001032:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001036:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001068 <Servo_con+0x78>
 800103a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <Servo_con+0x84>)
 8001040:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001044:	ee17 2a90 	vmov	r2, s15
 8001048:	635a      	str	r2, [r3, #52]	; 0x34
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	00000000 	.word	0x00000000
 800105c:	40668000 	.word	0x40668000
 8001060:	00000000 	.word	0x00000000
 8001064:	409f4000 	.word	0x409f4000
 8001068:	00000000 	.word	0x00000000
 800106c:	407f4000 	.word	0x407f4000
 8001070:	43340000 	.word	0x43340000
 8001074:	40000400 	.word	0x40000400

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107e:	f002 fe59 	bl	8003d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001082:	f000 f859 	bl	8001138 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001086:	f000 f911 	bl	80012ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108a:	f7ff fb2b 	bl	80006e4 <MX_GPIO_Init>
  MX_SPI4_Init();
 800108e:	f000 f93f 	bl	8001310 <MX_SPI4_Init>
  MX_DMA_Init();
 8001092:	f7ff faf7 	bl	8000684 <MX_DMA_Init>
  MX_I2S1_Init();
 8001096:	f7ff fbdf 	bl	8000858 <MX_I2S1_Init>
  MX_I2S2_Init();
 800109a:	f7ff fc11 	bl	80008c0 <MX_I2S2_Init>
  MX_TIM1_Init();
 800109e:	f000 fba3 	bl	80017e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80010a2:	f000 fc4d 	bl	8001940 <MX_TIM3_Init>
  MX_UART4_Init();
 80010a6:	f000 fd61 	bl	8001b6c <MX_UART4_Init>
  MX_I2S3_Init();
 80010aa:	f7ff fc3d 	bl	8000928 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80010ae:	2100      	movs	r1, #0
 80010b0:	4816      	ldr	r0, [pc, #88]	; (800110c <main+0x94>)
 80010b2:	f00a f90b 	bl	800b2cc <HAL_TIM_PWM_Start>

  uint32_t PWM=TIM3->CCR1;
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <main+0x98>)
 80010b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ba:	60fb      	str	r3, [r7, #12]
  uint8_t  Pos_Neg=1;
 80010bc:	2301      	movs	r3, #1
 80010be:	72fb      	strb	r3, [r7, #11]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_Test();
 80010c0:	f000 fe2e 	bl	8001d20 <LCD_Test>
//  uint8_t text[20]={0};

  HAL_I2S_Receive_DMA(&hi2s1, (uint16_t*)hi2s1_Data,&hi2s2, (uint16_t*)hi2s2_Data,&hi2s3, (uint16_t*)hi2s3_Data,MAX_DATA_NUM);
 80010c4:	2320      	movs	r3, #32
 80010c6:	9302      	str	r3, [sp, #8]
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <main+0x9c>)
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <main+0xa0>)
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <main+0xa4>)
 80010d2:	4a13      	ldr	r2, [pc, #76]	; (8001120 <main+0xa8>)
 80010d4:	4913      	ldr	r1, [pc, #76]	; (8001124 <main+0xac>)
 80010d6:	4814      	ldr	r0, [pc, #80]	; (8001128 <main+0xb0>)
 80010d8:	f005 fbf2 	bl	80068c0 <HAL_I2S_Receive_DMA>
  uint32_t tick = HAL_GetTick();
 80010dc:	f002 feb0 	bl	8003e40 <HAL_GetTick>
 80010e0:	6078      	str	r0, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 80010e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e6:	4811      	ldr	r0, [pc, #68]	; (800112c <main+0xb4>)
 80010e8:	f005 fa7e 	bl	80065e8 <HAL_GPIO_ReadPin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d103      	bne.n	80010fa <main+0x82>
		{
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_7);
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	480e      	ldr	r0, [pc, #56]	; (8001130 <main+0xb8>)
 80010f6:	f005 faa8 	bl	800664a <HAL_GPIO_TogglePin>
//			delay_ms(10);
//		}



	  Servo_con(Servo);
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <main+0xbc>)
 80010fc:	edd3 7a00 	vldr	s15, [r3]
 8001100:	eeb0 0a67 	vmov.f32	s0, s15
 8001104:	f7ff ff74 	bl	8000ff0 <Servo_con>
	  if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8001108:	e7eb      	b.n	80010e2 <main+0x6a>
 800110a:	bf00      	nop
 800110c:	2400077c 	.word	0x2400077c
 8001110:	40000400 	.word	0x40000400
 8001114:	24000398 	.word	0x24000398
 8001118:	240001cc 	.word	0x240001cc
 800111c:	24000390 	.word	0x24000390
 8001120:	24000178 	.word	0x24000178
 8001124:	24000388 	.word	0x24000388
 8001128:	24000124 	.word	0x24000124
 800112c:	58020800 	.word	0x58020800
 8001130:	58020c00 	.word	0x58020c00
 8001134:	24000000 	.word	0x24000000

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b09e      	sub	sp, #120	; 0x78
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001142:	224c      	movs	r2, #76	; 0x4c
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f00c fb32 	bl	800d7b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2220      	movs	r2, #32
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f00c fb2b 	bl	800d7b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800115a:	2002      	movs	r0, #2
 800115c:	f005 fec8 	bl	8006ef0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	4b4e      	ldr	r3, [pc, #312]	; (80012a0 <SystemClock_Config+0x168>)
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	4a4d      	ldr	r2, [pc, #308]	; (80012a0 <SystemClock_Config+0x168>)
 800116a:	f023 0301 	bic.w	r3, r3, #1
 800116e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001170:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <SystemClock_Config+0x168>)
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b4a      	ldr	r3, [pc, #296]	; (80012a4 <SystemClock_Config+0x16c>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	4a49      	ldr	r2, [pc, #292]	; (80012a4 <SystemClock_Config+0x16c>)
 8001180:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001184:	6193      	str	r3, [r2, #24]
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <SystemClock_Config+0x16c>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001192:	bf00      	nop
 8001194:	4b43      	ldr	r3, [pc, #268]	; (80012a4 <SystemClock_Config+0x16c>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800119c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a0:	d1f8      	bne.n	8001194 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4b41      	ldr	r3, [pc, #260]	; (80012a8 <SystemClock_Config+0x170>)
 80011a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011a8:	4a3f      	ldr	r2, [pc, #252]	; (80012a8 <SystemClock_Config+0x170>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011b2:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <SystemClock_Config+0x170>)
 80011b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011c0:	2300      	movs	r3, #0
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <SystemClock_Config+0x16c>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a36      	ldr	r2, [pc, #216]	; (80012a4 <SystemClock_Config+0x16c>)
 80011ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <SystemClock_Config+0x16c>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <SystemClock_Config+0x168>)
 80011dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011de:	4a30      	ldr	r2, [pc, #192]	; (80012a0 <SystemClock_Config+0x168>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011e6:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <SystemClock_Config+0x168>)
 80011e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011f2:	bf00      	nop
 80011f4:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <SystemClock_Config+0x16c>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001200:	d1f8      	bne.n	80011f4 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001202:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <SystemClock_Config+0x170>)
 8001204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001206:	f023 0303 	bic.w	r3, r3, #3
 800120a:	4a27      	ldr	r2, [pc, #156]	; (80012a8 <SystemClock_Config+0x170>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001212:	2301      	movs	r3, #1
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121c:	2302      	movs	r3, #2
 800121e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001220:	2302      	movs	r3, #2
 8001222:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001224:	230a      	movs	r3, #10
 8001226:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 384;
 8001228:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800122c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800122e:	2302      	movs	r3, #2
 8001230:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001232:	2305      	movs	r3, #5
 8001234:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001236:	2302      	movs	r3, #2
 8001238:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800123a:	2304      	movs	r3, #4
 800123c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800123e:	2300      	movs	r3, #0
 8001240:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124a:	4618      	mov	r0, r3
 800124c:	f005 fe8a 	bl	8006f64 <HAL_RCC_OscConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x122>
  {
    Error_Handler();
 8001256:	f000 f855 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125a:	233f      	movs	r3, #63	; 0x3f
 800125c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125e:	2303      	movs	r3, #3
 8001260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001266:	2308      	movs	r3, #8
 8001268:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800126a:	2340      	movs	r3, #64	; 0x40
 800126c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800126e:	2340      	movs	r3, #64	; 0x40
 8001270:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001278:	2340      	movs	r3, #64	; 0x40
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2104      	movs	r1, #4
 8001282:	4618      	mov	r0, r3
 8001284:	f006 fa9c 	bl	80077c0 <HAL_RCC_ClockConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 800128e:	f000 f839 	bl	8001304 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001292:	f006 fc4b 	bl	8007b2c <HAL_RCC_EnableCSS>
}
 8001296:	bf00      	nop
 8001298:	3778      	adds	r7, #120	; 0x78
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	58000400 	.word	0x58000400
 80012a4:	58024800 	.word	0x58024800
 80012a8:	58024400 	.word	0x58024400

080012ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0b0      	sub	sp, #192	; 0xc0
 80012b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	22bc      	movs	r2, #188	; 0xbc
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f00c fa79 	bl	800d7b0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 80012be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 10;
 80012c4:	230a      	movs	r3, #10
 80012c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80012d8:	2340      	movs	r3, #64	; 0x40
 80012da:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4618      	mov	r0, r3
 80012ee:	f006 fe03 	bl	8007ef8 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80012f8:	f000 f804 	bl	8001304 <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	37c0      	adds	r7, #192	; 0xc0
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <MX_SPI4_Init+0xa8>)
 8001316:	4a29      	ldr	r2, [pc, #164]	; (80013bc <MX_SPI4_Init+0xac>)
 8001318:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <MX_SPI4_Init+0xa8>)
 800131c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001320:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <MX_SPI4_Init+0xa8>)
 8001324:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001328:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800132a:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <MX_SPI4_Init+0xa8>)
 800132c:	2207      	movs	r2, #7
 800132e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <MX_SPI4_Init+0xa8>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_SPI4_Init+0xa8>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <MX_SPI4_Init+0xa8>)
 800133e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001342:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <MX_SPI4_Init+0xa8>)
 8001346:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800134a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_SPI4_Init+0xa8>)
 800134e:	2200      	movs	r2, #0
 8001350:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <MX_SPI4_Init+0xa8>)
 8001354:	2200      	movs	r2, #0
 8001356:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_SPI4_Init+0xa8>)
 800135a:	2200      	movs	r2, #0
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_SPI4_Init+0xa8>)
 8001360:	2200      	movs	r2, #0
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_SPI4_Init+0xa8>)
 8001366:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800136a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_SPI4_Init+0xa8>)
 800136e:	2200      	movs	r2, #0
 8001370:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_SPI4_Init+0xa8>)
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_SPI4_Init+0xa8>)
 800137a:	2200      	movs	r2, #0
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_SPI4_Init+0xa8>)
 8001380:	2200      	movs	r2, #0
 8001382:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_SPI4_Init+0xa8>)
 8001386:	2200      	movs	r2, #0
 8001388:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MX_SPI4_Init+0xa8>)
 800138c:	2200      	movs	r2, #0
 800138e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_SPI4_Init+0xa8>)
 8001392:	2200      	movs	r2, #0
 8001394:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <MX_SPI4_Init+0xa8>)
 8001398:	2200      	movs	r2, #0
 800139a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_SPI4_Init+0xa8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_SPI4_Init+0xa8>)
 80013a4:	f008 ff34 	bl	800a210 <HAL_SPI_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80013ae:	f7ff ffa9 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	240006a4 	.word	0x240006a4
 80013bc:	40013400 	.word	0x40013400

080013c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b0b8      	sub	sp, #224	; 0xe0
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	22bc      	movs	r2, #188	; 0xbc
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f00c f9e5 	bl	800d7b0 <memset>
  if(spiHandle->Instance==SPI4)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a25      	ldr	r2, [pc, #148]	; (8001480 <HAL_SPI_MspInit+0xc0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d142      	bne.n	8001476 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80013f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4618      	mov	r0, r3
 8001400:	f006 fd7a 	bl	8007ef8 <HAL_RCCEx_PeriphCLKConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800140a:	f7ff ff7b 	bl	8001304 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <HAL_SPI_MspInit+0xc4>)
 8001410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001414:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <HAL_SPI_MspInit+0xc4>)
 8001416:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800141a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_SPI_MspInit+0xc4>)
 8001420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_SPI_MspInit+0xc4>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001432:	4a14      	ldr	r2, [pc, #80]	; (8001484 <HAL_SPI_MspInit+0xc4>)
 8001434:	f043 0310 	orr.w	r3, r3, #16
 8001438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_SPI_MspInit+0xc4>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800144a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800144e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001464:	2305      	movs	r3, #5
 8001466:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800146a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <HAL_SPI_MspInit+0xc8>)
 8001472:	f004 ff09 	bl	8006288 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001476:	bf00      	nop
 8001478:	37e0      	adds	r7, #224	; 0xe0
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40013400 	.word	0x40013400
 8001484:	58024400 	.word	0x58024400
 8001488:	58021000 	.word	0x58021000

0800148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_MspInit+0x34>)
 8001494:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001498:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <HAL_MspInit+0x34>)
 800149a:	f043 0302 	orr.w	r3, r3, #2
 800149e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <HAL_MspInit+0x34>)
 80014a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80014b0:	2004      	movs	r0, #4
 80014b2:	f002 fdd1 	bl	8004058 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	58024400 	.word	0x58024400

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <NMI_Handler+0x4>

080014ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <MemManage_Handler+0x4>

080014d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001510:	f002 fc82 	bl	8003e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <DMA1_Stream0_IRQHandler+0x10>)
 800151e:	f003 fba1 	bl	8004c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	24000220 	.word	0x24000220

0800152c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <DMA1_Stream1_IRQHandler+0x10>)
 8001532:	f003 fb97 	bl	8004c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	24000298 	.word	0x24000298

08001540 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <DMA1_Stream2_IRQHandler+0x10>)
 8001546:	f003 fb8d 	bl	8004c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	24000310 	.word	0x24000310

08001554 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <SPI1_IRQHandler+0x10>)
 800155a:	f005 fb67 	bl	8006c2c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	24000124 	.word	0x24000124

08001568 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <SPI2_IRQHandler+0x10>)
 800156e:	f005 fb5d 	bl	8006c2c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	24000178 	.word	0x24000178

0800157c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <SPI3_IRQHandler+0x10>)
 8001582:	f005 fb53 	bl	8006c2c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	240001cc 	.word	0x240001cc

08001590 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	e00a      	b.n	80015b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015a2:	f3af 8000 	nop.w
 80015a6:	4601      	mov	r1, r0
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	60ba      	str	r2, [r7, #8]
 80015ae:	b2ca      	uxtb	r2, r1
 80015b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbf0      	blt.n	80015a2 <_read+0x12>
	}

return len;
 80015c0:	687b      	ldr	r3, [r7, #4]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e009      	b.n	80015f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	60ba      	str	r2, [r7, #8]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fbc9 	bl	8000d7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	dbf1      	blt.n	80015dc <_write+0x12>
	}
	return len;
 80015f8:	687b      	ldr	r3, [r7, #4]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <_close>:

int _close(int file)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
	return -1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162a:	605a      	str	r2, [r3, #4]
	return 0;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <_isatty>:

int _isatty(int file)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
	return 1;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
	return 0;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f00c f85e 	bl	800d75c <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	220c      	movs	r2, #12
 80016a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <_sbrk+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	24080000 	.word	0x24080000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	2400072c 	.word	0x2400072c
 80016d4:	24000dc0 	.word	0x24000dc0

080016d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016dc:	4b37      	ldr	r3, [pc, #220]	; (80017bc <SystemInit+0xe4>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e2:	4a36      	ldr	r2, [pc, #216]	; (80017bc <SystemInit+0xe4>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016ec:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <SystemInit+0xe8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	2b06      	cmp	r3, #6
 80016f6:	d807      	bhi.n	8001708 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016f8:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <SystemInit+0xe8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 030f 	bic.w	r3, r3, #15
 8001700:	4a2f      	ldr	r2, [pc, #188]	; (80017c0 <SystemInit+0xe8>)
 8001702:	f043 0307 	orr.w	r3, r3, #7
 8001706:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001708:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <SystemInit+0xec>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a2d      	ldr	r2, [pc, #180]	; (80017c4 <SystemInit+0xec>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001714:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <SystemInit+0xec>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800171a:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <SystemInit+0xec>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4929      	ldr	r1, [pc, #164]	; (80017c4 <SystemInit+0xec>)
 8001720:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <SystemInit+0xf0>)
 8001722:	4013      	ands	r3, r2
 8001724:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <SystemInit+0xe8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d007      	beq.n	8001742 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <SystemInit+0xe8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 030f 	bic.w	r3, r3, #15
 800173a:	4a21      	ldr	r2, [pc, #132]	; (80017c0 <SystemInit+0xe8>)
 800173c:	f043 0307 	orr.w	r3, r3, #7
 8001740:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <SystemInit+0xec>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <SystemInit+0xec>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <SystemInit+0xec>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <SystemInit+0xec>)
 8001756:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <SystemInit+0xf4>)
 8001758:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <SystemInit+0xec>)
 800175c:	4a1c      	ldr	r2, [pc, #112]	; (80017d0 <SystemInit+0xf8>)
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <SystemInit+0xec>)
 8001762:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <SystemInit+0xfc>)
 8001764:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <SystemInit+0xec>)
 8001768:	2200      	movs	r2, #0
 800176a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <SystemInit+0xec>)
 800176e:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <SystemInit+0xfc>)
 8001770:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <SystemInit+0xec>)
 8001774:	2200      	movs	r2, #0
 8001776:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <SystemInit+0xec>)
 800177a:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <SystemInit+0xfc>)
 800177c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <SystemInit+0xec>)
 8001780:	2200      	movs	r2, #0
 8001782:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <SystemInit+0xec>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <SystemInit+0xec>)
 800178a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <SystemInit+0xec>)
 8001792:	2200      	movs	r2, #0
 8001794:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <SystemInit+0x100>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <SystemInit+0x104>)
 800179c:	4013      	ands	r3, r2
 800179e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017a2:	d202      	bcs.n	80017aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <SystemInit+0x108>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <SystemInit+0x10c>)
 80017ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80017b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00
 80017c0:	52002000 	.word	0x52002000
 80017c4:	58024400 	.word	0x58024400
 80017c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80017cc:	02020200 	.word	0x02020200
 80017d0:	01ff0000 	.word	0x01ff0000
 80017d4:	01010280 	.word	0x01010280
 80017d8:	5c001000 	.word	0x5c001000
 80017dc:	ffff0000 	.word	0xffff0000
 80017e0:	51008108 	.word	0x51008108
 80017e4:	52004000 	.word	0x52004000

080017e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b09a      	sub	sp, #104	; 0x68
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001808:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
 8001818:	615a      	str	r2, [r3, #20]
 800181a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	222c      	movs	r2, #44	; 0x2c
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f00b ffc4 	bl	800d7b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001828:	4b43      	ldr	r3, [pc, #268]	; (8001938 <MX_TIM1_Init+0x150>)
 800182a:	4a44      	ldr	r2, [pc, #272]	; (800193c <MX_TIM1_Init+0x154>)
 800182c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24-1;
 800182e:	4b42      	ldr	r3, [pc, #264]	; (8001938 <MX_TIM1_Init+0x150>)
 8001830:	2217      	movs	r2, #23
 8001832:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001834:	4b40      	ldr	r3, [pc, #256]	; (8001938 <MX_TIM1_Init+0x150>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800183a:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <MX_TIM1_Init+0x150>)
 800183c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001840:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001842:	4b3d      	ldr	r3, [pc, #244]	; (8001938 <MX_TIM1_Init+0x150>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001848:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <MX_TIM1_Init+0x150>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184e:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <MX_TIM1_Init+0x150>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001854:	4838      	ldr	r0, [pc, #224]	; (8001938 <MX_TIM1_Init+0x150>)
 8001856:	f009 fc80 	bl	800b15a <HAL_TIM_Base_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001860:	f7ff fd50 	bl	8001304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001868:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800186a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800186e:	4619      	mov	r1, r3
 8001870:	4831      	ldr	r0, [pc, #196]	; (8001938 <MX_TIM1_Init+0x150>)
 8001872:	f009 ff4d 	bl	800b710 <HAL_TIM_ConfigClockSource>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800187c:	f7ff fd42 	bl	8001304 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001880:	482d      	ldr	r0, [pc, #180]	; (8001938 <MX_TIM1_Init+0x150>)
 8001882:	f009 fcc1 	bl	800b208 <HAL_TIM_PWM_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800188c:	f7ff fd3a 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800189c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018a0:	4619      	mov	r1, r3
 80018a2:	4825      	ldr	r0, [pc, #148]	; (8001938 <MX_TIM1_Init+0x150>)
 80018a4:	f00a fd22 	bl	800c2ec <HAL_TIMEx_MasterConfigSynchronization>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018ae:	f7ff fd29 	bl	8001304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b2:	2360      	movs	r3, #96	; 0x60
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ba:	2300      	movs	r3, #0
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80018be:	2308      	movs	r3, #8
 80018c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018d2:	2204      	movs	r2, #4
 80018d4:	4619      	mov	r1, r3
 80018d6:	4818      	ldr	r0, [pc, #96]	; (8001938 <MX_TIM1_Init+0x150>)
 80018d8:	f009 fe06 	bl	800b4e8 <HAL_TIM_PWM_ConfigChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80018e2:	f7ff fd0f 	bl	8001304 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001908:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	4619      	mov	r1, r3
 800191a:	4807      	ldr	r0, [pc, #28]	; (8001938 <MX_TIM1_Init+0x150>)
 800191c:	f00a fd74 	bl	800c408 <HAL_TIMEx_ConfigBreakDeadTime>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001926:	f7ff fced 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800192a:	4803      	ldr	r0, [pc, #12]	; (8001938 <MX_TIM1_Init+0x150>)
 800192c:	f000 f8ba 	bl	8001aa4 <HAL_TIM_MspPostInit>

}
 8001930:	bf00      	nop
 8001932:	3768      	adds	r7, #104	; 0x68
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	24000730 	.word	0x24000730
 800193c:	40010000 	.word	0x40010000

08001940 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08e      	sub	sp, #56	; 0x38
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001960:	463b      	mov	r3, r7
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]
 800196e:	615a      	str	r2, [r3, #20]
 8001970:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001972:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <MX_TIM3_Init+0xe8>)
 8001974:	4a2d      	ldr	r2, [pc, #180]	; (8001a2c <MX_TIM3_Init+0xec>)
 8001976:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8001978:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <MX_TIM3_Init+0xe8>)
 800197a:	22ef      	movs	r2, #239	; 0xef
 800197c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197e:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <MX_TIM3_Init+0xe8>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8001984:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <MX_TIM3_Init+0xe8>)
 8001986:	f241 3287 	movw	r2, #4999	; 0x1387
 800198a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198c:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <MX_TIM3_Init+0xe8>)
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001992:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <MX_TIM3_Init+0xe8>)
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001998:	4823      	ldr	r0, [pc, #140]	; (8001a28 <MX_TIM3_Init+0xe8>)
 800199a:	f009 fbde 	bl	800b15a <HAL_TIM_Base_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80019a4:	f7ff fcae 	bl	8001304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b2:	4619      	mov	r1, r3
 80019b4:	481c      	ldr	r0, [pc, #112]	; (8001a28 <MX_TIM3_Init+0xe8>)
 80019b6:	f009 feab 	bl	800b710 <HAL_TIM_ConfigClockSource>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80019c0:	f7ff fca0 	bl	8001304 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019c4:	4818      	ldr	r0, [pc, #96]	; (8001a28 <MX_TIM3_Init+0xe8>)
 80019c6:	f009 fc1f 	bl	800b208 <HAL_TIM_PWM_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80019d0:	f7ff fc98 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	4619      	mov	r1, r3
 80019e2:	4811      	ldr	r0, [pc, #68]	; (8001a28 <MX_TIM3_Init+0xe8>)
 80019e4:	f00a fc82 	bl	800c2ec <HAL_TIMEx_MasterConfigSynchronization>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80019ee:	f7ff fc89 	bl	8001304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f2:	2360      	movs	r3, #96	; 0x60
 80019f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2500-1;
 80019f6:	f640 13c3 	movw	r3, #2499	; 0x9c3
 80019fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a04:	463b      	mov	r3, r7
 8001a06:	2200      	movs	r2, #0
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4807      	ldr	r0, [pc, #28]	; (8001a28 <MX_TIM3_Init+0xe8>)
 8001a0c:	f009 fd6c 	bl	800b4e8 <HAL_TIM_PWM_ConfigChannel>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001a16:	f7ff fc75 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a1a:	4803      	ldr	r0, [pc, #12]	; (8001a28 <MX_TIM3_Init+0xe8>)
 8001a1c:	f000 f842 	bl	8001aa4 <HAL_TIM_MspPostInit>

}
 8001a20:	bf00      	nop
 8001a22:	3738      	adds	r7, #56	; 0x38
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2400077c 	.word	0x2400077c
 8001a2c:	40000400 	.word	0x40000400

08001a30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a16      	ldr	r2, [pc, #88]	; (8001a98 <HAL_TIM_Base_MspInit+0x68>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10f      	bne.n	8001a62 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_TIM_Base_MspInit+0x6c>)
 8001a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <HAL_TIM_Base_MspInit+0x6c>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_TIM_Base_MspInit+0x6c>)
 8001a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a60:	e013      	b.n	8001a8a <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM3)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_TIM_Base_MspInit+0x70>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d10e      	bne.n	8001a8a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_TIM_Base_MspInit+0x6c>)
 8001a6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_TIM_Base_MspInit+0x6c>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <HAL_TIM_Base_MspInit+0x6c>)
 8001a7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40010000 	.word	0x40010000
 8001a9c:	58024400 	.word	0x58024400
 8001aa0:	40000400 	.word	0x40000400

08001aa4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a25      	ldr	r2, [pc, #148]	; (8001b58 <HAL_TIM_MspPostInit+0xb4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d120      	bne.n	8001b08 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac6:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_TIM_MspPostInit+0xb8>)
 8001ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001acc:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <HAL_TIM_MspPostInit+0xb8>)
 8001ace:	f043 0310 	orr.w	r3, r3, #16
 8001ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_TIM_MspPostInit+0xb8>)
 8001ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = LCD_LIGHT_Pin;
 8001ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001af6:	2301      	movs	r3, #1
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_LIGHT_GPIO_Port, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4817      	ldr	r0, [pc, #92]	; (8001b60 <HAL_TIM_MspPostInit+0xbc>)
 8001b02:	f004 fbc1 	bl	8006288 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b06:	e023      	b.n	8001b50 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a15      	ldr	r2, [pc, #84]	; (8001b64 <HAL_TIM_MspPostInit+0xc0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d11e      	bne.n	8001b50 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_TIM_MspPostInit+0xb8>)
 8001b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b18:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <HAL_TIM_MspPostInit+0xb8>)
 8001b1a:	f043 0302 	orr.w	r3, r3, #2
 8001b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_TIM_MspPostInit+0xb8>)
 8001b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b30:	2310      	movs	r3, #16
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b40:	2302      	movs	r3, #2
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4807      	ldr	r0, [pc, #28]	; (8001b68 <HAL_TIM_MspPostInit+0xc4>)
 8001b4c:	f004 fb9c 	bl	8006288 <HAL_GPIO_Init>
}
 8001b50:	bf00      	nop
 8001b52:	3728      	adds	r7, #40	; 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	58024400 	.word	0x58024400
 8001b60:	58021000 	.word	0x58021000
 8001b64:	40000400 	.word	0x40000400
 8001b68:	58020400 	.word	0x58020400

08001b6c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b70:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <MX_UART4_Init+0x90>)
 8001b72:	4a23      	ldr	r2, [pc, #140]	; (8001c00 <MX_UART4_Init+0x94>)
 8001b74:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <MX_UART4_Init+0x90>)
 8001b78:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001b7c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <MX_UART4_Init+0x90>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <MX_UART4_Init+0x90>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <MX_UART4_Init+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_UART4_Init+0x90>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <MX_UART4_Init+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <MX_UART4_Init+0x90>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <MX_UART4_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_UART4_Init+0x90>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <MX_UART4_Init+0x90>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001bb4:	4811      	ldr	r0, [pc, #68]	; (8001bfc <MX_UART4_Init+0x90>)
 8001bb6:	f00a fcca 	bl	800c54e <HAL_UART_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001bc0:	f7ff fba0 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	480d      	ldr	r0, [pc, #52]	; (8001bfc <MX_UART4_Init+0x90>)
 8001bc8:	f00b fcfe 	bl	800d5c8 <HAL_UARTEx_SetTxFifoThreshold>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001bd2:	f7ff fb97 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4808      	ldr	r0, [pc, #32]	; (8001bfc <MX_UART4_Init+0x90>)
 8001bda:	f00b fd33 	bl	800d644 <HAL_UARTEx_SetRxFifoThreshold>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001be4:	f7ff fb8e 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001be8:	4804      	ldr	r0, [pc, #16]	; (8001bfc <MX_UART4_Init+0x90>)
 8001bea:	f00b fcb4 	bl	800d556 <HAL_UARTEx_DisableFifoMode>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001bf4:	f7ff fb86 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	240007c8 	.word	0x240007c8
 8001c00:	40004c00 	.word	0x40004c00

08001c04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0b8      	sub	sp, #224	; 0xe0
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	22bc      	movs	r2, #188	; 0xbc
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f00b fdc3 	bl	800d7b0 <memset>
  if(uartHandle->Instance==UART4)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a24      	ldr	r2, [pc, #144]	; (8001cc0 <HAL_UART_MspInit+0xbc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d141      	bne.n	8001cb8 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c34:	2302      	movs	r3, #2
 8001c36:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c3e:	f107 0310 	add.w	r3, r7, #16
 8001c42:	4618      	mov	r0, r3
 8001c44:	f006 f958 	bl	8007ef8 <HAL_RCCEx_PeriphCLKConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c4e:	f7ff fb59 	bl	8001304 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <HAL_UART_MspInit+0xc0>)
 8001c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c58:	4a1a      	ldr	r2, [pc, #104]	; (8001cc4 <HAL_UART_MspInit+0xc0>)
 8001c5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_UART_MspInit+0xc0>)
 8001c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_UART_MspInit+0xc0>)
 8001c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c76:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <HAL_UART_MspInit+0xc0>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c80:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_UART_MspInit+0xc0>)
 8001c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ca6:	2308      	movs	r3, #8
 8001ca8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <HAL_UART_MspInit+0xc4>)
 8001cb4:	f004 fae8 	bl	8006288 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001cb8:	bf00      	nop
 8001cba:	37e0      	adds	r7, #224	; 0xe0
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40004c00 	.word	0x40004c00
 8001cc4:	58024400 	.word	0x58024400
 8001cc8:	58020000 	.word	0x58020000

08001ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cd0:	f7ff fd02 	bl	80016d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd4:	480c      	ldr	r0, [pc, #48]	; (8001d08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cd6:	490d      	ldr	r1, [pc, #52]	; (8001d0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cec:	4c0a      	ldr	r4, [pc, #40]	; (8001d18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f00b fd35 	bl	800d768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfe:	f7ff f9bb 	bl	8001078 <main>
  bx  lr
 8001d02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d04:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d0c:	24000108 	.word	0x24000108
  ldr r2, =_sidata
 8001d10:	08015a70 	.word	0x08015a70
  ldr r2, =_sbss
 8001d14:	24000108 	.word	0x24000108
  ldr r4, =_ebss
 8001d18:	24000dbc 	.word	0x24000dbc

08001d1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC3_IRQHandler>
	...

08001d20 <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 8001d20:	b5b0      	push	{r4, r5, r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af02      	add	r7, sp, #8
	uint8_t text[20];
	
	#ifdef TFT96
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 8001d26:	4b64      	ldr	r3, [pc, #400]	; (8001eb8 <LCD_Test+0x198>)
 8001d28:	2203      	movs	r2, #3
 8001d2a:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = HannStar_Panel;
 8001d2c:	4b62      	ldr	r3, [pc, #392]	; (8001eb8 <LCD_Test+0x198>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
 8001d32:	4b61      	ldr	r3, [pc, #388]	; (8001eb8 <LCD_Test+0x198>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	735a      	strb	r2, [r3, #13]
	#else
	perror ("Unknown Screen");
	
	#endif
	
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 8001d38:	4960      	ldr	r1, [pc, #384]	; (8001ebc <LCD_Test+0x19c>)
 8001d3a:	4861      	ldr	r0, [pc, #388]	; (8001ec0 <LCD_Test+0x1a0>)
 8001d3c:	f000 fcc2 	bl	80026c4 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8001d40:	4b60      	ldr	r3, [pc, #384]	; (8001ec4 <LCD_Test+0x1a4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a5c      	ldr	r2, [pc, #368]	; (8001eb8 <LCD_Test+0x198>)
 8001d46:	2105      	movs	r1, #5
 8001d48:	485d      	ldr	r0, [pc, #372]	; (8001ec0 <LCD_Test+0x1a0>)
 8001d4a:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <LCD_Test+0x1a4>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	495d      	ldr	r1, [pc, #372]	; (8001ec8 <LCD_Test+0x1a8>)
 8001d52:	485b      	ldr	r0, [pc, #364]	; (8001ec0 <LCD_Test+0x1a0>)
 8001d54:	4798      	blx	r3
	
	LCD_SetBrightness(0);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f000 f8c2 	bl	8001ee0 <LCD_SetBrightness>
	
	#ifdef TFT96
	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
 8001d5c:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <LCD_Test+0x1a4>)
 8001d5e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001d60:	4b5a      	ldr	r3, [pc, #360]	; (8001ecc <LCD_Test+0x1ac>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	4856      	ldr	r0, [pc, #344]	; (8001ec0 <LCD_Test+0x1a0>)
 8001d68:	47a0      	blx	r4
	#elif TFT18
	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);	
	#endif
	
  uint32_t tick = get_tick();
 8001d6a:	f002 f869 	bl	8003e40 <HAL_GetTick>
 8001d6e:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8001d70:	e05f      	b.n	8001e32 <LCD_Test+0x112>
	{
		delay_ms(20);
 8001d72:	2014      	movs	r0, #20
 8001d74:	f002 f870 	bl	8003e58 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 8001d78:	f002 f862 	bl	8003e40 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d86:	d80f      	bhi.n	8001da8 <LCD_Test+0x88>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 8001d88:	f002 f85a 	bl	8003e40 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2264      	movs	r2, #100	; 0x64
 8001d94:	fb02 f303 	mul.w	r3, r2, r3
 8001d98:	4a4d      	ldr	r2, [pc, #308]	; (8001ed0 <LCD_Test+0x1b0>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	099b      	lsrs	r3, r3, #6
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 f89d 	bl	8001ee0 <LCD_SetBrightness>
 8001da6:	e044      	b.n	8001e32 <LCD_Test+0x112>
		else if (get_tick() - tick <= 3000)
 8001da8:	f002 f84a 	bl	8003e40 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d832      	bhi.n	8001e20 <LCD_Test+0x100>
		{
			sprintf((char *)&text, "Loading...");
 8001dba:	463b      	mov	r3, r7
 8001dbc:	4945      	ldr	r1, [pc, #276]	; (8001ed4 <LCD_Test+0x1b4>)
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f00b fd16 	bl	800d7f0 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 100, 1, ST7735Ctx.Width, 16, 16, text);
 8001dc4:	4b3c      	ldr	r3, [pc, #240]	; (8001eb8 <LCD_Test+0x198>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3b64      	subs	r3, #100	; 0x64
 8001dcc:	b298      	uxth	r0, r3
 8001dce:	4b3a      	ldr	r3, [pc, #232]	; (8001eb8 <LCD_Test+0x198>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	2310      	movs	r3, #16
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	2310      	movs	r3, #16
 8001dde:	2101      	movs	r1, #1
 8001de0:	f000 fb22 	bl	8002428 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 8001de4:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <LCD_Test+0x1a4>)
 8001de6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001de8:	4b33      	ldr	r3, [pc, #204]	; (8001eb8 <LCD_Test+0x198>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	1edd      	subs	r5, r3, #3
 8001dee:	f002 f827 	bl	8003e40 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001dfc:	4a2e      	ldr	r2, [pc, #184]	; (8001eb8 <LCD_Test+0x198>)
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	4a32      	ldr	r2, [pc, #200]	; (8001ed0 <LCD_Test+0x1b0>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	09db      	lsrs	r3, r3, #7
 8001e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e10:	9201      	str	r2, [sp, #4]
 8001e12:	2203      	movs	r2, #3
 8001e14:	9200      	str	r2, [sp, #0]
 8001e16:	462a      	mov	r2, r5
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4829      	ldr	r0, [pc, #164]	; (8001ec0 <LCD_Test+0x1a0>)
 8001e1c:	47a0      	blx	r4
 8001e1e:	e008      	b.n	8001e32 <LCD_Test+0x112>
		}
		else if (get_tick() - tick > 3000)
 8001e20:	f002 f80e 	bl	8003e40 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d808      	bhi.n	8001e44 <LCD_Test+0x124>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8001e32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e36:	4828      	ldr	r0, [pc, #160]	; (8001ed8 <LCD_Test+0x1b8>)
 8001e38:	f004 fbd6 	bl	80065e8 <HAL_GPIO_ReadPin>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d197      	bne.n	8001d72 <LCD_Test+0x52>
 8001e42:	e004      	b.n	8001e4e <LCD_Test+0x12e>
			break;
 8001e44:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8001e46:	e002      	b.n	8001e4e <LCD_Test+0x12e>
	{
		delay_ms(10);
 8001e48:	200a      	movs	r0, #10
 8001e4a:	f002 f805 	bl	8003e58 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8001e4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e52:	4821      	ldr	r0, [pc, #132]	; (8001ed8 <LCD_Test+0x1b8>)
 8001e54:	f004 fbc8 	bl	80065e8 <HAL_GPIO_ReadPin>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d0f4      	beq.n	8001e48 <LCD_Test+0x128>
	}
	LCD_Light(0, 300);
 8001e5e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001e62:	2000      	movs	r0, #0
 8001e64:	f000 f858 	bl	8001f18 <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <LCD_Test+0x1a4>)
 8001e6a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <LCD_Test+0x198>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <LCD_Test+0x198>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2100      	movs	r1, #0
 8001e76:	9101      	str	r1, [sp, #4]
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	480f      	ldr	r0, [pc, #60]	; (8001ec0 <LCD_Test+0x1a0>)
 8001e82:	47a0      	blx	r4

	sprintf((char *)&text, "Sound Localization");
 8001e84:	463b      	mov	r3, r7
 8001e86:	4915      	ldr	r1, [pc, #84]	; (8001edc <LCD_Test+0x1bc>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f00b fcb1 	bl	800d7f0 <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <LCD_Test+0x198>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	463b      	mov	r3, r7
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	2310      	movs	r3, #16
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2310      	movs	r3, #16
 8001e9e:	2104      	movs	r1, #4
 8001ea0:	2004      	movs	r0, #4
 8001ea2:	f000 fac1 	bl	8002428 <LCD_ShowString>

	LCD_Light(100, 200);
 8001ea6:	21c8      	movs	r1, #200	; 0xc8
 8001ea8:	2064      	movs	r0, #100	; 0x64
 8001eaa:	f000 f835 	bl	8001f18 <LCD_Light>
}
 8001eae:	bf00      	nop
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	24000898 	.word	0x24000898
 8001ebc:	2400000c 	.word	0x2400000c
 8001ec0:	24000858 	.word	0x24000858
 8001ec4:	24000030 	.word	0x24000030
 8001ec8:	24000890 	.word	0x24000890
 8001ecc:	0800f54c 	.word	0x0800f54c
 8001ed0:	10624dd3 	.word	0x10624dd3
 8001ed4:	0800eab8 	.word	0x0800eab8
 8001ed8:	58020800 	.word	0x58020800
 8001edc:	0800eac4 	.word	0x0800eac4

08001ee0 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <LCD_SetBrightness+0x1c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	24000730 	.word	0x24000730

08001f00 <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <LCD_GetBrightness+0x14>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	24000730 	.word	0x24000730

08001f18 <LCD_Light>:

// 屏幕逐渐变亮或者变暗
// Brightness_Dis: 目标值
// time: 达到目标值的时间,单位: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 8001f22:	f7ff ffed 	bl	8001f00 <LCD_GetBrightness>
 8001f26:	6278      	str	r0, [r7, #36]	; 0x24
	time_now = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 8001f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d05e      	beq.n	8001ff2 <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d05c      	beq.n	8001ff6 <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f46:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f54:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f5c:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f6a:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	ee07 3a90 	vmov	s15, r3
 8001f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f78:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f80:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 8001f84:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f88:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f90:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 8001f94:	f001 ff54 	bl	8003e40 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f001 ff5c 	bl	8003e58 <HAL_Delay>
		
		time_now = get_tick()-tick;
 8001fa0:	f001 ff4e 	bl	8003e40 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb6:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 8001fba:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	ee07 3a90 	vmov	s15, r3
 8001fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd4:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 8001fd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe0:	ee17 0a90 	vmov	r0, s15
 8001fe4:	f7ff ff7c 	bl	8001ee0 <LCD_SetBrightness>
		
		if(time_now >= time) break;
 8001fe8:	6a3a      	ldr	r2, [r7, #32]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d204      	bcs.n	8001ffa <LCD_Light+0xe2>
		delay_ms(1);
 8001ff0:	e7d3      	b.n	8001f9a <LCD_Light+0x82>
		return;
 8001ff2:	bf00      	nop
 8001ff4:	e002      	b.n	8001ffc <LCD_Light+0xe4>
		return;
 8001ff6:	bf00      	nop
 8001ff8:	e000      	b.n	8001ffc <LCD_Light+0xe4>
		if(time_now >= time) break;
 8001ffa:	bf00      	nop
		
	}
}
 8001ffc:	3728      	adds	r7, #40	; 0x28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <LCD_ShowChar>:
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16
//mode:叠加方式(1)还是非叠加方式(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 8002004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002008:	b097      	sub	sp, #92	; 0x5c
 800200a:	af02      	add	r7, sp, #8
 800200c:	461e      	mov	r6, r3
 800200e:	4603      	mov	r3, r0
 8002010:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002012:	460b      	mov	r3, r1
 8002014:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002016:	4613      	mov	r3, r2
 8002018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800201c:	4633      	mov	r3, r6
 800201e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002022:	466b      	mov	r3, sp
 8002024:	607b      	str	r3, [r7, #4]
  uint8_t temp,t1,t;
	uint16_t y0=y;
 8002026:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002028:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint16_t x0=x;
 800202c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800202e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t colortemp=POINT_COLOR; 
 8002032:	4baf      	ldr	r3, [pc, #700]	; (80022f0 <LCD_ShowChar+0x2ec>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 800203a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d101      	bne.n	8002046 <LCD_ShowChar+0x42>
 8002042:	2106      	movs	r1, #6
 8002044:	e000      	b.n	8002048 <LCD_ShowChar+0x44>
 8002046:	2108      	movs	r1, #8
 8002048:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 800204c:	1e4b      	subs	r3, r1, #1
 800204e:	643b      	str	r3, [r7, #64]	; 0x40
 8002050:	460a      	mov	r2, r1
 8002052:	2300      	movs	r3, #0
 8002054:	4692      	mov	sl, r2
 8002056:	469b      	mov	fp, r3
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8002064:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8002068:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800206c:	460b      	mov	r3, r1
 800206e:	005e      	lsls	r6, r3, #1
 8002070:	4603      	mov	r3, r0
 8002072:	3b01      	subs	r3, #1
 8002074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002076:	460a      	mov	r2, r1
 8002078:	2300      	movs	r3, #0
 800207a:	61ba      	str	r2, [r7, #24]
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	b2c3      	uxtb	r3, r0
 8002080:	2200      	movs	r2, #0
 8002082:	623b      	str	r3, [r7, #32]
 8002084:	627a      	str	r2, [r7, #36]	; 0x24
 8002086:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800208a:	465b      	mov	r3, fp
 800208c:	6a3a      	ldr	r2, [r7, #32]
 800208e:	fb02 fc03 	mul.w	ip, r2, r3
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	4652      	mov	r2, sl
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	449c      	add	ip, r3
 800209c:	4652      	mov	r2, sl
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	fba2 8903 	umull	r8, r9, r2, r3
 80020a4:	eb0c 0309 	add.w	r3, ip, r9
 80020a8:	4699      	mov	r9, r3
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80020b6:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80020ba:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80020be:	460a      	mov	r2, r1
 80020c0:	2300      	movs	r3, #0
 80020c2:	613a      	str	r2, [r7, #16]
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	b2c3      	uxtb	r3, r0
 80020c8:	2200      	movs	r2, #0
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	60fa      	str	r2, [r7, #12]
 80020ce:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80020d2:	464b      	mov	r3, r9
 80020d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80020d8:	4652      	mov	r2, sl
 80020da:	fb02 fc03 	mul.w	ip, r2, r3
 80020de:	465b      	mov	r3, fp
 80020e0:	4642      	mov	r2, r8
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	449c      	add	ip, r3
 80020e8:	4642      	mov	r2, r8
 80020ea:	4653      	mov	r3, sl
 80020ec:	fba2 4503 	umull	r4, r5, r2, r3
 80020f0:	eb0c 0305 	add.w	r3, ip, r5
 80020f4:	461d      	mov	r5, r3
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	012b      	lsls	r3, r5, #4
 8002100:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002104:	0122      	lsls	r2, r4, #4
 8002106:	460b      	mov	r3, r1
 8002108:	4602      	mov	r2, r0
 800210a:	fb02 f303 	mul.w	r3, r2, r3
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	3307      	adds	r3, #7
 8002112:	08db      	lsrs	r3, r3, #3
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	ebad 0d03 	sub.w	sp, sp, r3
 800211a:	ab02      	add	r3, sp, #8
 800211c:	3301      	adds	r3, #1
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 8002124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002128:	4619      	mov	r1, r3
 800212a:	4872      	ldr	r0, [pc, #456]	; (80022f4 <LCD_ShowChar+0x2f0>)
 800212c:	f001 fc26 	bl	800397c <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 8002130:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002134:	4619      	mov	r1, r3
 8002136:	486f      	ldr	r0, [pc, #444]	; (80022f4 <LCD_ShowChar+0x2f0>)
 8002138:	f001 fc32 	bl	80039a0 <ST7735_GetYSize>
	
	//设置窗口		   
	num=num-' ';//得到偏移后的值
 800213c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002140:	3b20      	subs	r3, #32
 8002142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	count = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	
	if(!mode) //非叠加方式
 800214c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 80a7 	bne.w	80022a4 <LCD_ShowChar+0x2a0>
	{
		for(t=0;t<size;t++)
 8002156:	2300      	movs	r3, #0
 8002158:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800215c:	e09a      	b.n	8002294 <LCD_ShowChar+0x290>
		{   
			if(size==12)temp=asc2_1206[num][t];  //调用1206字体
 800215e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d10e      	bne.n	8002184 <LCD_ShowChar+0x180>
 8002166:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800216a:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 800216e:	4862      	ldr	r0, [pc, #392]	; (80022f8 <LCD_ShowChar+0x2f4>)
 8002170:	4613      	mov	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4403      	add	r3, r0
 800217a:	440b      	add	r3, r1
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002182:	e00a      	b.n	800219a <LCD_ShowChar+0x196>
			else temp=asc2_1608[num][t];		 //调用1608字体
 8002184:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002188:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800218c:	495b      	ldr	r1, [pc, #364]	; (80022fc <LCD_ShowChar+0x2f8>)
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	440a      	add	r2, r1
 8002192:	4413      	add	r3, r2
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			
			for(t1=0;t1<8;t1++)
 800219a:	2300      	movs	r3, #0
 800219c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80021a0:	e06d      	b.n	800227e <LCD_ShowChar+0x27a>
			{			    
				if(temp&0x80)
 80021a2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	da0e      	bge.n	80021c8 <LCD_ShowChar+0x1c4>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 80021aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	b21a      	sxth	r2, r3
 80021b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	b21b      	sxth	r3, r3
 80021bc:	4313      	orrs	r3, r2
 80021be:	b21b      	sxth	r3, r3
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	4b4b      	ldr	r3, [pc, #300]	; (80022f0 <LCD_ShowChar+0x2ec>)
 80021c4:	801a      	strh	r2, [r3, #0]
 80021c6:	e00d      	b.n	80021e4 <LCD_ShowChar+0x1e0>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80021c8:	4b4d      	ldr	r3, [pc, #308]	; (8002300 <LCD_ShowChar+0x2fc>)
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	b21a      	sxth	r2, r3
 80021d0:	4b4b      	ldr	r3, [pc, #300]	; (8002300 <LCD_ShowChar+0x2fc>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	b21b      	sxth	r3, r3
 80021da:	4313      	orrs	r3, r2
 80021dc:	b21b      	sxth	r3, r3
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b43      	ldr	r3, [pc, #268]	; (80022f0 <LCD_ShowChar+0x2ec>)
 80021e2:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 80021e4:	0872      	lsrs	r2, r6, #1
 80021e6:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 80021ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021ee:	085b      	lsrs	r3, r3, #1
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	461c      	mov	r4, r3
 80021f4:	4b3e      	ldr	r3, [pc, #248]	; (80022f0 <LCD_ShowChar+0x2ec>)
 80021f6:	8818      	ldrh	r0, [r3, #0]
 80021f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fa:	fb01 f202 	mul.w	r2, r1, r2
 80021fe:	4422      	add	r2, r4
 8002200:	4601      	mov	r1, r0
 8002202:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8002206:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800220a:	3301      	adds	r3, #1
 800220c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				if(count >= size) count =0;
 8002210:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800221a:	429a      	cmp	r2, r3
 800221c:	d302      	bcc.n	8002224 <LCD_ShowChar+0x220>
 800221e:	2300      	movs	r3, #0
 8002220:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				
				temp<<=1;
 8002224:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				y++;
 800222e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002230:	3301      	adds	r3, #1
 8002232:	85bb      	strh	r3, [r7, #44]	; 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//超区域了
 8002234:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002238:	429a      	cmp	r2, r3
 800223a:	d304      	bcc.n	8002246 <LCD_ShowChar+0x242>
 800223c:	4a2c      	ldr	r2, [pc, #176]	; (80022f0 <LCD_ShowChar+0x2ec>)
 800223e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002242:	8013      	strh	r3, [r2, #0]
 8002244:	e0e6      	b.n	8002414 <LCD_ShowChar+0x410>
				if((y-y0)==size)
 8002246:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002248:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800224c:	1ad2      	subs	r2, r2, r3
 800224e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002252:	429a      	cmp	r2, r3
 8002254:	d10e      	bne.n	8002274 <LCD_ShowChar+0x270>
				{
					y=y0;
 8002256:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800225a:	85bb      	strh	r3, [r7, #44]	; 0x2c
					x++;
 800225c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800225e:	3301      	adds	r3, #1
 8002260:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//超区域了
 8002262:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002266:	429a      	cmp	r2, r3
 8002268:	d30e      	bcc.n	8002288 <LCD_ShowChar+0x284>
 800226a:	4a21      	ldr	r2, [pc, #132]	; (80022f0 <LCD_ShowChar+0x2ec>)
 800226c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002270:	8013      	strh	r3, [r2, #0]
 8002272:	e0cf      	b.n	8002414 <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 8002274:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002278:	3301      	adds	r3, #1
 800227a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800227e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002282:	2b07      	cmp	r3, #7
 8002284:	d98d      	bls.n	80021a2 <LCD_ShowChar+0x19e>
 8002286:	e000      	b.n	800228a <LCD_ShowChar+0x286>
					break;
 8002288:	bf00      	nop
		for(t=0;t<size;t++)
 800228a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800228e:	3301      	adds	r3, #1
 8002290:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8002294:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002298:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800229c:	429a      	cmp	r2, r3
 800229e:	f4ff af5e 	bcc.w	800215e <LCD_ShowChar+0x15a>
 80022a2:	e09c      	b.n	80023de <LCD_ShowChar+0x3da>
			}
		}
	}
	else//叠加方式
	{
		for(t=0;t<size;t++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80022aa:	e091      	b.n	80023d0 <LCD_ShowChar+0x3cc>
		{   
			if(size==12)temp=asc2_1206[num][t];  //调用1206字体
 80022ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	d10e      	bne.n	80022d2 <LCD_ShowChar+0x2ce>
 80022b4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80022b8:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 80022bc:	480e      	ldr	r0, [pc, #56]	; (80022f8 <LCD_ShowChar+0x2f4>)
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4403      	add	r3, r0
 80022c8:	440b      	add	r3, r1
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80022d0:	e00a      	b.n	80022e8 <LCD_ShowChar+0x2e4>
			else temp=asc2_1608[num][t];		 //调用1608字体 	                          
 80022d2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80022d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022da:	4908      	ldr	r1, [pc, #32]	; (80022fc <LCD_ShowChar+0x2f8>)
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	440a      	add	r2, r1
 80022e0:	4413      	add	r3, r2
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			for(t1=0;t1<8;t1++)
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80022ee:	e064      	b.n	80023ba <LCD_ShowChar+0x3b6>
 80022f0:	2400002c 	.word	0x2400002c
 80022f4:	24000858 	.word	0x24000858
 80022f8:	0800eae8 	.word	0x0800eae8
 80022fc:	0800ef5c 	.word	0x0800ef5c
 8002300:	24000894 	.word	0x24000894
			{			    
				if(temp&0x80)
 8002304:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002308:	2b00      	cmp	r3, #0
 800230a:	da1a      	bge.n	8002342 <LCD_ShowChar+0x33e>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 800230c:	4b44      	ldr	r3, [pc, #272]	; (8002420 <LCD_ShowChar+0x41c>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	b21a      	sxth	r2, r3
 8002314:	4b42      	ldr	r3, [pc, #264]	; (8002420 <LCD_ShowChar+0x41c>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	b29b      	uxth	r3, r3
 800231c:	b21b      	sxth	r3, r3
 800231e:	4313      	orrs	r3, r2
 8002320:	b218      	sxth	r0, r3
 8002322:	0872      	lsrs	r2, r6, #1
 8002324:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8002328:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800232c:	085b      	lsrs	r3, r3, #1
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461c      	mov	r4, r3
 8002332:	b280      	uxth	r0, r0
 8002334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002336:	fb01 f202 	mul.w	r2, r1, r2
 800233a:	4422      	add	r2, r4
 800233c:	4601      	mov	r1, r0
 800233e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8002342:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002346:	3301      	adds	r3, #1
 8002348:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				if(count >= size) count =0;
 800234c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8002356:	429a      	cmp	r2, r3
 8002358:	d302      	bcc.n	8002360 <LCD_ShowChar+0x35c>
 800235a:	2300      	movs	r3, #0
 800235c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				
				temp<<=1;
 8002360:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				y++;
 800236a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800236c:	3301      	adds	r3, #1
 800236e:	85bb      	strh	r3, [r7, #44]	; 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//超区域了
 8002370:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002374:	429a      	cmp	r2, r3
 8002376:	d304      	bcc.n	8002382 <LCD_ShowChar+0x37e>
 8002378:	4a29      	ldr	r2, [pc, #164]	; (8002420 <LCD_ShowChar+0x41c>)
 800237a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800237e:	8013      	strh	r3, [r2, #0]
 8002380:	e048      	b.n	8002414 <LCD_ShowChar+0x410>
				if((y-y0)==size)
 8002382:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002384:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002388:	1ad2      	subs	r2, r2, r3
 800238a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800238e:	429a      	cmp	r2, r3
 8002390:	d10e      	bne.n	80023b0 <LCD_ShowChar+0x3ac>
				{
					y=y0;
 8002392:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002396:	85bb      	strh	r3, [r7, #44]	; 0x2c
					x++;
 8002398:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800239a:	3301      	adds	r3, #1
 800239c:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//超区域了
 800239e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80023a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d30e      	bcc.n	80023c4 <LCD_ShowChar+0x3c0>
 80023a6:	4a1e      	ldr	r2, [pc, #120]	; (8002420 <LCD_ShowChar+0x41c>)
 80023a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80023ac:	8013      	strh	r3, [r2, #0]
 80023ae:	e031      	b.n	8002414 <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 80023b0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80023b4:	3301      	adds	r3, #1
 80023b6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80023ba:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80023be:	2b07      	cmp	r3, #7
 80023c0:	d9a0      	bls.n	8002304 <LCD_ShowChar+0x300>
 80023c2:	e000      	b.n	80023c6 <LCD_ShowChar+0x3c2>
					break;
 80023c4:	bf00      	nop
		for(t=0;t<size;t++)
 80023c6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80023ca:	3301      	adds	r3, #1
 80023cc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80023d0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80023d4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80023d8:	429a      	cmp	r2, r3
 80023da:	f4ff af67 	bcc.w	80022ac <LCD_ShowChar+0x2a8>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 80023de:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80023e2:	f8b7 0048 	ldrh.w	r0, [r7, #72]	; 0x48
 80023e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d101      	bne.n	80023f2 <LCD_ShowChar+0x3ee>
 80023ee:	2306      	movs	r3, #6
 80023f0:	e000      	b.n	80023f4 <LCD_ShowChar+0x3f0>
 80023f2:	2308      	movs	r3, #8
 80023f4:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80023f8:	9201      	str	r2, [sp, #4]
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fe:	4602      	mov	r2, r0
 8002400:	4808      	ldr	r0, [pc, #32]	; (8002424 <LCD_ShowChar+0x420>)
 8002402:	f001 f90d 	bl	8003620 <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 8002406:	4a06      	ldr	r2, [pc, #24]	; (8002420 <LCD_ShowChar+0x41c>)
 8002408:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800240c:	8013      	strh	r3, [r2, #0]
 800240e:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8002412:	e001      	b.n	8002418 <LCD_ShowChar+0x414>
 8002414:	f8d7 d004 	ldr.w	sp, [r7, #4]
}   
 8002418:	3754      	adds	r7, #84	; 0x54
 800241a:	46bd      	mov	sp, r7
 800241c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002420:	2400002c 	.word	0x2400002c
 8002424:	24000858 	.word	0x24000858

08002428 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小  
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b087      	sub	sp, #28
 800242c:	af02      	add	r7, sp, #8
 800242e:	4604      	mov	r4, r0
 8002430:	4608      	mov	r0, r1
 8002432:	4611      	mov	r1, r2
 8002434:	461a      	mov	r2, r3
 8002436:	4623      	mov	r3, r4
 8002438:	80fb      	strh	r3, [r7, #6]
 800243a:	4603      	mov	r3, r0
 800243c:	80bb      	strh	r3, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	807b      	strh	r3, [r7, #2]
 8002442:	4613      	mov	r3, r2
 8002444:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	73fb      	strb	r3, [r7, #15]
	width+=x;
 800244a:	887a      	ldrh	r2, [r7, #2]
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	4413      	add	r3, r2
 8002450:	807b      	strh	r3, [r7, #2]
	height+=y;
 8002452:	883a      	ldrh	r2, [r7, #0]
 8002454:	88bb      	ldrh	r3, [r7, #4]
 8002456:	4413      	add	r3, r2
 8002458:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 800245a:	e024      	b.n	80024a6 <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 800245c:	88fa      	ldrh	r2, [r7, #6]
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	429a      	cmp	r2, r3
 8002462:	d307      	bcc.n	8002474 <LCD_ShowString+0x4c>
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	80fb      	strh	r3, [r7, #6]
 8002468:	f897 3020 	ldrb.w	r3, [r7, #32]
 800246c:	b29a      	uxth	r2, r3
 800246e:	88bb      	ldrh	r3, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 8002474:	88ba      	ldrh	r2, [r7, #4]
 8002476:	883b      	ldrh	r3, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d21d      	bcs.n	80024b8 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	781a      	ldrb	r2, [r3, #0]
 8002480:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002484:	88b9      	ldrh	r1, [r7, #4]
 8002486:	88f8      	ldrh	r0, [r7, #6]
 8002488:	2400      	movs	r4, #0
 800248a:	9400      	str	r4, [sp, #0]
 800248c:	f7ff fdba 	bl	8002004 <LCD_ShowChar>
        x+=size/2;
 8002490:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	b2db      	uxtb	r3, r3
 8002498:	b29a      	uxth	r2, r3
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	4413      	add	r3, r2
 800249e:	80fb      	strh	r3, [r7, #6]
        p++;
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	3301      	adds	r3, #1
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b7e      	cmp	r3, #126	; 0x7e
 80024ac:	d805      	bhi.n	80024ba <LCD_ShowString+0x92>
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b1f      	cmp	r3, #31
 80024b4:	d8d2      	bhi.n	800245c <LCD_ShowString+0x34>
    }  
}
 80024b6:	e000      	b.n	80024ba <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 80024b8:	bf00      	nop
}
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd90      	pop	{r4, r7, pc}
	...

080024c4 <lcd_init>:

static int32_t lcd_init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 80024ce:	2104      	movs	r1, #4
 80024d0:	4803      	ldr	r0, [pc, #12]	; (80024e0 <lcd_init+0x1c>)
 80024d2:	f009 fe49 	bl	800c168 <HAL_TIMEx_PWMN_Start>
	return result;
 80024d6:	687b      	ldr	r3, [r7, #4]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	24000730 	.word	0x24000730

080024e4 <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80024e8:	f001 fcaa 	bl	8003e40 <HAL_GetTick>
 80024ec:	4603      	mov	r3, r0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 8002502:	2200      	movs	r2, #0
 8002504:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002508:	481d      	ldr	r0, [pc, #116]	; (8002580 <lcd_writereg+0x8c>)
 800250a:	f004 f885 	bl	8006618 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 800250e:	2200      	movs	r2, #0
 8002510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002514:	481a      	ldr	r0, [pc, #104]	; (8002580 <lcd_writereg+0x8c>)
 8002516:	f004 f87f 	bl	8006618 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 800251a:	f107 010f 	add.w	r1, r7, #15
 800251e:	2364      	movs	r3, #100	; 0x64
 8002520:	2201      	movs	r2, #1
 8002522:	4818      	ldr	r0, [pc, #96]	; (8002584 <lcd_writereg+0x90>)
 8002524:	f007 ff7a 	bl	800a41c <HAL_SPI_Transmit>
 8002528:	4603      	mov	r3, r0
 800252a:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 800252c:	2201      	movs	r2, #1
 800252e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002532:	4813      	ldr	r0, [pc, #76]	; (8002580 <lcd_writereg+0x8c>)
 8002534:	f004 f870 	bl	8006618 <HAL_GPIO_WritePin>
	if(length > 0)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00c      	beq.n	8002558 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	b29a      	uxth	r2, r3
 8002542:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	480e      	ldr	r0, [pc, #56]	; (8002584 <lcd_writereg+0x90>)
 800254a:	f007 ff67 	bl	800a41c <HAL_SPI_Transmit>
 800254e:	4603      	mov	r3, r0
 8002550:	461a      	mov	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	4413      	add	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 8002558:	2201      	movs	r2, #1
 800255a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800255e:	4808      	ldr	r0, [pc, #32]	; (8002580 <lcd_writereg+0x8c>)
 8002560:	f004 f85a 	bl	8006618 <HAL_GPIO_WritePin>
	if(result>0){
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	dd03      	ble.n	8002572 <lcd_writereg+0x7e>
		result = -1;}
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	e001      	b.n	8002576 <lcd_writereg+0x82>
	else{
		result = 0;}
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
	return result;
 8002576:	697b      	ldr	r3, [r7, #20]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	58021000 	.word	0x58021000
 8002584:	240006a4 	.word	0x240006a4

08002588 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	6039      	str	r1, [r7, #0]
 8002592:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 8002594:	2200      	movs	r2, #0
 8002596:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800259a:	481b      	ldr	r0, [pc, #108]	; (8002608 <lcd_readreg+0x80>)
 800259c:	f004 f83c 	bl	8006618 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 80025a0:	2200      	movs	r2, #0
 80025a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025a6:	4818      	ldr	r0, [pc, #96]	; (8002608 <lcd_readreg+0x80>)
 80025a8:	f004 f836 	bl	8006618 <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 80025ac:	1df9      	adds	r1, r7, #7
 80025ae:	2364      	movs	r3, #100	; 0x64
 80025b0:	2201      	movs	r2, #1
 80025b2:	4816      	ldr	r0, [pc, #88]	; (800260c <lcd_readreg+0x84>)
 80025b4:	f007 ff32 	bl	800a41c <HAL_SPI_Transmit>
 80025b8:	4603      	mov	r3, r0
 80025ba:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 80025bc:	2201      	movs	r2, #1
 80025be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025c2:	4811      	ldr	r0, [pc, #68]	; (8002608 <lcd_readreg+0x80>)
 80025c4:	f004 f828 	bl	8006618 <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 80025c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80025cc:	2201      	movs	r2, #1
 80025ce:	6839      	ldr	r1, [r7, #0]
 80025d0:	480e      	ldr	r0, [pc, #56]	; (800260c <lcd_readreg+0x84>)
 80025d2:	f008 f915 	bl	800a800 <HAL_SPI_Receive>
 80025d6:	4603      	mov	r3, r0
 80025d8:	461a      	mov	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4413      	add	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 80025e0:	2201      	movs	r2, #1
 80025e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025e6:	4808      	ldr	r0, [pc, #32]	; (8002608 <lcd_readreg+0x80>)
 80025e8:	f004 f816 	bl	8006618 <HAL_GPIO_WritePin>
	if(result>0){
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	dd03      	ble.n	80025fa <lcd_readreg+0x72>
		result = -1;}
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	e001      	b.n	80025fe <lcd_readreg+0x76>
	else{
		result = 0;}
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
	return result;
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	58021000 	.word	0x58021000
 800260c:	240006a4 	.word	0x240006a4

08002610 <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 800261a:	2200      	movs	r2, #0
 800261c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002620:	480f      	ldr	r0, [pc, #60]	; (8002660 <lcd_senddata+0x50>)
 8002622:	f003 fff9 	bl	8006618 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b29a      	uxth	r2, r3
 800262a:	2364      	movs	r3, #100	; 0x64
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	480d      	ldr	r0, [pc, #52]	; (8002664 <lcd_senddata+0x54>)
 8002630:	f007 fef4 	bl	800a41c <HAL_SPI_Transmit>
 8002634:	4603      	mov	r3, r0
 8002636:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8002638:	2201      	movs	r2, #1
 800263a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800263e:	4808      	ldr	r0, [pc, #32]	; (8002660 <lcd_senddata+0x50>)
 8002640:	f003 ffea 	bl	8006618 <HAL_GPIO_WritePin>
	if(result>0){
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	dd03      	ble.n	8002652 <lcd_senddata+0x42>
		result = -1;}
 800264a:	f04f 33ff 	mov.w	r3, #4294967295
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e001      	b.n	8002656 <lcd_senddata+0x46>
	else{
		result = 0;}
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
	return result;
 8002656:	68fb      	ldr	r3, [r7, #12]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	58021000 	.word	0x58021000
 8002664:	240006a4 	.word	0x240006a4

08002668 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8002672:	2200      	movs	r2, #0
 8002674:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002678:	4810      	ldr	r0, [pc, #64]	; (80026bc <lcd_recvdata+0x54>)
 800267a:	f003 ffcd 	bl	8006618 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	b29a      	uxth	r2, r3
 8002682:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	480d      	ldr	r0, [pc, #52]	; (80026c0 <lcd_recvdata+0x58>)
 800268a:	f008 f8b9 	bl	800a800 <HAL_SPI_Receive>
 800268e:	4603      	mov	r3, r0
 8002690:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8002692:	2201      	movs	r2, #1
 8002694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002698:	4808      	ldr	r0, [pc, #32]	; (80026bc <lcd_recvdata+0x54>)
 800269a:	f003 ffbd 	bl	8006618 <HAL_GPIO_WritePin>
	if(result>0){
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	dd03      	ble.n	80026ac <lcd_recvdata+0x44>
		result = -1;}
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	e001      	b.n	80026b0 <lcd_recvdata+0x48>
	else{
		result = 0;}
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
	return result;
 80026b0:	68fb      	ldr	r3, [r7, #12]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	58021000 	.word	0x58021000
 80026c0:	240006a4 	.word	0x240006a4

080026c4 <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d103      	bne.n	80026dc <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	e03a      	b.n	8002752 <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	891a      	ldrh	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	69da      	ldr	r2, [r3, #28]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a0f      	ldr	r2, [pc, #60]	; (800275c <ST7735_RegisterBusIO+0x98>)
 8002720:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <ST7735_RegisterBusIO+0x9c>)
 8002726:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <ST7735_RegisterBusIO+0xa0>)
 800272c:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <ST7735_RegisterBusIO+0xa4>)
 8002732:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.handle    = pObj;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	631a      	str	r2, [r3, #48]	; 0x30

    if(pObj->IO.Init != NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d004      	beq.n	800274c <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4798      	blx	r3
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	e002      	b.n	8002752 <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 800274c:	f04f 33ff 	mov.w	r3, #4294967295
 8002750:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002752:	68fb      	ldr	r3, [r7, #12]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	08003bcd 	.word	0x08003bcd
 8002760:	08003bf5 	.word	0x08003bf5
 8002764:	08003c1f 	.word	0x08003c1f
 8002768:	08003c43 	.word	0x08003c43

0800276c <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d103      	bne.n	8002786 <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	e3a6      	b.n	8002ed4 <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f103 0020 	add.w	r0, r3, #32
 8002790:	f107 0213 	add.w	r2, r7, #19
 8002794:	2300      	movs	r3, #0
 8002796:	2101      	movs	r1, #1
 8002798:	f001 fa92 	bl	8003cc0 <st7735_write_reg>
 800279c:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 800279e:	2178      	movs	r1, #120	; 0x78
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f001 fa60 	bl	8003c66 <ST7735_IO_Delay>
		
		tmp = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f103 0020 	add.w	r0, r3, #32
 80027b0:	f107 0213 	add.w	r2, r7, #19
 80027b4:	2300      	movs	r3, #0
 80027b6:	2101      	movs	r1, #1
 80027b8:	f001 fa82 	bl	8003cc0 <st7735_write_reg>
 80027bc:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 80027be:	2178      	movs	r1, #120	; 0x78
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f001 fa50 	bl	8003c66 <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f103 0020 	add.w	r0, r3, #32
 80027d0:	f107 0213 	add.w	r2, r7, #19
 80027d4:	2301      	movs	r3, #1
 80027d6:	2111      	movs	r1, #17
 80027d8:	f001 fa72 	bl	8003cc0 <st7735_write_reg>
 80027dc:	4602      	mov	r2, r0
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	4413      	add	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f103 0020 	add.w	r0, r3, #32
 80027ea:	f107 0213 	add.w	r2, r7, #19
 80027ee:	2300      	movs	r3, #0
 80027f0:	21b1      	movs	r1, #177	; 0xb1
 80027f2:	f001 fa65 	bl	8003cc0 <st7735_write_reg>
 80027f6:	4602      	mov	r2, r0
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	4413      	add	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 80027fe:	2301      	movs	r3, #1
 8002800:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3320      	adds	r3, #32
 8002806:	f107 0113 	add.w	r1, r7, #19
 800280a:	2201      	movs	r2, #1
 800280c:	4618      	mov	r0, r3
 800280e:	f001 fa6c 	bl	8003cea <st7735_send_data>
 8002812:	4602      	mov	r2, r0
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	4413      	add	r3, r2
 8002818:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 800281a:	232c      	movs	r3, #44	; 0x2c
 800281c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3320      	adds	r3, #32
 8002822:	f107 0113 	add.w	r1, r7, #19
 8002826:	2201      	movs	r2, #1
 8002828:	4618      	mov	r0, r3
 800282a:	f001 fa5e 	bl	8003cea <st7735_send_data>
 800282e:	4602      	mov	r2, r0
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	4413      	add	r3, r2
 8002834:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002836:	232d      	movs	r3, #45	; 0x2d
 8002838:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3320      	adds	r3, #32
 800283e:	f107 0113 	add.w	r1, r7, #19
 8002842:	2201      	movs	r2, #1
 8002844:	4618      	mov	r0, r3
 8002846:	f001 fa50 	bl	8003cea <st7735_send_data>
 800284a:	4602      	mov	r2, r0
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	4413      	add	r3, r2
 8002850:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 8002852:	2301      	movs	r3, #1
 8002854:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f103 0020 	add.w	r0, r3, #32
 800285c:	f107 0213 	add.w	r2, r7, #19
 8002860:	2301      	movs	r3, #1
 8002862:	21b2      	movs	r1, #178	; 0xb2
 8002864:	f001 fa2c 	bl	8003cc0 <st7735_write_reg>
 8002868:	4602      	mov	r2, r0
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	4413      	add	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8002870:	232c      	movs	r3, #44	; 0x2c
 8002872:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3320      	adds	r3, #32
 8002878:	f107 0113 	add.w	r1, r7, #19
 800287c:	2201      	movs	r2, #1
 800287e:	4618      	mov	r0, r3
 8002880:	f001 fa33 	bl	8003cea <st7735_send_data>
 8002884:	4602      	mov	r2, r0
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	4413      	add	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 800288c:	232d      	movs	r3, #45	; 0x2d
 800288e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3320      	adds	r3, #32
 8002894:	f107 0113 	add.w	r1, r7, #19
 8002898:	2201      	movs	r2, #1
 800289a:	4618      	mov	r0, r3
 800289c:	f001 fa25 	bl	8003cea <st7735_send_data>
 80028a0:	4602      	mov	r2, r0
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	4413      	add	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 80028a8:	2301      	movs	r3, #1
 80028aa:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f103 0020 	add.w	r0, r3, #32
 80028b2:	f107 0213 	add.w	r2, r7, #19
 80028b6:	2301      	movs	r3, #1
 80028b8:	21b3      	movs	r1, #179	; 0xb3
 80028ba:	f001 fa01 	bl	8003cc0 <st7735_write_reg>
 80028be:	4602      	mov	r2, r0
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	4413      	add	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 80028c6:	232c      	movs	r3, #44	; 0x2c
 80028c8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3320      	adds	r3, #32
 80028ce:	f107 0113 	add.w	r1, r7, #19
 80028d2:	2201      	movs	r2, #1
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 fa08 	bl	8003cea <st7735_send_data>
 80028da:	4602      	mov	r2, r0
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	4413      	add	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80028e2:	232d      	movs	r3, #45	; 0x2d
 80028e4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3320      	adds	r3, #32
 80028ea:	f107 0113 	add.w	r1, r7, #19
 80028ee:	2201      	movs	r2, #1
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 f9fa 	bl	8003cea <st7735_send_data>
 80028f6:	4602      	mov	r2, r0
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	4413      	add	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 80028fe:	2301      	movs	r3, #1
 8002900:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3320      	adds	r3, #32
 8002906:	f107 0113 	add.w	r1, r7, #19
 800290a:	2201      	movs	r2, #1
 800290c:	4618      	mov	r0, r3
 800290e:	f001 f9ec 	bl	8003cea <st7735_send_data>
 8002912:	4602      	mov	r2, r0
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	4413      	add	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 800291a:	232c      	movs	r3, #44	; 0x2c
 800291c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3320      	adds	r3, #32
 8002922:	f107 0113 	add.w	r1, r7, #19
 8002926:	2201      	movs	r2, #1
 8002928:	4618      	mov	r0, r3
 800292a:	f001 f9de 	bl	8003cea <st7735_send_data>
 800292e:	4602      	mov	r2, r0
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	4413      	add	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002936:	232d      	movs	r3, #45	; 0x2d
 8002938:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3320      	adds	r3, #32
 800293e:	f107 0113 	add.w	r1, r7, #19
 8002942:	2201      	movs	r2, #1
 8002944:	4618      	mov	r0, r3
 8002946:	f001 f9d0 	bl	8003cea <st7735_send_data>
 800294a:	4602      	mov	r2, r0
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	4413      	add	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 8002952:	2307      	movs	r3, #7
 8002954:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f103 0020 	add.w	r0, r3, #32
 800295c:	f107 0213 	add.w	r2, r7, #19
 8002960:	2301      	movs	r3, #1
 8002962:	21b4      	movs	r1, #180	; 0xb4
 8002964:	f001 f9ac 	bl	8003cc0 <st7735_write_reg>
 8002968:	4602      	mov	r2, r0
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	4413      	add	r3, r2
 800296e:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 8002970:	23a2      	movs	r3, #162	; 0xa2
 8002972:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f103 0020 	add.w	r0, r3, #32
 800297a:	f107 0213 	add.w	r2, r7, #19
 800297e:	2301      	movs	r3, #1
 8002980:	21c0      	movs	r1, #192	; 0xc0
 8002982:	f001 f99d 	bl	8003cc0 <st7735_write_reg>
 8002986:	4602      	mov	r2, r0
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	4413      	add	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 800298e:	2302      	movs	r3, #2
 8002990:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3320      	adds	r3, #32
 8002996:	f107 0113 	add.w	r1, r7, #19
 800299a:	2201      	movs	r2, #1
 800299c:	4618      	mov	r0, r3
 800299e:	f001 f9a4 	bl	8003cea <st7735_send_data>
 80029a2:	4602      	mov	r2, r0
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	4413      	add	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 80029aa:	2384      	movs	r3, #132	; 0x84
 80029ac:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3320      	adds	r3, #32
 80029b2:	f107 0113 	add.w	r1, r7, #19
 80029b6:	2201      	movs	r2, #1
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 f996 	bl	8003cea <st7735_send_data>
 80029be:	4602      	mov	r2, r0
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	4413      	add	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 80029c6:	23c5      	movs	r3, #197	; 0xc5
 80029c8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f103 0020 	add.w	r0, r3, #32
 80029d0:	f107 0213 	add.w	r2, r7, #19
 80029d4:	2301      	movs	r3, #1
 80029d6:	21c1      	movs	r1, #193	; 0xc1
 80029d8:	f001 f972 	bl	8003cc0 <st7735_write_reg>
 80029dc:	4602      	mov	r2, r0
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	4413      	add	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 80029e4:	230a      	movs	r3, #10
 80029e6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f103 0020 	add.w	r0, r3, #32
 80029ee:	f107 0213 	add.w	r2, r7, #19
 80029f2:	2301      	movs	r3, #1
 80029f4:	21c2      	movs	r1, #194	; 0xc2
 80029f6:	f001 f963 	bl	8003cc0 <st7735_write_reg>
 80029fa:	4602      	mov	r2, r0
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	4413      	add	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	3320      	adds	r3, #32
 8002a0a:	f107 0113 	add.w	r1, r7, #19
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4618      	mov	r0, r3
 8002a12:	f001 f96a 	bl	8003cea <st7735_send_data>
 8002a16:	4602      	mov	r2, r0
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 8002a1e:	238a      	movs	r3, #138	; 0x8a
 8002a20:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f103 0020 	add.w	r0, r3, #32
 8002a28:	f107 0213 	add.w	r2, r7, #19
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	21c3      	movs	r1, #195	; 0xc3
 8002a30:	f001 f946 	bl	8003cc0 <st7735_write_reg>
 8002a34:	4602      	mov	r2, r0
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	4413      	add	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8002a3c:	232a      	movs	r3, #42	; 0x2a
 8002a3e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3320      	adds	r3, #32
 8002a44:	f107 0113 	add.w	r1, r7, #19
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 f94d 	bl	8003cea <st7735_send_data>
 8002a50:	4602      	mov	r2, r0
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	4413      	add	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8002a58:	238a      	movs	r3, #138	; 0x8a
 8002a5a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f103 0020 	add.w	r0, r3, #32
 8002a62:	f107 0213 	add.w	r2, r7, #19
 8002a66:	2301      	movs	r3, #1
 8002a68:	21c4      	movs	r1, #196	; 0xc4
 8002a6a:	f001 f929 	bl	8003cc0 <st7735_write_reg>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	4413      	add	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 8002a76:	23ee      	movs	r3, #238	; 0xee
 8002a78:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3320      	adds	r3, #32
 8002a7e:	f107 0113 	add.w	r1, r7, #19
 8002a82:	2201      	movs	r2, #1
 8002a84:	4618      	mov	r0, r3
 8002a86:	f001 f930 	bl	8003cea <st7735_send_data>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	4413      	add	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8002a92:	230e      	movs	r3, #14
 8002a94:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f103 0020 	add.w	r0, r3, #32
 8002a9c:	f107 0213 	add.w	r2, r7, #19
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	21c5      	movs	r1, #197	; 0xc5
 8002aa4:	f001 f90c 	bl	8003cc0 <st7735_write_reg>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	4413      	add	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	7b1b      	ldrb	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10d      	bne.n	8002ad4 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f103 0020 	add.w	r0, r3, #32
 8002abe:	f107 0213 	add.w	r2, r7, #19
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2121      	movs	r1, #33	; 0x21
 8002ac6:	f001 f8fb 	bl	8003cc0 <st7735_write_reg>
 8002aca:	4602      	mov	r2, r0
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	4413      	add	r3, r2
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e00c      	b.n	8002aee <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f103 0020 	add.w	r0, r3, #32
 8002ada:	f107 0213 	add.w	r2, r7, #19
 8002ade:	2300      	movs	r3, #0
 8002ae0:	2120      	movs	r1, #32
 8002ae2:	f001 f8ed 	bl	8003cc0 <st7735_write_reg>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	4413      	add	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f103 0020 	add.w	r0, r3, #32
 8002af4:	f107 0208 	add.w	r2, r7, #8
 8002af8:	2301      	movs	r3, #1
 8002afa:	213a      	movs	r1, #58	; 0x3a
 8002afc:	f001 f8e0 	bl	8003cc0 <st7735_write_reg>
 8002b00:	4602      	mov	r2, r0
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	4413      	add	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f103 0020 	add.w	r0, r3, #32
 8002b12:	f107 0213 	add.w	r2, r7, #19
 8002b16:	2301      	movs	r3, #1
 8002b18:	21e0      	movs	r1, #224	; 0xe0
 8002b1a:	f001 f8d1 	bl	8003cc0 <st7735_write_reg>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	4413      	add	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 8002b26:	231c      	movs	r3, #28
 8002b28:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3320      	adds	r3, #32
 8002b2e:	f107 0113 	add.w	r1, r7, #19
 8002b32:	2201      	movs	r2, #1
 8002b34:	4618      	mov	r0, r3
 8002b36:	f001 f8d8 	bl	8003cea <st7735_send_data>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	4413      	add	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8002b42:	2307      	movs	r3, #7
 8002b44:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3320      	adds	r3, #32
 8002b4a:	f107 0113 	add.w	r1, r7, #19
 8002b4e:	2201      	movs	r2, #1
 8002b50:	4618      	mov	r0, r3
 8002b52:	f001 f8ca 	bl	8003cea <st7735_send_data>
 8002b56:	4602      	mov	r2, r0
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8002b5e:	2312      	movs	r3, #18
 8002b60:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	3320      	adds	r3, #32
 8002b66:	f107 0113 	add.w	r1, r7, #19
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f001 f8bc 	bl	8003cea <st7735_send_data>
 8002b72:	4602      	mov	r2, r0
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	4413      	add	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8002b7a:	2337      	movs	r3, #55	; 0x37
 8002b7c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3320      	adds	r3, #32
 8002b82:	f107 0113 	add.w	r1, r7, #19
 8002b86:	2201      	movs	r2, #1
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f001 f8ae 	bl	8003cea <st7735_send_data>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	4413      	add	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8002b96:	2332      	movs	r3, #50	; 0x32
 8002b98:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3320      	adds	r3, #32
 8002b9e:	f107 0113 	add.w	r1, r7, #19
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 f8a0 	bl	8003cea <st7735_send_data>
 8002baa:	4602      	mov	r2, r0
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	4413      	add	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8002bb2:	2329      	movs	r3, #41	; 0x29
 8002bb4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3320      	adds	r3, #32
 8002bba:	f107 0113 	add.w	r1, r7, #19
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 f892 	bl	8003cea <st7735_send_data>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	4413      	add	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002bce:	232d      	movs	r3, #45	; 0x2d
 8002bd0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3320      	adds	r3, #32
 8002bd6:	f107 0113 	add.w	r1, r7, #19
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 f884 	bl	8003cea <st7735_send_data>
 8002be2:	4602      	mov	r2, r0
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	4413      	add	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8002bea:	2329      	movs	r3, #41	; 0x29
 8002bec:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3320      	adds	r3, #32
 8002bf2:	f107 0113 	add.w	r1, r7, #19
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f001 f876 	bl	8003cea <st7735_send_data>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	4413      	add	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 8002c06:	2325      	movs	r3, #37	; 0x25
 8002c08:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3320      	adds	r3, #32
 8002c0e:	f107 0113 	add.w	r1, r7, #19
 8002c12:	2201      	movs	r2, #1
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 f868 	bl	8003cea <st7735_send_data>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	4413      	add	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 8002c22:	232b      	movs	r3, #43	; 0x2b
 8002c24:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3320      	adds	r3, #32
 8002c2a:	f107 0113 	add.w	r1, r7, #19
 8002c2e:	2201      	movs	r2, #1
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 f85a 	bl	8003cea <st7735_send_data>
 8002c36:	4602      	mov	r2, r0
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 8002c3e:	2339      	movs	r3, #57	; 0x39
 8002c40:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3320      	adds	r3, #32
 8002c46:	f107 0113 	add.w	r1, r7, #19
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 f84c 	bl	8003cea <st7735_send_data>
 8002c52:	4602      	mov	r2, r0
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	4413      	add	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3320      	adds	r3, #32
 8002c62:	f107 0113 	add.w	r1, r7, #19
 8002c66:	2201      	movs	r2, #1
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f001 f83e 	bl	8003cea <st7735_send_data>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	4413      	add	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8002c76:	2301      	movs	r3, #1
 8002c78:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3320      	adds	r3, #32
 8002c7e:	f107 0113 	add.w	r1, r7, #19
 8002c82:	2201      	movs	r2, #1
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 f830 	bl	8003cea <st7735_send_data>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	4413      	add	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 8002c92:	2303      	movs	r3, #3
 8002c94:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3320      	adds	r3, #32
 8002c9a:	f107 0113 	add.w	r1, r7, #19
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f001 f822 	bl	8003cea <st7735_send_data>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	4413      	add	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8002cae:	2310      	movs	r3, #16
 8002cb0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3320      	adds	r3, #32
 8002cb6:	f107 0113 	add.w	r1, r7, #19
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f001 f814 	bl	8003cea <st7735_send_data>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f103 0020 	add.w	r0, r3, #32
 8002cd4:	f107 0213 	add.w	r2, r7, #19
 8002cd8:	2301      	movs	r3, #1
 8002cda:	21e1      	movs	r1, #225	; 0xe1
 8002cdc:	f000 fff0 	bl	8003cc0 <st7735_write_reg>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 8002ce8:	231d      	movs	r3, #29
 8002cea:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3320      	adds	r3, #32
 8002cf0:	f107 0113 	add.w	r1, r7, #19
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fff7 	bl	8003cea <st7735_send_data>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	4413      	add	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8002d04:	2307      	movs	r3, #7
 8002d06:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3320      	adds	r3, #32
 8002d0c:	f107 0113 	add.w	r1, r7, #19
 8002d10:	2201      	movs	r2, #1
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 ffe9 	bl	8003cea <st7735_send_data>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 8002d20:	2306      	movs	r3, #6
 8002d22:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	3320      	adds	r3, #32
 8002d28:	f107 0113 	add.w	r1, r7, #19
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 ffdb 	bl	8003cea <st7735_send_data>
 8002d34:	4602      	mov	r2, r0
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	4413      	add	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8002d3c:	232e      	movs	r3, #46	; 0x2e
 8002d3e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3320      	adds	r3, #32
 8002d44:	f107 0113 	add.w	r1, r7, #19
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 ffcd 	bl	8003cea <st7735_send_data>
 8002d50:	4602      	mov	r2, r0
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	4413      	add	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8002d58:	232c      	movs	r3, #44	; 0x2c
 8002d5a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3320      	adds	r3, #32
 8002d60:	f107 0113 	add.w	r1, r7, #19
 8002d64:	2201      	movs	r2, #1
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 ffbf 	bl	8003cea <st7735_send_data>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	4413      	add	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8002d74:	2329      	movs	r3, #41	; 0x29
 8002d76:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3320      	adds	r3, #32
 8002d7c:	f107 0113 	add.w	r1, r7, #19
 8002d80:	2201      	movs	r2, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 ffb1 	bl	8003cea <st7735_send_data>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002d90:	232d      	movs	r3, #45	; 0x2d
 8002d92:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3320      	adds	r3, #32
 8002d98:	f107 0113 	add.w	r1, r7, #19
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 ffa3 	bl	8003cea <st7735_send_data>
 8002da4:	4602      	mov	r2, r0
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	4413      	add	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8002dac:	232e      	movs	r3, #46	; 0x2e
 8002dae:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3320      	adds	r3, #32
 8002db4:	f107 0113 	add.w	r1, r7, #19
 8002db8:	2201      	movs	r2, #1
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 ff95 	bl	8003cea <st7735_send_data>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8002dc8:	232e      	movs	r3, #46	; 0x2e
 8002dca:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3320      	adds	r3, #32
 8002dd0:	f107 0113 	add.w	r1, r7, #19
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 ff87 	bl	8003cea <st7735_send_data>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	4413      	add	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8002de4:	2337      	movs	r3, #55	; 0x37
 8002de6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3320      	adds	r3, #32
 8002dec:	f107 0113 	add.w	r1, r7, #19
 8002df0:	2201      	movs	r2, #1
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 ff79 	bl	8003cea <st7735_send_data>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 8002e00:	233f      	movs	r3, #63	; 0x3f
 8002e02:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3320      	adds	r3, #32
 8002e08:	f107 0113 	add.w	r1, r7, #19
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 ff6b 	bl	8003cea <st7735_send_data>
 8002e14:	4602      	mov	r2, r0
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	4413      	add	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3320      	adds	r3, #32
 8002e24:	f107 0113 	add.w	r1, r7, #19
 8002e28:	2201      	movs	r2, #1
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 ff5d 	bl	8003cea <st7735_send_data>
 8002e30:	4602      	mov	r2, r0
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	4413      	add	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	3320      	adds	r3, #32
 8002e40:	f107 0113 	add.w	r1, r7, #19
 8002e44:	2201      	movs	r2, #1
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 ff4f 	bl	8003cea <st7735_send_data>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	4413      	add	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8002e54:	2302      	movs	r3, #2
 8002e56:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3320      	adds	r3, #32
 8002e5c:	f107 0113 	add.w	r1, r7, #19
 8002e60:	2201      	movs	r2, #1
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 ff41 	bl	8003cea <st7735_send_data>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8002e70:	2310      	movs	r3, #16
 8002e72:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	3320      	adds	r3, #32
 8002e78:	f107 0113 	add.w	r1, r7, #19
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 ff33 	bl	8003cea <st7735_send_data>
 8002e84:	4602      	mov	r2, r0
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	4413      	add	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f103 0020 	add.w	r0, r3, #32
 8002e96:	f107 0213 	add.w	r2, r7, #19
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	2113      	movs	r1, #19
 8002e9e:	f000 ff0f 	bl	8003cc0 <st7735_write_reg>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f103 0020 	add.w	r0, r3, #32
 8002eb0:	f107 0213 	add.w	r2, r7, #19
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	2129      	movs	r1, #41	; 0x29
 8002eb8:	f000 ff02 	bl	8003cc0 <st7735_write_reg>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f944 	bl	8003154 <ST7735_SetOrientation>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295
 8002ede:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002ee0:	697b      	ldr	r3, [r7, #20]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3320      	adds	r3, #32
 8002f0e:	f107 0208 	add.w	r2, r7, #8
 8002f12:	21da      	movs	r1, #218	; 0xda
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fec0 	bl	8003c9a <st7735_read_reg>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	e02d      	b.n	8002f84 <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f103 0020 	add.w	r0, r3, #32
 8002f2e:	f107 0308 	add.w	r3, r7, #8
 8002f32:	3301      	adds	r3, #1
 8002f34:	461a      	mov	r2, r3
 8002f36:	21db      	movs	r1, #219	; 0xdb
 8002f38:	f000 feaf 	bl	8003c9a <st7735_read_reg>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	e01c      	b.n	8002f84 <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f103 0020 	add.w	r0, r3, #32
 8002f50:	f107 0308 	add.w	r3, r7, #8
 8002f54:	3302      	adds	r3, #2
 8002f56:	461a      	mov	r2, r3
 8002f58:	21dc      	movs	r1, #220	; 0xdc
 8002f5a:	f000 fe9e 	bl	8003c9a <st7735_read_reg>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 8002f64:	f04f 33ff 	mov.w	r3, #4294967295
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	e00b      	b.n	8002f84 <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 8002f6c:	7abb      	ldrb	r3, [r7, #10]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	7a7b      	ldrb	r3, [r7, #9]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	431a      	orrs	r2, r3
 8002f76:	7a3b      	ldrb	r3, [r7, #8]
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002f84:	68fb      	ldr	r3, [r7, #12]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f103 0020 	add.w	r0, r3, #32
 8002fa2:	f107 020b 	add.w	r2, r7, #11
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2113      	movs	r1, #19
 8002faa:	f000 fe89 	bl	8003cc0 <st7735_write_reg>
 8002fae:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8002fb0:	210a      	movs	r1, #10
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fe57 	bl	8003c66 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f103 0020 	add.w	r0, r3, #32
 8002fbe:	f107 020b 	add.w	r2, r7, #11
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2129      	movs	r1, #41	; 0x29
 8002fc6:	f000 fe7b 	bl	8003cc0 <st7735_write_reg>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8002fd2:	210a      	movs	r1, #10
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fe46 	bl	8003c66 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f103 0020 	add.w	r0, r3, #32
 8002fe0:	f107 020b 	add.w	r2, r7, #11
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2136      	movs	r1, #54	; 0x36
 8002fe8:	f000 fe6a 	bl	8003cc0 <st7735_write_reg>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002ff4:	4b16      	ldr	r3, [pc, #88]	; (8003050 <ST7735_DisplayOn+0xc0>)
 8002ff6:	7b1b      	ldrb	r3, [r3, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10a      	bne.n	8003012 <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002ffc:	4b14      	ldr	r3, [pc, #80]	; (8003050 <ST7735_DisplayOn+0xc0>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	4a14      	ldr	r2, [pc, #80]	; (8003054 <ST7735_DisplayOn+0xc4>)
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800300a:	f043 0308 	orr.w	r3, r3, #8
 800300e:	b2db      	uxtb	r3, r3
 8003010:	e006      	b.n	8003020 <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8003012:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <ST7735_DisplayOn+0xc0>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	4a0f      	ldr	r2, [pc, #60]	; (8003054 <ST7735_DisplayOn+0xc4>)
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4413      	add	r3, r2
 800301c:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800301e:	b2db      	uxtb	r3, r3
 8003020:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3320      	adds	r3, #32
 8003026:	f107 010b 	add.w	r1, r7, #11
 800302a:	2201      	movs	r2, #1
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fe5c 	bl	8003cea <st7735_send_data>
 8003032:	4602      	mov	r2, r0
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 8003040:	f04f 33ff 	mov.w	r3, #4294967295
 8003044:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003046:	68fb      	ldr	r3, [r7, #12]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	24000898 	.word	0x24000898
 8003054:	2400007c 	.word	0x2400007c

08003058 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f103 0020 	add.w	r0, r3, #32
 800306a:	f107 020b 	add.w	r2, r7, #11
 800306e:	2300      	movs	r3, #0
 8003070:	2113      	movs	r1, #19
 8003072:	f000 fe25 	bl	8003cc0 <st7735_write_reg>
 8003076:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8003078:	210a      	movs	r1, #10
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fdf3 	bl	8003c66 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f103 0020 	add.w	r0, r3, #32
 8003086:	f107 020b 	add.w	r2, r7, #11
 800308a:	2300      	movs	r3, #0
 800308c:	2128      	movs	r1, #40	; 0x28
 800308e:	f000 fe17 	bl	8003cc0 <st7735_write_reg>
 8003092:	4602      	mov	r2, r0
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 800309a:	210a      	movs	r1, #10
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fde2 	bl	8003c66 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f103 0020 	add.w	r0, r3, #32
 80030a8:	f107 020b 	add.w	r2, r7, #11
 80030ac:	2300      	movs	r3, #0
 80030ae:	2136      	movs	r1, #54	; 0x36
 80030b0:	f000 fe06 	bl	8003cc0 <st7735_write_reg>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4413      	add	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80030bc:	4b16      	ldr	r3, [pc, #88]	; (8003118 <ST7735_DisplayOff+0xc0>)
 80030be:	7b1b      	ldrb	r3, [r3, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <ST7735_DisplayOff+0xc0>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a14      	ldr	r2, [pc, #80]	; (800311c <ST7735_DisplayOff+0xc4>)
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80030d2:	f043 0308 	orr.w	r3, r3, #8
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	e006      	b.n	80030e8 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80030da:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <ST7735_DisplayOff+0xc0>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	4a0f      	ldr	r2, [pc, #60]	; (800311c <ST7735_DisplayOff+0xc4>)
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3320      	adds	r3, #32
 80030ee:	f107 010b 	add.w	r1, r7, #11
 80030f2:	2201      	movs	r2, #1
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fdf8 	bl	8003cea <st7735_send_data>
 80030fa:	4602      	mov	r2, r0
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4413      	add	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 8003108:	f04f 33ff 	mov.w	r3, #4294967295
 800310c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	24000898 	.word	0x24000898
 800311c:	2400007c 	.word	0x2400007c

08003120 <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 800312a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 8003144:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af02      	add	r7, sp, #8
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <ST7735_SetOrientation+0x1a>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d119      	bne.n	80031a2 <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	7b5b      	ldrb	r3, [r3, #13]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d106      	bne.n	8003184 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 8003176:	4b3c      	ldr	r3, [pc, #240]	; (8003268 <ST7735_SetOrientation+0x114>)
 8003178:	2250      	movs	r2, #80	; 0x50
 800317a:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 800317c:	4b3a      	ldr	r3, [pc, #232]	; (8003268 <ST7735_SetOrientation+0x114>)
 800317e:	22a0      	movs	r2, #160	; 0xa0
 8003180:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8003182:	e028      	b.n	80031d6 <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	7b5b      	ldrb	r3, [r3, #13]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <ST7735_SetOrientation+0x40>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	7b5b      	ldrb	r3, [r3, #13]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d120      	bne.n	80031d6 <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 8003194:	4b34      	ldr	r3, [pc, #208]	; (8003268 <ST7735_SetOrientation+0x114>)
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 800319a:	4b33      	ldr	r3, [pc, #204]	; (8003268 <ST7735_SetOrientation+0x114>)
 800319c:	22a0      	movs	r2, #160	; 0xa0
 800319e:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80031a0:	e019      	b.n	80031d6 <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	7b5b      	ldrb	r3, [r3, #13]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d106      	bne.n	80031b8 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 80031aa:	4b2f      	ldr	r3, [pc, #188]	; (8003268 <ST7735_SetOrientation+0x114>)
 80031ac:	22a0      	movs	r2, #160	; 0xa0
 80031ae:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 80031b0:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <ST7735_SetOrientation+0x114>)
 80031b2:	2250      	movs	r2, #80	; 0x50
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	e00f      	b.n	80031d8 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	7b5b      	ldrb	r3, [r3, #13]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <ST7735_SetOrientation+0x74>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	7b5b      	ldrb	r3, [r3, #13]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d107      	bne.n	80031d8 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 80031c8:	4b27      	ldr	r3, [pc, #156]	; (8003268 <ST7735_SetOrientation+0x114>)
 80031ca:	22a0      	movs	r2, #160	; 0xa0
 80031cc:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 80031ce:	4b26      	ldr	r3, [pc, #152]	; (8003268 <ST7735_SetOrientation+0x114>)
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	605a      	str	r2, [r3, #4]
 80031d4:	e000      	b.n	80031d8 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80031d6:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4a22      	ldr	r2, [pc, #136]	; (8003268 <ST7735_SetOrientation+0x114>)
 80031de:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	7b1a      	ldrb	r2, [r3, #12]
 80031e4:	4b20      	ldr	r3, [pc, #128]	; (8003268 <ST7735_SetOrientation+0x114>)
 80031e6:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	7b5a      	ldrb	r2, [r3, #13]
 80031ec:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <ST7735_SetOrientation+0x114>)
 80031ee:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <ST7735_SetOrientation+0x114>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <ST7735_SetOrientation+0x114>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	4613      	mov	r3, r2
 80031fc:	2200      	movs	r2, #0
 80031fe:	2100      	movs	r1, #0
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fbdf 	bl	80039c4 <ST7735_SetDisplayWindow>
 8003206:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003208:	4b17      	ldr	r3, [pc, #92]	; (8003268 <ST7735_SetOrientation+0x114>)
 800320a:	7b1b      	ldrb	r3, [r3, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8003210:	4b15      	ldr	r3, [pc, #84]	; (8003268 <ST7735_SetOrientation+0x114>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	4a15      	ldr	r2, [pc, #84]	; (800326c <ST7735_SetOrientation+0x118>)
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800321e:	f043 0308 	orr.w	r3, r3, #8
 8003222:	b2db      	uxtb	r3, r3
 8003224:	e006      	b.n	8003234 <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8003226:	4b10      	ldr	r3, [pc, #64]	; (8003268 <ST7735_SetOrientation+0x114>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	4a10      	ldr	r2, [pc, #64]	; (800326c <ST7735_SetOrientation+0x118>)
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003232:	b2db      	uxtb	r3, r3
 8003234:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f103 0020 	add.w	r0, r3, #32
 800323c:	f107 020b 	add.w	r2, r7, #11
 8003240:	2301      	movs	r3, #1
 8003242:	2136      	movs	r1, #54	; 0x36
 8003244:	f000 fd3c 	bl	8003cc0 <st7735_write_reg>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4413      	add	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 8003256:	f04f 33ff 	mov.w	r3, #4294967295
 800325a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800325c:	68fb      	ldr	r3, [r7, #12]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	24000898 	.word	0x24000898
 800326c:	2400007c 	.word	0x2400007c

08003270 <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <ST7735_GetOrientation+0x20>)
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	24000898 	.word	0x24000898

08003294 <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 80032a0:	4b59      	ldr	r3, [pc, #356]	; (8003408 <ST7735_SetCursor+0x174>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d821      	bhi.n	80032ec <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 80032a8:	4b57      	ldr	r3, [pc, #348]	; (8003408 <ST7735_SetCursor+0x174>)
 80032aa:	7b5b      	ldrb	r3, [r3, #13]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d10e      	bne.n	80032ce <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 80032b0:	4b55      	ldr	r3, [pc, #340]	; (8003408 <ST7735_SetCursor+0x174>)
 80032b2:	7b1b      	ldrb	r3, [r3, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d106      	bne.n	80032c6 <ST7735_SetCursor+0x32>
				Xpos += 26;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	331a      	adds	r3, #26
 80032bc:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3301      	adds	r3, #1
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	e033      	b.n	800332e <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3318      	adds	r3, #24
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	e02f      	b.n	800332e <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80032ce:	4b4e      	ldr	r3, [pc, #312]	; (8003408 <ST7735_SetCursor+0x174>)
 80032d0:	7b5b      	ldrb	r3, [r3, #13]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d12b      	bne.n	800332e <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80032d6:	4b4c      	ldr	r3, [pc, #304]	; (8003408 <ST7735_SetCursor+0x174>)
 80032d8:	7b1b      	ldrb	r3, [r3, #12]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d127      	bne.n	800332e <ST7735_SetCursor+0x9a>
				Xpos += 2;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	3302      	adds	r3, #2
 80032e2:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3301      	adds	r3, #1
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	e020      	b.n	800332e <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 80032ec:	4b46      	ldr	r3, [pc, #280]	; (8003408 <ST7735_SetCursor+0x174>)
 80032ee:	7b5b      	ldrb	r3, [r3, #13]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d10e      	bne.n	8003312 <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80032f4:	4b44      	ldr	r3, [pc, #272]	; (8003408 <ST7735_SetCursor+0x174>)
 80032f6:	7b1b      	ldrb	r3, [r3, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d106      	bne.n	800330a <ST7735_SetCursor+0x76>
				Xpos += 1;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	3301      	adds	r3, #1
 8003300:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	331a      	adds	r3, #26
 8003306:	607b      	str	r3, [r7, #4]
 8003308:	e011      	b.n	800332e <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3318      	adds	r3, #24
 800330e:	607b      	str	r3, [r7, #4]
 8003310:	e00d      	b.n	800332e <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8003312:	4b3d      	ldr	r3, [pc, #244]	; (8003408 <ST7735_SetCursor+0x174>)
 8003314:	7b5b      	ldrb	r3, [r3, #13]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d109      	bne.n	800332e <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 800331a:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <ST7735_SetCursor+0x174>)
 800331c:	7b1b      	ldrb	r3, [r3, #12]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d105      	bne.n	800332e <ST7735_SetCursor+0x9a>
				Xpos += 1;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	3301      	adds	r3, #1
 8003326:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3302      	adds	r3, #2
 800332c:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f103 0020 	add.w	r0, r3, #32
 8003334:	f107 0213 	add.w	r2, r7, #19
 8003338:	2300      	movs	r3, #0
 800333a:	212a      	movs	r1, #42	; 0x2a
 800333c:	f000 fcc0 	bl	8003cc0 <st7735_write_reg>
 8003340:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	b2db      	uxtb	r3, r3
 8003348:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	3320      	adds	r3, #32
 800334e:	f107 0113 	add.w	r1, r7, #19
 8003352:	2201      	movs	r2, #1
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fcc8 	bl	8003cea <st7735_send_data>
 800335a:	4602      	mov	r2, r0
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	4413      	add	r3, r2
 8003360:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3320      	adds	r3, #32
 800336c:	f107 0113 	add.w	r1, r7, #19
 8003370:	2201      	movs	r2, #1
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fcb9 	bl	8003cea <st7735_send_data>
 8003378:	4602      	mov	r2, r0
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	4413      	add	r3, r2
 800337e:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f103 0020 	add.w	r0, r3, #32
 8003386:	f107 0213 	add.w	r2, r7, #19
 800338a:	2300      	movs	r3, #0
 800338c:	212b      	movs	r1, #43	; 0x2b
 800338e:	f000 fc97 	bl	8003cc0 <st7735_write_reg>
 8003392:	4602      	mov	r2, r0
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	4413      	add	r3, r2
 8003398:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	0a1b      	lsrs	r3, r3, #8
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	3320      	adds	r3, #32
 80033a6:	f107 0113 	add.w	r1, r7, #19
 80033aa:	2201      	movs	r2, #1
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fc9c 	bl	8003cea <st7735_send_data>
 80033b2:	4602      	mov	r2, r0
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	4413      	add	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3320      	adds	r3, #32
 80033c4:	f107 0113 	add.w	r1, r7, #19
 80033c8:	2201      	movs	r2, #1
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fc8d 	bl	8003cea <st7735_send_data>
 80033d0:	4602      	mov	r2, r0
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	4413      	add	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f103 0020 	add.w	r0, r3, #32
 80033de:	f107 0213 	add.w	r2, r7, #19
 80033e2:	2300      	movs	r3, #0
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	f000 fc6b 	bl	8003cc0 <st7735_write_reg>
 80033ea:	4602      	mov	r2, r0
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	4413      	add	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295
 80033fc:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80033fe:	697b      	ldr	r3, [r7, #20]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	24000898 	.word	0x24000898

0800340c <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b090      	sub	sp, #64	; 0x40
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	330a      	adds	r3, #10
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	330b      	adds	r3, #11
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	021b      	lsls	r3, r3, #8
 8003432:	441a      	add	r2, r3
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	330c      	adds	r3, #12
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	041b      	lsls	r3, r3, #16
 800343c:	441a      	add	r2, r3
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	330d      	adds	r3, #13
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	061b      	lsls	r3, r3, #24
 8003446:	4413      	add	r3, r2
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	3312      	adds	r3, #18
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	3313      	adds	r3, #19
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	441a      	add	r2, r3
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	3314      	adds	r3, #20
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	041b      	lsls	r3, r3, #16
 8003464:	441a      	add	r2, r3
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	3315      	adds	r3, #21
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	4413      	add	r3, r2
 8003470:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	3316      	adds	r3, #22
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	3317      	adds	r3, #23
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	441a      	add	r2, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	3318      	adds	r3, #24
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	041b      	lsls	r3, r3, #16
 800348c:	441a      	add	r2, r3
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	3319      	adds	r3, #25
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	061b      	lsls	r3, r3, #24
 8003496:	4413      	add	r3, r2
 8003498:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	3302      	adds	r3, #2
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	3303      	adds	r3, #3
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	441a      	add	r2, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	3304      	adds	r3, #4
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	041b      	lsls	r3, r3, #16
 80034b4:	441a      	add	r2, r3
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	3305      	adds	r3, #5
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	061b      	lsls	r3, r3, #24
 80034be:	4413      	add	r3, r2
 80034c0:	61fb      	str	r3, [r7, #28]
  size = size - index;
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ce:	4413      	add	r3, r2
 80034d0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 80034d2:	4b51      	ldr	r3, [pc, #324]	; (8003618 <ST7735_DrawBitmap+0x20c>)
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	1ad2      	subs	r2, r2, r3
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fa6a 	bl	80039c4 <ST7735_SetDisplayWindow>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 80034f6:	f04f 33ff 	mov.w	r3, #4294967295
 80034fa:	637b      	str	r3, [r7, #52]	; 0x34
 80034fc:	e087      	b.n	800360e <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80034fe:	4b46      	ldr	r3, [pc, #280]	; (8003618 <ST7735_DrawBitmap+0x20c>)
 8003500:	7b1b      	ldrb	r3, [r3, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 8003506:	4b44      	ldr	r3, [pc, #272]	; (8003618 <ST7735_DrawBitmap+0x20c>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	4a44      	ldr	r2, [pc, #272]	; (800361c <ST7735_DrawBitmap+0x210>)
 800350c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003510:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003512:	f043 0308 	orr.w	r3, r3, #8
 8003516:	b2db      	uxtb	r3, r3
 8003518:	e005      	b.n	8003526 <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 800351a:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <ST7735_DrawBitmap+0x20c>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	4a3f      	ldr	r2, [pc, #252]	; (800361c <ST7735_DrawBitmap+0x210>)
 8003520:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003524:	b2db      	uxtb	r3, r3
 8003526:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f103 0020 	add.w	r0, r3, #32
 800352e:	f107 0213 	add.w	r2, r7, #19
 8003532:	2301      	movs	r3, #1
 8003534:	2136      	movs	r1, #54	; 0x36
 8003536:	f000 fbc3 	bl	8003cc0 <st7735_write_reg>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 8003540:	f04f 33ff 	mov.w	r3, #4294967295
 8003544:	637b      	str	r3, [r7, #52]	; 0x34
 8003546:	e062      	b.n	800360e <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	68b9      	ldr	r1, [r7, #8]
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f7ff fea1 	bl	8003294 <ST7735_SetCursor>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 8003558:	f04f 33ff 	mov.w	r3, #4294967295
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
 800355e:	e056      	b.n	800360e <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	785b      	ldrb	r3, [r3, #1]
 8003564:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3320      	adds	r3, #32
 8003570:	f107 0114 	add.w	r1, r7, #20
 8003574:	2202      	movs	r2, #2
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fbb7 	bl	8003cea <st7735_send_data>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8003588:	e009      	b.n	800359e <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	3302      	adds	r3, #2
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c
        pbmp += 2;
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	3302      	adds	r3, #2
 8003594:	633b      	str	r3, [r7, #48]	; 0x30
      }while(counter < size);
 8003596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	429a      	cmp	r2, r3
 800359c:	d3e0      	bcc.n	8003560 <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800359e:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <ST7735_DrawBitmap+0x20c>)
 80035a0:	7b1b      	ldrb	r3, [r3, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80035a6:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <ST7735_DrawBitmap+0x20c>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	4a1c      	ldr	r2, [pc, #112]	; (800361c <ST7735_DrawBitmap+0x210>)
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80035b4:	f043 0308 	orr.w	r3, r3, #8
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	e006      	b.n	80035ca <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80035bc:	4b16      	ldr	r3, [pc, #88]	; (8003618 <ST7735_DrawBitmap+0x20c>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4a16      	ldr	r2, [pc, #88]	; (800361c <ST7735_DrawBitmap+0x210>)
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f103 0020 	add.w	r0, r3, #32
 80035d2:	f107 0213 	add.w	r2, r7, #19
 80035d6:	2301      	movs	r3, #1
 80035d8:	2136      	movs	r1, #54	; 0x36
 80035da:	f000 fb71 	bl	8003cc0 <st7735_write_reg>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 80035e4:	f04f 33ff 	mov.w	r3, #4294967295
 80035e8:	637b      	str	r3, [r7, #52]	; 0x34
 80035ea:	e010      	b.n	800360e <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <ST7735_DrawBitmap+0x20c>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4b09      	ldr	r3, [pc, #36]	; (8003618 <ST7735_DrawBitmap+0x20c>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	4613      	mov	r3, r2
 80035f8:	2200      	movs	r2, #0
 80035fa:	2100      	movs	r1, #0
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f9e1 	bl	80039c4 <ST7735_SetDisplayWindow>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 8003608:	f04f 33ff 	mov.w	r3, #4294967295
 800360c:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
  }

  return ret;
 800360e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003610:	4618      	mov	r0, r3
 8003612:	3738      	adds	r7, #56	; 0x38
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	24000898 	.word	0x24000898
 800361c:	2400007c 	.word	0x2400007c

08003620 <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363a:	441a      	add	r2, r3
 800363c:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <ST7735_FillRGBRect+0xcc>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d806      	bhi.n	8003652 <ST7735_FillRGBRect+0x32>
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	441a      	add	r2, r3
 800364a:	4b28      	ldr	r3, [pc, #160]	; (80036ec <ST7735_FillRGBRect+0xcc>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	429a      	cmp	r2, r3
 8003650:	d903      	bls.n	800365a <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 8003652:	f04f 33ff 	mov.w	r3, #4294967295
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	e042      	b.n	80036e0 <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 800365a:	2300      	movs	r3, #0
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	e03b      	b.n	80036d8 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4413      	add	r3, r2
 8003666:	461a      	mov	r2, r3
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f7ff fe12 	bl	8003294 <ST7735_SetCursor>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	e029      	b.n	80036d2 <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	e013      	b.n	80036ac <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	7811      	ldrb	r1, [r2, #0]
 800368c:	4a18      	ldr	r2, [pc, #96]	; (80036f0 <ST7735_FillRGBRect+0xd0>)
 800368e:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	3301      	adds	r3, #1
 800369a:	7811      	ldrb	r1, [r2, #0]
 800369c:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <ST7735_FillRGBRect+0xd0>)
 800369e:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	3302      	adds	r3, #2
 80036a4:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	3301      	adds	r3, #1
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d3e7      	bcc.n	8003684 <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f103 0020 	add.w	r0, r3, #32
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	461a      	mov	r2, r3
 80036c0:	490b      	ldr	r1, [pc, #44]	; (80036f0 <ST7735_FillRGBRect+0xd0>)
 80036c2:	f000 fb12 	bl	8003cea <st7735_send_data>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 80036cc:	f04f 33ff 	mov.w	r3, #4294967295
 80036d0:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	3301      	adds	r3, #1
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	429a      	cmp	r2, r3
 80036de:	d3bf      	bcc.n	8003660 <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 80036e0:	69fb      	ldr	r3, [r7, #28]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	24000898 	.word	0x24000898
 80036f0:	240008a8 	.word	0x240008a8

080036f4 <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	441a      	add	r2, r3
 800370c:	4b1f      	ldr	r3, [pc, #124]	; (800378c <ST7735_DrawHLine+0x98>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d903      	bls.n	800371c <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 8003714:	f04f 33ff 	mov.w	r3, #4294967295
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	e032      	b.n	8003782 <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f7ff fdb7 	bl	8003294 <ST7735_SetCursor>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 800372c:	f04f 33ff 	mov.w	r3, #4294967295
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	e026      	b.n	8003782 <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 8003734:	2300      	movs	r3, #0
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	e010      	b.n	800375c <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	0a1a      	lsrs	r2, r3, #8
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	b2d1      	uxtb	r1, r2
 8003744:	4a12      	ldr	r2, [pc, #72]	; (8003790 <ST7735_DrawHLine+0x9c>)
 8003746:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	3301      	adds	r3, #1
 800374e:	6a3a      	ldr	r2, [r7, #32]
 8003750:	b2d1      	uxtb	r1, r2
 8003752:	4a0f      	ldr	r2, [pc, #60]	; (8003790 <ST7735_DrawHLine+0x9c>)
 8003754:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	3301      	adds	r3, #1
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d3ea      	bcc.n	800373a <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f103 0020 	add.w	r0, r3, #32
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	461a      	mov	r2, r3
 8003770:	4907      	ldr	r1, [pc, #28]	; (8003790 <ST7735_DrawHLine+0x9c>)
 8003772:	f000 faba 	bl	8003cea <st7735_send_data>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 800377c:	f04f 33ff 	mov.w	r3, #4294967295
 8003780:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8003782:	697b      	ldr	r3, [r7, #20]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	24000898 	.word	0x24000898
 8003790:	24000b28 	.word	0x24000b28

08003794 <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	441a      	add	r2, r3
 80037ac:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <ST7735_DrawVLine+0x64>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d903      	bls.n	80037bc <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e018      	b.n	80037ee <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 80037bc:	2300      	movs	r3, #0
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	e011      	b.n	80037e6 <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	441a      	add	r2, r3
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f841 	bl	8003854 <ST7735_SetPixel>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295
 80037dc:	617b      	str	r3, [r7, #20]
        break;
 80037de:	e006      	b.n	80037ee <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	3301      	adds	r3, #1
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d3e9      	bcc.n	80037c2 <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 80037ee:	697b      	ldr	r3, [r7, #20]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	24000898 	.word	0x24000898

080037fc <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	; 0x28
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
 8003816:	e014      	b.n	8003842 <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f7ff ff66 	bl	80036f4 <ST7735_DrawHLine>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 800382e:	f04f 33ff 	mov.w	r3, #4294967295
 8003832:	61fb      	str	r3, [r7, #28]
      break;
 8003834:	e009      	b.n	800384a <ST7735_FillRect+0x4e>
    }
    y_pos++;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	3301      	adds	r3, #1
 800383a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	3301      	adds	r3, #1
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003846:	429a      	cmp	r2, r3
 8003848:	d3e6      	bcc.n	8003818 <ST7735_FillRect+0x1c>
  }

  return ret;
 800384a:	69fb      	ldr	r3, [r7, #28]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3720      	adds	r7, #32
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	b29b      	uxth	r3, r3
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	b29b      	uxth	r3, r3
 800386e:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	b29a      	uxth	r2, r3
 8003876:	8a7b      	ldrh	r3, [r7, #18]
 8003878:	4313      	orrs	r3, r2
 800387a:	b29b      	uxth	r3, r3
 800387c:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 800387e:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <ST7735_SetPixel+0x84>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	429a      	cmp	r2, r3
 8003886:	d204      	bcs.n	8003892 <ST7735_SetPixel+0x3e>
 8003888:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <ST7735_SetPixel+0x84>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	429a      	cmp	r2, r3
 8003890:	d303      	bcc.n	800389a <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 8003892:	f04f 33ff 	mov.w	r3, #4294967295
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	e019      	b.n	80038ce <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	68b9      	ldr	r1, [r7, #8]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f7ff fcf8 	bl	8003294 <ST7735_SetCursor>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 80038aa:	f04f 33ff 	mov.w	r3, #4294967295
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	e00d      	b.n	80038ce <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3320      	adds	r3, #32
 80038b6:	f107 0112 	add.w	r1, r7, #18
 80038ba:	2202      	movs	r2, #2
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fa14 	bl	8003cea <st7735_send_data>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 80038c8:	f04f 33ff 	mov.w	r3, #4294967295
 80038cc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80038ce:	697b      	ldr	r3, [r7, #20]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	24000898 	.word	0x24000898

080038dc <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f7ff fcd0 	bl	8003294 <ST7735_SetCursor>
 80038f4:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	3320      	adds	r3, #32
 80038fa:	f107 0211 	add.w	r2, r7, #17
 80038fe:	212e      	movs	r1, #46	; 0x2e
 8003900:	4618      	mov	r0, r3
 8003902:	f000 f9ca 	bl	8003c9a <st7735_read_reg>
 8003906:	4602      	mov	r2, r0
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	4413      	add	r3, r2
 800390c:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3320      	adds	r3, #32
 8003912:	f107 0111 	add.w	r1, r7, #17
 8003916:	2201      	movs	r2, #1
 8003918:	4618      	mov	r0, r3
 800391a:	f000 f9f8 	bl	8003d0e <st7735_recv_data>
 800391e:	4602      	mov	r2, r0
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	4413      	add	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3320      	adds	r3, #32
 800392a:	f107 0113 	add.w	r1, r7, #19
 800392e:	2201      	movs	r2, #1
 8003930:	4618      	mov	r0, r3
 8003932:	f000 f9ec 	bl	8003d0e <st7735_recv_data>
 8003936:	4602      	mov	r2, r0
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	4413      	add	r3, r2
 800393c:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3320      	adds	r3, #32
 8003942:	f107 0112 	add.w	r1, r7, #18
 8003946:	2201      	movs	r2, #1
 8003948:	4618      	mov	r0, r3
 800394a:	f000 f9e0 	bl	8003d0e <st7735_recv_data>
 800394e:	4602      	mov	r2, r0
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	4413      	add	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8003956:	7cfb      	ldrb	r3, [r7, #19]
 8003958:	461a      	mov	r2, r3
 800395a:	7cbb      	ldrb	r3, [r7, #18]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	441a      	add	r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 800396a:	f04f 33ff 	mov.w	r3, #4294967295
 800396e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003970:	697b      	ldr	r3, [r7, #20]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <ST7735_GetXSize+0x20>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	24000898 	.word	0x24000898

080039a0 <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <ST7735_GetYSize+0x20>)
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	24000898 	.word	0x24000898

080039c4 <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 80039d2:	4b7d      	ldr	r3, [pc, #500]	; (8003bc8 <ST7735_SetDisplayWindow+0x204>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d821      	bhi.n	8003a1e <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 80039da:	4b7b      	ldr	r3, [pc, #492]	; (8003bc8 <ST7735_SetDisplayWindow+0x204>)
 80039dc:	7b5b      	ldrb	r3, [r3, #13]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d10e      	bne.n	8003a00 <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 80039e2:	4b79      	ldr	r3, [pc, #484]	; (8003bc8 <ST7735_SetDisplayWindow+0x204>)
 80039e4:	7b1b      	ldrb	r3, [r3, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	331a      	adds	r3, #26
 80039ee:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3301      	adds	r3, #1
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	e036      	b.n	8003a66 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	3318      	adds	r3, #24
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	e032      	b.n	8003a66 <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8003a00:	4b71      	ldr	r3, [pc, #452]	; (8003bc8 <ST7735_SetDisplayWindow+0x204>)
 8003a02:	7b5b      	ldrb	r3, [r3, #13]
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d12e      	bne.n	8003a66 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8003a08:	4b6f      	ldr	r3, [pc, #444]	; (8003bc8 <ST7735_SetDisplayWindow+0x204>)
 8003a0a:	7b1b      	ldrb	r3, [r3, #12]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d12a      	bne.n	8003a66 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	3302      	adds	r3, #2
 8003a14:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	607b      	str	r3, [r7, #4]
 8003a1c:	e023      	b.n	8003a66 <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8003a1e:	4b6a      	ldr	r3, [pc, #424]	; (8003bc8 <ST7735_SetDisplayWindow+0x204>)
 8003a20:	7b5b      	ldrb	r3, [r3, #13]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d111      	bne.n	8003a4a <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8003a26:	4b68      	ldr	r3, [pc, #416]	; (8003bc8 <ST7735_SetDisplayWindow+0x204>)
 8003a28:	7b1b      	ldrb	r3, [r3, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	3301      	adds	r3, #1
 8003a32:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	331a      	adds	r3, #26
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	e014      	b.n	8003a66 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3318      	adds	r3, #24
 8003a46:	607b      	str	r3, [r7, #4]
 8003a48:	e00d      	b.n	8003a66 <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8003a4a:	4b5f      	ldr	r3, [pc, #380]	; (8003bc8 <ST7735_SetDisplayWindow+0x204>)
 8003a4c:	7b5b      	ldrb	r3, [r3, #13]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d109      	bne.n	8003a66 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8003a52:	4b5d      	ldr	r3, [pc, #372]	; (8003bc8 <ST7735_SetDisplayWindow+0x204>)
 8003a54:	7b1b      	ldrb	r3, [r3, #12]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d105      	bne.n	8003a66 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3302      	adds	r3, #2
 8003a64:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f103 0020 	add.w	r0, r3, #32
 8003a6c:	f107 0213 	add.w	r2, r7, #19
 8003a70:	2300      	movs	r3, #0
 8003a72:	212a      	movs	r1, #42	; 0x2a
 8003a74:	f000 f924 	bl	8003cc0 <st7735_write_reg>
 8003a78:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	0a1b      	lsrs	r3, r3, #8
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3320      	adds	r3, #32
 8003a86:	f107 0113 	add.w	r1, r7, #19
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 f92c 	bl	8003cea <st7735_send_data>
 8003a92:	4602      	mov	r2, r0
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	4413      	add	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	3320      	adds	r3, #32
 8003aa4:	f107 0113 	add.w	r1, r7, #19
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f91d 	bl	8003cea <st7735_send_data>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	4413      	add	r3, r2
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	0a1b      	lsrs	r3, r3, #8
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3320      	adds	r3, #32
 8003aca:	f107 0113 	add.w	r1, r7, #19
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 f90a 	bl	8003cea <st7735_send_data>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	4413      	add	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3320      	adds	r3, #32
 8003af4:	f107 0113 	add.w	r1, r7, #19
 8003af8:	2201      	movs	r2, #1
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 f8f5 	bl	8003cea <st7735_send_data>
 8003b00:	4602      	mov	r2, r0
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	4413      	add	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f103 0020 	add.w	r0, r3, #32
 8003b0e:	f107 0213 	add.w	r2, r7, #19
 8003b12:	2300      	movs	r3, #0
 8003b14:	212b      	movs	r1, #43	; 0x2b
 8003b16:	f000 f8d3 	bl	8003cc0 <st7735_write_reg>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	4413      	add	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3320      	adds	r3, #32
 8003b2e:	f107 0113 	add.w	r1, r7, #19
 8003b32:	2201      	movs	r2, #1
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 f8d8 	bl	8003cea <st7735_send_data>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	4413      	add	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3320      	adds	r3, #32
 8003b4c:	f107 0113 	add.w	r1, r7, #19
 8003b50:	2201      	movs	r2, #1
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 f8c9 	bl	8003cea <st7735_send_data>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	4413      	add	r3, r2
 8003b66:	3b01      	subs	r3, #1
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3320      	adds	r3, #32
 8003b72:	f107 0113 	add.w	r1, r7, #19
 8003b76:	2201      	movs	r2, #1
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f8b6 	bl	8003cea <st7735_send_data>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	4413      	add	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	4413      	add	r3, r2
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3320      	adds	r3, #32
 8003b9c:	f107 0113 	add.w	r1, r7, #19
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f8a1 	bl	8003cea <st7735_send_data>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	4413      	add	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8003bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bba:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003bbc:	697b      	ldr	r3, [r7, #20]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	24000898 	.word	0x24000898

08003bcc <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	7afa      	ldrb	r2, [r7, #11]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4610      	mov	r0, r2
 8003be8:	4798      	blx	r3
 8003bea:	4603      	mov	r3, r0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	460b      	mov	r3, r1
 8003c02:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	7af8      	ldrb	r0, [r7, #11]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4798      	blx	r3
 8003c14:	4603      	mov	r3, r0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b086      	sub	sp, #24
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	68b8      	ldr	r0, [r7, #8]
 8003c36:	4798      	blx	r3
 8003c38:	4603      	mov	r3, r0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b086      	sub	sp, #24
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	68b8      	ldr	r0, [r7, #8]
 8003c5a:	4798      	blx	r3
 8003c5c:	4603      	mov	r3, r0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	4798      	blx	r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8003c7a:	bf00      	nop
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	4798      	blx	r3
 8003c82:	4603      	mov	r3, r0
 8003c84:	461a      	mov	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d8f5      	bhi.n	8003c7c <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	607a      	str	r2, [r7, #4]
 8003ca6:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	6910      	ldr	r0, [r2, #16]
 8003cb0:	7af9      	ldrb	r1, [r7, #11]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4798      	blx	r3
 8003cb6:	4603      	mov	r3, r0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 8003cc0:	b590      	push	{r4, r7, lr}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681c      	ldr	r4, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6918      	ldr	r0, [r3, #16]
 8003cd8:	7af9      	ldrb	r1, [r7, #11]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	47a0      	blx	r4
 8003ce0:	4603      	mov	r3, r0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd90      	pop	{r4, r7, pc}

08003cea <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	6910      	ldr	r0, [r2, #16]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	4798      	blx	r3
 8003d04:	4603      	mov	r3, r0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	6910      	ldr	r0, [r2, #16]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	4798      	blx	r3
 8003d28:	4603      	mov	r3, r0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d3a:	2003      	movs	r0, #3
 8003d3c:	f000 f98c 	bl	8004058 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d40:	f003 ff04 	bl	8007b4c <HAL_RCC_GetSysClockFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b15      	ldr	r3, [pc, #84]	; (8003d9c <HAL_Init+0x68>)
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	0a1b      	lsrs	r3, r3, #8
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	4913      	ldr	r1, [pc, #76]	; (8003da0 <HAL_Init+0x6c>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d5e:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <HAL_Init+0x68>)
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	4a0e      	ldr	r2, [pc, #56]	; (8003da0 <HAL_Init+0x6c>)
 8003d68:	5cd3      	ldrb	r3, [r2, r3]
 8003d6a:	f003 031f 	and.w	r3, r3, #31
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
 8003d74:	4a0b      	ldr	r2, [pc, #44]	; (8003da4 <HAL_Init+0x70>)
 8003d76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d78:	4a0b      	ldr	r2, [pc, #44]	; (8003da8 <HAL_Init+0x74>)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d7e:	2007      	movs	r0, #7
 8003d80:	f000 f814 	bl	8003dac <HAL_InitTick>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e002      	b.n	8003d94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003d8e:	f7fd fb7d 	bl	800148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	58024400 	.word	0x58024400
 8003da0:	0800ead8 	.word	0x0800ead8
 8003da4:	24000008 	.word	0x24000008
 8003da8:	24000004 	.word	0x24000004

08003dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003db4:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <HAL_InitTick+0x60>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e021      	b.n	8003e04 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003dc0:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <HAL_InitTick+0x64>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <HAL_InitTick+0x60>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 f971 	bl	80040be <HAL_SYSTICK_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e00e      	b.n	8003e04 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b0f      	cmp	r3, #15
 8003dea:	d80a      	bhi.n	8003e02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dec:	2200      	movs	r2, #0
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	f04f 30ff 	mov.w	r0, #4294967295
 8003df4:	f000 f93b 	bl	800406e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003df8:	4a06      	ldr	r2, [pc, #24]	; (8003e14 <HAL_InitTick+0x68>)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e000      	b.n	8003e04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	240000a0 	.word	0x240000a0
 8003e10:	24000004 	.word	0x24000004
 8003e14:	2400009c 	.word	0x2400009c

08003e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_IncTick+0x20>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_IncTick+0x24>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4413      	add	r3, r2
 8003e28:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <HAL_IncTick+0x24>)
 8003e2a:	6013      	str	r3, [r2, #0]
}
 8003e2c:	bf00      	nop
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	240000a0 	.word	0x240000a0
 8003e3c:	24000da8 	.word	0x24000da8

08003e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return uwTick;
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <HAL_GetTick+0x14>)
 8003e46:	681b      	ldr	r3, [r3, #0]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	24000da8 	.word	0x24000da8

08003e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e60:	f7ff ffee 	bl	8003e40 <HAL_GetTick>
 8003e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e70:	d005      	beq.n	8003e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e72:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <HAL_Delay+0x44>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e7e:	bf00      	nop
 8003e80:	f7ff ffde 	bl	8003e40 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d8f7      	bhi.n	8003e80 <HAL_Delay+0x28>
  {
  }
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	240000a0 	.word	0x240000a0

08003ea0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <HAL_GetREVID+0x14>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	0c1b      	lsrs	r3, r3, #16
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	5c001000 	.word	0x5c001000

08003eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <__NVIC_SetPriorityGrouping+0x40>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ee0:	4b06      	ldr	r3, [pc, #24]	; (8003efc <__NVIC_SetPriorityGrouping+0x44>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ee6:	4a04      	ldr	r2, [pc, #16]	; (8003ef8 <__NVIC_SetPriorityGrouping+0x40>)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	60d3      	str	r3, [r2, #12]
}
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000ed00 	.word	0xe000ed00
 8003efc:	05fa0000 	.word	0x05fa0000

08003f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f04:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <__NVIC_GetPriorityGrouping+0x18>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	0a1b      	lsrs	r3, r3, #8
 8003f0a:	f003 0307 	and.w	r3, r3, #7
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	e000ed00 	.word	0xe000ed00

08003f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	db0b      	blt.n	8003f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	f003 021f 	and.w	r2, r3, #31
 8003f34:	4907      	ldr	r1, [pc, #28]	; (8003f54 <__NVIC_EnableIRQ+0x38>)
 8003f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	2001      	movs	r0, #1
 8003f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	e000e100 	.word	0xe000e100

08003f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	6039      	str	r1, [r7, #0]
 8003f62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	db0a      	blt.n	8003f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	490c      	ldr	r1, [pc, #48]	; (8003fa4 <__NVIC_SetPriority+0x4c>)
 8003f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f76:	0112      	lsls	r2, r2, #4
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f80:	e00a      	b.n	8003f98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	4908      	ldr	r1, [pc, #32]	; (8003fa8 <__NVIC_SetPriority+0x50>)
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	3b04      	subs	r3, #4
 8003f90:	0112      	lsls	r2, r2, #4
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	440b      	add	r3, r1
 8003f96:	761a      	strb	r2, [r3, #24]
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	e000e100 	.word	0xe000e100
 8003fa8:	e000ed00 	.word	0xe000ed00

08003fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b089      	sub	sp, #36	; 0x24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f1c3 0307 	rsb	r3, r3, #7
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	bf28      	it	cs
 8003fca:	2304      	movcs	r3, #4
 8003fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	2b06      	cmp	r3, #6
 8003fd4:	d902      	bls.n	8003fdc <NVIC_EncodePriority+0x30>
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	3b03      	subs	r3, #3
 8003fda:	e000      	b.n	8003fde <NVIC_EncodePriority+0x32>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43da      	mvns	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	401a      	ands	r2, r3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffe:	43d9      	mvns	r1, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004004:	4313      	orrs	r3, r2
         );
}
 8004006:	4618      	mov	r0, r3
 8004008:	3724      	adds	r7, #36	; 0x24
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
	...

08004014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3b01      	subs	r3, #1
 8004020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004024:	d301      	bcc.n	800402a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004026:	2301      	movs	r3, #1
 8004028:	e00f      	b.n	800404a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800402a:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <SysTick_Config+0x40>)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3b01      	subs	r3, #1
 8004030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004032:	210f      	movs	r1, #15
 8004034:	f04f 30ff 	mov.w	r0, #4294967295
 8004038:	f7ff ff8e 	bl	8003f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <SysTick_Config+0x40>)
 800403e:	2200      	movs	r2, #0
 8004040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004042:	4b04      	ldr	r3, [pc, #16]	; (8004054 <SysTick_Config+0x40>)
 8004044:	2207      	movs	r2, #7
 8004046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	e000e010 	.word	0xe000e010

08004058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff ff29 	bl	8003eb8 <__NVIC_SetPriorityGrouping>
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b086      	sub	sp, #24
 8004072:	af00      	add	r7, sp, #0
 8004074:	4603      	mov	r3, r0
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
 800407a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800407c:	f7ff ff40 	bl	8003f00 <__NVIC_GetPriorityGrouping>
 8004080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	6978      	ldr	r0, [r7, #20]
 8004088:	f7ff ff90 	bl	8003fac <NVIC_EncodePriority>
 800408c:	4602      	mov	r2, r0
 800408e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff5f 	bl	8003f58 <__NVIC_SetPriority>
}
 800409a:	bf00      	nop
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	4603      	mov	r3, r0
 80040aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff ff33 	bl	8003f1c <__NVIC_EnableIRQ>
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff ffa4 	bl	8004014 <SysTick_Config>
 80040cc:	4603      	mov	r3, r0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80040e0:	f7ff feae 	bl	8003e40 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e316      	b.n	800471e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a66      	ldr	r2, [pc, #408]	; (8004290 <HAL_DMA_Init+0x1b8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d04a      	beq.n	8004190 <HAL_DMA_Init+0xb8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a65      	ldr	r2, [pc, #404]	; (8004294 <HAL_DMA_Init+0x1bc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d045      	beq.n	8004190 <HAL_DMA_Init+0xb8>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a63      	ldr	r2, [pc, #396]	; (8004298 <HAL_DMA_Init+0x1c0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d040      	beq.n	8004190 <HAL_DMA_Init+0xb8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a62      	ldr	r2, [pc, #392]	; (800429c <HAL_DMA_Init+0x1c4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d03b      	beq.n	8004190 <HAL_DMA_Init+0xb8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a60      	ldr	r2, [pc, #384]	; (80042a0 <HAL_DMA_Init+0x1c8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d036      	beq.n	8004190 <HAL_DMA_Init+0xb8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a5f      	ldr	r2, [pc, #380]	; (80042a4 <HAL_DMA_Init+0x1cc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d031      	beq.n	8004190 <HAL_DMA_Init+0xb8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a5d      	ldr	r2, [pc, #372]	; (80042a8 <HAL_DMA_Init+0x1d0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d02c      	beq.n	8004190 <HAL_DMA_Init+0xb8>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a5c      	ldr	r2, [pc, #368]	; (80042ac <HAL_DMA_Init+0x1d4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d027      	beq.n	8004190 <HAL_DMA_Init+0xb8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a5a      	ldr	r2, [pc, #360]	; (80042b0 <HAL_DMA_Init+0x1d8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d022      	beq.n	8004190 <HAL_DMA_Init+0xb8>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a59      	ldr	r2, [pc, #356]	; (80042b4 <HAL_DMA_Init+0x1dc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d01d      	beq.n	8004190 <HAL_DMA_Init+0xb8>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a57      	ldr	r2, [pc, #348]	; (80042b8 <HAL_DMA_Init+0x1e0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d018      	beq.n	8004190 <HAL_DMA_Init+0xb8>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a56      	ldr	r2, [pc, #344]	; (80042bc <HAL_DMA_Init+0x1e4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d013      	beq.n	8004190 <HAL_DMA_Init+0xb8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a54      	ldr	r2, [pc, #336]	; (80042c0 <HAL_DMA_Init+0x1e8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00e      	beq.n	8004190 <HAL_DMA_Init+0xb8>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a53      	ldr	r2, [pc, #332]	; (80042c4 <HAL_DMA_Init+0x1ec>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d009      	beq.n	8004190 <HAL_DMA_Init+0xb8>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a51      	ldr	r2, [pc, #324]	; (80042c8 <HAL_DMA_Init+0x1f0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d004      	beq.n	8004190 <HAL_DMA_Init+0xb8>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a50      	ldr	r2, [pc, #320]	; (80042cc <HAL_DMA_Init+0x1f4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d101      	bne.n	8004194 <HAL_DMA_Init+0xbc>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <HAL_DMA_Init+0xbe>
 8004194:	2300      	movs	r3, #0
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 813b 	beq.w	8004412 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a37      	ldr	r2, [pc, #220]	; (8004290 <HAL_DMA_Init+0x1b8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d04a      	beq.n	800424c <HAL_DMA_Init+0x174>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a36      	ldr	r2, [pc, #216]	; (8004294 <HAL_DMA_Init+0x1bc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d045      	beq.n	800424c <HAL_DMA_Init+0x174>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a34      	ldr	r2, [pc, #208]	; (8004298 <HAL_DMA_Init+0x1c0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d040      	beq.n	800424c <HAL_DMA_Init+0x174>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a33      	ldr	r2, [pc, #204]	; (800429c <HAL_DMA_Init+0x1c4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d03b      	beq.n	800424c <HAL_DMA_Init+0x174>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a31      	ldr	r2, [pc, #196]	; (80042a0 <HAL_DMA_Init+0x1c8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d036      	beq.n	800424c <HAL_DMA_Init+0x174>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a30      	ldr	r2, [pc, #192]	; (80042a4 <HAL_DMA_Init+0x1cc>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d031      	beq.n	800424c <HAL_DMA_Init+0x174>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a2e      	ldr	r2, [pc, #184]	; (80042a8 <HAL_DMA_Init+0x1d0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d02c      	beq.n	800424c <HAL_DMA_Init+0x174>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a2d      	ldr	r2, [pc, #180]	; (80042ac <HAL_DMA_Init+0x1d4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d027      	beq.n	800424c <HAL_DMA_Init+0x174>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a2b      	ldr	r2, [pc, #172]	; (80042b0 <HAL_DMA_Init+0x1d8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d022      	beq.n	800424c <HAL_DMA_Init+0x174>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a2a      	ldr	r2, [pc, #168]	; (80042b4 <HAL_DMA_Init+0x1dc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d01d      	beq.n	800424c <HAL_DMA_Init+0x174>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a28      	ldr	r2, [pc, #160]	; (80042b8 <HAL_DMA_Init+0x1e0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d018      	beq.n	800424c <HAL_DMA_Init+0x174>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a27      	ldr	r2, [pc, #156]	; (80042bc <HAL_DMA_Init+0x1e4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d013      	beq.n	800424c <HAL_DMA_Init+0x174>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a25      	ldr	r2, [pc, #148]	; (80042c0 <HAL_DMA_Init+0x1e8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00e      	beq.n	800424c <HAL_DMA_Init+0x174>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a24      	ldr	r2, [pc, #144]	; (80042c4 <HAL_DMA_Init+0x1ec>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d009      	beq.n	800424c <HAL_DMA_Init+0x174>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a22      	ldr	r2, [pc, #136]	; (80042c8 <HAL_DMA_Init+0x1f0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_DMA_Init+0x174>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a21      	ldr	r2, [pc, #132]	; (80042cc <HAL_DMA_Init+0x1f4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d108      	bne.n	800425e <HAL_DMA_Init+0x186>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0201 	bic.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	e007      	b.n	800426e <HAL_DMA_Init+0x196>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800426e:	e02f      	b.n	80042d0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004270:	f7ff fde6 	bl	8003e40 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b05      	cmp	r3, #5
 800427c:	d928      	bls.n	80042d0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2203      	movs	r2, #3
 8004288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e246      	b.n	800471e <HAL_DMA_Init+0x646>
 8004290:	40020010 	.word	0x40020010
 8004294:	40020028 	.word	0x40020028
 8004298:	40020040 	.word	0x40020040
 800429c:	40020058 	.word	0x40020058
 80042a0:	40020070 	.word	0x40020070
 80042a4:	40020088 	.word	0x40020088
 80042a8:	400200a0 	.word	0x400200a0
 80042ac:	400200b8 	.word	0x400200b8
 80042b0:	40020410 	.word	0x40020410
 80042b4:	40020428 	.word	0x40020428
 80042b8:	40020440 	.word	0x40020440
 80042bc:	40020458 	.word	0x40020458
 80042c0:	40020470 	.word	0x40020470
 80042c4:	40020488 	.word	0x40020488
 80042c8:	400204a0 	.word	0x400204a0
 80042cc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1c8      	bne.n	8004270 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4b83      	ldr	r3, [pc, #524]	; (80044f8 <HAL_DMA_Init+0x420>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80042f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004302:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800430e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4313      	orrs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	2b04      	cmp	r3, #4
 8004322:	d107      	bne.n	8004334 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432c:	4313      	orrs	r3, r2
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004334:	4b71      	ldr	r3, [pc, #452]	; (80044fc <HAL_DMA_Init+0x424>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4b71      	ldr	r3, [pc, #452]	; (8004500 <HAL_DMA_Init+0x428>)
 800433a:	4013      	ands	r3, r2
 800433c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004340:	d328      	bcc.n	8004394 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b28      	cmp	r3, #40	; 0x28
 8004348:	d903      	bls.n	8004352 <HAL_DMA_Init+0x27a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b2e      	cmp	r3, #46	; 0x2e
 8004350:	d917      	bls.n	8004382 <HAL_DMA_Init+0x2aa>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b3e      	cmp	r3, #62	; 0x3e
 8004358:	d903      	bls.n	8004362 <HAL_DMA_Init+0x28a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b42      	cmp	r3, #66	; 0x42
 8004360:	d90f      	bls.n	8004382 <HAL_DMA_Init+0x2aa>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b46      	cmp	r3, #70	; 0x46
 8004368:	d903      	bls.n	8004372 <HAL_DMA_Init+0x29a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b48      	cmp	r3, #72	; 0x48
 8004370:	d907      	bls.n	8004382 <HAL_DMA_Init+0x2aa>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b4e      	cmp	r3, #78	; 0x4e
 8004378:	d905      	bls.n	8004386 <HAL_DMA_Init+0x2ae>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b52      	cmp	r3, #82	; 0x52
 8004380:	d801      	bhi.n	8004386 <HAL_DMA_Init+0x2ae>
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <HAL_DMA_Init+0x2b0>
 8004386:	2300      	movs	r3, #0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004392:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f023 0307 	bic.w	r3, r3, #7
 80043aa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d117      	bne.n	80043ee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00e      	beq.n	80043ee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f001 fdcf 	bl	8005f74 <DMA_CheckFifoParam>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2240      	movs	r2, #64	; 0x40
 80043e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e197      	b.n	800471e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f001 fd0a 	bl	8005e10 <DMA_CalcBaseAndBitshift>
 80043fc:	4603      	mov	r3, r0
 80043fe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	223f      	movs	r2, #63	; 0x3f
 800440a:	409a      	lsls	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	609a      	str	r2, [r3, #8]
 8004410:	e0cd      	b.n	80045ae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a3b      	ldr	r2, [pc, #236]	; (8004504 <HAL_DMA_Init+0x42c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d022      	beq.n	8004462 <HAL_DMA_Init+0x38a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a39      	ldr	r2, [pc, #228]	; (8004508 <HAL_DMA_Init+0x430>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d01d      	beq.n	8004462 <HAL_DMA_Init+0x38a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a38      	ldr	r2, [pc, #224]	; (800450c <HAL_DMA_Init+0x434>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d018      	beq.n	8004462 <HAL_DMA_Init+0x38a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a36      	ldr	r2, [pc, #216]	; (8004510 <HAL_DMA_Init+0x438>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d013      	beq.n	8004462 <HAL_DMA_Init+0x38a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a35      	ldr	r2, [pc, #212]	; (8004514 <HAL_DMA_Init+0x43c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00e      	beq.n	8004462 <HAL_DMA_Init+0x38a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a33      	ldr	r2, [pc, #204]	; (8004518 <HAL_DMA_Init+0x440>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d009      	beq.n	8004462 <HAL_DMA_Init+0x38a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a32      	ldr	r2, [pc, #200]	; (800451c <HAL_DMA_Init+0x444>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d004      	beq.n	8004462 <HAL_DMA_Init+0x38a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a30      	ldr	r2, [pc, #192]	; (8004520 <HAL_DMA_Init+0x448>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d101      	bne.n	8004466 <HAL_DMA_Init+0x38e>
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <HAL_DMA_Init+0x390>
 8004466:	2300      	movs	r3, #0
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8097 	beq.w	800459c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a24      	ldr	r2, [pc, #144]	; (8004504 <HAL_DMA_Init+0x42c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d021      	beq.n	80044bc <HAL_DMA_Init+0x3e4>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a22      	ldr	r2, [pc, #136]	; (8004508 <HAL_DMA_Init+0x430>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d01c      	beq.n	80044bc <HAL_DMA_Init+0x3e4>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a21      	ldr	r2, [pc, #132]	; (800450c <HAL_DMA_Init+0x434>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d017      	beq.n	80044bc <HAL_DMA_Init+0x3e4>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a1f      	ldr	r2, [pc, #124]	; (8004510 <HAL_DMA_Init+0x438>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d012      	beq.n	80044bc <HAL_DMA_Init+0x3e4>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1e      	ldr	r2, [pc, #120]	; (8004514 <HAL_DMA_Init+0x43c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00d      	beq.n	80044bc <HAL_DMA_Init+0x3e4>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1c      	ldr	r2, [pc, #112]	; (8004518 <HAL_DMA_Init+0x440>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d008      	beq.n	80044bc <HAL_DMA_Init+0x3e4>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1b      	ldr	r2, [pc, #108]	; (800451c <HAL_DMA_Init+0x444>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <HAL_DMA_Init+0x3e4>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a19      	ldr	r2, [pc, #100]	; (8004520 <HAL_DMA_Init+0x448>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2202      	movs	r2, #2
 80044c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4b12      	ldr	r3, [pc, #72]	; (8004524 <HAL_DMA_Init+0x44c>)
 80044da:	4013      	ands	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b40      	cmp	r3, #64	; 0x40
 80044e4:	d020      	beq.n	8004528 <HAL_DMA_Init+0x450>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b80      	cmp	r3, #128	; 0x80
 80044ec:	d102      	bne.n	80044f4 <HAL_DMA_Init+0x41c>
 80044ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044f2:	e01a      	b.n	800452a <HAL_DMA_Init+0x452>
 80044f4:	2300      	movs	r3, #0
 80044f6:	e018      	b.n	800452a <HAL_DMA_Init+0x452>
 80044f8:	fe10803f 	.word	0xfe10803f
 80044fc:	5c001000 	.word	0x5c001000
 8004500:	ffff0000 	.word	0xffff0000
 8004504:	58025408 	.word	0x58025408
 8004508:	5802541c 	.word	0x5802541c
 800450c:	58025430 	.word	0x58025430
 8004510:	58025444 	.word	0x58025444
 8004514:	58025458 	.word	0x58025458
 8004518:	5802546c 	.word	0x5802546c
 800451c:	58025480 	.word	0x58025480
 8004520:	58025494 	.word	0x58025494
 8004524:	fffe000f 	.word	0xfffe000f
 8004528:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68d2      	ldr	r2, [r2, #12]
 800452e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004530:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004538:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004540:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004548:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004550:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004558:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	4b6e      	ldr	r3, [pc, #440]	; (8004728 <HAL_DMA_Init+0x650>)
 8004570:	4413      	add	r3, r2
 8004572:	4a6e      	ldr	r2, [pc, #440]	; (800472c <HAL_DMA_Init+0x654>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	091b      	lsrs	r3, r3, #4
 800457a:	009a      	lsls	r2, r3, #2
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f001 fc45 	bl	8005e10 <DMA_CalcBaseAndBitshift>
 8004586:	4603      	mov	r3, r0
 8004588:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2201      	movs	r2, #1
 8004594:	409a      	lsls	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]
 800459a:	e008      	b.n	80045ae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2240      	movs	r2, #64	; 0x40
 80045a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2203      	movs	r2, #3
 80045a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e0b7      	b.n	800471e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a5f      	ldr	r2, [pc, #380]	; (8004730 <HAL_DMA_Init+0x658>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d072      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a5d      	ldr	r2, [pc, #372]	; (8004734 <HAL_DMA_Init+0x65c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d06d      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a5c      	ldr	r2, [pc, #368]	; (8004738 <HAL_DMA_Init+0x660>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d068      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a5a      	ldr	r2, [pc, #360]	; (800473c <HAL_DMA_Init+0x664>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d063      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a59      	ldr	r2, [pc, #356]	; (8004740 <HAL_DMA_Init+0x668>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d05e      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a57      	ldr	r2, [pc, #348]	; (8004744 <HAL_DMA_Init+0x66c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d059      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a56      	ldr	r2, [pc, #344]	; (8004748 <HAL_DMA_Init+0x670>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d054      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a54      	ldr	r2, [pc, #336]	; (800474c <HAL_DMA_Init+0x674>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d04f      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a53      	ldr	r2, [pc, #332]	; (8004750 <HAL_DMA_Init+0x678>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d04a      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a51      	ldr	r2, [pc, #324]	; (8004754 <HAL_DMA_Init+0x67c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d045      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a50      	ldr	r2, [pc, #320]	; (8004758 <HAL_DMA_Init+0x680>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d040      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a4e      	ldr	r2, [pc, #312]	; (800475c <HAL_DMA_Init+0x684>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d03b      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a4d      	ldr	r2, [pc, #308]	; (8004760 <HAL_DMA_Init+0x688>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d036      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a4b      	ldr	r2, [pc, #300]	; (8004764 <HAL_DMA_Init+0x68c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d031      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a4a      	ldr	r2, [pc, #296]	; (8004768 <HAL_DMA_Init+0x690>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d02c      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a48      	ldr	r2, [pc, #288]	; (800476c <HAL_DMA_Init+0x694>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d027      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a47      	ldr	r2, [pc, #284]	; (8004770 <HAL_DMA_Init+0x698>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d022      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a45      	ldr	r2, [pc, #276]	; (8004774 <HAL_DMA_Init+0x69c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01d      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a44      	ldr	r2, [pc, #272]	; (8004778 <HAL_DMA_Init+0x6a0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d018      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a42      	ldr	r2, [pc, #264]	; (800477c <HAL_DMA_Init+0x6a4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d013      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a41      	ldr	r2, [pc, #260]	; (8004780 <HAL_DMA_Init+0x6a8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00e      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a3f      	ldr	r2, [pc, #252]	; (8004784 <HAL_DMA_Init+0x6ac>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d009      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a3e      	ldr	r2, [pc, #248]	; (8004788 <HAL_DMA_Init+0x6b0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d004      	beq.n	800469e <HAL_DMA_Init+0x5c6>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a3c      	ldr	r2, [pc, #240]	; (800478c <HAL_DMA_Init+0x6b4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d101      	bne.n	80046a2 <HAL_DMA_Init+0x5ca>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <HAL_DMA_Init+0x5cc>
 80046a2:	2300      	movs	r3, #0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d032      	beq.n	800470e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f001 fcdf 	bl	800606c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b80      	cmp	r3, #128	; 0x80
 80046b4:	d102      	bne.n	80046bc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d010      	beq.n	80046fc <HAL_DMA_Init+0x624>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d80c      	bhi.n	80046fc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f001 fd5c 	bl	80061a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	e008      	b.n	800470e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	a7fdabf8 	.word	0xa7fdabf8
 800472c:	cccccccd 	.word	0xcccccccd
 8004730:	40020010 	.word	0x40020010
 8004734:	40020028 	.word	0x40020028
 8004738:	40020040 	.word	0x40020040
 800473c:	40020058 	.word	0x40020058
 8004740:	40020070 	.word	0x40020070
 8004744:	40020088 	.word	0x40020088
 8004748:	400200a0 	.word	0x400200a0
 800474c:	400200b8 	.word	0x400200b8
 8004750:	40020410 	.word	0x40020410
 8004754:	40020428 	.word	0x40020428
 8004758:	40020440 	.word	0x40020440
 800475c:	40020458 	.word	0x40020458
 8004760:	40020470 	.word	0x40020470
 8004764:	40020488 	.word	0x40020488
 8004768:	400204a0 	.word	0x400204a0
 800476c:	400204b8 	.word	0x400204b8
 8004770:	58025408 	.word	0x58025408
 8004774:	5802541c 	.word	0x5802541c
 8004778:	58025430 	.word	0x58025430
 800477c:	58025444 	.word	0x58025444
 8004780:	58025458 	.word	0x58025458
 8004784:	5802546c 	.word	0x5802546c
 8004788:	58025480 	.word	0x58025480
 800478c:	58025494 	.word	0x58025494

08004790 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e226      	b.n	8004bfa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_DMA_Start_IT+0x2a>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e21f      	b.n	8004bfa <HAL_DMA_Start_IT+0x46a>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	f040 820a 	bne.w	8004be4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a68      	ldr	r2, [pc, #416]	; (8004984 <HAL_DMA_Start_IT+0x1f4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d04a      	beq.n	800487e <HAL_DMA_Start_IT+0xee>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a66      	ldr	r2, [pc, #408]	; (8004988 <HAL_DMA_Start_IT+0x1f8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d045      	beq.n	800487e <HAL_DMA_Start_IT+0xee>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a65      	ldr	r2, [pc, #404]	; (800498c <HAL_DMA_Start_IT+0x1fc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d040      	beq.n	800487e <HAL_DMA_Start_IT+0xee>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a63      	ldr	r2, [pc, #396]	; (8004990 <HAL_DMA_Start_IT+0x200>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d03b      	beq.n	800487e <HAL_DMA_Start_IT+0xee>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a62      	ldr	r2, [pc, #392]	; (8004994 <HAL_DMA_Start_IT+0x204>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d036      	beq.n	800487e <HAL_DMA_Start_IT+0xee>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a60      	ldr	r2, [pc, #384]	; (8004998 <HAL_DMA_Start_IT+0x208>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d031      	beq.n	800487e <HAL_DMA_Start_IT+0xee>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a5f      	ldr	r2, [pc, #380]	; (800499c <HAL_DMA_Start_IT+0x20c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d02c      	beq.n	800487e <HAL_DMA_Start_IT+0xee>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a5d      	ldr	r2, [pc, #372]	; (80049a0 <HAL_DMA_Start_IT+0x210>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d027      	beq.n	800487e <HAL_DMA_Start_IT+0xee>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a5c      	ldr	r2, [pc, #368]	; (80049a4 <HAL_DMA_Start_IT+0x214>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d022      	beq.n	800487e <HAL_DMA_Start_IT+0xee>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a5a      	ldr	r2, [pc, #360]	; (80049a8 <HAL_DMA_Start_IT+0x218>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d01d      	beq.n	800487e <HAL_DMA_Start_IT+0xee>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a59      	ldr	r2, [pc, #356]	; (80049ac <HAL_DMA_Start_IT+0x21c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d018      	beq.n	800487e <HAL_DMA_Start_IT+0xee>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a57      	ldr	r2, [pc, #348]	; (80049b0 <HAL_DMA_Start_IT+0x220>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d013      	beq.n	800487e <HAL_DMA_Start_IT+0xee>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a56      	ldr	r2, [pc, #344]	; (80049b4 <HAL_DMA_Start_IT+0x224>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00e      	beq.n	800487e <HAL_DMA_Start_IT+0xee>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a54      	ldr	r2, [pc, #336]	; (80049b8 <HAL_DMA_Start_IT+0x228>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d009      	beq.n	800487e <HAL_DMA_Start_IT+0xee>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a53      	ldr	r2, [pc, #332]	; (80049bc <HAL_DMA_Start_IT+0x22c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <HAL_DMA_Start_IT+0xee>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a51      	ldr	r2, [pc, #324]	; (80049c0 <HAL_DMA_Start_IT+0x230>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d108      	bne.n	8004890 <HAL_DMA_Start_IT+0x100>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e007      	b.n	80048a0 <HAL_DMA_Start_IT+0x110>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0201 	bic.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f001 f906 	bl	8005ab8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a34      	ldr	r2, [pc, #208]	; (8004984 <HAL_DMA_Start_IT+0x1f4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d04a      	beq.n	800494c <HAL_DMA_Start_IT+0x1bc>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a33      	ldr	r2, [pc, #204]	; (8004988 <HAL_DMA_Start_IT+0x1f8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d045      	beq.n	800494c <HAL_DMA_Start_IT+0x1bc>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a31      	ldr	r2, [pc, #196]	; (800498c <HAL_DMA_Start_IT+0x1fc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d040      	beq.n	800494c <HAL_DMA_Start_IT+0x1bc>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a30      	ldr	r2, [pc, #192]	; (8004990 <HAL_DMA_Start_IT+0x200>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d03b      	beq.n	800494c <HAL_DMA_Start_IT+0x1bc>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a2e      	ldr	r2, [pc, #184]	; (8004994 <HAL_DMA_Start_IT+0x204>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d036      	beq.n	800494c <HAL_DMA_Start_IT+0x1bc>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a2d      	ldr	r2, [pc, #180]	; (8004998 <HAL_DMA_Start_IT+0x208>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d031      	beq.n	800494c <HAL_DMA_Start_IT+0x1bc>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a2b      	ldr	r2, [pc, #172]	; (800499c <HAL_DMA_Start_IT+0x20c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d02c      	beq.n	800494c <HAL_DMA_Start_IT+0x1bc>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <HAL_DMA_Start_IT+0x210>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d027      	beq.n	800494c <HAL_DMA_Start_IT+0x1bc>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a28      	ldr	r2, [pc, #160]	; (80049a4 <HAL_DMA_Start_IT+0x214>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d022      	beq.n	800494c <HAL_DMA_Start_IT+0x1bc>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <HAL_DMA_Start_IT+0x218>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d01d      	beq.n	800494c <HAL_DMA_Start_IT+0x1bc>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a25      	ldr	r2, [pc, #148]	; (80049ac <HAL_DMA_Start_IT+0x21c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d018      	beq.n	800494c <HAL_DMA_Start_IT+0x1bc>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a24      	ldr	r2, [pc, #144]	; (80049b0 <HAL_DMA_Start_IT+0x220>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d013      	beq.n	800494c <HAL_DMA_Start_IT+0x1bc>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a22      	ldr	r2, [pc, #136]	; (80049b4 <HAL_DMA_Start_IT+0x224>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00e      	beq.n	800494c <HAL_DMA_Start_IT+0x1bc>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <HAL_DMA_Start_IT+0x228>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d009      	beq.n	800494c <HAL_DMA_Start_IT+0x1bc>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1f      	ldr	r2, [pc, #124]	; (80049bc <HAL_DMA_Start_IT+0x22c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <HAL_DMA_Start_IT+0x1bc>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <HAL_DMA_Start_IT+0x230>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d101      	bne.n	8004950 <HAL_DMA_Start_IT+0x1c0>
 800494c:	2301      	movs	r3, #1
 800494e:	e000      	b.n	8004952 <HAL_DMA_Start_IT+0x1c2>
 8004950:	2300      	movs	r3, #0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d036      	beq.n	80049c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f023 021e 	bic.w	r2, r3, #30
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0216 	orr.w	r2, r2, #22
 8004968:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d03e      	beq.n	80049f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0208 	orr.w	r2, r2, #8
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	e035      	b.n	80049f0 <HAL_DMA_Start_IT+0x260>
 8004984:	40020010 	.word	0x40020010
 8004988:	40020028 	.word	0x40020028
 800498c:	40020040 	.word	0x40020040
 8004990:	40020058 	.word	0x40020058
 8004994:	40020070 	.word	0x40020070
 8004998:	40020088 	.word	0x40020088
 800499c:	400200a0 	.word	0x400200a0
 80049a0:	400200b8 	.word	0x400200b8
 80049a4:	40020410 	.word	0x40020410
 80049a8:	40020428 	.word	0x40020428
 80049ac:	40020440 	.word	0x40020440
 80049b0:	40020458 	.word	0x40020458
 80049b4:	40020470 	.word	0x40020470
 80049b8:	40020488 	.word	0x40020488
 80049bc:	400204a0 	.word	0x400204a0
 80049c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f023 020e 	bic.w	r2, r3, #14
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 020a 	orr.w	r2, r2, #10
 80049d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d007      	beq.n	80049f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0204 	orr.w	r2, r2, #4
 80049ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a83      	ldr	r2, [pc, #524]	; (8004c04 <HAL_DMA_Start_IT+0x474>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d072      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a82      	ldr	r2, [pc, #520]	; (8004c08 <HAL_DMA_Start_IT+0x478>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d06d      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a80      	ldr	r2, [pc, #512]	; (8004c0c <HAL_DMA_Start_IT+0x47c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d068      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a7f      	ldr	r2, [pc, #508]	; (8004c10 <HAL_DMA_Start_IT+0x480>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d063      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a7d      	ldr	r2, [pc, #500]	; (8004c14 <HAL_DMA_Start_IT+0x484>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d05e      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a7c      	ldr	r2, [pc, #496]	; (8004c18 <HAL_DMA_Start_IT+0x488>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d059      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a7a      	ldr	r2, [pc, #488]	; (8004c1c <HAL_DMA_Start_IT+0x48c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d054      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a79      	ldr	r2, [pc, #484]	; (8004c20 <HAL_DMA_Start_IT+0x490>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d04f      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a77      	ldr	r2, [pc, #476]	; (8004c24 <HAL_DMA_Start_IT+0x494>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d04a      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a76      	ldr	r2, [pc, #472]	; (8004c28 <HAL_DMA_Start_IT+0x498>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d045      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a74      	ldr	r2, [pc, #464]	; (8004c2c <HAL_DMA_Start_IT+0x49c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d040      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a73      	ldr	r2, [pc, #460]	; (8004c30 <HAL_DMA_Start_IT+0x4a0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d03b      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a71      	ldr	r2, [pc, #452]	; (8004c34 <HAL_DMA_Start_IT+0x4a4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d036      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a70      	ldr	r2, [pc, #448]	; (8004c38 <HAL_DMA_Start_IT+0x4a8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d031      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a6e      	ldr	r2, [pc, #440]	; (8004c3c <HAL_DMA_Start_IT+0x4ac>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d02c      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a6d      	ldr	r2, [pc, #436]	; (8004c40 <HAL_DMA_Start_IT+0x4b0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d027      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a6b      	ldr	r2, [pc, #428]	; (8004c44 <HAL_DMA_Start_IT+0x4b4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d022      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a6a      	ldr	r2, [pc, #424]	; (8004c48 <HAL_DMA_Start_IT+0x4b8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d01d      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a68      	ldr	r2, [pc, #416]	; (8004c4c <HAL_DMA_Start_IT+0x4bc>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d018      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a67      	ldr	r2, [pc, #412]	; (8004c50 <HAL_DMA_Start_IT+0x4c0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d013      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a65      	ldr	r2, [pc, #404]	; (8004c54 <HAL_DMA_Start_IT+0x4c4>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00e      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a64      	ldr	r2, [pc, #400]	; (8004c58 <HAL_DMA_Start_IT+0x4c8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d009      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a62      	ldr	r2, [pc, #392]	; (8004c5c <HAL_DMA_Start_IT+0x4cc>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d004      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x350>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a61      	ldr	r2, [pc, #388]	; (8004c60 <HAL_DMA_Start_IT+0x4d0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d101      	bne.n	8004ae4 <HAL_DMA_Start_IT+0x354>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <HAL_DMA_Start_IT+0x356>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01a      	beq.n	8004b20 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b06:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b1e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a37      	ldr	r2, [pc, #220]	; (8004c04 <HAL_DMA_Start_IT+0x474>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d04a      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x430>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a36      	ldr	r2, [pc, #216]	; (8004c08 <HAL_DMA_Start_IT+0x478>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d045      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x430>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a34      	ldr	r2, [pc, #208]	; (8004c0c <HAL_DMA_Start_IT+0x47c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d040      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x430>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a33      	ldr	r2, [pc, #204]	; (8004c10 <HAL_DMA_Start_IT+0x480>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d03b      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x430>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a31      	ldr	r2, [pc, #196]	; (8004c14 <HAL_DMA_Start_IT+0x484>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d036      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x430>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a30      	ldr	r2, [pc, #192]	; (8004c18 <HAL_DMA_Start_IT+0x488>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d031      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x430>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a2e      	ldr	r2, [pc, #184]	; (8004c1c <HAL_DMA_Start_IT+0x48c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d02c      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x430>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a2d      	ldr	r2, [pc, #180]	; (8004c20 <HAL_DMA_Start_IT+0x490>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d027      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x430>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a2b      	ldr	r2, [pc, #172]	; (8004c24 <HAL_DMA_Start_IT+0x494>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d022      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x430>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a2a      	ldr	r2, [pc, #168]	; (8004c28 <HAL_DMA_Start_IT+0x498>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d01d      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x430>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a28      	ldr	r2, [pc, #160]	; (8004c2c <HAL_DMA_Start_IT+0x49c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d018      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x430>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a27      	ldr	r2, [pc, #156]	; (8004c30 <HAL_DMA_Start_IT+0x4a0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d013      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x430>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a25      	ldr	r2, [pc, #148]	; (8004c34 <HAL_DMA_Start_IT+0x4a4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00e      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x430>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a24      	ldr	r2, [pc, #144]	; (8004c38 <HAL_DMA_Start_IT+0x4a8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d009      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x430>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a22      	ldr	r2, [pc, #136]	; (8004c3c <HAL_DMA_Start_IT+0x4ac>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d004      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x430>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a21      	ldr	r2, [pc, #132]	; (8004c40 <HAL_DMA_Start_IT+0x4b0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d108      	bne.n	8004bd2 <HAL_DMA_Start_IT+0x442>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e012      	b.n	8004bf8 <HAL_DMA_Start_IT+0x468>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0201 	orr.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	e009      	b.n	8004bf8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40020010 	.word	0x40020010
 8004c08:	40020028 	.word	0x40020028
 8004c0c:	40020040 	.word	0x40020040
 8004c10:	40020058 	.word	0x40020058
 8004c14:	40020070 	.word	0x40020070
 8004c18:	40020088 	.word	0x40020088
 8004c1c:	400200a0 	.word	0x400200a0
 8004c20:	400200b8 	.word	0x400200b8
 8004c24:	40020410 	.word	0x40020410
 8004c28:	40020428 	.word	0x40020428
 8004c2c:	40020440 	.word	0x40020440
 8004c30:	40020458 	.word	0x40020458
 8004c34:	40020470 	.word	0x40020470
 8004c38:	40020488 	.word	0x40020488
 8004c3c:	400204a0 	.word	0x400204a0
 8004c40:	400204b8 	.word	0x400204b8
 8004c44:	58025408 	.word	0x58025408
 8004c48:	5802541c 	.word	0x5802541c
 8004c4c:	58025430 	.word	0x58025430
 8004c50:	58025444 	.word	0x58025444
 8004c54:	58025458 	.word	0x58025458
 8004c58:	5802546c 	.word	0x5802546c
 8004c5c:	58025480 	.word	0x58025480
 8004c60:	58025494 	.word	0x58025494

08004c64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08a      	sub	sp, #40	; 0x28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c70:	4b67      	ldr	r3, [pc, #412]	; (8004e10 <HAL_DMA_IRQHandler+0x1ac>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a67      	ldr	r2, [pc, #412]	; (8004e14 <HAL_DMA_IRQHandler+0x1b0>)
 8004c76:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7a:	0a9b      	lsrs	r3, r3, #10
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c82:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c88:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a5f      	ldr	r2, [pc, #380]	; (8004e18 <HAL_DMA_IRQHandler+0x1b4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d04a      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xd2>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a5d      	ldr	r2, [pc, #372]	; (8004e1c <HAL_DMA_IRQHandler+0x1b8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d045      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xd2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a5c      	ldr	r2, [pc, #368]	; (8004e20 <HAL_DMA_IRQHandler+0x1bc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d040      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xd2>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a5a      	ldr	r2, [pc, #360]	; (8004e24 <HAL_DMA_IRQHandler+0x1c0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d03b      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xd2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a59      	ldr	r2, [pc, #356]	; (8004e28 <HAL_DMA_IRQHandler+0x1c4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d036      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xd2>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a57      	ldr	r2, [pc, #348]	; (8004e2c <HAL_DMA_IRQHandler+0x1c8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d031      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xd2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a56      	ldr	r2, [pc, #344]	; (8004e30 <HAL_DMA_IRQHandler+0x1cc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d02c      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xd2>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a54      	ldr	r2, [pc, #336]	; (8004e34 <HAL_DMA_IRQHandler+0x1d0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d027      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xd2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a53      	ldr	r2, [pc, #332]	; (8004e38 <HAL_DMA_IRQHandler+0x1d4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d022      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xd2>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a51      	ldr	r2, [pc, #324]	; (8004e3c <HAL_DMA_IRQHandler+0x1d8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01d      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xd2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a50      	ldr	r2, [pc, #320]	; (8004e40 <HAL_DMA_IRQHandler+0x1dc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d018      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xd2>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a4e      	ldr	r2, [pc, #312]	; (8004e44 <HAL_DMA_IRQHandler+0x1e0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xd2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a4d      	ldr	r2, [pc, #308]	; (8004e48 <HAL_DMA_IRQHandler+0x1e4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00e      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xd2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a4b      	ldr	r2, [pc, #300]	; (8004e4c <HAL_DMA_IRQHandler+0x1e8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xd2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a4a      	ldr	r2, [pc, #296]	; (8004e50 <HAL_DMA_IRQHandler+0x1ec>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xd2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a48      	ldr	r2, [pc, #288]	; (8004e54 <HAL_DMA_IRQHandler+0x1f0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d101      	bne.n	8004d3a <HAL_DMA_IRQHandler+0xd6>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <HAL_DMA_IRQHandler+0xd8>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 842b 	beq.w	8005598 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	2208      	movs	r2, #8
 8004d4c:	409a      	lsls	r2, r3
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	4013      	ands	r3, r2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 80a2 	beq.w	8004e9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a2e      	ldr	r2, [pc, #184]	; (8004e18 <HAL_DMA_IRQHandler+0x1b4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d04a      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x194>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a2d      	ldr	r2, [pc, #180]	; (8004e1c <HAL_DMA_IRQHandler+0x1b8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d045      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x194>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a2b      	ldr	r2, [pc, #172]	; (8004e20 <HAL_DMA_IRQHandler+0x1bc>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d040      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x194>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a2a      	ldr	r2, [pc, #168]	; (8004e24 <HAL_DMA_IRQHandler+0x1c0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d03b      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x194>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a28      	ldr	r2, [pc, #160]	; (8004e28 <HAL_DMA_IRQHandler+0x1c4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d036      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x194>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a27      	ldr	r2, [pc, #156]	; (8004e2c <HAL_DMA_IRQHandler+0x1c8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d031      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x194>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a25      	ldr	r2, [pc, #148]	; (8004e30 <HAL_DMA_IRQHandler+0x1cc>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d02c      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x194>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <HAL_DMA_IRQHandler+0x1d0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d027      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x194>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a22      	ldr	r2, [pc, #136]	; (8004e38 <HAL_DMA_IRQHandler+0x1d4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d022      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x194>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a21      	ldr	r2, [pc, #132]	; (8004e3c <HAL_DMA_IRQHandler+0x1d8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d01d      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x194>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <HAL_DMA_IRQHandler+0x1dc>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d018      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x194>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a1e      	ldr	r2, [pc, #120]	; (8004e44 <HAL_DMA_IRQHandler+0x1e0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d013      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x194>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1c      	ldr	r2, [pc, #112]	; (8004e48 <HAL_DMA_IRQHandler+0x1e4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00e      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x194>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1b      	ldr	r2, [pc, #108]	; (8004e4c <HAL_DMA_IRQHandler+0x1e8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d009      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x194>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a19      	ldr	r2, [pc, #100]	; (8004e50 <HAL_DMA_IRQHandler+0x1ec>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d004      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x194>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <HAL_DMA_IRQHandler+0x1f0>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d12f      	bne.n	8004e58 <HAL_DMA_IRQHandler+0x1f4>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bf14      	ite	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	2300      	moveq	r3, #0
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	e02e      	b.n	8004e6c <HAL_DMA_IRQHandler+0x208>
 8004e0e:	bf00      	nop
 8004e10:	24000004 	.word	0x24000004
 8004e14:	1b4e81b5 	.word	0x1b4e81b5
 8004e18:	40020010 	.word	0x40020010
 8004e1c:	40020028 	.word	0x40020028
 8004e20:	40020040 	.word	0x40020040
 8004e24:	40020058 	.word	0x40020058
 8004e28:	40020070 	.word	0x40020070
 8004e2c:	40020088 	.word	0x40020088
 8004e30:	400200a0 	.word	0x400200a0
 8004e34:	400200b8 	.word	0x400200b8
 8004e38:	40020410 	.word	0x40020410
 8004e3c:	40020428 	.word	0x40020428
 8004e40:	40020440 	.word	0x40020440
 8004e44:	40020458 	.word	0x40020458
 8004e48:	40020470 	.word	0x40020470
 8004e4c:	40020488 	.word	0x40020488
 8004e50:	400204a0 	.word	0x400204a0
 8004e54:	400204b8 	.word	0x400204b8
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	bf14      	ite	ne
 8004e66:	2301      	movne	r3, #1
 8004e68:	2300      	moveq	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d015      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0204 	bic.w	r2, r2, #4
 8004e7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e84:	f003 031f 	and.w	r3, r3, #31
 8004e88:	2208      	movs	r2, #8
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e94:	f043 0201 	orr.w	r2, r3, #1
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d06e      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a69      	ldr	r2, [pc, #420]	; (800505c <HAL_DMA_IRQHandler+0x3f8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d04a      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x2ee>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a67      	ldr	r2, [pc, #412]	; (8005060 <HAL_DMA_IRQHandler+0x3fc>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d045      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x2ee>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a66      	ldr	r2, [pc, #408]	; (8005064 <HAL_DMA_IRQHandler+0x400>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d040      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x2ee>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a64      	ldr	r2, [pc, #400]	; (8005068 <HAL_DMA_IRQHandler+0x404>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d03b      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x2ee>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a63      	ldr	r2, [pc, #396]	; (800506c <HAL_DMA_IRQHandler+0x408>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d036      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x2ee>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a61      	ldr	r2, [pc, #388]	; (8005070 <HAL_DMA_IRQHandler+0x40c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d031      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x2ee>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a60      	ldr	r2, [pc, #384]	; (8005074 <HAL_DMA_IRQHandler+0x410>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d02c      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x2ee>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a5e      	ldr	r2, [pc, #376]	; (8005078 <HAL_DMA_IRQHandler+0x414>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d027      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x2ee>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a5d      	ldr	r2, [pc, #372]	; (800507c <HAL_DMA_IRQHandler+0x418>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d022      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x2ee>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a5b      	ldr	r2, [pc, #364]	; (8005080 <HAL_DMA_IRQHandler+0x41c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d01d      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x2ee>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a5a      	ldr	r2, [pc, #360]	; (8005084 <HAL_DMA_IRQHandler+0x420>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d018      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x2ee>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a58      	ldr	r2, [pc, #352]	; (8005088 <HAL_DMA_IRQHandler+0x424>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d013      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x2ee>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a57      	ldr	r2, [pc, #348]	; (800508c <HAL_DMA_IRQHandler+0x428>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00e      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x2ee>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a55      	ldr	r2, [pc, #340]	; (8005090 <HAL_DMA_IRQHandler+0x42c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d009      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x2ee>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a54      	ldr	r2, [pc, #336]	; (8005094 <HAL_DMA_IRQHandler+0x430>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d004      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x2ee>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a52      	ldr	r2, [pc, #328]	; (8005098 <HAL_DMA_IRQHandler+0x434>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d10a      	bne.n	8004f68 <HAL_DMA_IRQHandler+0x304>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bf14      	ite	ne
 8004f60:	2301      	movne	r3, #1
 8004f62:	2300      	moveq	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	e003      	b.n	8004f70 <HAL_DMA_IRQHandler+0x30c>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00d      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f78:	f003 031f 	and.w	r3, r3, #31
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	409a      	lsls	r2, r3
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f88:	f043 0202 	orr.w	r2, r3, #2
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f94:	f003 031f 	and.w	r3, r3, #31
 8004f98:	2204      	movs	r2, #4
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 808f 	beq.w	80050c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a2c      	ldr	r2, [pc, #176]	; (800505c <HAL_DMA_IRQHandler+0x3f8>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d04a      	beq.n	8005046 <HAL_DMA_IRQHandler+0x3e2>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a2a      	ldr	r2, [pc, #168]	; (8005060 <HAL_DMA_IRQHandler+0x3fc>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d045      	beq.n	8005046 <HAL_DMA_IRQHandler+0x3e2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a29      	ldr	r2, [pc, #164]	; (8005064 <HAL_DMA_IRQHandler+0x400>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d040      	beq.n	8005046 <HAL_DMA_IRQHandler+0x3e2>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a27      	ldr	r2, [pc, #156]	; (8005068 <HAL_DMA_IRQHandler+0x404>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d03b      	beq.n	8005046 <HAL_DMA_IRQHandler+0x3e2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a26      	ldr	r2, [pc, #152]	; (800506c <HAL_DMA_IRQHandler+0x408>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d036      	beq.n	8005046 <HAL_DMA_IRQHandler+0x3e2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a24      	ldr	r2, [pc, #144]	; (8005070 <HAL_DMA_IRQHandler+0x40c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d031      	beq.n	8005046 <HAL_DMA_IRQHandler+0x3e2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a23      	ldr	r2, [pc, #140]	; (8005074 <HAL_DMA_IRQHandler+0x410>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d02c      	beq.n	8005046 <HAL_DMA_IRQHandler+0x3e2>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a21      	ldr	r2, [pc, #132]	; (8005078 <HAL_DMA_IRQHandler+0x414>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d027      	beq.n	8005046 <HAL_DMA_IRQHandler+0x3e2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a20      	ldr	r2, [pc, #128]	; (800507c <HAL_DMA_IRQHandler+0x418>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d022      	beq.n	8005046 <HAL_DMA_IRQHandler+0x3e2>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1e      	ldr	r2, [pc, #120]	; (8005080 <HAL_DMA_IRQHandler+0x41c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d01d      	beq.n	8005046 <HAL_DMA_IRQHandler+0x3e2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a1d      	ldr	r2, [pc, #116]	; (8005084 <HAL_DMA_IRQHandler+0x420>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d018      	beq.n	8005046 <HAL_DMA_IRQHandler+0x3e2>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1b      	ldr	r2, [pc, #108]	; (8005088 <HAL_DMA_IRQHandler+0x424>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <HAL_DMA_IRQHandler+0x3e2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1a      	ldr	r2, [pc, #104]	; (800508c <HAL_DMA_IRQHandler+0x428>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00e      	beq.n	8005046 <HAL_DMA_IRQHandler+0x3e2>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a18      	ldr	r2, [pc, #96]	; (8005090 <HAL_DMA_IRQHandler+0x42c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d009      	beq.n	8005046 <HAL_DMA_IRQHandler+0x3e2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a17      	ldr	r2, [pc, #92]	; (8005094 <HAL_DMA_IRQHandler+0x430>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d004      	beq.n	8005046 <HAL_DMA_IRQHandler+0x3e2>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a15      	ldr	r2, [pc, #84]	; (8005098 <HAL_DMA_IRQHandler+0x434>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d12a      	bne.n	800509c <HAL_DMA_IRQHandler+0x438>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	bf14      	ite	ne
 8005054:	2301      	movne	r3, #1
 8005056:	2300      	moveq	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	e023      	b.n	80050a4 <HAL_DMA_IRQHandler+0x440>
 800505c:	40020010 	.word	0x40020010
 8005060:	40020028 	.word	0x40020028
 8005064:	40020040 	.word	0x40020040
 8005068:	40020058 	.word	0x40020058
 800506c:	40020070 	.word	0x40020070
 8005070:	40020088 	.word	0x40020088
 8005074:	400200a0 	.word	0x400200a0
 8005078:	400200b8 	.word	0x400200b8
 800507c:	40020410 	.word	0x40020410
 8005080:	40020428 	.word	0x40020428
 8005084:	40020440 	.word	0x40020440
 8005088:	40020458 	.word	0x40020458
 800508c:	40020470 	.word	0x40020470
 8005090:	40020488 	.word	0x40020488
 8005094:	400204a0 	.word	0x400204a0
 8005098:	400204b8 	.word	0x400204b8
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2300      	movs	r3, #0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00d      	beq.n	80050c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ac:	f003 031f 	and.w	r3, r3, #31
 80050b0:	2204      	movs	r2, #4
 80050b2:	409a      	lsls	r2, r3
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	f043 0204 	orr.w	r2, r3, #4
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	2210      	movs	r2, #16
 80050ce:	409a      	lsls	r2, r3
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	4013      	ands	r3, r2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80a6 	beq.w	8005226 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a85      	ldr	r2, [pc, #532]	; (80052f4 <HAL_DMA_IRQHandler+0x690>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d04a      	beq.n	800517a <HAL_DMA_IRQHandler+0x516>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a83      	ldr	r2, [pc, #524]	; (80052f8 <HAL_DMA_IRQHandler+0x694>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d045      	beq.n	800517a <HAL_DMA_IRQHandler+0x516>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a82      	ldr	r2, [pc, #520]	; (80052fc <HAL_DMA_IRQHandler+0x698>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d040      	beq.n	800517a <HAL_DMA_IRQHandler+0x516>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a80      	ldr	r2, [pc, #512]	; (8005300 <HAL_DMA_IRQHandler+0x69c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d03b      	beq.n	800517a <HAL_DMA_IRQHandler+0x516>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a7f      	ldr	r2, [pc, #508]	; (8005304 <HAL_DMA_IRQHandler+0x6a0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d036      	beq.n	800517a <HAL_DMA_IRQHandler+0x516>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a7d      	ldr	r2, [pc, #500]	; (8005308 <HAL_DMA_IRQHandler+0x6a4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d031      	beq.n	800517a <HAL_DMA_IRQHandler+0x516>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a7c      	ldr	r2, [pc, #496]	; (800530c <HAL_DMA_IRQHandler+0x6a8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d02c      	beq.n	800517a <HAL_DMA_IRQHandler+0x516>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a7a      	ldr	r2, [pc, #488]	; (8005310 <HAL_DMA_IRQHandler+0x6ac>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d027      	beq.n	800517a <HAL_DMA_IRQHandler+0x516>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a79      	ldr	r2, [pc, #484]	; (8005314 <HAL_DMA_IRQHandler+0x6b0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d022      	beq.n	800517a <HAL_DMA_IRQHandler+0x516>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a77      	ldr	r2, [pc, #476]	; (8005318 <HAL_DMA_IRQHandler+0x6b4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01d      	beq.n	800517a <HAL_DMA_IRQHandler+0x516>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a76      	ldr	r2, [pc, #472]	; (800531c <HAL_DMA_IRQHandler+0x6b8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d018      	beq.n	800517a <HAL_DMA_IRQHandler+0x516>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a74      	ldr	r2, [pc, #464]	; (8005320 <HAL_DMA_IRQHandler+0x6bc>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d013      	beq.n	800517a <HAL_DMA_IRQHandler+0x516>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a73      	ldr	r2, [pc, #460]	; (8005324 <HAL_DMA_IRQHandler+0x6c0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00e      	beq.n	800517a <HAL_DMA_IRQHandler+0x516>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a71      	ldr	r2, [pc, #452]	; (8005328 <HAL_DMA_IRQHandler+0x6c4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d009      	beq.n	800517a <HAL_DMA_IRQHandler+0x516>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a70      	ldr	r2, [pc, #448]	; (800532c <HAL_DMA_IRQHandler+0x6c8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d004      	beq.n	800517a <HAL_DMA_IRQHandler+0x516>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a6e      	ldr	r2, [pc, #440]	; (8005330 <HAL_DMA_IRQHandler+0x6cc>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d10a      	bne.n	8005190 <HAL_DMA_IRQHandler+0x52c>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b00      	cmp	r3, #0
 8005186:	bf14      	ite	ne
 8005188:	2301      	movne	r3, #1
 800518a:	2300      	moveq	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	e009      	b.n	80051a4 <HAL_DMA_IRQHandler+0x540>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	bf14      	ite	ne
 800519e:	2301      	movne	r3, #1
 80051a0:	2300      	moveq	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d03e      	beq.n	8005226 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	2210      	movs	r2, #16
 80051b2:	409a      	lsls	r2, r3
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d018      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d108      	bne.n	80051e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d024      	beq.n	8005226 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
 80051e4:	e01f      	b.n	8005226 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d01b      	beq.n	8005226 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	4798      	blx	r3
 80051f6:	e016      	b.n	8005226 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d107      	bne.n	8005216 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0208 	bic.w	r2, r2, #8
 8005214:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522a:	f003 031f 	and.w	r3, r3, #31
 800522e:	2220      	movs	r2, #32
 8005230:	409a      	lsls	r2, r3
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	4013      	ands	r3, r2
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 8110 	beq.w	800545c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2c      	ldr	r2, [pc, #176]	; (80052f4 <HAL_DMA_IRQHandler+0x690>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d04a      	beq.n	80052dc <HAL_DMA_IRQHandler+0x678>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a2b      	ldr	r2, [pc, #172]	; (80052f8 <HAL_DMA_IRQHandler+0x694>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d045      	beq.n	80052dc <HAL_DMA_IRQHandler+0x678>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a29      	ldr	r2, [pc, #164]	; (80052fc <HAL_DMA_IRQHandler+0x698>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d040      	beq.n	80052dc <HAL_DMA_IRQHandler+0x678>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a28      	ldr	r2, [pc, #160]	; (8005300 <HAL_DMA_IRQHandler+0x69c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d03b      	beq.n	80052dc <HAL_DMA_IRQHandler+0x678>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a26      	ldr	r2, [pc, #152]	; (8005304 <HAL_DMA_IRQHandler+0x6a0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d036      	beq.n	80052dc <HAL_DMA_IRQHandler+0x678>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a25      	ldr	r2, [pc, #148]	; (8005308 <HAL_DMA_IRQHandler+0x6a4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d031      	beq.n	80052dc <HAL_DMA_IRQHandler+0x678>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a23      	ldr	r2, [pc, #140]	; (800530c <HAL_DMA_IRQHandler+0x6a8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d02c      	beq.n	80052dc <HAL_DMA_IRQHandler+0x678>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a22      	ldr	r2, [pc, #136]	; (8005310 <HAL_DMA_IRQHandler+0x6ac>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d027      	beq.n	80052dc <HAL_DMA_IRQHandler+0x678>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a20      	ldr	r2, [pc, #128]	; (8005314 <HAL_DMA_IRQHandler+0x6b0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d022      	beq.n	80052dc <HAL_DMA_IRQHandler+0x678>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1f      	ldr	r2, [pc, #124]	; (8005318 <HAL_DMA_IRQHandler+0x6b4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d01d      	beq.n	80052dc <HAL_DMA_IRQHandler+0x678>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1d      	ldr	r2, [pc, #116]	; (800531c <HAL_DMA_IRQHandler+0x6b8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d018      	beq.n	80052dc <HAL_DMA_IRQHandler+0x678>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1c      	ldr	r2, [pc, #112]	; (8005320 <HAL_DMA_IRQHandler+0x6bc>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d013      	beq.n	80052dc <HAL_DMA_IRQHandler+0x678>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1a      	ldr	r2, [pc, #104]	; (8005324 <HAL_DMA_IRQHandler+0x6c0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00e      	beq.n	80052dc <HAL_DMA_IRQHandler+0x678>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a19      	ldr	r2, [pc, #100]	; (8005328 <HAL_DMA_IRQHandler+0x6c4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d009      	beq.n	80052dc <HAL_DMA_IRQHandler+0x678>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a17      	ldr	r2, [pc, #92]	; (800532c <HAL_DMA_IRQHandler+0x6c8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d004      	beq.n	80052dc <HAL_DMA_IRQHandler+0x678>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a16      	ldr	r2, [pc, #88]	; (8005330 <HAL_DMA_IRQHandler+0x6cc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d12b      	bne.n	8005334 <HAL_DMA_IRQHandler+0x6d0>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bf14      	ite	ne
 80052ea:	2301      	movne	r3, #1
 80052ec:	2300      	moveq	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	e02a      	b.n	8005348 <HAL_DMA_IRQHandler+0x6e4>
 80052f2:	bf00      	nop
 80052f4:	40020010 	.word	0x40020010
 80052f8:	40020028 	.word	0x40020028
 80052fc:	40020040 	.word	0x40020040
 8005300:	40020058 	.word	0x40020058
 8005304:	40020070 	.word	0x40020070
 8005308:	40020088 	.word	0x40020088
 800530c:	400200a0 	.word	0x400200a0
 8005310:	400200b8 	.word	0x400200b8
 8005314:	40020410 	.word	0x40020410
 8005318:	40020428 	.word	0x40020428
 800531c:	40020440 	.word	0x40020440
 8005320:	40020458 	.word	0x40020458
 8005324:	40020470 	.word	0x40020470
 8005328:	40020488 	.word	0x40020488
 800532c:	400204a0 	.word	0x400204a0
 8005330:	400204b8 	.word	0x400204b8
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	bf14      	ite	ne
 8005342:	2301      	movne	r3, #1
 8005344:	2300      	moveq	r3, #0
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 8087 	beq.w	800545c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	2220      	movs	r2, #32
 8005358:	409a      	lsls	r2, r3
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b04      	cmp	r3, #4
 8005368:	d139      	bne.n	80053de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0216 	bic.w	r2, r2, #22
 8005378:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695a      	ldr	r2, [r3, #20]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005388:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d103      	bne.n	800539a <HAL_DMA_IRQHandler+0x736>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005396:	2b00      	cmp	r3, #0
 8005398:	d007      	beq.n	80053aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0208 	bic.w	r2, r2, #8
 80053a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ae:	f003 031f 	and.w	r3, r3, #31
 80053b2:	223f      	movs	r2, #63	; 0x3f
 80053b4:	409a      	lsls	r2, r3
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 834a 	beq.w	8005a68 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	4798      	blx	r3
          }
          return;
 80053dc:	e344      	b.n	8005a68 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d018      	beq.n	800541e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d108      	bne.n	800540c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d02c      	beq.n	800545c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	4798      	blx	r3
 800540a:	e027      	b.n	800545c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005410:	2b00      	cmp	r3, #0
 8005412:	d023      	beq.n	800545c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	4798      	blx	r3
 800541c:	e01e      	b.n	800545c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10f      	bne.n	800544c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0210 	bic.w	r2, r2, #16
 800543a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 8306 	beq.w	8005a72 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 8088 	beq.w	8005584 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2204      	movs	r2, #4
 8005478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a7a      	ldr	r2, [pc, #488]	; (800566c <HAL_DMA_IRQHandler+0xa08>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d04a      	beq.n	800551c <HAL_DMA_IRQHandler+0x8b8>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a79      	ldr	r2, [pc, #484]	; (8005670 <HAL_DMA_IRQHandler+0xa0c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d045      	beq.n	800551c <HAL_DMA_IRQHandler+0x8b8>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a77      	ldr	r2, [pc, #476]	; (8005674 <HAL_DMA_IRQHandler+0xa10>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d040      	beq.n	800551c <HAL_DMA_IRQHandler+0x8b8>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a76      	ldr	r2, [pc, #472]	; (8005678 <HAL_DMA_IRQHandler+0xa14>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d03b      	beq.n	800551c <HAL_DMA_IRQHandler+0x8b8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a74      	ldr	r2, [pc, #464]	; (800567c <HAL_DMA_IRQHandler+0xa18>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d036      	beq.n	800551c <HAL_DMA_IRQHandler+0x8b8>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a73      	ldr	r2, [pc, #460]	; (8005680 <HAL_DMA_IRQHandler+0xa1c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d031      	beq.n	800551c <HAL_DMA_IRQHandler+0x8b8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a71      	ldr	r2, [pc, #452]	; (8005684 <HAL_DMA_IRQHandler+0xa20>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d02c      	beq.n	800551c <HAL_DMA_IRQHandler+0x8b8>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a70      	ldr	r2, [pc, #448]	; (8005688 <HAL_DMA_IRQHandler+0xa24>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d027      	beq.n	800551c <HAL_DMA_IRQHandler+0x8b8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a6e      	ldr	r2, [pc, #440]	; (800568c <HAL_DMA_IRQHandler+0xa28>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d022      	beq.n	800551c <HAL_DMA_IRQHandler+0x8b8>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a6d      	ldr	r2, [pc, #436]	; (8005690 <HAL_DMA_IRQHandler+0xa2c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d01d      	beq.n	800551c <HAL_DMA_IRQHandler+0x8b8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a6b      	ldr	r2, [pc, #428]	; (8005694 <HAL_DMA_IRQHandler+0xa30>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d018      	beq.n	800551c <HAL_DMA_IRQHandler+0x8b8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a6a      	ldr	r2, [pc, #424]	; (8005698 <HAL_DMA_IRQHandler+0xa34>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d013      	beq.n	800551c <HAL_DMA_IRQHandler+0x8b8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a68      	ldr	r2, [pc, #416]	; (800569c <HAL_DMA_IRQHandler+0xa38>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00e      	beq.n	800551c <HAL_DMA_IRQHandler+0x8b8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a67      	ldr	r2, [pc, #412]	; (80056a0 <HAL_DMA_IRQHandler+0xa3c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d009      	beq.n	800551c <HAL_DMA_IRQHandler+0x8b8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a65      	ldr	r2, [pc, #404]	; (80056a4 <HAL_DMA_IRQHandler+0xa40>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d004      	beq.n	800551c <HAL_DMA_IRQHandler+0x8b8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a64      	ldr	r2, [pc, #400]	; (80056a8 <HAL_DMA_IRQHandler+0xa44>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d108      	bne.n	800552e <HAL_DMA_IRQHandler+0x8ca>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0201 	bic.w	r2, r2, #1
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	e007      	b.n	800553e <HAL_DMA_IRQHandler+0x8da>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3301      	adds	r3, #1
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005546:	429a      	cmp	r2, r3
 8005548:	d307      	bcc.n	800555a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1f2      	bne.n	800553e <HAL_DMA_IRQHandler+0x8da>
 8005558:	e000      	b.n	800555c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800555a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d004      	beq.n	8005574 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2203      	movs	r2, #3
 800556e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005572:	e003      	b.n	800557c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8272 	beq.w	8005a72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	4798      	blx	r3
 8005596:	e26c      	b.n	8005a72 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a43      	ldr	r2, [pc, #268]	; (80056ac <HAL_DMA_IRQHandler+0xa48>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d022      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x984>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a42      	ldr	r2, [pc, #264]	; (80056b0 <HAL_DMA_IRQHandler+0xa4c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d01d      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x984>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a40      	ldr	r2, [pc, #256]	; (80056b4 <HAL_DMA_IRQHandler+0xa50>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d018      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x984>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a3f      	ldr	r2, [pc, #252]	; (80056b8 <HAL_DMA_IRQHandler+0xa54>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d013      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x984>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a3d      	ldr	r2, [pc, #244]	; (80056bc <HAL_DMA_IRQHandler+0xa58>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00e      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x984>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a3c      	ldr	r2, [pc, #240]	; (80056c0 <HAL_DMA_IRQHandler+0xa5c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d009      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x984>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a3a      	ldr	r2, [pc, #232]	; (80056c4 <HAL_DMA_IRQHandler+0xa60>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x984>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a39      	ldr	r2, [pc, #228]	; (80056c8 <HAL_DMA_IRQHandler+0xa64>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d101      	bne.n	80055ec <HAL_DMA_IRQHandler+0x988>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e000      	b.n	80055ee <HAL_DMA_IRQHandler+0x98a>
 80055ec:	2300      	movs	r3, #0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 823f 	beq.w	8005a72 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005600:	f003 031f 	and.w	r3, r3, #31
 8005604:	2204      	movs	r2, #4
 8005606:	409a      	lsls	r2, r3
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	4013      	ands	r3, r2
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 80cd 	beq.w	80057ac <HAL_DMA_IRQHandler+0xb48>
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 80c7 	beq.w	80057ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005622:	f003 031f 	and.w	r3, r3, #31
 8005626:	2204      	movs	r2, #4
 8005628:	409a      	lsls	r2, r3
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d049      	beq.n	80056cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 8210 	beq.w	8005a6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005654:	e20a      	b.n	8005a6c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 8206 	beq.w	8005a6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005668:	e200      	b.n	8005a6c <HAL_DMA_IRQHandler+0xe08>
 800566a:	bf00      	nop
 800566c:	40020010 	.word	0x40020010
 8005670:	40020028 	.word	0x40020028
 8005674:	40020040 	.word	0x40020040
 8005678:	40020058 	.word	0x40020058
 800567c:	40020070 	.word	0x40020070
 8005680:	40020088 	.word	0x40020088
 8005684:	400200a0 	.word	0x400200a0
 8005688:	400200b8 	.word	0x400200b8
 800568c:	40020410 	.word	0x40020410
 8005690:	40020428 	.word	0x40020428
 8005694:	40020440 	.word	0x40020440
 8005698:	40020458 	.word	0x40020458
 800569c:	40020470 	.word	0x40020470
 80056a0:	40020488 	.word	0x40020488
 80056a4:	400204a0 	.word	0x400204a0
 80056a8:	400204b8 	.word	0x400204b8
 80056ac:	58025408 	.word	0x58025408
 80056b0:	5802541c 	.word	0x5802541c
 80056b4:	58025430 	.word	0x58025430
 80056b8:	58025444 	.word	0x58025444
 80056bc:	58025458 	.word	0x58025458
 80056c0:	5802546c 	.word	0x5802546c
 80056c4:	58025480 	.word	0x58025480
 80056c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d160      	bne.n	8005798 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a7f      	ldr	r2, [pc, #508]	; (80058d8 <HAL_DMA_IRQHandler+0xc74>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d04a      	beq.n	8005776 <HAL_DMA_IRQHandler+0xb12>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a7d      	ldr	r2, [pc, #500]	; (80058dc <HAL_DMA_IRQHandler+0xc78>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d045      	beq.n	8005776 <HAL_DMA_IRQHandler+0xb12>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a7c      	ldr	r2, [pc, #496]	; (80058e0 <HAL_DMA_IRQHandler+0xc7c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d040      	beq.n	8005776 <HAL_DMA_IRQHandler+0xb12>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a7a      	ldr	r2, [pc, #488]	; (80058e4 <HAL_DMA_IRQHandler+0xc80>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d03b      	beq.n	8005776 <HAL_DMA_IRQHandler+0xb12>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a79      	ldr	r2, [pc, #484]	; (80058e8 <HAL_DMA_IRQHandler+0xc84>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d036      	beq.n	8005776 <HAL_DMA_IRQHandler+0xb12>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a77      	ldr	r2, [pc, #476]	; (80058ec <HAL_DMA_IRQHandler+0xc88>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d031      	beq.n	8005776 <HAL_DMA_IRQHandler+0xb12>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a76      	ldr	r2, [pc, #472]	; (80058f0 <HAL_DMA_IRQHandler+0xc8c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d02c      	beq.n	8005776 <HAL_DMA_IRQHandler+0xb12>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a74      	ldr	r2, [pc, #464]	; (80058f4 <HAL_DMA_IRQHandler+0xc90>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d027      	beq.n	8005776 <HAL_DMA_IRQHandler+0xb12>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a73      	ldr	r2, [pc, #460]	; (80058f8 <HAL_DMA_IRQHandler+0xc94>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d022      	beq.n	8005776 <HAL_DMA_IRQHandler+0xb12>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a71      	ldr	r2, [pc, #452]	; (80058fc <HAL_DMA_IRQHandler+0xc98>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01d      	beq.n	8005776 <HAL_DMA_IRQHandler+0xb12>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a70      	ldr	r2, [pc, #448]	; (8005900 <HAL_DMA_IRQHandler+0xc9c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d018      	beq.n	8005776 <HAL_DMA_IRQHandler+0xb12>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a6e      	ldr	r2, [pc, #440]	; (8005904 <HAL_DMA_IRQHandler+0xca0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_DMA_IRQHandler+0xb12>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a6d      	ldr	r2, [pc, #436]	; (8005908 <HAL_DMA_IRQHandler+0xca4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00e      	beq.n	8005776 <HAL_DMA_IRQHandler+0xb12>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a6b      	ldr	r2, [pc, #428]	; (800590c <HAL_DMA_IRQHandler+0xca8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d009      	beq.n	8005776 <HAL_DMA_IRQHandler+0xb12>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a6a      	ldr	r2, [pc, #424]	; (8005910 <HAL_DMA_IRQHandler+0xcac>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d004      	beq.n	8005776 <HAL_DMA_IRQHandler+0xb12>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a68      	ldr	r2, [pc, #416]	; (8005914 <HAL_DMA_IRQHandler+0xcb0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d108      	bne.n	8005788 <HAL_DMA_IRQHandler+0xb24>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0208 	bic.w	r2, r2, #8
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	e007      	b.n	8005798 <HAL_DMA_IRQHandler+0xb34>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0204 	bic.w	r2, r2, #4
 8005796:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 8165 	beq.w	8005a6c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057aa:	e15f      	b.n	8005a6c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b0:	f003 031f 	and.w	r3, r3, #31
 80057b4:	2202      	movs	r2, #2
 80057b6:	409a      	lsls	r2, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80c5 	beq.w	800594c <HAL_DMA_IRQHandler+0xce8>
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80bf 	beq.w	800594c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d2:	f003 031f 	and.w	r3, r3, #31
 80057d6:	2202      	movs	r2, #2
 80057d8:	409a      	lsls	r2, r3
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d018      	beq.n	800581a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d109      	bne.n	8005806 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 813a 	beq.w	8005a70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005804:	e134      	b.n	8005a70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 8130 	beq.w	8005a70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005818:	e12a      	b.n	8005a70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b00      	cmp	r3, #0
 8005822:	f040 8089 	bne.w	8005938 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a2b      	ldr	r2, [pc, #172]	; (80058d8 <HAL_DMA_IRQHandler+0xc74>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d04a      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xc62>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a29      	ldr	r2, [pc, #164]	; (80058dc <HAL_DMA_IRQHandler+0xc78>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d045      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xc62>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a28      	ldr	r2, [pc, #160]	; (80058e0 <HAL_DMA_IRQHandler+0xc7c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d040      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xc62>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a26      	ldr	r2, [pc, #152]	; (80058e4 <HAL_DMA_IRQHandler+0xc80>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d03b      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xc62>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a25      	ldr	r2, [pc, #148]	; (80058e8 <HAL_DMA_IRQHandler+0xc84>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d036      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xc62>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a23      	ldr	r2, [pc, #140]	; (80058ec <HAL_DMA_IRQHandler+0xc88>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d031      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xc62>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a22      	ldr	r2, [pc, #136]	; (80058f0 <HAL_DMA_IRQHandler+0xc8c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d02c      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xc62>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a20      	ldr	r2, [pc, #128]	; (80058f4 <HAL_DMA_IRQHandler+0xc90>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d027      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xc62>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1f      	ldr	r2, [pc, #124]	; (80058f8 <HAL_DMA_IRQHandler+0xc94>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d022      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xc62>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a1d      	ldr	r2, [pc, #116]	; (80058fc <HAL_DMA_IRQHandler+0xc98>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d01d      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xc62>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a1c      	ldr	r2, [pc, #112]	; (8005900 <HAL_DMA_IRQHandler+0xc9c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d018      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xc62>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <HAL_DMA_IRQHandler+0xca0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d013      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xc62>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a19      	ldr	r2, [pc, #100]	; (8005908 <HAL_DMA_IRQHandler+0xca4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00e      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xc62>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a17      	ldr	r2, [pc, #92]	; (800590c <HAL_DMA_IRQHandler+0xca8>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d009      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xc62>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a16      	ldr	r2, [pc, #88]	; (8005910 <HAL_DMA_IRQHandler+0xcac>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d004      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xc62>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a14      	ldr	r2, [pc, #80]	; (8005914 <HAL_DMA_IRQHandler+0xcb0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d128      	bne.n	8005918 <HAL_DMA_IRQHandler+0xcb4>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0214 	bic.w	r2, r2, #20
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	e027      	b.n	8005928 <HAL_DMA_IRQHandler+0xcc4>
 80058d8:	40020010 	.word	0x40020010
 80058dc:	40020028 	.word	0x40020028
 80058e0:	40020040 	.word	0x40020040
 80058e4:	40020058 	.word	0x40020058
 80058e8:	40020070 	.word	0x40020070
 80058ec:	40020088 	.word	0x40020088
 80058f0:	400200a0 	.word	0x400200a0
 80058f4:	400200b8 	.word	0x400200b8
 80058f8:	40020410 	.word	0x40020410
 80058fc:	40020428 	.word	0x40020428
 8005900:	40020440 	.word	0x40020440
 8005904:	40020458 	.word	0x40020458
 8005908:	40020470 	.word	0x40020470
 800590c:	40020488 	.word	0x40020488
 8005910:	400204a0 	.word	0x400204a0
 8005914:	400204b8 	.word	0x400204b8
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 020a 	bic.w	r2, r2, #10
 8005926:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 8097 	beq.w	8005a70 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800594a:	e091      	b.n	8005a70 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005950:	f003 031f 	and.w	r3, r3, #31
 8005954:	2208      	movs	r2, #8
 8005956:	409a      	lsls	r2, r3
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	4013      	ands	r3, r2
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 8088 	beq.w	8005a72 <HAL_DMA_IRQHandler+0xe0e>
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 8082 	beq.w	8005a72 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a41      	ldr	r2, [pc, #260]	; (8005a78 <HAL_DMA_IRQHandler+0xe14>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d04a      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xdaa>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a3f      	ldr	r2, [pc, #252]	; (8005a7c <HAL_DMA_IRQHandler+0xe18>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d045      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xdaa>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a3e      	ldr	r2, [pc, #248]	; (8005a80 <HAL_DMA_IRQHandler+0xe1c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d040      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xdaa>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a3c      	ldr	r2, [pc, #240]	; (8005a84 <HAL_DMA_IRQHandler+0xe20>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d03b      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xdaa>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a3b      	ldr	r2, [pc, #236]	; (8005a88 <HAL_DMA_IRQHandler+0xe24>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d036      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xdaa>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a39      	ldr	r2, [pc, #228]	; (8005a8c <HAL_DMA_IRQHandler+0xe28>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d031      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xdaa>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a38      	ldr	r2, [pc, #224]	; (8005a90 <HAL_DMA_IRQHandler+0xe2c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d02c      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xdaa>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a36      	ldr	r2, [pc, #216]	; (8005a94 <HAL_DMA_IRQHandler+0xe30>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d027      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xdaa>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a35      	ldr	r2, [pc, #212]	; (8005a98 <HAL_DMA_IRQHandler+0xe34>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d022      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xdaa>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a33      	ldr	r2, [pc, #204]	; (8005a9c <HAL_DMA_IRQHandler+0xe38>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01d      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xdaa>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a32      	ldr	r2, [pc, #200]	; (8005aa0 <HAL_DMA_IRQHandler+0xe3c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d018      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xdaa>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a30      	ldr	r2, [pc, #192]	; (8005aa4 <HAL_DMA_IRQHandler+0xe40>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xdaa>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a2f      	ldr	r2, [pc, #188]	; (8005aa8 <HAL_DMA_IRQHandler+0xe44>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00e      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xdaa>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a2d      	ldr	r2, [pc, #180]	; (8005aac <HAL_DMA_IRQHandler+0xe48>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d009      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xdaa>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a2c      	ldr	r2, [pc, #176]	; (8005ab0 <HAL_DMA_IRQHandler+0xe4c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d004      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xdaa>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a2a      	ldr	r2, [pc, #168]	; (8005ab4 <HAL_DMA_IRQHandler+0xe50>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d108      	bne.n	8005a20 <HAL_DMA_IRQHandler+0xdbc>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 021c 	bic.w	r2, r2, #28
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	e007      	b.n	8005a30 <HAL_DMA_IRQHandler+0xdcc>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 020e 	bic.w	r2, r2, #14
 8005a2e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a34:	f003 031f 	and.w	r3, r3, #31
 8005a38:	2201      	movs	r2, #1
 8005a3a:	409a      	lsls	r2, r3
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	4798      	blx	r3
 8005a66:	e004      	b.n	8005a72 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005a68:	bf00      	nop
 8005a6a:	e002      	b.n	8005a72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a6c:	bf00      	nop
 8005a6e:	e000      	b.n	8005a72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a70:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005a72:	3728      	adds	r7, #40	; 0x28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40020010 	.word	0x40020010
 8005a7c:	40020028 	.word	0x40020028
 8005a80:	40020040 	.word	0x40020040
 8005a84:	40020058 	.word	0x40020058
 8005a88:	40020070 	.word	0x40020070
 8005a8c:	40020088 	.word	0x40020088
 8005a90:	400200a0 	.word	0x400200a0
 8005a94:	400200b8 	.word	0x400200b8
 8005a98:	40020410 	.word	0x40020410
 8005a9c:	40020428 	.word	0x40020428
 8005aa0:	40020440 	.word	0x40020440
 8005aa4:	40020458 	.word	0x40020458
 8005aa8:	40020470 	.word	0x40020470
 8005aac:	40020488 	.word	0x40020488
 8005ab0:	400204a0 	.word	0x400204a0
 8005ab4:	400204b8 	.word	0x400204b8

08005ab8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a7f      	ldr	r2, [pc, #508]	; (8005cd4 <DMA_SetConfig+0x21c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d072      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a7d      	ldr	r2, [pc, #500]	; (8005cd8 <DMA_SetConfig+0x220>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d06d      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a7c      	ldr	r2, [pc, #496]	; (8005cdc <DMA_SetConfig+0x224>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d068      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a7a      	ldr	r2, [pc, #488]	; (8005ce0 <DMA_SetConfig+0x228>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d063      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a79      	ldr	r2, [pc, #484]	; (8005ce4 <DMA_SetConfig+0x22c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d05e      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a77      	ldr	r2, [pc, #476]	; (8005ce8 <DMA_SetConfig+0x230>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d059      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a76      	ldr	r2, [pc, #472]	; (8005cec <DMA_SetConfig+0x234>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d054      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a74      	ldr	r2, [pc, #464]	; (8005cf0 <DMA_SetConfig+0x238>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d04f      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a73      	ldr	r2, [pc, #460]	; (8005cf4 <DMA_SetConfig+0x23c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d04a      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a71      	ldr	r2, [pc, #452]	; (8005cf8 <DMA_SetConfig+0x240>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d045      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a70      	ldr	r2, [pc, #448]	; (8005cfc <DMA_SetConfig+0x244>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d040      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a6e      	ldr	r2, [pc, #440]	; (8005d00 <DMA_SetConfig+0x248>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d03b      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a6d      	ldr	r2, [pc, #436]	; (8005d04 <DMA_SetConfig+0x24c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d036      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a6b      	ldr	r2, [pc, #428]	; (8005d08 <DMA_SetConfig+0x250>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d031      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a6a      	ldr	r2, [pc, #424]	; (8005d0c <DMA_SetConfig+0x254>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d02c      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a68      	ldr	r2, [pc, #416]	; (8005d10 <DMA_SetConfig+0x258>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d027      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a67      	ldr	r2, [pc, #412]	; (8005d14 <DMA_SetConfig+0x25c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d022      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a65      	ldr	r2, [pc, #404]	; (8005d18 <DMA_SetConfig+0x260>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d01d      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a64      	ldr	r2, [pc, #400]	; (8005d1c <DMA_SetConfig+0x264>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d018      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a62      	ldr	r2, [pc, #392]	; (8005d20 <DMA_SetConfig+0x268>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d013      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a61      	ldr	r2, [pc, #388]	; (8005d24 <DMA_SetConfig+0x26c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00e      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a5f      	ldr	r2, [pc, #380]	; (8005d28 <DMA_SetConfig+0x270>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d009      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a5e      	ldr	r2, [pc, #376]	; (8005d2c <DMA_SetConfig+0x274>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d004      	beq.n	8005bc2 <DMA_SetConfig+0x10a>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a5c      	ldr	r2, [pc, #368]	; (8005d30 <DMA_SetConfig+0x278>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d101      	bne.n	8005bc6 <DMA_SetConfig+0x10e>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <DMA_SetConfig+0x110>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00d      	beq.n	8005be8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005bd4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d004      	beq.n	8005be8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005be6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a39      	ldr	r2, [pc, #228]	; (8005cd4 <DMA_SetConfig+0x21c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d04a      	beq.n	8005c88 <DMA_SetConfig+0x1d0>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a38      	ldr	r2, [pc, #224]	; (8005cd8 <DMA_SetConfig+0x220>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d045      	beq.n	8005c88 <DMA_SetConfig+0x1d0>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a36      	ldr	r2, [pc, #216]	; (8005cdc <DMA_SetConfig+0x224>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d040      	beq.n	8005c88 <DMA_SetConfig+0x1d0>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a35      	ldr	r2, [pc, #212]	; (8005ce0 <DMA_SetConfig+0x228>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d03b      	beq.n	8005c88 <DMA_SetConfig+0x1d0>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a33      	ldr	r2, [pc, #204]	; (8005ce4 <DMA_SetConfig+0x22c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d036      	beq.n	8005c88 <DMA_SetConfig+0x1d0>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a32      	ldr	r2, [pc, #200]	; (8005ce8 <DMA_SetConfig+0x230>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d031      	beq.n	8005c88 <DMA_SetConfig+0x1d0>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a30      	ldr	r2, [pc, #192]	; (8005cec <DMA_SetConfig+0x234>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d02c      	beq.n	8005c88 <DMA_SetConfig+0x1d0>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a2f      	ldr	r2, [pc, #188]	; (8005cf0 <DMA_SetConfig+0x238>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d027      	beq.n	8005c88 <DMA_SetConfig+0x1d0>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a2d      	ldr	r2, [pc, #180]	; (8005cf4 <DMA_SetConfig+0x23c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d022      	beq.n	8005c88 <DMA_SetConfig+0x1d0>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a2c      	ldr	r2, [pc, #176]	; (8005cf8 <DMA_SetConfig+0x240>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d01d      	beq.n	8005c88 <DMA_SetConfig+0x1d0>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a2a      	ldr	r2, [pc, #168]	; (8005cfc <DMA_SetConfig+0x244>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d018      	beq.n	8005c88 <DMA_SetConfig+0x1d0>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a29      	ldr	r2, [pc, #164]	; (8005d00 <DMA_SetConfig+0x248>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d013      	beq.n	8005c88 <DMA_SetConfig+0x1d0>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a27      	ldr	r2, [pc, #156]	; (8005d04 <DMA_SetConfig+0x24c>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00e      	beq.n	8005c88 <DMA_SetConfig+0x1d0>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a26      	ldr	r2, [pc, #152]	; (8005d08 <DMA_SetConfig+0x250>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d009      	beq.n	8005c88 <DMA_SetConfig+0x1d0>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a24      	ldr	r2, [pc, #144]	; (8005d0c <DMA_SetConfig+0x254>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d004      	beq.n	8005c88 <DMA_SetConfig+0x1d0>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a23      	ldr	r2, [pc, #140]	; (8005d10 <DMA_SetConfig+0x258>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d101      	bne.n	8005c8c <DMA_SetConfig+0x1d4>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e000      	b.n	8005c8e <DMA_SetConfig+0x1d6>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d059      	beq.n	8005d46 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c96:	f003 031f 	and.w	r3, r3, #31
 8005c9a:	223f      	movs	r2, #63	; 0x3f
 8005c9c:	409a      	lsls	r2, r3
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cb0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b40      	cmp	r3, #64	; 0x40
 8005cc0:	d138      	bne.n	8005d34 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005cd2:	e086      	b.n	8005de2 <DMA_SetConfig+0x32a>
 8005cd4:	40020010 	.word	0x40020010
 8005cd8:	40020028 	.word	0x40020028
 8005cdc:	40020040 	.word	0x40020040
 8005ce0:	40020058 	.word	0x40020058
 8005ce4:	40020070 	.word	0x40020070
 8005ce8:	40020088 	.word	0x40020088
 8005cec:	400200a0 	.word	0x400200a0
 8005cf0:	400200b8 	.word	0x400200b8
 8005cf4:	40020410 	.word	0x40020410
 8005cf8:	40020428 	.word	0x40020428
 8005cfc:	40020440 	.word	0x40020440
 8005d00:	40020458 	.word	0x40020458
 8005d04:	40020470 	.word	0x40020470
 8005d08:	40020488 	.word	0x40020488
 8005d0c:	400204a0 	.word	0x400204a0
 8005d10:	400204b8 	.word	0x400204b8
 8005d14:	58025408 	.word	0x58025408
 8005d18:	5802541c 	.word	0x5802541c
 8005d1c:	58025430 	.word	0x58025430
 8005d20:	58025444 	.word	0x58025444
 8005d24:	58025458 	.word	0x58025458
 8005d28:	5802546c 	.word	0x5802546c
 8005d2c:	58025480 	.word	0x58025480
 8005d30:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	60da      	str	r2, [r3, #12]
}
 8005d44:	e04d      	b.n	8005de2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a29      	ldr	r2, [pc, #164]	; (8005df0 <DMA_SetConfig+0x338>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d022      	beq.n	8005d96 <DMA_SetConfig+0x2de>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a27      	ldr	r2, [pc, #156]	; (8005df4 <DMA_SetConfig+0x33c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d01d      	beq.n	8005d96 <DMA_SetConfig+0x2de>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a26      	ldr	r2, [pc, #152]	; (8005df8 <DMA_SetConfig+0x340>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d018      	beq.n	8005d96 <DMA_SetConfig+0x2de>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a24      	ldr	r2, [pc, #144]	; (8005dfc <DMA_SetConfig+0x344>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d013      	beq.n	8005d96 <DMA_SetConfig+0x2de>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a23      	ldr	r2, [pc, #140]	; (8005e00 <DMA_SetConfig+0x348>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00e      	beq.n	8005d96 <DMA_SetConfig+0x2de>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a21      	ldr	r2, [pc, #132]	; (8005e04 <DMA_SetConfig+0x34c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d009      	beq.n	8005d96 <DMA_SetConfig+0x2de>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a20      	ldr	r2, [pc, #128]	; (8005e08 <DMA_SetConfig+0x350>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d004      	beq.n	8005d96 <DMA_SetConfig+0x2de>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1e      	ldr	r2, [pc, #120]	; (8005e0c <DMA_SetConfig+0x354>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d101      	bne.n	8005d9a <DMA_SetConfig+0x2e2>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e000      	b.n	8005d9c <DMA_SetConfig+0x2e4>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d020      	beq.n	8005de2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da4:	f003 031f 	and.w	r3, r3, #31
 8005da8:	2201      	movs	r2, #1
 8005daa:	409a      	lsls	r2, r3
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	2b40      	cmp	r3, #64	; 0x40
 8005dbe:	d108      	bne.n	8005dd2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	60da      	str	r2, [r3, #12]
}
 8005dd0:	e007      	b.n	8005de2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	60da      	str	r2, [r3, #12]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	58025408 	.word	0x58025408
 8005df4:	5802541c 	.word	0x5802541c
 8005df8:	58025430 	.word	0x58025430
 8005dfc:	58025444 	.word	0x58025444
 8005e00:	58025458 	.word	0x58025458
 8005e04:	5802546c 	.word	0x5802546c
 8005e08:	58025480 	.word	0x58025480
 8005e0c:	58025494 	.word	0x58025494

08005e10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a42      	ldr	r2, [pc, #264]	; (8005f28 <DMA_CalcBaseAndBitshift+0x118>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d04a      	beq.n	8005eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a41      	ldr	r2, [pc, #260]	; (8005f2c <DMA_CalcBaseAndBitshift+0x11c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d045      	beq.n	8005eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a3f      	ldr	r2, [pc, #252]	; (8005f30 <DMA_CalcBaseAndBitshift+0x120>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d040      	beq.n	8005eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a3e      	ldr	r2, [pc, #248]	; (8005f34 <DMA_CalcBaseAndBitshift+0x124>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d03b      	beq.n	8005eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a3c      	ldr	r2, [pc, #240]	; (8005f38 <DMA_CalcBaseAndBitshift+0x128>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d036      	beq.n	8005eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a3b      	ldr	r2, [pc, #236]	; (8005f3c <DMA_CalcBaseAndBitshift+0x12c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d031      	beq.n	8005eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a39      	ldr	r2, [pc, #228]	; (8005f40 <DMA_CalcBaseAndBitshift+0x130>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d02c      	beq.n	8005eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a38      	ldr	r2, [pc, #224]	; (8005f44 <DMA_CalcBaseAndBitshift+0x134>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d027      	beq.n	8005eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a36      	ldr	r2, [pc, #216]	; (8005f48 <DMA_CalcBaseAndBitshift+0x138>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d022      	beq.n	8005eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a35      	ldr	r2, [pc, #212]	; (8005f4c <DMA_CalcBaseAndBitshift+0x13c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d01d      	beq.n	8005eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a33      	ldr	r2, [pc, #204]	; (8005f50 <DMA_CalcBaseAndBitshift+0x140>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d018      	beq.n	8005eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a32      	ldr	r2, [pc, #200]	; (8005f54 <DMA_CalcBaseAndBitshift+0x144>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d013      	beq.n	8005eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a30      	ldr	r2, [pc, #192]	; (8005f58 <DMA_CalcBaseAndBitshift+0x148>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00e      	beq.n	8005eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a2f      	ldr	r2, [pc, #188]	; (8005f5c <DMA_CalcBaseAndBitshift+0x14c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d009      	beq.n	8005eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a2d      	ldr	r2, [pc, #180]	; (8005f60 <DMA_CalcBaseAndBitshift+0x150>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d004      	beq.n	8005eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a2c      	ldr	r2, [pc, #176]	; (8005f64 <DMA_CalcBaseAndBitshift+0x154>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d101      	bne.n	8005ebc <DMA_CalcBaseAndBitshift+0xac>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <DMA_CalcBaseAndBitshift+0xae>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d024      	beq.n	8005f0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	3b10      	subs	r3, #16
 8005eca:	4a27      	ldr	r2, [pc, #156]	; (8005f68 <DMA_CalcBaseAndBitshift+0x158>)
 8005ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed0:	091b      	lsrs	r3, r3, #4
 8005ed2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	4a24      	ldr	r2, [pc, #144]	; (8005f6c <DMA_CalcBaseAndBitshift+0x15c>)
 8005edc:	5cd3      	ldrb	r3, [r2, r3]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d908      	bls.n	8005efc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	4b1f      	ldr	r3, [pc, #124]	; (8005f70 <DMA_CalcBaseAndBitshift+0x160>)
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	1d1a      	adds	r2, r3, #4
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	659a      	str	r2, [r3, #88]	; 0x58
 8005efa:	e00d      	b.n	8005f18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	461a      	mov	r2, r3
 8005f02:	4b1b      	ldr	r3, [pc, #108]	; (8005f70 <DMA_CalcBaseAndBitshift+0x160>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6593      	str	r3, [r2, #88]	; 0x58
 8005f0a:	e005      	b.n	8005f18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	40020010 	.word	0x40020010
 8005f2c:	40020028 	.word	0x40020028
 8005f30:	40020040 	.word	0x40020040
 8005f34:	40020058 	.word	0x40020058
 8005f38:	40020070 	.word	0x40020070
 8005f3c:	40020088 	.word	0x40020088
 8005f40:	400200a0 	.word	0x400200a0
 8005f44:	400200b8 	.word	0x400200b8
 8005f48:	40020410 	.word	0x40020410
 8005f4c:	40020428 	.word	0x40020428
 8005f50:	40020440 	.word	0x40020440
 8005f54:	40020458 	.word	0x40020458
 8005f58:	40020470 	.word	0x40020470
 8005f5c:	40020488 	.word	0x40020488
 8005f60:	400204a0 	.word	0x400204a0
 8005f64:	400204b8 	.word	0x400204b8
 8005f68:	aaaaaaab 	.word	0xaaaaaaab
 8005f6c:	08015998 	.word	0x08015998
 8005f70:	fffffc00 	.word	0xfffffc00

08005f74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d120      	bne.n	8005fca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8c:	2b03      	cmp	r3, #3
 8005f8e:	d858      	bhi.n	8006042 <DMA_CheckFifoParam+0xce>
 8005f90:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <DMA_CheckFifoParam+0x24>)
 8005f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f96:	bf00      	nop
 8005f98:	08005fa9 	.word	0x08005fa9
 8005f9c:	08005fbb 	.word	0x08005fbb
 8005fa0:	08005fa9 	.word	0x08005fa9
 8005fa4:	08006043 	.word	0x08006043
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d048      	beq.n	8006046 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fb8:	e045      	b.n	8006046 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fc2:	d142      	bne.n	800604a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fc8:	e03f      	b.n	800604a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd2:	d123      	bne.n	800601c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d838      	bhi.n	800604e <DMA_CheckFifoParam+0xda>
 8005fdc:	a201      	add	r2, pc, #4	; (adr r2, 8005fe4 <DMA_CheckFifoParam+0x70>)
 8005fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe2:	bf00      	nop
 8005fe4:	08005ff5 	.word	0x08005ff5
 8005fe8:	08005ffb 	.word	0x08005ffb
 8005fec:	08005ff5 	.word	0x08005ff5
 8005ff0:	0800600d 	.word	0x0800600d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	73fb      	strb	r3, [r7, #15]
        break;
 8005ff8:	e030      	b.n	800605c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d025      	beq.n	8006052 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800600a:	e022      	b.n	8006052 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006014:	d11f      	bne.n	8006056 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800601a:	e01c      	b.n	8006056 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006020:	2b02      	cmp	r3, #2
 8006022:	d902      	bls.n	800602a <DMA_CheckFifoParam+0xb6>
 8006024:	2b03      	cmp	r3, #3
 8006026:	d003      	beq.n	8006030 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006028:	e018      	b.n	800605c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	73fb      	strb	r3, [r7, #15]
        break;
 800602e:	e015      	b.n	800605c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00e      	beq.n	800605a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	73fb      	strb	r3, [r7, #15]
    break;
 8006040:	e00b      	b.n	800605a <DMA_CheckFifoParam+0xe6>
        break;
 8006042:	bf00      	nop
 8006044:	e00a      	b.n	800605c <DMA_CheckFifoParam+0xe8>
        break;
 8006046:	bf00      	nop
 8006048:	e008      	b.n	800605c <DMA_CheckFifoParam+0xe8>
        break;
 800604a:	bf00      	nop
 800604c:	e006      	b.n	800605c <DMA_CheckFifoParam+0xe8>
        break;
 800604e:	bf00      	nop
 8006050:	e004      	b.n	800605c <DMA_CheckFifoParam+0xe8>
        break;
 8006052:	bf00      	nop
 8006054:	e002      	b.n	800605c <DMA_CheckFifoParam+0xe8>
        break;
 8006056:	bf00      	nop
 8006058:	e000      	b.n	800605c <DMA_CheckFifoParam+0xe8>
    break;
 800605a:	bf00      	nop
    }
  }

  return status;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop

0800606c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a38      	ldr	r2, [pc, #224]	; (8006160 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d022      	beq.n	80060ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a36      	ldr	r2, [pc, #216]	; (8006164 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d01d      	beq.n	80060ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a35      	ldr	r2, [pc, #212]	; (8006168 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d018      	beq.n	80060ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a33      	ldr	r2, [pc, #204]	; (800616c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d013      	beq.n	80060ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a32      	ldr	r2, [pc, #200]	; (8006170 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00e      	beq.n	80060ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a30      	ldr	r2, [pc, #192]	; (8006174 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d009      	beq.n	80060ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a2f      	ldr	r2, [pc, #188]	; (8006178 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d004      	beq.n	80060ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a2d      	ldr	r2, [pc, #180]	; (800617c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d101      	bne.n	80060ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80060ce:	2300      	movs	r3, #0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01a      	beq.n	800610a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	3b08      	subs	r3, #8
 80060dc:	4a28      	ldr	r2, [pc, #160]	; (8006180 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80060de:	fba2 2303 	umull	r2, r3, r2, r3
 80060e2:	091b      	lsrs	r3, r3, #4
 80060e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4b26      	ldr	r3, [pc, #152]	; (8006184 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	461a      	mov	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a24      	ldr	r2, [pc, #144]	; (8006188 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80060f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f003 031f 	and.w	r3, r3, #31
 8006100:	2201      	movs	r2, #1
 8006102:	409a      	lsls	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006108:	e024      	b.n	8006154 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	3b10      	subs	r3, #16
 8006112:	4a1e      	ldr	r2, [pc, #120]	; (800618c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006114:	fba2 2303 	umull	r2, r3, r2, r3
 8006118:	091b      	lsrs	r3, r3, #4
 800611a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4a1c      	ldr	r2, [pc, #112]	; (8006190 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d806      	bhi.n	8006132 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	4a1b      	ldr	r2, [pc, #108]	; (8006194 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d902      	bls.n	8006132 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3308      	adds	r3, #8
 8006130:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4b18      	ldr	r3, [pc, #96]	; (8006198 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	461a      	mov	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a16      	ldr	r2, [pc, #88]	; (800619c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006144:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	2201      	movs	r2, #1
 800614e:	409a      	lsls	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	58025408 	.word	0x58025408
 8006164:	5802541c 	.word	0x5802541c
 8006168:	58025430 	.word	0x58025430
 800616c:	58025444 	.word	0x58025444
 8006170:	58025458 	.word	0x58025458
 8006174:	5802546c 	.word	0x5802546c
 8006178:	58025480 	.word	0x58025480
 800617c:	58025494 	.word	0x58025494
 8006180:	cccccccd 	.word	0xcccccccd
 8006184:	16009600 	.word	0x16009600
 8006188:	58025880 	.word	0x58025880
 800618c:	aaaaaaab 	.word	0xaaaaaaab
 8006190:	400204b8 	.word	0x400204b8
 8006194:	4002040f 	.word	0x4002040f
 8006198:	10008200 	.word	0x10008200
 800619c:	40020880 	.word	0x40020880

080061a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d04a      	beq.n	800624c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d847      	bhi.n	800624c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a25      	ldr	r2, [pc, #148]	; (8006258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d022      	beq.n	800620c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a24      	ldr	r2, [pc, #144]	; (800625c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d01d      	beq.n	800620c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a22      	ldr	r2, [pc, #136]	; (8006260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d018      	beq.n	800620c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a21      	ldr	r2, [pc, #132]	; (8006264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d013      	beq.n	800620c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a1f      	ldr	r2, [pc, #124]	; (8006268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00e      	beq.n	800620c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a1e      	ldr	r2, [pc, #120]	; (800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d009      	beq.n	800620c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1c      	ldr	r2, [pc, #112]	; (8006270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d004      	beq.n	800620c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1b      	ldr	r2, [pc, #108]	; (8006274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d101      	bne.n	8006210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006210:	2300      	movs	r3, #0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4b17      	ldr	r3, [pc, #92]	; (8006278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	461a      	mov	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a15      	ldr	r2, [pc, #84]	; (800627c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006228:	671a      	str	r2, [r3, #112]	; 0x70
 800622a:	e009      	b.n	8006240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4b14      	ldr	r3, [pc, #80]	; (8006280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	461a      	mov	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a11      	ldr	r2, [pc, #68]	; (8006284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800623e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3b01      	subs	r3, #1
 8006244:	2201      	movs	r2, #1
 8006246:	409a      	lsls	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800624c:	bf00      	nop
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	58025408 	.word	0x58025408
 800625c:	5802541c 	.word	0x5802541c
 8006260:	58025430 	.word	0x58025430
 8006264:	58025444 	.word	0x58025444
 8006268:	58025458 	.word	0x58025458
 800626c:	5802546c 	.word	0x5802546c
 8006270:	58025480 	.word	0x58025480
 8006274:	58025494 	.word	0x58025494
 8006278:	1600963f 	.word	0x1600963f
 800627c:	58025940 	.word	0x58025940
 8006280:	1000823f 	.word	0x1000823f
 8006284:	40020940 	.word	0x40020940

08006288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006288:	b480      	push	{r7}
 800628a:	b089      	sub	sp, #36	; 0x24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006292:	2300      	movs	r3, #0
 8006294:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006296:	4b89      	ldr	r3, [pc, #548]	; (80064bc <HAL_GPIO_Init+0x234>)
 8006298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800629a:	e194      	b.n	80065c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	2101      	movs	r1, #1
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	fa01 f303 	lsl.w	r3, r1, r3
 80062a8:	4013      	ands	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 8186 	beq.w	80065c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f003 0303 	and.w	r3, r3, #3
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d005      	beq.n	80062cc <HAL_GPIO_Init+0x44>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f003 0303 	and.w	r3, r3, #3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d130      	bne.n	800632e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	2203      	movs	r2, #3
 80062d8:	fa02 f303 	lsl.w	r3, r2, r3
 80062dc:	43db      	mvns	r3, r3
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	4013      	ands	r3, r2
 80062e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	fa02 f303 	lsl.w	r3, r2, r3
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006302:	2201      	movs	r2, #1
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	fa02 f303 	lsl.w	r3, r2, r3
 800630a:	43db      	mvns	r3, r3
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	4013      	ands	r3, r2
 8006310:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	091b      	lsrs	r3, r3, #4
 8006318:	f003 0201 	and.w	r2, r3, #1
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	fa02 f303 	lsl.w	r3, r2, r3
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4313      	orrs	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	2b03      	cmp	r3, #3
 8006338:	d017      	beq.n	800636a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	2203      	movs	r2, #3
 8006346:	fa02 f303 	lsl.w	r3, r2, r3
 800634a:	43db      	mvns	r3, r3
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	4013      	ands	r3, r2
 8006350:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	fa02 f303 	lsl.w	r3, r2, r3
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	4313      	orrs	r3, r2
 8006362:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d123      	bne.n	80063be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	08da      	lsrs	r2, r3, #3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3208      	adds	r2, #8
 800637e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	220f      	movs	r2, #15
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	43db      	mvns	r3, r3
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	4013      	ands	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	691a      	ldr	r2, [r3, #16]
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f003 0307 	and.w	r3, r3, #7
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	08da      	lsrs	r2, r3, #3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3208      	adds	r2, #8
 80063b8:	69b9      	ldr	r1, [r7, #24]
 80063ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	2203      	movs	r2, #3
 80063ca:	fa02 f303 	lsl.w	r3, r2, r3
 80063ce:	43db      	mvns	r3, r3
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	4013      	ands	r3, r2
 80063d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f003 0203 	and.w	r2, r3, #3
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	fa02 f303 	lsl.w	r3, r2, r3
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 80e0 	beq.w	80065c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006400:	4b2f      	ldr	r3, [pc, #188]	; (80064c0 <HAL_GPIO_Init+0x238>)
 8006402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006406:	4a2e      	ldr	r2, [pc, #184]	; (80064c0 <HAL_GPIO_Init+0x238>)
 8006408:	f043 0302 	orr.w	r3, r3, #2
 800640c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006410:	4b2b      	ldr	r3, [pc, #172]	; (80064c0 <HAL_GPIO_Init+0x238>)
 8006412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800641e:	4a29      	ldr	r2, [pc, #164]	; (80064c4 <HAL_GPIO_Init+0x23c>)
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	089b      	lsrs	r3, r3, #2
 8006424:	3302      	adds	r3, #2
 8006426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800642a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	220f      	movs	r2, #15
 8006436:	fa02 f303 	lsl.w	r3, r2, r3
 800643a:	43db      	mvns	r3, r3
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	4013      	ands	r3, r2
 8006440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a20      	ldr	r2, [pc, #128]	; (80064c8 <HAL_GPIO_Init+0x240>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d052      	beq.n	80064f0 <HAL_GPIO_Init+0x268>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a1f      	ldr	r2, [pc, #124]	; (80064cc <HAL_GPIO_Init+0x244>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d031      	beq.n	80064b6 <HAL_GPIO_Init+0x22e>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a1e      	ldr	r2, [pc, #120]	; (80064d0 <HAL_GPIO_Init+0x248>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d02b      	beq.n	80064b2 <HAL_GPIO_Init+0x22a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a1d      	ldr	r2, [pc, #116]	; (80064d4 <HAL_GPIO_Init+0x24c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d025      	beq.n	80064ae <HAL_GPIO_Init+0x226>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a1c      	ldr	r2, [pc, #112]	; (80064d8 <HAL_GPIO_Init+0x250>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d01f      	beq.n	80064aa <HAL_GPIO_Init+0x222>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a1b      	ldr	r2, [pc, #108]	; (80064dc <HAL_GPIO_Init+0x254>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d019      	beq.n	80064a6 <HAL_GPIO_Init+0x21e>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a1a      	ldr	r2, [pc, #104]	; (80064e0 <HAL_GPIO_Init+0x258>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d013      	beq.n	80064a2 <HAL_GPIO_Init+0x21a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a19      	ldr	r2, [pc, #100]	; (80064e4 <HAL_GPIO_Init+0x25c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d00d      	beq.n	800649e <HAL_GPIO_Init+0x216>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a18      	ldr	r2, [pc, #96]	; (80064e8 <HAL_GPIO_Init+0x260>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d007      	beq.n	800649a <HAL_GPIO_Init+0x212>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a17      	ldr	r2, [pc, #92]	; (80064ec <HAL_GPIO_Init+0x264>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d101      	bne.n	8006496 <HAL_GPIO_Init+0x20e>
 8006492:	2309      	movs	r3, #9
 8006494:	e02d      	b.n	80064f2 <HAL_GPIO_Init+0x26a>
 8006496:	230a      	movs	r3, #10
 8006498:	e02b      	b.n	80064f2 <HAL_GPIO_Init+0x26a>
 800649a:	2308      	movs	r3, #8
 800649c:	e029      	b.n	80064f2 <HAL_GPIO_Init+0x26a>
 800649e:	2307      	movs	r3, #7
 80064a0:	e027      	b.n	80064f2 <HAL_GPIO_Init+0x26a>
 80064a2:	2306      	movs	r3, #6
 80064a4:	e025      	b.n	80064f2 <HAL_GPIO_Init+0x26a>
 80064a6:	2305      	movs	r3, #5
 80064a8:	e023      	b.n	80064f2 <HAL_GPIO_Init+0x26a>
 80064aa:	2304      	movs	r3, #4
 80064ac:	e021      	b.n	80064f2 <HAL_GPIO_Init+0x26a>
 80064ae:	2303      	movs	r3, #3
 80064b0:	e01f      	b.n	80064f2 <HAL_GPIO_Init+0x26a>
 80064b2:	2302      	movs	r3, #2
 80064b4:	e01d      	b.n	80064f2 <HAL_GPIO_Init+0x26a>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e01b      	b.n	80064f2 <HAL_GPIO_Init+0x26a>
 80064ba:	bf00      	nop
 80064bc:	58000080 	.word	0x58000080
 80064c0:	58024400 	.word	0x58024400
 80064c4:	58000400 	.word	0x58000400
 80064c8:	58020000 	.word	0x58020000
 80064cc:	58020400 	.word	0x58020400
 80064d0:	58020800 	.word	0x58020800
 80064d4:	58020c00 	.word	0x58020c00
 80064d8:	58021000 	.word	0x58021000
 80064dc:	58021400 	.word	0x58021400
 80064e0:	58021800 	.word	0x58021800
 80064e4:	58021c00 	.word	0x58021c00
 80064e8:	58022000 	.word	0x58022000
 80064ec:	58022400 	.word	0x58022400
 80064f0:	2300      	movs	r3, #0
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	f002 0203 	and.w	r2, r2, #3
 80064f8:	0092      	lsls	r2, r2, #2
 80064fa:	4093      	lsls	r3, r2
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	4313      	orrs	r3, r2
 8006500:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006502:	4938      	ldr	r1, [pc, #224]	; (80065e4 <HAL_GPIO_Init+0x35c>)
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	089b      	lsrs	r3, r3, #2
 8006508:	3302      	adds	r3, #2
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	43db      	mvns	r3, r3
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	4013      	ands	r3, r2
 8006520:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006536:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800653e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	43db      	mvns	r3, r3
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	4013      	ands	r3, r2
 800654e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	4313      	orrs	r3, r2
 8006562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	43db      	mvns	r3, r3
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	4013      	ands	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	4313      	orrs	r3, r2
 800658e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	43db      	mvns	r3, r3
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	4013      	ands	r3, r2
 80065a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	3301      	adds	r3, #1
 80065c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	fa22 f303 	lsr.w	r3, r2, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f47f ae63 	bne.w	800629c <HAL_GPIO_Init+0x14>
  }
}
 80065d6:	bf00      	nop
 80065d8:	bf00      	nop
 80065da:	3724      	adds	r7, #36	; 0x24
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	58000400 	.word	0x58000400

080065e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	691a      	ldr	r2, [r3, #16]
 80065f8:	887b      	ldrh	r3, [r7, #2]
 80065fa:	4013      	ands	r3, r2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006600:	2301      	movs	r3, #1
 8006602:	73fb      	strb	r3, [r7, #15]
 8006604:	e001      	b.n	800660a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800660a:	7bfb      	ldrb	r3, [r7, #15]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	807b      	strh	r3, [r7, #2]
 8006624:	4613      	mov	r3, r2
 8006626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006628:	787b      	ldrb	r3, [r7, #1]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800662e:	887a      	ldrh	r2, [r7, #2]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006634:	e003      	b.n	800663e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006636:	887b      	ldrh	r3, [r7, #2]
 8006638:	041a      	lsls	r2, r3, #16
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	619a      	str	r2, [r3, #24]
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800664a:	b480      	push	{r7}
 800664c:	b085      	sub	sp, #20
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	460b      	mov	r3, r1
 8006654:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800665c:	887a      	ldrh	r2, [r7, #2]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4013      	ands	r3, r2
 8006662:	041a      	lsls	r2, r3, #16
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	43d9      	mvns	r1, r3
 8006668:	887b      	ldrh	r3, [r7, #2]
 800666a:	400b      	ands	r3, r1
 800666c:	431a      	orrs	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	619a      	str	r2, [r3, #24]
}
 8006672:	bf00      	nop
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
	...

08006680 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b088      	sub	sp, #32
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e10b      	b.n	80068aa <HAL_I2S_Init+0x22a>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fa f972 	bl	8000990 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d107      	bne.n	80066d2 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2200      	movs	r2, #0
 80066d8:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d008      	beq.n	80066f4 <HAL_I2S_Init+0x74>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b06      	cmp	r3, #6
 80066e8:	d004      	beq.n	80066f4 <HAL_I2S_Init+0x74>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b0a      	cmp	r3, #10
 80066f0:	f040 8085 	bne.w	80067fe <HAL_I2S_Init+0x17e>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d058      	beq.n	80067ae <HAL_I2S_Init+0x12e>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8006704:	2302      	movs	r3, #2
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	e001      	b.n	800670e <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 800670a:	2301      	movs	r3, #1
 800670c:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	2b30      	cmp	r3, #48	; 0x30
 8006714:	d003      	beq.n	800671e <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800671a:	2bb0      	cmp	r3, #176	; 0xb0
 800671c:	d102      	bne.n	8006724 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 800671e:	2301      	movs	r3, #1
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	e001      	b.n	8006728 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8006728:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800672c:	f002 fb2a 	bl	8008d84 <HAL_RCCEx_GetPeriphCLKFreq>
 8006730:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800673a:	d113      	bne.n	8006764 <HAL_I2S_Init+0xe4>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800673c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	fa22 f303 	lsr.w	r3, r2, r3
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	fbb2 f2f3 	udiv	r2, r2, r3
 800674c:	4613      	mov	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	461a      	mov	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	fbb2 f3f3 	udiv	r3, r2, r3
 800675e:	3305      	adds	r3, #5
 8006760:	613b      	str	r3, [r7, #16]
 8006762:	e014      	b.n	800678e <HAL_I2S_Init+0x10e>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8006764:	2220      	movs	r2, #32
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	fa22 f303 	lsr.w	r3, r2, r3
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	fb02 f303 	mul.w	r3, r2, r3
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	fbb2 f2f3 	udiv	r2, r2, r3
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	461a      	mov	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	fbb2 f3f3 	udiv	r3, r2, r3
 800678a:	3305      	adds	r3, #5
 800678c:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	4a48      	ldr	r2, [pc, #288]	; (80068b4 <HAL_I2S_Init+0x234>)
 8006792:	fba2 2303 	umull	r2, r3, r2, r3
 8006796:	08db      	lsrs	r3, r3, #3
 8006798:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	085b      	lsrs	r3, r3, #1
 80067aa:	61fb      	str	r3, [r7, #28]
 80067ac:	e003      	b.n	80067b6 <HAL_I2S_Init+0x136>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80067ae:	2302      	movs	r3, #2
 80067b0:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d102      	bne.n	80067c2 <HAL_I2S_Init+0x142>
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d002      	beq.n	80067c8 <HAL_I2S_Init+0x148>
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	2bff      	cmp	r3, #255	; 0xff
 80067c6:	d907      	bls.n	80067d8 <HAL_I2S_Init+0x158>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067cc:	f043 0210 	orr.w	r2, r3, #16
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e068      	b.n	80068aa <HAL_I2S_Init+0x22a>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_I2S_Init+0x162>
    {
      i2sodd = 1UL;
 80067de:	2301      	movs	r3, #1
 80067e0:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067e8:	4b33      	ldr	r3, [pc, #204]	; (80068b8 <HAL_I2S_Init+0x238>)
 80067ea:	4013      	ands	r3, r2
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	0411      	lsls	r1, r2, #16
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	0612      	lsls	r2, r2, #24
 80067f4:	4311      	orrs	r1, r2
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6812      	ldr	r2, [r2, #0]
 80067fa:	430b      	orrs	r3, r1
 80067fc:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006804:	4b2d      	ldr	r3, [pc, #180]	; (80068bc <HAL_I2S_Init+0x23c>)
 8006806:	4013      	ands	r3, r2
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	6851      	ldr	r1, [r2, #4]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6892      	ldr	r2, [r2, #8]
 8006810:	4311      	orrs	r1, r2
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	68d2      	ldr	r2, [r2, #12]
 8006816:	4311      	orrs	r1, r2
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	6992      	ldr	r2, [r2, #24]
 800681c:	4311      	orrs	r1, r2
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6a12      	ldr	r2, [r2, #32]
 8006822:	4311      	orrs	r1, r2
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006828:	4311      	orrs	r1, r2
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	6912      	ldr	r2, [r2, #16]
 800682e:	430a      	orrs	r2, r1
 8006830:	431a      	orrs	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f640 72f8 	movw	r2, #4088	; 0xff8
 8006844:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006854:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69da      	ldr	r2, [r3, #28]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	2b04      	cmp	r3, #4
 8006872:	d007      	beq.n	8006884 <HAL_I2S_Init+0x204>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2b06      	cmp	r3, #6
 800687a:	d003      	beq.n	8006884 <HAL_I2S_Init+0x204>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	2b0a      	cmp	r3, #10
 8006882:	d10a      	bne.n	800689a <HAL_I2S_Init+0x21a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3720      	adds	r7, #32
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	cccccccd 	.word	0xcccccccd
 80068b8:	fe00ffff 	.word	0xfe00ffff
 80068bc:	fdff9040 	.word	0xfdff9040

080068c0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2sa, uint16_t *pDataa,I2S_HandleTypeDef *hi2sb, uint16_t *pDatab,I2S_HandleTypeDef *hi2sc, uint16_t *pDatac, uint16_t Size)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	75fb      	strb	r3, [r7, #23]

  if (((pDataa == NULL) || (Size == 0UL))&&((pDatab == NULL) || (Size == 0UL))&&((pDatac == NULL) || (Size == 0UL)))
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <HAL_I2S_Receive_DMA+0x1e>
 80068d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10d      	bne.n	80068fa <HAL_I2S_Receive_DMA+0x3a>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <HAL_I2S_Receive_DMA+0x2a>
 80068e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d107      	bne.n	80068fa <HAL_I2S_Receive_DMA+0x3a>
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <HAL_I2S_Receive_DMA+0x36>
 80068f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_I2S_Receive_DMA+0x3a>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e18e      	b.n	8006c18 <HAL_I2S_Receive_DMA+0x358>
  }

  if (((pDataa == NULL) || (Size == 0UL))&&((pDatab == NULL) || (Size == 0UL))&&((pDatac == NULL) || (Size == 0UL)))
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <HAL_I2S_Receive_DMA+0x46>
 8006900:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10d      	bne.n	8006922 <HAL_I2S_Receive_DMA+0x62>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d002      	beq.n	8006912 <HAL_I2S_Receive_DMA+0x52>
 800690c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800690e:	2b00      	cmp	r3, #0
 8006910:	d107      	bne.n	8006922 <HAL_I2S_Receive_DMA+0x62>
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <HAL_I2S_Receive_DMA+0x5e>
 8006918:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_I2S_Receive_DMA+0x62>
  {
    return HAL_BUSY;
 800691e:	2302      	movs	r3, #2
 8006920:	e17a      	b.n	8006c18 <HAL_I2S_Receive_DMA+0x358>
  }

  /* Process Locked */
  __HAL_LOCK(hi2sa);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b01      	cmp	r3, #1
 800692c:	d101      	bne.n	8006932 <HAL_I2S_Receive_DMA+0x72>
 800692e:	2302      	movs	r3, #2
 8006930:	e172      	b.n	8006c18 <HAL_I2S_Receive_DMA+0x358>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  __HAL_LOCK(hi2sb);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_I2S_Receive_DMA+0x8a>
 8006946:	2302      	movs	r3, #2
 8006948:	e166      	b.n	8006c18 <HAL_I2S_Receive_DMA+0x358>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  __HAL_LOCK(hi2sc);
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b01      	cmp	r3, #1
 800695c:	d101      	bne.n	8006962 <HAL_I2S_Receive_DMA+0xa2>
 800695e:	2302      	movs	r3, #2
 8006960:	e15a      	b.n	8006c18 <HAL_I2S_Receive_DMA+0x358>
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2sa->State       = HAL_I2S_STATE_BUSY_RX;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2204      	movs	r2, #4
 800696e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2sa->ErrorCode   = HAL_I2S_ERROR_NONE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	651a      	str	r2, [r3, #80]	; 0x50
  hi2sa->pRxBuffPtr  = pDataa;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2sa->RxXferSize  = Size;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006982:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2sa->RxXferCount = Size;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006988:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2sb->State       = HAL_I2S_STATE_BUSY_RX;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2204      	movs	r2, #4
 800698e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2sb->ErrorCode   = HAL_I2S_ERROR_NONE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	651a      	str	r2, [r3, #80]	; 0x50
  hi2sb->pRxBuffPtr  = pDatab;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2sb->RxXferSize  = Size;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80069a2:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2sb->RxXferCount = Size;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80069a8:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2sc->State       = HAL_I2S_STATE_BUSY_RX;
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	2204      	movs	r2, #4
 80069ae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2sc->ErrorCode   = HAL_I2S_ERROR_NONE;
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	2200      	movs	r2, #0
 80069b6:	651a      	str	r2, [r3, #80]	; 0x50
  hi2sc->pRxBuffPtr  = pDatac;
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069bc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2sc->RxXferSize  = Size;
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80069c2:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2sc->RxXferCount = Size;
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80069c8:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Init field not used in handle to zero */
  hi2sa->pTxBuffPtr  = NULL;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2sa->TxXferSize  = (uint16_t)0UL;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2sa->TxXferCount = (uint16_t)0UL;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2sb->pTxBuffPtr  = NULL;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2sb->TxXferSize  = (uint16_t)0UL;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2sb->TxXferCount = (uint16_t)0UL;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2sc->pTxBuffPtr  = NULL;
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	2200      	movs	r2, #0
 80069f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2sc->TxXferSize  = (uint16_t)0UL;
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	2200      	movs	r2, #0
 80069f8:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2sc->TxXferCount = (uint16_t)0UL;
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	2200      	movs	r2, #0
 80069fe:	865a      	strh	r2, [r3, #50]	; 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2sa->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a04:	4a86      	ldr	r2, [pc, #536]	; (8006c20 <HAL_I2S_Receive_DMA+0x360>)
 8006a06:	641a      	str	r2, [r3, #64]	; 0x40
  hi2sb->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a0c:	4a84      	ldr	r2, [pc, #528]	; (8006c20 <HAL_I2S_Receive_DMA+0x360>)
 8006a0e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2sc->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a14:	4a82      	ldr	r2, [pc, #520]	; (8006c20 <HAL_I2S_Receive_DMA+0x360>)
 8006a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2sa->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a1c:	4a81      	ldr	r2, [pc, #516]	; (8006c24 <HAL_I2S_Receive_DMA+0x364>)
 8006a1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2sb->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a24:	4a7f      	ldr	r2, [pc, #508]	; (8006c24 <HAL_I2S_Receive_DMA+0x364>)
 8006a26:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2sc->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2c:	4a7d      	ldr	r2, [pc, #500]	; (8006c24 <HAL_I2S_Receive_DMA+0x364>)
 8006a2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2sa->hdmarx->XferErrorCallback = I2S_DMAError;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a34:	4a7c      	ldr	r2, [pc, #496]	; (8006c28 <HAL_I2S_Receive_DMA+0x368>)
 8006a36:	64da      	str	r2, [r3, #76]	; 0x4c
  hi2sb->hdmarx->XferErrorCallback = I2S_DMAError;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3c:	4a7a      	ldr	r2, [pc, #488]	; (8006c28 <HAL_I2S_Receive_DMA+0x368>)
 8006a3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hi2sc->hdmarx->XferErrorCallback = I2S_DMAError;
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a44:	4a78      	ldr	r2, [pc, #480]	; (8006c28 <HAL_I2S_Receive_DMA+0x368>)
 8006a46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2sa->hdmarx, (uint32_t)&hi2sa->Instance->RXDR, (uint32_t)hi2sa->pRxBuffPtr,
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3330      	adds	r3, #48	; 0x30
 8006a52:	4619      	mov	r1, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a58:	461a      	mov	r2, r3
                                 hi2sa->RxXferCount))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006a5e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2sa->hdmarx, (uint32_t)&hi2sa->Instance->RXDR, (uint32_t)hi2sa->pRxBuffPtr,
 8006a60:	f7fd fe96 	bl	8004790 <HAL_DMA_Start_IT>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d011      	beq.n	8006a8e <HAL_I2S_Receive_DMA+0x1ce>
  {
    /* Update I2S error code */
    SET_BIT(hi2sa->ErrorCode, HAL_I2S_ERROR_DMA);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6e:	f043 0208 	orr.w	r2, r3, #8
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	651a      	str	r2, [r3, #80]	; 0x50
    hi2sa->State = HAL_I2S_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2sa);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e0c4      	b.n	8006c18 <HAL_I2S_Receive_DMA+0x358>
  }

  if (HAL_OK != HAL_DMA_Start_IT(hi2sb->hdmarx, (uint32_t)&hi2sb->Instance->RXDR, (uint32_t)hi2sb->pRxBuffPtr,
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3330      	adds	r3, #48	; 0x30
 8006a98:	4619      	mov	r1, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9e:	461a      	mov	r2, r3
                                 hi2sb->RxXferCount))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006aa4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2sb->hdmarx, (uint32_t)&hi2sb->Instance->RXDR, (uint32_t)hi2sb->pRxBuffPtr,
 8006aa6:	f7fd fe73 	bl	8004790 <HAL_DMA_Start_IT>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d011      	beq.n	8006ad4 <HAL_I2S_Receive_DMA+0x214>
  {
    /* Update I2S error code */
    SET_BIT(hi2sb->ErrorCode, HAL_I2S_ERROR_DMA);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab4:	f043 0208 	orr.w	r2, r3, #8
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	651a      	str	r2, [r3, #80]	; 0x50
    hi2sb->State = HAL_I2S_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2sb);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e0a1      	b.n	8006c18 <HAL_I2S_Receive_DMA+0x358>
  }

  if (HAL_OK != HAL_DMA_Start_IT(hi2sc->hdmarx, (uint32_t)&hi2sc->Instance->RXDR, (uint32_t)hi2sc->pRxBuffPtr,
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3330      	adds	r3, #48	; 0x30
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae4:	461a      	mov	r2, r3
                                 hi2sc->RxXferCount))
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006aea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2sc->hdmarx, (uint32_t)&hi2sc->Instance->RXDR, (uint32_t)hi2sc->pRxBuffPtr,
 8006aec:	f7fd fe50 	bl	8004790 <HAL_DMA_Start_IT>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d011      	beq.n	8006b1a <HAL_I2S_Receive_DMA+0x25a>
  {
    /* Update I2S error code */
    SET_BIT(hi2sc->ErrorCode, HAL_I2S_ERROR_DMA);
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006afa:	f043 0208 	orr.w	r2, r3, #8
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	651a      	str	r2, [r3, #80]	; 0x50
    hi2sc->State = HAL_I2S_STATE_READY;
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2sc);
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e07e      	b.n	8006c18 <HAL_I2S_Receive_DMA+0x358>
  }

  /* Check if the I2S Rx request is already enabled */
  if ((HAL_IS_BIT_CLR(hi2sa->Instance->CFG1, SPI_CFG1_RXDMAEN))&&(HAL_IS_BIT_CLR(hi2sb->Instance->CFG1, SPI_CFG1_RXDMAEN))&&(HAL_IS_BIT_CLR(hi2sc->Instance->CFG1, SPI_CFG1_RXDMAEN)))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d125      	bne.n	8006b74 <HAL_I2S_Receive_DMA+0x2b4>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d11e      	bne.n	8006b74 <HAL_I2S_Receive_DMA+0x2b4>
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d117      	bne.n	8006b74 <HAL_I2S_Receive_DMA+0x2b4>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2sa->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689a      	ldr	r2, [r3, #8]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b52:	609a      	str	r2, [r3, #8]
    SET_BIT(hi2sb->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689a      	ldr	r2, [r3, #8]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b62:	609a      	str	r2, [r3, #8]
    SET_BIT(hi2sc->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b72:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if ((HAL_IS_BIT_CLR(hi2sa->Instance->CR1, SPI_CR1_SPE))&&(HAL_IS_BIT_CLR(hi2sb->Instance->CR1, SPI_CR1_SPE))&&(HAL_IS_BIT_CLR(hi2sc->Instance->CR1, SPI_CR1_SPE)))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d125      	bne.n	8006bce <HAL_I2S_Receive_DMA+0x30e>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d11e      	bne.n	8006bce <HAL_I2S_Receive_DMA+0x30e>
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d117      	bne.n	8006bce <HAL_I2S_Receive_DMA+0x30e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2sa);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f042 0201 	orr.w	r2, r2, #1
 8006bac:	601a      	str	r2, [r3, #0]
    __HAL_I2S_ENABLE(hi2sb);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f042 0201 	orr.w	r2, r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]
    __HAL_I2S_ENABLE(hi2sc);
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f042 0201 	orr.w	r2, r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2sa->Instance->CR1, SPI_CR1_CSTART);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bdc:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2sb->Instance->CR1, SPI_CR1_CSTART);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bec:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2sc->Instance->CR1, SPI_CR1_CSTART);
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bfc:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2sa);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  __HAL_UNLOCK(hi2sb);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  __HAL_UNLOCK(hi2sc);
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	08006e87 	.word	0x08006e87
 8006c24:	08006e45 	.word	0x08006e45
 8006c28:	08006ea3 	.word	0x08006ea3

08006c2c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t i2sier   = hi2s->Instance->IER;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	617b      	str	r3, [r7, #20]
  uint32_t i2ssr    = hi2s->Instance->SR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	613b      	str	r3, [r7, #16]
  uint32_t trigger  = i2sier & i2ssr;
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	4013      	ands	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b04      	cmp	r3, #4
 8006c56:	d12f      	bne.n	8006cb8 <HAL_I2S_IRQHandler+0x8c>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_OVR))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d008      	beq.n	8006c74 <HAL_I2S_IRQHandler+0x48>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d103      	bne.n	8006c74 <HAL_I2S_IRQHandler+0x48>
    {
      hi2s->RxISR(hi2s);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	4798      	blx	r3
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d01c      	beq.n	8006cb8 <HAL_I2S_IRQHandler+0x8c>
    {
      /* Disable RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXP | I2S_IT_ERR));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6919      	ldr	r1, [r3, #16]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	4b62      	ldr	r3, [pc, #392]	; (8006e14 <HAL_I2S_IRQHandler+0x1e8>)
 8006c8a:	400b      	ands	r3, r1
 8006c8c:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	699a      	ldr	r2, [r3, #24]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c9c:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006caa:	f043 0202 	orr.w	r2, r3, #2
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f8bc 	bl	8006e30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d12f      	bne.n	8006d24 <HAL_I2S_IRQHandler+0xf8>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_UDR))
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d008      	beq.n	8006ce0 <HAL_I2S_IRQHandler+0xb4>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f003 0320 	and.w	r3, r3, #32
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d103      	bne.n	8006ce0 <HAL_I2S_IRQHandler+0xb4>
    {
      hi2s->TxISR(hi2s);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f003 0320 	and.w	r3, r3, #32
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d01c      	beq.n	8006d24 <HAL_I2S_IRQHandler+0xf8>
    {
      /* Disable TXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_ERR));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	691a      	ldr	r2, [r3, #16]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f422 72b1 	bic.w	r2, r2, #354	; 0x162
 8006cf8:	611a      	str	r2, [r3, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0220 	orr.w	r2, r2, #32
 8006d08:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d16:	f043 0204 	orr.w	r2, r3, #4
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f886 	bl	8006e30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b05      	cmp	r3, #5
 8006d2e:	d16c      	bne.n	8006e0a <HAL_I2S_IRQHandler+0x1de>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_DXP))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f003 0304 	and.w	r3, r3, #4
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d007      	beq.n	8006d4a <HAL_I2S_IRQHandler+0x11e>
    {
      hi2s->TxISR(hi2s);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	4798      	blx	r3
      hi2s->RxISR(hi2s);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	4798      	blx	r3
    }
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d008      	beq.n	8006d66 <HAL_I2S_IRQHandler+0x13a>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d103      	bne.n	8006d66 <HAL_I2S_IRQHandler+0x13a>
    {
      hi2s->RxISR(hi2s);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	4798      	blx	r3
    }
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d008      	beq.n	8006d82 <HAL_I2S_IRQHandler+0x156>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f003 0304 	and.w	r3, r3, #4
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d103      	bne.n	8006d82 <HAL_I2S_IRQHandler+0x156>
    {
      hi2s->TxISR(hi2s);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01c      	beq.n	8006dc6 <HAL_I2S_IRQHandler+0x19a>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6919      	ldr	r1, [r3, #16]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	4b20      	ldr	r3, [pc, #128]	; (8006e18 <HAL_I2S_IRQHandler+0x1ec>)
 8006d98:	400b      	ands	r3, r1
 8006d9a:	6113      	str	r3, [r2, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f042 0220 	orr.w	r2, r2, #32
 8006daa:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db8:	f043 0204 	orr.w	r2, r3, #4
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f835 	bl	8006e30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01c      	beq.n	8006e0a <HAL_I2S_IRQHandler+0x1de>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6919      	ldr	r1, [r3, #16]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	4b0f      	ldr	r3, [pc, #60]	; (8006e18 <HAL_I2S_IRQHandler+0x1ec>)
 8006ddc:	400b      	ands	r3, r1
 8006dde:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dee:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfc:	f043 0202 	orr.w	r2, r3, #2
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f813 	bl	8006e30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e0a:	bf00      	nop
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	fffffe9e 	.word	0xfffffe9e
 8006e18:	fffffe9c 	.word	0xfffffe9c

08006e1c <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e50:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10e      	bne.n	8006e78 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e68:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	875a      	strh	r2, [r3, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f7f9 ff91 	bl	8000da0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006e7e:	bf00      	nop
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f7ff ffc1 	bl	8006e1c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006e9a:	bf00      	nop
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006ebe:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed8:	f043 0208 	orr.w	r2, r3, #8
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7ff ffa5 	bl	8006e30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006ee6:	bf00      	nop
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006ef8:	4b19      	ldr	r3, [pc, #100]	; (8006f60 <HAL_PWREx_ConfigSupply+0x70>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b04      	cmp	r3, #4
 8006f02:	d00a      	beq.n	8006f1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006f04:	4b16      	ldr	r3, [pc, #88]	; (8006f60 <HAL_PWREx_ConfigSupply+0x70>)
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d001      	beq.n	8006f16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e01f      	b.n	8006f56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	e01d      	b.n	8006f56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006f1a:	4b11      	ldr	r3, [pc, #68]	; (8006f60 <HAL_PWREx_ConfigSupply+0x70>)
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f023 0207 	bic.w	r2, r3, #7
 8006f22:	490f      	ldr	r1, [pc, #60]	; (8006f60 <HAL_PWREx_ConfigSupply+0x70>)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006f2a:	f7fc ff89 	bl	8003e40 <HAL_GetTick>
 8006f2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f30:	e009      	b.n	8006f46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006f32:	f7fc ff85 	bl	8003e40 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f40:	d901      	bls.n	8006f46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e007      	b.n	8006f56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f46:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <HAL_PWREx_ConfigSupply+0x70>)
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f52:	d1ee      	bne.n	8006f32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	58024800 	.word	0x58024800

08006f64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08c      	sub	sp, #48	; 0x30
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d102      	bne.n	8006f78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	f000 bc1d 	b.w	80077b2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8087 	beq.w	8007094 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f86:	4b99      	ldr	r3, [pc, #612]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f90:	4b96      	ldr	r3, [pc, #600]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8006f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f94:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	2b10      	cmp	r3, #16
 8006f9a:	d007      	beq.n	8006fac <HAL_RCC_OscConfig+0x48>
 8006f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9e:	2b18      	cmp	r3, #24
 8006fa0:	d110      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x60>
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	f003 0303 	and.w	r3, r3, #3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d10b      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fac:	4b8f      	ldr	r3, [pc, #572]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d06c      	beq.n	8007092 <HAL_RCC_OscConfig+0x12e>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d168      	bne.n	8007092 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e3f6      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fcc:	d106      	bne.n	8006fdc <HAL_RCC_OscConfig+0x78>
 8006fce:	4b87      	ldr	r3, [pc, #540]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a86      	ldr	r2, [pc, #536]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8006fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	e02e      	b.n	800703a <HAL_RCC_OscConfig+0xd6>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10c      	bne.n	8006ffe <HAL_RCC_OscConfig+0x9a>
 8006fe4:	4b81      	ldr	r3, [pc, #516]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a80      	ldr	r2, [pc, #512]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8006fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fee:	6013      	str	r3, [r2, #0]
 8006ff0:	4b7e      	ldr	r3, [pc, #504]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a7d      	ldr	r2, [pc, #500]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8006ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	e01d      	b.n	800703a <HAL_RCC_OscConfig+0xd6>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007006:	d10c      	bne.n	8007022 <HAL_RCC_OscConfig+0xbe>
 8007008:	4b78      	ldr	r3, [pc, #480]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a77      	ldr	r2, [pc, #476]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 800700e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007012:	6013      	str	r3, [r2, #0]
 8007014:	4b75      	ldr	r3, [pc, #468]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a74      	ldr	r2, [pc, #464]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 800701a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	e00b      	b.n	800703a <HAL_RCC_OscConfig+0xd6>
 8007022:	4b72      	ldr	r3, [pc, #456]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a71      	ldr	r2, [pc, #452]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8007028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	4b6f      	ldr	r3, [pc, #444]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a6e      	ldr	r2, [pc, #440]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8007034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007038:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d013      	beq.n	800706a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007042:	f7fc fefd 	bl	8003e40 <HAL_GetTick>
 8007046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007048:	e008      	b.n	800705c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800704a:	f7fc fef9 	bl	8003e40 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b64      	cmp	r3, #100	; 0x64
 8007056:	d901      	bls.n	800705c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e3aa      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800705c:	4b63      	ldr	r3, [pc, #396]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0f0      	beq.n	800704a <HAL_RCC_OscConfig+0xe6>
 8007068:	e014      	b.n	8007094 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706a:	f7fc fee9 	bl	8003e40 <HAL_GetTick>
 800706e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007070:	e008      	b.n	8007084 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007072:	f7fc fee5 	bl	8003e40 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b64      	cmp	r3, #100	; 0x64
 800707e:	d901      	bls.n	8007084 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e396      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007084:	4b59      	ldr	r3, [pc, #356]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1f0      	bne.n	8007072 <HAL_RCC_OscConfig+0x10e>
 8007090:	e000      	b.n	8007094 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007092:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 80cb 	beq.w	8007238 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070a2:	4b52      	ldr	r3, [pc, #328]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070aa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070ac:	4b4f      	ldr	r3, [pc, #316]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 80070ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d007      	beq.n	80070c8 <HAL_RCC_OscConfig+0x164>
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	2b18      	cmp	r3, #24
 80070bc:	d156      	bne.n	800716c <HAL_RCC_OscConfig+0x208>
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	f003 0303 	and.w	r3, r3, #3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d151      	bne.n	800716c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070c8:	4b48      	ldr	r3, [pc, #288]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <HAL_RCC_OscConfig+0x17c>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e368      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070e0:	4b42      	ldr	r3, [pc, #264]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f023 0219 	bic.w	r2, r3, #25
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	493f      	ldr	r1, [pc, #252]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80070f2:	f7fc fea5 	bl	8003e40 <HAL_GetTick>
 80070f6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070f8:	e008      	b.n	800710c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070fa:	f7fc fea1 	bl	8003e40 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d901      	bls.n	800710c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e352      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800710c:	4b37      	ldr	r3, [pc, #220]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0f0      	beq.n	80070fa <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007118:	f7fc fec2 	bl	8003ea0 <HAL_GetREVID>
 800711c:	4603      	mov	r3, r0
 800711e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007122:	4293      	cmp	r3, r2
 8007124:	d817      	bhi.n	8007156 <HAL_RCC_OscConfig+0x1f2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	2b40      	cmp	r3, #64	; 0x40
 800712c:	d108      	bne.n	8007140 <HAL_RCC_OscConfig+0x1dc>
 800712e:	4b2f      	ldr	r3, [pc, #188]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007136:	4a2d      	ldr	r2, [pc, #180]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8007138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800713c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800713e:	e07b      	b.n	8007238 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007140:	4b2a      	ldr	r3, [pc, #168]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	031b      	lsls	r3, r3, #12
 800714e:	4927      	ldr	r1, [pc, #156]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8007150:	4313      	orrs	r3, r2
 8007152:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007154:	e070      	b.n	8007238 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007156:	4b25      	ldr	r3, [pc, #148]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	061b      	lsls	r3, r3, #24
 8007164:	4921      	ldr	r1, [pc, #132]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8007166:	4313      	orrs	r3, r2
 8007168:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800716a:	e065      	b.n	8007238 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d048      	beq.n	8007206 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007174:	4b1d      	ldr	r3, [pc, #116]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f023 0219 	bic.w	r2, r3, #25
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	491a      	ldr	r1, [pc, #104]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 8007182:	4313      	orrs	r3, r2
 8007184:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007186:	f7fc fe5b 	bl	8003e40 <HAL_GetTick>
 800718a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800718c:	e008      	b.n	80071a0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800718e:	f7fc fe57 	bl	8003e40 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d901      	bls.n	80071a0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e308      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071a0:	4b12      	ldr	r3, [pc, #72]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d0f0      	beq.n	800718e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ac:	f7fc fe78 	bl	8003ea0 <HAL_GetREVID>
 80071b0:	4603      	mov	r3, r0
 80071b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d81a      	bhi.n	80071f0 <HAL_RCC_OscConfig+0x28c>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b40      	cmp	r3, #64	; 0x40
 80071c0:	d108      	bne.n	80071d4 <HAL_RCC_OscConfig+0x270>
 80071c2:	4b0a      	ldr	r3, [pc, #40]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80071ca:	4a08      	ldr	r2, [pc, #32]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 80071cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071d0:	6053      	str	r3, [r2, #4]
 80071d2:	e031      	b.n	8007238 <HAL_RCC_OscConfig+0x2d4>
 80071d4:	4b05      	ldr	r3, [pc, #20]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	031b      	lsls	r3, r3, #12
 80071e2:	4902      	ldr	r1, [pc, #8]	; (80071ec <HAL_RCC_OscConfig+0x288>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	604b      	str	r3, [r1, #4]
 80071e8:	e026      	b.n	8007238 <HAL_RCC_OscConfig+0x2d4>
 80071ea:	bf00      	nop
 80071ec:	58024400 	.word	0x58024400
 80071f0:	4b9a      	ldr	r3, [pc, #616]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	061b      	lsls	r3, r3, #24
 80071fe:	4997      	ldr	r1, [pc, #604]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 8007200:	4313      	orrs	r3, r2
 8007202:	604b      	str	r3, [r1, #4]
 8007204:	e018      	b.n	8007238 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007206:	4b95      	ldr	r3, [pc, #596]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a94      	ldr	r2, [pc, #592]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 800720c:	f023 0301 	bic.w	r3, r3, #1
 8007210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007212:	f7fc fe15 	bl	8003e40 <HAL_GetTick>
 8007216:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800721a:	f7fc fe11 	bl	8003e40 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e2c2      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800722c:	4b8b      	ldr	r3, [pc, #556]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1f0      	bne.n	800721a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0310 	and.w	r3, r3, #16
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 80a9 	beq.w	8007398 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007246:	4b85      	ldr	r3, [pc, #532]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800724e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007250:	4b82      	ldr	r3, [pc, #520]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 8007252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007254:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	2b08      	cmp	r3, #8
 800725a:	d007      	beq.n	800726c <HAL_RCC_OscConfig+0x308>
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	2b18      	cmp	r3, #24
 8007260:	d13a      	bne.n	80072d8 <HAL_RCC_OscConfig+0x374>
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f003 0303 	and.w	r3, r3, #3
 8007268:	2b01      	cmp	r3, #1
 800726a:	d135      	bne.n	80072d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800726c:	4b7b      	ldr	r3, [pc, #492]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007274:	2b00      	cmp	r3, #0
 8007276:	d005      	beq.n	8007284 <HAL_RCC_OscConfig+0x320>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	69db      	ldr	r3, [r3, #28]
 800727c:	2b80      	cmp	r3, #128	; 0x80
 800727e:	d001      	beq.n	8007284 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e296      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007284:	f7fc fe0c 	bl	8003ea0 <HAL_GetREVID>
 8007288:	4603      	mov	r3, r0
 800728a:	f241 0203 	movw	r2, #4099	; 0x1003
 800728e:	4293      	cmp	r3, r2
 8007290:	d817      	bhi.n	80072c2 <HAL_RCC_OscConfig+0x35e>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	2b20      	cmp	r3, #32
 8007298:	d108      	bne.n	80072ac <HAL_RCC_OscConfig+0x348>
 800729a:	4b70      	ldr	r3, [pc, #448]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80072a2:	4a6e      	ldr	r2, [pc, #440]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 80072a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072a8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072aa:	e075      	b.n	8007398 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072ac:	4b6b      	ldr	r3, [pc, #428]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	069b      	lsls	r3, r3, #26
 80072ba:	4968      	ldr	r1, [pc, #416]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072c0:	e06a      	b.n	8007398 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072c2:	4b66      	ldr	r3, [pc, #408]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	061b      	lsls	r3, r3, #24
 80072d0:	4962      	ldr	r1, [pc, #392]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072d6:	e05f      	b.n	8007398 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d042      	beq.n	8007366 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80072e0:	4b5e      	ldr	r3, [pc, #376]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a5d      	ldr	r2, [pc, #372]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 80072e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ec:	f7fc fda8 	bl	8003e40 <HAL_GetTick>
 80072f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80072f4:	f7fc fda4 	bl	8003e40 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e255      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007306:	4b55      	ldr	r3, [pc, #340]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0f0      	beq.n	80072f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007312:	f7fc fdc5 	bl	8003ea0 <HAL_GetREVID>
 8007316:	4603      	mov	r3, r0
 8007318:	f241 0203 	movw	r2, #4099	; 0x1003
 800731c:	4293      	cmp	r3, r2
 800731e:	d817      	bhi.n	8007350 <HAL_RCC_OscConfig+0x3ec>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	2b20      	cmp	r3, #32
 8007326:	d108      	bne.n	800733a <HAL_RCC_OscConfig+0x3d6>
 8007328:	4b4c      	ldr	r3, [pc, #304]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007330:	4a4a      	ldr	r2, [pc, #296]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 8007332:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007336:	6053      	str	r3, [r2, #4]
 8007338:	e02e      	b.n	8007398 <HAL_RCC_OscConfig+0x434>
 800733a:	4b48      	ldr	r3, [pc, #288]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	069b      	lsls	r3, r3, #26
 8007348:	4944      	ldr	r1, [pc, #272]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 800734a:	4313      	orrs	r3, r2
 800734c:	604b      	str	r3, [r1, #4]
 800734e:	e023      	b.n	8007398 <HAL_RCC_OscConfig+0x434>
 8007350:	4b42      	ldr	r3, [pc, #264]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	061b      	lsls	r3, r3, #24
 800735e:	493f      	ldr	r1, [pc, #252]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 8007360:	4313      	orrs	r3, r2
 8007362:	60cb      	str	r3, [r1, #12]
 8007364:	e018      	b.n	8007398 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007366:	4b3d      	ldr	r3, [pc, #244]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a3c      	ldr	r2, [pc, #240]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 800736c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007372:	f7fc fd65 	bl	8003e40 <HAL_GetTick>
 8007376:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007378:	e008      	b.n	800738c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800737a:	f7fc fd61 	bl	8003e40 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d901      	bls.n	800738c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e212      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800738c:	4b33      	ldr	r3, [pc, #204]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1f0      	bne.n	800737a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d036      	beq.n	8007412 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d019      	beq.n	80073e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073ac:	4b2b      	ldr	r3, [pc, #172]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 80073ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b0:	4a2a      	ldr	r2, [pc, #168]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 80073b2:	f043 0301 	orr.w	r3, r3, #1
 80073b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b8:	f7fc fd42 	bl	8003e40 <HAL_GetTick>
 80073bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073be:	e008      	b.n	80073d2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073c0:	f7fc fd3e 	bl	8003e40 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e1ef      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073d2:	4b22      	ldr	r3, [pc, #136]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 80073d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0f0      	beq.n	80073c0 <HAL_RCC_OscConfig+0x45c>
 80073de:	e018      	b.n	8007412 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073e0:	4b1e      	ldr	r3, [pc, #120]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 80073e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e4:	4a1d      	ldr	r2, [pc, #116]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 80073e6:	f023 0301 	bic.w	r3, r3, #1
 80073ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ec:	f7fc fd28 	bl	8003e40 <HAL_GetTick>
 80073f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073f4:	f7fc fd24 	bl	8003e40 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e1d5      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007406:	4b15      	ldr	r3, [pc, #84]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 8007408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1f0      	bne.n	80073f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0320 	and.w	r3, r3, #32
 800741a:	2b00      	cmp	r3, #0
 800741c:	d039      	beq.n	8007492 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d01c      	beq.n	8007460 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007426:	4b0d      	ldr	r3, [pc, #52]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a0c      	ldr	r2, [pc, #48]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 800742c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007430:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007432:	f7fc fd05 	bl	8003e40 <HAL_GetTick>
 8007436:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007438:	e008      	b.n	800744c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800743a:	f7fc fd01 	bl	8003e40 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d901      	bls.n	800744c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e1b2      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800744c:	4b03      	ldr	r3, [pc, #12]	; (800745c <HAL_RCC_OscConfig+0x4f8>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0f0      	beq.n	800743a <HAL_RCC_OscConfig+0x4d6>
 8007458:	e01b      	b.n	8007492 <HAL_RCC_OscConfig+0x52e>
 800745a:	bf00      	nop
 800745c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007460:	4b9b      	ldr	r3, [pc, #620]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a9a      	ldr	r2, [pc, #616]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800746a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800746c:	f7fc fce8 	bl	8003e40 <HAL_GetTick>
 8007470:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007472:	e008      	b.n	8007486 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007474:	f7fc fce4 	bl	8003e40 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d901      	bls.n	8007486 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e195      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007486:	4b92      	ldr	r3, [pc, #584]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1f0      	bne.n	8007474 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b00      	cmp	r3, #0
 800749c:	f000 8081 	beq.w	80075a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80074a0:	4b8c      	ldr	r3, [pc, #560]	; (80076d4 <HAL_RCC_OscConfig+0x770>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a8b      	ldr	r2, [pc, #556]	; (80076d4 <HAL_RCC_OscConfig+0x770>)
 80074a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074ac:	f7fc fcc8 	bl	8003e40 <HAL_GetTick>
 80074b0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80074b4:	f7fc fcc4 	bl	8003e40 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b64      	cmp	r3, #100	; 0x64
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e175      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074c6:	4b83      	ldr	r3, [pc, #524]	; (80076d4 <HAL_RCC_OscConfig+0x770>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0f0      	beq.n	80074b4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d106      	bne.n	80074e8 <HAL_RCC_OscConfig+0x584>
 80074da:	4b7d      	ldr	r3, [pc, #500]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 80074dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074de:	4a7c      	ldr	r2, [pc, #496]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 80074e0:	f043 0301 	orr.w	r3, r3, #1
 80074e4:	6713      	str	r3, [r2, #112]	; 0x70
 80074e6:	e02d      	b.n	8007544 <HAL_RCC_OscConfig+0x5e0>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10c      	bne.n	800750a <HAL_RCC_OscConfig+0x5a6>
 80074f0:	4b77      	ldr	r3, [pc, #476]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 80074f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f4:	4a76      	ldr	r2, [pc, #472]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 80074f6:	f023 0301 	bic.w	r3, r3, #1
 80074fa:	6713      	str	r3, [r2, #112]	; 0x70
 80074fc:	4b74      	ldr	r3, [pc, #464]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 80074fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007500:	4a73      	ldr	r2, [pc, #460]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007502:	f023 0304 	bic.w	r3, r3, #4
 8007506:	6713      	str	r3, [r2, #112]	; 0x70
 8007508:	e01c      	b.n	8007544 <HAL_RCC_OscConfig+0x5e0>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	2b05      	cmp	r3, #5
 8007510:	d10c      	bne.n	800752c <HAL_RCC_OscConfig+0x5c8>
 8007512:	4b6f      	ldr	r3, [pc, #444]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007516:	4a6e      	ldr	r2, [pc, #440]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007518:	f043 0304 	orr.w	r3, r3, #4
 800751c:	6713      	str	r3, [r2, #112]	; 0x70
 800751e:	4b6c      	ldr	r3, [pc, #432]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007522:	4a6b      	ldr	r2, [pc, #428]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007524:	f043 0301 	orr.w	r3, r3, #1
 8007528:	6713      	str	r3, [r2, #112]	; 0x70
 800752a:	e00b      	b.n	8007544 <HAL_RCC_OscConfig+0x5e0>
 800752c:	4b68      	ldr	r3, [pc, #416]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 800752e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007530:	4a67      	ldr	r2, [pc, #412]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007532:	f023 0301 	bic.w	r3, r3, #1
 8007536:	6713      	str	r3, [r2, #112]	; 0x70
 8007538:	4b65      	ldr	r3, [pc, #404]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 800753a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753c:	4a64      	ldr	r2, [pc, #400]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 800753e:	f023 0304 	bic.w	r3, r3, #4
 8007542:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d015      	beq.n	8007578 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800754c:	f7fc fc78 	bl	8003e40 <HAL_GetTick>
 8007550:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007552:	e00a      	b.n	800756a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007554:	f7fc fc74 	bl	8003e40 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007562:	4293      	cmp	r3, r2
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e123      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800756a:	4b59      	ldr	r3, [pc, #356]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 800756c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0ee      	beq.n	8007554 <HAL_RCC_OscConfig+0x5f0>
 8007576:	e014      	b.n	80075a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007578:	f7fc fc62 	bl	8003e40 <HAL_GetTick>
 800757c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800757e:	e00a      	b.n	8007596 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007580:	f7fc fc5e 	bl	8003e40 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	f241 3288 	movw	r2, #5000	; 0x1388
 800758e:	4293      	cmp	r3, r2
 8007590:	d901      	bls.n	8007596 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e10d      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007596:	4b4e      	ldr	r3, [pc, #312]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1ee      	bne.n	8007580 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 8102 	beq.w	80077b0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80075ac:	4b48      	ldr	r3, [pc, #288]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075b4:	2b18      	cmp	r3, #24
 80075b6:	f000 80bd 	beq.w	8007734 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	2b02      	cmp	r3, #2
 80075c0:	f040 809e 	bne.w	8007700 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075c4:	4b42      	ldr	r3, [pc, #264]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a41      	ldr	r2, [pc, #260]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 80075ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d0:	f7fc fc36 	bl	8003e40 <HAL_GetTick>
 80075d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075d8:	f7fc fc32 	bl	8003e40 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e0e3      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075ea:	4b39      	ldr	r3, [pc, #228]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1f0      	bne.n	80075d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075f6:	4b36      	ldr	r3, [pc, #216]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 80075f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075fa:	4b37      	ldr	r3, [pc, #220]	; (80076d8 <HAL_RCC_OscConfig+0x774>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007606:	0112      	lsls	r2, r2, #4
 8007608:	430a      	orrs	r2, r1
 800760a:	4931      	ldr	r1, [pc, #196]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 800760c:	4313      	orrs	r3, r2
 800760e:	628b      	str	r3, [r1, #40]	; 0x28
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007614:	3b01      	subs	r3, #1
 8007616:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761e:	3b01      	subs	r3, #1
 8007620:	025b      	lsls	r3, r3, #9
 8007622:	b29b      	uxth	r3, r3
 8007624:	431a      	orrs	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762a:	3b01      	subs	r3, #1
 800762c:	041b      	lsls	r3, r3, #16
 800762e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007632:	431a      	orrs	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007638:	3b01      	subs	r3, #1
 800763a:	061b      	lsls	r3, r3, #24
 800763c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007640:	4923      	ldr	r1, [pc, #140]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007642:	4313      	orrs	r3, r2
 8007644:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007646:	4b22      	ldr	r3, [pc, #136]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	4a21      	ldr	r2, [pc, #132]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 800764c:	f023 0301 	bic.w	r3, r3, #1
 8007650:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007652:	4b1f      	ldr	r3, [pc, #124]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007656:	4b21      	ldr	r3, [pc, #132]	; (80076dc <HAL_RCC_OscConfig+0x778>)
 8007658:	4013      	ands	r3, r2
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800765e:	00d2      	lsls	r2, r2, #3
 8007660:	491b      	ldr	r1, [pc, #108]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007662:	4313      	orrs	r3, r2
 8007664:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007666:	4b1a      	ldr	r3, [pc, #104]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766a:	f023 020c 	bic.w	r2, r3, #12
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	4917      	ldr	r1, [pc, #92]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007674:	4313      	orrs	r3, r2
 8007676:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007678:	4b15      	ldr	r3, [pc, #84]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	f023 0202 	bic.w	r2, r3, #2
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007684:	4912      	ldr	r1, [pc, #72]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007686:	4313      	orrs	r3, r2
 8007688:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800768a:	4b11      	ldr	r3, [pc, #68]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	4a10      	ldr	r2, [pc, #64]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007694:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007696:	4b0e      	ldr	r3, [pc, #56]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 8007698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769a:	4a0d      	ldr	r2, [pc, #52]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 800769c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80076a2:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	4a0a      	ldr	r2, [pc, #40]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 80076a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80076ae:	4b08      	ldr	r3, [pc, #32]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 80076b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b2:	4a07      	ldr	r2, [pc, #28]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 80076b4:	f043 0301 	orr.w	r3, r3, #1
 80076b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076ba:	4b05      	ldr	r3, [pc, #20]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a04      	ldr	r2, [pc, #16]	; (80076d0 <HAL_RCC_OscConfig+0x76c>)
 80076c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076c6:	f7fc fbbb 	bl	8003e40 <HAL_GetTick>
 80076ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076cc:	e011      	b.n	80076f2 <HAL_RCC_OscConfig+0x78e>
 80076ce:	bf00      	nop
 80076d0:	58024400 	.word	0x58024400
 80076d4:	58024800 	.word	0x58024800
 80076d8:	fffffc0c 	.word	0xfffffc0c
 80076dc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076e0:	f7fc fbae 	bl	8003e40 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d901      	bls.n	80076f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e05f      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076f2:	4b32      	ldr	r3, [pc, #200]	; (80077bc <HAL_RCC_OscConfig+0x858>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0f0      	beq.n	80076e0 <HAL_RCC_OscConfig+0x77c>
 80076fe:	e057      	b.n	80077b0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007700:	4b2e      	ldr	r3, [pc, #184]	; (80077bc <HAL_RCC_OscConfig+0x858>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a2d      	ldr	r2, [pc, #180]	; (80077bc <HAL_RCC_OscConfig+0x858>)
 8007706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800770a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800770c:	f7fc fb98 	bl	8003e40 <HAL_GetTick>
 8007710:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007712:	e008      	b.n	8007726 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007714:	f7fc fb94 	bl	8003e40 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e045      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007726:	4b25      	ldr	r3, [pc, #148]	; (80077bc <HAL_RCC_OscConfig+0x858>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f0      	bne.n	8007714 <HAL_RCC_OscConfig+0x7b0>
 8007732:	e03d      	b.n	80077b0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007734:	4b21      	ldr	r3, [pc, #132]	; (80077bc <HAL_RCC_OscConfig+0x858>)
 8007736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007738:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800773a:	4b20      	ldr	r3, [pc, #128]	; (80077bc <HAL_RCC_OscConfig+0x858>)
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	2b01      	cmp	r3, #1
 8007746:	d031      	beq.n	80077ac <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f003 0203 	and.w	r2, r3, #3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007752:	429a      	cmp	r2, r3
 8007754:	d12a      	bne.n	80077ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	091b      	lsrs	r3, r3, #4
 800775a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007762:	429a      	cmp	r2, r3
 8007764:	d122      	bne.n	80077ac <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007770:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007772:	429a      	cmp	r2, r3
 8007774:	d11a      	bne.n	80077ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	0a5b      	lsrs	r3, r3, #9
 800777a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007782:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007784:	429a      	cmp	r2, r3
 8007786:	d111      	bne.n	80077ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	0c1b      	lsrs	r3, r3, #16
 800778c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007794:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007796:	429a      	cmp	r2, r3
 8007798:	d108      	bne.n	80077ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	0e1b      	lsrs	r3, r3, #24
 800779e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d001      	beq.n	80077b0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3730      	adds	r7, #48	; 0x30
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	58024400 	.word	0x58024400

080077c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e19c      	b.n	8007b0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077d4:	4b8a      	ldr	r3, [pc, #552]	; (8007a00 <HAL_RCC_ClockConfig+0x240>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 030f 	and.w	r3, r3, #15
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d910      	bls.n	8007804 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077e2:	4b87      	ldr	r3, [pc, #540]	; (8007a00 <HAL_RCC_ClockConfig+0x240>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f023 020f 	bic.w	r2, r3, #15
 80077ea:	4985      	ldr	r1, [pc, #532]	; (8007a00 <HAL_RCC_ClockConfig+0x240>)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077f2:	4b83      	ldr	r3, [pc, #524]	; (8007a00 <HAL_RCC_ClockConfig+0x240>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 030f 	and.w	r3, r3, #15
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d001      	beq.n	8007804 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e184      	b.n	8007b0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0304 	and.w	r3, r3, #4
 800780c:	2b00      	cmp	r3, #0
 800780e:	d010      	beq.n	8007832 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	691a      	ldr	r2, [r3, #16]
 8007814:	4b7b      	ldr	r3, [pc, #492]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800781c:	429a      	cmp	r2, r3
 800781e:	d908      	bls.n	8007832 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007820:	4b78      	ldr	r3, [pc, #480]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	4975      	ldr	r1, [pc, #468]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 800782e:	4313      	orrs	r3, r2
 8007830:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0308 	and.w	r3, r3, #8
 800783a:	2b00      	cmp	r3, #0
 800783c:	d010      	beq.n	8007860 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	695a      	ldr	r2, [r3, #20]
 8007842:	4b70      	ldr	r3, [pc, #448]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800784a:	429a      	cmp	r2, r3
 800784c:	d908      	bls.n	8007860 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800784e:	4b6d      	ldr	r3, [pc, #436]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	496a      	ldr	r1, [pc, #424]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 800785c:	4313      	orrs	r3, r2
 800785e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0310 	and.w	r3, r3, #16
 8007868:	2b00      	cmp	r3, #0
 800786a:	d010      	beq.n	800788e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699a      	ldr	r2, [r3, #24]
 8007870:	4b64      	ldr	r3, [pc, #400]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007878:	429a      	cmp	r2, r3
 800787a:	d908      	bls.n	800788e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800787c:	4b61      	ldr	r3, [pc, #388]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	495e      	ldr	r1, [pc, #376]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 800788a:	4313      	orrs	r3, r2
 800788c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d010      	beq.n	80078bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	69da      	ldr	r2, [r3, #28]
 800789e:	4b59      	ldr	r3, [pc, #356]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d908      	bls.n	80078bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80078aa:	4b56      	ldr	r3, [pc, #344]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	4953      	ldr	r1, [pc, #332]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d010      	beq.n	80078ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68da      	ldr	r2, [r3, #12]
 80078cc:	4b4d      	ldr	r3, [pc, #308]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	f003 030f 	and.w	r3, r3, #15
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d908      	bls.n	80078ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078d8:	4b4a      	ldr	r3, [pc, #296]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	f023 020f 	bic.w	r2, r3, #15
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	4947      	ldr	r1, [pc, #284]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d055      	beq.n	80079a2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80078f6:	4b43      	ldr	r3, [pc, #268]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	4940      	ldr	r1, [pc, #256]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 8007904:	4313      	orrs	r3, r2
 8007906:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	2b02      	cmp	r3, #2
 800790e:	d107      	bne.n	8007920 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007910:	4b3c      	ldr	r3, [pc, #240]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d121      	bne.n	8007960 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e0f6      	b.n	8007b0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	2b03      	cmp	r3, #3
 8007926:	d107      	bne.n	8007938 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007928:	4b36      	ldr	r3, [pc, #216]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d115      	bne.n	8007960 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e0ea      	b.n	8007b0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d107      	bne.n	8007950 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007940:	4b30      	ldr	r3, [pc, #192]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007948:	2b00      	cmp	r3, #0
 800794a:	d109      	bne.n	8007960 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e0de      	b.n	8007b0e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007950:	4b2c      	ldr	r3, [pc, #176]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e0d6      	b.n	8007b0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007960:	4b28      	ldr	r3, [pc, #160]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	f023 0207 	bic.w	r2, r3, #7
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	4925      	ldr	r1, [pc, #148]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 800796e:	4313      	orrs	r3, r2
 8007970:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007972:	f7fc fa65 	bl	8003e40 <HAL_GetTick>
 8007976:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007978:	e00a      	b.n	8007990 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800797a:	f7fc fa61 	bl	8003e40 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	f241 3288 	movw	r2, #5000	; 0x1388
 8007988:	4293      	cmp	r3, r2
 800798a:	d901      	bls.n	8007990 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e0be      	b.n	8007b0e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007990:	4b1c      	ldr	r3, [pc, #112]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	00db      	lsls	r3, r3, #3
 800799e:	429a      	cmp	r2, r3
 80079a0:	d1eb      	bne.n	800797a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d010      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	4b14      	ldr	r3, [pc, #80]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	f003 030f 	and.w	r3, r3, #15
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d208      	bcs.n	80079d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079be:	4b11      	ldr	r3, [pc, #68]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	f023 020f 	bic.w	r2, r3, #15
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	490e      	ldr	r1, [pc, #56]	; (8007a04 <HAL_RCC_ClockConfig+0x244>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079d0:	4b0b      	ldr	r3, [pc, #44]	; (8007a00 <HAL_RCC_ClockConfig+0x240>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 030f 	and.w	r3, r3, #15
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d214      	bcs.n	8007a08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079de:	4b08      	ldr	r3, [pc, #32]	; (8007a00 <HAL_RCC_ClockConfig+0x240>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f023 020f 	bic.w	r2, r3, #15
 80079e6:	4906      	ldr	r1, [pc, #24]	; (8007a00 <HAL_RCC_ClockConfig+0x240>)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ee:	4b04      	ldr	r3, [pc, #16]	; (8007a00 <HAL_RCC_ClockConfig+0x240>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 030f 	and.w	r3, r3, #15
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d005      	beq.n	8007a08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e086      	b.n	8007b0e <HAL_RCC_ClockConfig+0x34e>
 8007a00:	52002000 	.word	0x52002000
 8007a04:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d010      	beq.n	8007a36 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	691a      	ldr	r2, [r3, #16]
 8007a18:	4b3f      	ldr	r3, [pc, #252]	; (8007b18 <HAL_RCC_ClockConfig+0x358>)
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d208      	bcs.n	8007a36 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a24:	4b3c      	ldr	r3, [pc, #240]	; (8007b18 <HAL_RCC_ClockConfig+0x358>)
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	4939      	ldr	r1, [pc, #228]	; (8007b18 <HAL_RCC_ClockConfig+0x358>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0308 	and.w	r3, r3, #8
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d010      	beq.n	8007a64 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	695a      	ldr	r2, [r3, #20]
 8007a46:	4b34      	ldr	r3, [pc, #208]	; (8007b18 <HAL_RCC_ClockConfig+0x358>)
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d208      	bcs.n	8007a64 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a52:	4b31      	ldr	r3, [pc, #196]	; (8007b18 <HAL_RCC_ClockConfig+0x358>)
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	492e      	ldr	r1, [pc, #184]	; (8007b18 <HAL_RCC_ClockConfig+0x358>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d010      	beq.n	8007a92 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	699a      	ldr	r2, [r3, #24]
 8007a74:	4b28      	ldr	r3, [pc, #160]	; (8007b18 <HAL_RCC_ClockConfig+0x358>)
 8007a76:	69db      	ldr	r3, [r3, #28]
 8007a78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d208      	bcs.n	8007a92 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a80:	4b25      	ldr	r3, [pc, #148]	; (8007b18 <HAL_RCC_ClockConfig+0x358>)
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	4922      	ldr	r1, [pc, #136]	; (8007b18 <HAL_RCC_ClockConfig+0x358>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0320 	and.w	r3, r3, #32
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d010      	beq.n	8007ac0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	69da      	ldr	r2, [r3, #28]
 8007aa2:	4b1d      	ldr	r3, [pc, #116]	; (8007b18 <HAL_RCC_ClockConfig+0x358>)
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d208      	bcs.n	8007ac0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007aae:	4b1a      	ldr	r3, [pc, #104]	; (8007b18 <HAL_RCC_ClockConfig+0x358>)
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	4917      	ldr	r1, [pc, #92]	; (8007b18 <HAL_RCC_ClockConfig+0x358>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007ac0:	f000 f844 	bl	8007b4c <HAL_RCC_GetSysClockFreq>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	4b14      	ldr	r3, [pc, #80]	; (8007b18 <HAL_RCC_ClockConfig+0x358>)
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	0a1b      	lsrs	r3, r3, #8
 8007acc:	f003 030f 	and.w	r3, r3, #15
 8007ad0:	4912      	ldr	r1, [pc, #72]	; (8007b1c <HAL_RCC_ClockConfig+0x35c>)
 8007ad2:	5ccb      	ldrb	r3, [r1, r3]
 8007ad4:	f003 031f 	and.w	r3, r3, #31
 8007ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8007adc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ade:	4b0e      	ldr	r3, [pc, #56]	; (8007b18 <HAL_RCC_ClockConfig+0x358>)
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	f003 030f 	and.w	r3, r3, #15
 8007ae6:	4a0d      	ldr	r2, [pc, #52]	; (8007b1c <HAL_RCC_ClockConfig+0x35c>)
 8007ae8:	5cd3      	ldrb	r3, [r2, r3]
 8007aea:	f003 031f 	and.w	r3, r3, #31
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	fa22 f303 	lsr.w	r3, r2, r3
 8007af4:	4a0a      	ldr	r2, [pc, #40]	; (8007b20 <HAL_RCC_ClockConfig+0x360>)
 8007af6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007af8:	4a0a      	ldr	r2, [pc, #40]	; (8007b24 <HAL_RCC_ClockConfig+0x364>)
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007afe:	4b0a      	ldr	r3, [pc, #40]	; (8007b28 <HAL_RCC_ClockConfig+0x368>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fc f952 	bl	8003dac <HAL_InitTick>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	58024400 	.word	0x58024400
 8007b1c:	0800ead8 	.word	0x0800ead8
 8007b20:	24000008 	.word	0x24000008
 8007b24:	24000004 	.word	0x24000004
 8007b28:	2400009c 	.word	0x2400009c

08007b2c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8007b30:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <HAL_RCC_EnableCSS+0x1c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a04      	ldr	r2, [pc, #16]	; (8007b48 <HAL_RCC_EnableCSS+0x1c>)
 8007b36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b3a:	6013      	str	r3, [r2, #0]
}
 8007b3c:	bf00      	nop
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	58024400 	.word	0x58024400

08007b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b089      	sub	sp, #36	; 0x24
 8007b50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b52:	4bb3      	ldr	r3, [pc, #716]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b5a:	2b18      	cmp	r3, #24
 8007b5c:	f200 8155 	bhi.w	8007e0a <HAL_RCC_GetSysClockFreq+0x2be>
 8007b60:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b66:	bf00      	nop
 8007b68:	08007bcd 	.word	0x08007bcd
 8007b6c:	08007e0b 	.word	0x08007e0b
 8007b70:	08007e0b 	.word	0x08007e0b
 8007b74:	08007e0b 	.word	0x08007e0b
 8007b78:	08007e0b 	.word	0x08007e0b
 8007b7c:	08007e0b 	.word	0x08007e0b
 8007b80:	08007e0b 	.word	0x08007e0b
 8007b84:	08007e0b 	.word	0x08007e0b
 8007b88:	08007bf3 	.word	0x08007bf3
 8007b8c:	08007e0b 	.word	0x08007e0b
 8007b90:	08007e0b 	.word	0x08007e0b
 8007b94:	08007e0b 	.word	0x08007e0b
 8007b98:	08007e0b 	.word	0x08007e0b
 8007b9c:	08007e0b 	.word	0x08007e0b
 8007ba0:	08007e0b 	.word	0x08007e0b
 8007ba4:	08007e0b 	.word	0x08007e0b
 8007ba8:	08007bf9 	.word	0x08007bf9
 8007bac:	08007e0b 	.word	0x08007e0b
 8007bb0:	08007e0b 	.word	0x08007e0b
 8007bb4:	08007e0b 	.word	0x08007e0b
 8007bb8:	08007e0b 	.word	0x08007e0b
 8007bbc:	08007e0b 	.word	0x08007e0b
 8007bc0:	08007e0b 	.word	0x08007e0b
 8007bc4:	08007e0b 	.word	0x08007e0b
 8007bc8:	08007bff 	.word	0x08007bff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bcc:	4b94      	ldr	r3, [pc, #592]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0320 	and.w	r3, r3, #32
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d009      	beq.n	8007bec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bd8:	4b91      	ldr	r3, [pc, #580]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	08db      	lsrs	r3, r3, #3
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	4a90      	ldr	r2, [pc, #576]	; (8007e24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007be4:	fa22 f303 	lsr.w	r3, r2, r3
 8007be8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007bea:	e111      	b.n	8007e10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007bec:	4b8d      	ldr	r3, [pc, #564]	; (8007e24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007bee:	61bb      	str	r3, [r7, #24]
    break;
 8007bf0:	e10e      	b.n	8007e10 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007bf2:	4b8d      	ldr	r3, [pc, #564]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007bf4:	61bb      	str	r3, [r7, #24]
    break;
 8007bf6:	e10b      	b.n	8007e10 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007bf8:	4b8c      	ldr	r3, [pc, #560]	; (8007e2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007bfa:	61bb      	str	r3, [r7, #24]
    break;
 8007bfc:	e108      	b.n	8007e10 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bfe:	4b88      	ldr	r3, [pc, #544]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007c08:	4b85      	ldr	r3, [pc, #532]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0c:	091b      	lsrs	r3, r3, #4
 8007c0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c12:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007c14:	4b82      	ldr	r3, [pc, #520]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007c1e:	4b80      	ldr	r3, [pc, #512]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c22:	08db      	lsrs	r3, r3, #3
 8007c24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	fb02 f303 	mul.w	r3, r2, r3
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c36:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 80e1 	beq.w	8007e04 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	f000 8083 	beq.w	8007d50 <HAL_RCC_GetSysClockFreq+0x204>
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	f200 80a1 	bhi.w	8007d94 <HAL_RCC_GetSysClockFreq+0x248>
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <HAL_RCC_GetSysClockFreq+0x114>
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d056      	beq.n	8007d0c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007c5e:	e099      	b.n	8007d94 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c60:	4b6f      	ldr	r3, [pc, #444]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0320 	and.w	r3, r3, #32
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d02d      	beq.n	8007cc8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c6c:	4b6c      	ldr	r3, [pc, #432]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	08db      	lsrs	r3, r3, #3
 8007c72:	f003 0303 	and.w	r3, r3, #3
 8007c76:	4a6b      	ldr	r2, [pc, #428]	; (8007e24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c78:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	ee07 3a90 	vmov	s15, r3
 8007c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	ee07 3a90 	vmov	s15, r3
 8007c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c96:	4b62      	ldr	r3, [pc, #392]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c9e:	ee07 3a90 	vmov	s15, r3
 8007ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007caa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007e30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007cc6:	e087      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007e34 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cda:	4b51      	ldr	r3, [pc, #324]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce2:	ee07 3a90 	vmov	s15, r3
 8007ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cea:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007e30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d0a:	e065      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	ee07 3a90 	vmov	s15, r3
 8007d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d16:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007e38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d1e:	4b40      	ldr	r3, [pc, #256]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d32:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007e30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d4e:	e043      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	ee07 3a90 	vmov	s15, r3
 8007d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007e3c <HAL_RCC_GetSysClockFreq+0x2f0>
 8007d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d62:	4b2f      	ldr	r3, [pc, #188]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d72:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d76:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007e30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d92:	e021      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	ee07 3a90 	vmov	s15, r3
 8007d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007e38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007da6:	4b1e      	ldr	r3, [pc, #120]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dae:	ee07 3a90 	vmov	s15, r3
 8007db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007e30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dd6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007dd8:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ddc:	0a5b      	lsrs	r3, r3, #9
 8007dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007de2:	3301      	adds	r3, #1
 8007de4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	ee07 3a90 	vmov	s15, r3
 8007dec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007df0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dfc:	ee17 3a90 	vmov	r3, s15
 8007e00:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007e02:	e005      	b.n	8007e10 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61bb      	str	r3, [r7, #24]
    break;
 8007e08:	e002      	b.n	8007e10 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007e0a:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e0c:	61bb      	str	r3, [r7, #24]
    break;
 8007e0e:	bf00      	nop
  }

  return sysclockfreq;
 8007e10:	69bb      	ldr	r3, [r7, #24]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3724      	adds	r7, #36	; 0x24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	58024400 	.word	0x58024400
 8007e24:	03d09000 	.word	0x03d09000
 8007e28:	003d0900 	.word	0x003d0900
 8007e2c:	017d7840 	.word	0x017d7840
 8007e30:	46000000 	.word	0x46000000
 8007e34:	4c742400 	.word	0x4c742400
 8007e38:	4a742400 	.word	0x4a742400
 8007e3c:	4bbebc20 	.word	0x4bbebc20

08007e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007e46:	f7ff fe81 	bl	8007b4c <HAL_RCC_GetSysClockFreq>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	4b10      	ldr	r3, [pc, #64]	; (8007e90 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	0a1b      	lsrs	r3, r3, #8
 8007e52:	f003 030f 	and.w	r3, r3, #15
 8007e56:	490f      	ldr	r1, [pc, #60]	; (8007e94 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e58:	5ccb      	ldrb	r3, [r1, r3]
 8007e5a:	f003 031f 	and.w	r3, r3, #31
 8007e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e64:	4b0a      	ldr	r3, [pc, #40]	; (8007e90 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	4a09      	ldr	r2, [pc, #36]	; (8007e94 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e6e:	5cd3      	ldrb	r3, [r2, r3]
 8007e70:	f003 031f 	and.w	r3, r3, #31
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	fa22 f303 	lsr.w	r3, r2, r3
 8007e7a:	4a07      	ldr	r2, [pc, #28]	; (8007e98 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e7e:	4a07      	ldr	r2, [pc, #28]	; (8007e9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007e84:	4b04      	ldr	r3, [pc, #16]	; (8007e98 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e86:	681b      	ldr	r3, [r3, #0]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	58024400 	.word	0x58024400
 8007e94:	0800ead8 	.word	0x0800ead8
 8007e98:	24000008 	.word	0x24000008
 8007e9c:	24000004 	.word	0x24000004

08007ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007ea4:	f7ff ffcc 	bl	8007e40 <HAL_RCC_GetHCLKFreq>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	091b      	lsrs	r3, r3, #4
 8007eb0:	f003 0307 	and.w	r3, r3, #7
 8007eb4:	4904      	ldr	r1, [pc, #16]	; (8007ec8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007eb6:	5ccb      	ldrb	r3, [r1, r3]
 8007eb8:	f003 031f 	and.w	r3, r3, #31
 8007ebc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	58024400 	.word	0x58024400
 8007ec8:	0800ead8 	.word	0x0800ead8

08007ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007ed0:	f7ff ffb6 	bl	8007e40 <HAL_RCC_GetHCLKFreq>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	0a1b      	lsrs	r3, r3, #8
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	4904      	ldr	r1, [pc, #16]	; (8007ef4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007ee2:	5ccb      	ldrb	r3, [r1, r3]
 8007ee4:	f003 031f 	and.w	r3, r3, #31
 8007ee8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	58024400 	.word	0x58024400
 8007ef4:	0800ead8 	.word	0x0800ead8

08007ef8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f00:	2300      	movs	r3, #0
 8007f02:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f04:	2300      	movs	r3, #0
 8007f06:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d03f      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f1c:	d02a      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007f1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f22:	d824      	bhi.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007f24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f28:	d018      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f2e:	d81e      	bhi.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f38:	d007      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007f3a:	e018      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f3c:	4ba3      	ldr	r3, [pc, #652]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f40:	4aa2      	ldr	r2, [pc, #648]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f48:	e015      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	2102      	movs	r1, #2
 8007f50:	4618      	mov	r0, r3
 8007f52:	f001 fff9 	bl	8009f48 <RCCEx_PLL2_Config>
 8007f56:	4603      	mov	r3, r0
 8007f58:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f5a:	e00c      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3324      	adds	r3, #36	; 0x24
 8007f60:	2102      	movs	r1, #2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f002 f8a2 	bl	800a0ac <RCCEx_PLL3_Config>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f6c:	e003      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	75fb      	strb	r3, [r7, #23]
      break;
 8007f72:	e000      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d109      	bne.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007f7c:	4b93      	ldr	r3, [pc, #588]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f88:	4990      	ldr	r1, [pc, #576]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	650b      	str	r3, [r1, #80]	; 0x50
 8007f8e:	e001      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
 8007f92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d03d      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa4:	2b04      	cmp	r3, #4
 8007fa6:	d826      	bhi.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007fa8:	a201      	add	r2, pc, #4	; (adr r2, 8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fae:	bf00      	nop
 8007fb0:	08007fc5 	.word	0x08007fc5
 8007fb4:	08007fd3 	.word	0x08007fd3
 8007fb8:	08007fe5 	.word	0x08007fe5
 8007fbc:	08007ffd 	.word	0x08007ffd
 8007fc0:	08007ffd 	.word	0x08007ffd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc4:	4b81      	ldr	r3, [pc, #516]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc8:	4a80      	ldr	r2, [pc, #512]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fd0:	e015      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f001 ffb5 	bl	8009f48 <RCCEx_PLL2_Config>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fe2:	e00c      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3324      	adds	r3, #36	; 0x24
 8007fe8:	2100      	movs	r1, #0
 8007fea:	4618      	mov	r0, r3
 8007fec:	f002 f85e 	bl	800a0ac <RCCEx_PLL3_Config>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ff4:	e003      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8007ffa:	e000      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d109      	bne.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008004:	4b71      	ldr	r3, [pc, #452]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008008:	f023 0207 	bic.w	r2, r3, #7
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008010:	496e      	ldr	r1, [pc, #440]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008012:	4313      	orrs	r3, r2
 8008014:	650b      	str	r3, [r1, #80]	; 0x50
 8008016:	e001      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008018:	7dfb      	ldrb	r3, [r7, #23]
 800801a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008024:	2b00      	cmp	r3, #0
 8008026:	d042      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800802c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008030:	d02b      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008036:	d825      	bhi.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008038:	2bc0      	cmp	r3, #192	; 0xc0
 800803a:	d028      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800803c:	2bc0      	cmp	r3, #192	; 0xc0
 800803e:	d821      	bhi.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008040:	2b80      	cmp	r3, #128	; 0x80
 8008042:	d016      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008044:	2b80      	cmp	r3, #128	; 0x80
 8008046:	d81d      	bhi.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800804c:	2b40      	cmp	r3, #64	; 0x40
 800804e:	d007      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008050:	e018      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008052:	4b5e      	ldr	r3, [pc, #376]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008056:	4a5d      	ldr	r2, [pc, #372]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800805c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800805e:	e017      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3304      	adds	r3, #4
 8008064:	2100      	movs	r1, #0
 8008066:	4618      	mov	r0, r3
 8008068:	f001 ff6e 	bl	8009f48 <RCCEx_PLL2_Config>
 800806c:	4603      	mov	r3, r0
 800806e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008070:	e00e      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	3324      	adds	r3, #36	; 0x24
 8008076:	2100      	movs	r1, #0
 8008078:	4618      	mov	r0, r3
 800807a:	f002 f817 	bl	800a0ac <RCCEx_PLL3_Config>
 800807e:	4603      	mov	r3, r0
 8008080:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008082:	e005      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	75fb      	strb	r3, [r7, #23]
      break;
 8008088:	e002      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800808a:	bf00      	nop
 800808c:	e000      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800808e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d109      	bne.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008096:	4b4d      	ldr	r3, [pc, #308]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800809a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a2:	494a      	ldr	r1, [pc, #296]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	650b      	str	r3, [r1, #80]	; 0x50
 80080a8:	e001      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d049      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080c4:	d030      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80080c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080ca:	d82a      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80080cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80080d0:	d02c      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80080d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80080d6:	d824      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80080d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080dc:	d018      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80080de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080e2:	d81e      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80080e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080ec:	d007      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 80080ee:	e018      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080f0:	4b36      	ldr	r3, [pc, #216]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80080f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f4:	4a35      	ldr	r2, [pc, #212]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80080f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80080fc:	e017      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3304      	adds	r3, #4
 8008102:	2100      	movs	r1, #0
 8008104:	4618      	mov	r0, r3
 8008106:	f001 ff1f 	bl	8009f48 <RCCEx_PLL2_Config>
 800810a:	4603      	mov	r3, r0
 800810c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800810e:	e00e      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3324      	adds	r3, #36	; 0x24
 8008114:	2100      	movs	r1, #0
 8008116:	4618      	mov	r0, r3
 8008118:	f001 ffc8 	bl	800a0ac <RCCEx_PLL3_Config>
 800811c:	4603      	mov	r3, r0
 800811e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008120:	e005      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	75fb      	strb	r3, [r7, #23]
      break;
 8008126:	e002      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008128:	bf00      	nop
 800812a:	e000      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800812c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800812e:	7dfb      	ldrb	r3, [r7, #23]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10a      	bne.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008134:	4b25      	ldr	r3, [pc, #148]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008138:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008142:	4922      	ldr	r1, [pc, #136]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008144:	4313      	orrs	r3, r2
 8008146:	658b      	str	r3, [r1, #88]	; 0x58
 8008148:	e001      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800814a:	7dfb      	ldrb	r3, [r7, #23]
 800814c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008156:	2b00      	cmp	r3, #0
 8008158:	d04b      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008160:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008164:	d030      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008166:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800816a:	d82a      	bhi.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800816c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008170:	d02e      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008172:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008176:	d824      	bhi.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008178:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800817c:	d018      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800817e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008182:	d81e      	bhi.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800818c:	d007      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800818e:	e018      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008190:	4b0e      	ldr	r3, [pc, #56]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008194:	4a0d      	ldr	r2, [pc, #52]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800819a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800819c:	e019      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	3304      	adds	r3, #4
 80081a2:	2100      	movs	r1, #0
 80081a4:	4618      	mov	r0, r3
 80081a6:	f001 fecf 	bl	8009f48 <RCCEx_PLL2_Config>
 80081aa:	4603      	mov	r3, r0
 80081ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80081ae:	e010      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3324      	adds	r3, #36	; 0x24
 80081b4:	2100      	movs	r1, #0
 80081b6:	4618      	mov	r0, r3
 80081b8:	f001 ff78 	bl	800a0ac <RCCEx_PLL3_Config>
 80081bc:	4603      	mov	r3, r0
 80081be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081c0:	e007      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	75fb      	strb	r3, [r7, #23]
      break;
 80081c6:	e004      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80081c8:	bf00      	nop
 80081ca:	e002      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80081cc:	58024400 	.word	0x58024400
      break;
 80081d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10a      	bne.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80081d8:	4b99      	ldr	r3, [pc, #612]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80081da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081dc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80081e6:	4996      	ldr	r1, [pc, #600]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	658b      	str	r3, [r1, #88]	; 0x58
 80081ec:	e001      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
 80081f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d032      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008202:	2b30      	cmp	r3, #48	; 0x30
 8008204:	d01c      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008206:	2b30      	cmp	r3, #48	; 0x30
 8008208:	d817      	bhi.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800820a:	2b20      	cmp	r3, #32
 800820c:	d00c      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800820e:	2b20      	cmp	r3, #32
 8008210:	d813      	bhi.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d016      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008216:	2b10      	cmp	r3, #16
 8008218:	d10f      	bne.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800821a:	4b89      	ldr	r3, [pc, #548]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800821c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821e:	4a88      	ldr	r2, [pc, #544]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008224:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008226:	e00e      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3304      	adds	r3, #4
 800822c:	2102      	movs	r1, #2
 800822e:	4618      	mov	r0, r3
 8008230:	f001 fe8a 	bl	8009f48 <RCCEx_PLL2_Config>
 8008234:	4603      	mov	r3, r0
 8008236:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008238:	e005      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	75fb      	strb	r3, [r7, #23]
      break;
 800823e:	e002      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008240:	bf00      	nop
 8008242:	e000      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008246:	7dfb      	ldrb	r3, [r7, #23]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d109      	bne.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800824c:	4b7c      	ldr	r3, [pc, #496]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800824e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008250:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008258:	4979      	ldr	r1, [pc, #484]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800825a:	4313      	orrs	r3, r2
 800825c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800825e:	e001      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008260:	7dfb      	ldrb	r3, [r7, #23]
 8008262:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d047      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008278:	d030      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800827a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800827e:	d82a      	bhi.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008280:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008284:	d02c      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008286:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800828a:	d824      	bhi.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800828c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008290:	d018      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008296:	d81e      	bhi.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800829c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a0:	d007      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80082a2:	e018      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082a4:	4b66      	ldr	r3, [pc, #408]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80082a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a8:	4a65      	ldr	r2, [pc, #404]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80082aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80082b0:	e017      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	3304      	adds	r3, #4
 80082b6:	2100      	movs	r1, #0
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 fe45 	bl	8009f48 <RCCEx_PLL2_Config>
 80082be:	4603      	mov	r3, r0
 80082c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80082c2:	e00e      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3324      	adds	r3, #36	; 0x24
 80082c8:	2100      	movs	r1, #0
 80082ca:	4618      	mov	r0, r3
 80082cc:	f001 feee 	bl	800a0ac <RCCEx_PLL3_Config>
 80082d0:	4603      	mov	r3, r0
 80082d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80082d4:	e005      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	75fb      	strb	r3, [r7, #23]
      break;
 80082da:	e002      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80082dc:	bf00      	nop
 80082de:	e000      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80082e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d109      	bne.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80082e8:	4b55      	ldr	r3, [pc, #340]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80082ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082f4:	4952      	ldr	r1, [pc, #328]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	650b      	str	r3, [r1, #80]	; 0x50
 80082fa:	e001      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
 80082fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d049      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008314:	d02e      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008316:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800831a:	d828      	bhi.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800831c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008320:	d02a      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008322:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008326:	d822      	bhi.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008328:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800832c:	d026      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800832e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008332:	d81c      	bhi.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008338:	d010      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800833a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800833e:	d816      	bhi.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008340:	2b00      	cmp	r3, #0
 8008342:	d01d      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008348:	d111      	bne.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	3304      	adds	r3, #4
 800834e:	2101      	movs	r1, #1
 8008350:	4618      	mov	r0, r3
 8008352:	f001 fdf9 	bl	8009f48 <RCCEx_PLL2_Config>
 8008356:	4603      	mov	r3, r0
 8008358:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800835a:	e012      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3324      	adds	r3, #36	; 0x24
 8008360:	2101      	movs	r1, #1
 8008362:	4618      	mov	r0, r3
 8008364:	f001 fea2 	bl	800a0ac <RCCEx_PLL3_Config>
 8008368:	4603      	mov	r3, r0
 800836a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800836c:	e009      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	75fb      	strb	r3, [r7, #23]
      break;
 8008372:	e006      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008374:	bf00      	nop
 8008376:	e004      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008378:	bf00      	nop
 800837a:	e002      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800837c:	bf00      	nop
 800837e:	e000      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008382:	7dfb      	ldrb	r3, [r7, #23]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d109      	bne.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008388:	4b2d      	ldr	r3, [pc, #180]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800838a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800838c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008394:	492a      	ldr	r1, [pc, #168]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008396:	4313      	orrs	r3, r2
 8008398:	650b      	str	r3, [r1, #80]	; 0x50
 800839a:	e001      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d04d      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80083b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083b6:	d02e      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80083b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083bc:	d828      	bhi.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80083be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c2:	d02a      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80083c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c8:	d822      	bhi.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80083ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083ce:	d026      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80083d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083d4:	d81c      	bhi.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80083d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083da:	d010      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 80083dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083e0:	d816      	bhi.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d01d      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80083e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083ea:	d111      	bne.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3304      	adds	r3, #4
 80083f0:	2101      	movs	r1, #1
 80083f2:	4618      	mov	r0, r3
 80083f4:	f001 fda8 	bl	8009f48 <RCCEx_PLL2_Config>
 80083f8:	4603      	mov	r3, r0
 80083fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80083fc:	e012      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	3324      	adds	r3, #36	; 0x24
 8008402:	2101      	movs	r1, #1
 8008404:	4618      	mov	r0, r3
 8008406:	f001 fe51 	bl	800a0ac <RCCEx_PLL3_Config>
 800840a:	4603      	mov	r3, r0
 800840c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800840e:	e009      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	75fb      	strb	r3, [r7, #23]
      break;
 8008414:	e006      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008416:	bf00      	nop
 8008418:	e004      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800841a:	bf00      	nop
 800841c:	e002      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800841e:	bf00      	nop
 8008420:	e000      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008422:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008424:	7dfb      	ldrb	r3, [r7, #23]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10c      	bne.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800842a:	4b05      	ldr	r3, [pc, #20]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800842c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800842e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008438:	4901      	ldr	r1, [pc, #4]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800843a:	4313      	orrs	r3, r2
 800843c:	658b      	str	r3, [r1, #88]	; 0x58
 800843e:	e003      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008440:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008444:	7dfb      	ldrb	r3, [r7, #23]
 8008446:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d02f      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800845c:	d00e      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800845e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008462:	d814      	bhi.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008464:	2b00      	cmp	r3, #0
 8008466:	d015      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800846c:	d10f      	bne.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800846e:	4baf      	ldr	r3, [pc, #700]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008472:	4aae      	ldr	r2, [pc, #696]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008478:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800847a:	e00c      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	3304      	adds	r3, #4
 8008480:	2101      	movs	r1, #1
 8008482:	4618      	mov	r0, r3
 8008484:	f001 fd60 	bl	8009f48 <RCCEx_PLL2_Config>
 8008488:	4603      	mov	r3, r0
 800848a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800848c:	e003      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	75fb      	strb	r3, [r7, #23]
      break;
 8008492:	e000      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008496:	7dfb      	ldrb	r3, [r7, #23]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d109      	bne.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800849c:	4ba3      	ldr	r3, [pc, #652]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800849e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084a8:	49a0      	ldr	r1, [pc, #640]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084aa:	4313      	orrs	r3, r2
 80084ac:	650b      	str	r3, [r1, #80]	; 0x50
 80084ae:	e001      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b0:	7dfb      	ldrb	r3, [r7, #23]
 80084b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d032      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d81b      	bhi.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80084c8:	a201      	add	r2, pc, #4	; (adr r2, 80084d0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80084ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ce:	bf00      	nop
 80084d0:	08008507 	.word	0x08008507
 80084d4:	080084e1 	.word	0x080084e1
 80084d8:	080084ef 	.word	0x080084ef
 80084dc:	08008507 	.word	0x08008507
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084e0:	4b92      	ldr	r3, [pc, #584]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e4:	4a91      	ldr	r2, [pc, #580]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80084ec:	e00c      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	3304      	adds	r3, #4
 80084f2:	2102      	movs	r1, #2
 80084f4:	4618      	mov	r0, r3
 80084f6:	f001 fd27 	bl	8009f48 <RCCEx_PLL2_Config>
 80084fa:	4603      	mov	r3, r0
 80084fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80084fe:	e003      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	75fb      	strb	r3, [r7, #23]
      break;
 8008504:	e000      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008508:	7dfb      	ldrb	r3, [r7, #23]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800850e:	4b87      	ldr	r3, [pc, #540]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008512:	f023 0203 	bic.w	r2, r3, #3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800851a:	4984      	ldr	r1, [pc, #528]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800851c:	4313      	orrs	r3, r2
 800851e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008520:	e001      	b.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008522:	7dfb      	ldrb	r3, [r7, #23]
 8008524:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 8086 	beq.w	8008640 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008534:	4b7e      	ldr	r3, [pc, #504]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a7d      	ldr	r2, [pc, #500]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800853a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800853e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008540:	f7fb fc7e 	bl	8003e40 <HAL_GetTick>
 8008544:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008546:	e009      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008548:	f7fb fc7a 	bl	8003e40 <HAL_GetTick>
 800854c:	4602      	mov	r2, r0
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	2b64      	cmp	r3, #100	; 0x64
 8008554:	d902      	bls.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	75fb      	strb	r3, [r7, #23]
        break;
 800855a:	e005      	b.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800855c:	4b74      	ldr	r3, [pc, #464]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008564:	2b00      	cmp	r3, #0
 8008566:	d0ef      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008568:	7dfb      	ldrb	r3, [r7, #23]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d166      	bne.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800856e:	4b6f      	ldr	r3, [pc, #444]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008570:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008578:	4053      	eors	r3, r2
 800857a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800857e:	2b00      	cmp	r3, #0
 8008580:	d013      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008582:	4b6a      	ldr	r3, [pc, #424]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800858a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800858c:	4b67      	ldr	r3, [pc, #412]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800858e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008590:	4a66      	ldr	r2, [pc, #408]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008596:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008598:	4b64      	ldr	r3, [pc, #400]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800859a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859c:	4a63      	ldr	r2, [pc, #396]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800859e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085a2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80085a4:	4a61      	ldr	r2, [pc, #388]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085b4:	d115      	bne.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b6:	f7fb fc43 	bl	8003e40 <HAL_GetTick>
 80085ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085bc:	e00b      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085be:	f7fb fc3f 	bl	8003e40 <HAL_GetTick>
 80085c2:	4602      	mov	r2, r0
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d902      	bls.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	75fb      	strb	r3, [r7, #23]
            break;
 80085d4:	e005      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085d6:	4b55      	ldr	r3, [pc, #340]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80085d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0ed      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80085e2:	7dfb      	ldrb	r3, [r7, #23]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d126      	bne.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085f6:	d10d      	bne.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80085f8:	4b4c      	ldr	r3, [pc, #304]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008606:	0919      	lsrs	r1, r3, #4
 8008608:	4b4a      	ldr	r3, [pc, #296]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800860a:	400b      	ands	r3, r1
 800860c:	4947      	ldr	r1, [pc, #284]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800860e:	4313      	orrs	r3, r2
 8008610:	610b      	str	r3, [r1, #16]
 8008612:	e005      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008614:	4b45      	ldr	r3, [pc, #276]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	4a44      	ldr	r2, [pc, #272]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800861a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800861e:	6113      	str	r3, [r2, #16]
 8008620:	4b42      	ldr	r3, [pc, #264]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008622:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800862a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800862e:	493f      	ldr	r1, [pc, #252]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008630:	4313      	orrs	r3, r2
 8008632:	670b      	str	r3, [r1, #112]	; 0x70
 8008634:	e004      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008636:	7dfb      	ldrb	r3, [r7, #23]
 8008638:	75bb      	strb	r3, [r7, #22]
 800863a:	e001      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800863c:	7dfb      	ldrb	r3, [r7, #23]
 800863e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 8085 	beq.w	8008758 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008652:	2b28      	cmp	r3, #40	; 0x28
 8008654:	d866      	bhi.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008656:	a201      	add	r2, pc, #4	; (adr r2, 800865c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865c:	08008739 	.word	0x08008739
 8008660:	08008725 	.word	0x08008725
 8008664:	08008725 	.word	0x08008725
 8008668:	08008725 	.word	0x08008725
 800866c:	08008725 	.word	0x08008725
 8008670:	08008725 	.word	0x08008725
 8008674:	08008725 	.word	0x08008725
 8008678:	08008725 	.word	0x08008725
 800867c:	08008701 	.word	0x08008701
 8008680:	08008725 	.word	0x08008725
 8008684:	08008725 	.word	0x08008725
 8008688:	08008725 	.word	0x08008725
 800868c:	08008725 	.word	0x08008725
 8008690:	08008725 	.word	0x08008725
 8008694:	08008725 	.word	0x08008725
 8008698:	08008725 	.word	0x08008725
 800869c:	08008713 	.word	0x08008713
 80086a0:	08008725 	.word	0x08008725
 80086a4:	08008725 	.word	0x08008725
 80086a8:	08008725 	.word	0x08008725
 80086ac:	08008725 	.word	0x08008725
 80086b0:	08008725 	.word	0x08008725
 80086b4:	08008725 	.word	0x08008725
 80086b8:	08008725 	.word	0x08008725
 80086bc:	08008739 	.word	0x08008739
 80086c0:	08008725 	.word	0x08008725
 80086c4:	08008725 	.word	0x08008725
 80086c8:	08008725 	.word	0x08008725
 80086cc:	08008725 	.word	0x08008725
 80086d0:	08008725 	.word	0x08008725
 80086d4:	08008725 	.word	0x08008725
 80086d8:	08008725 	.word	0x08008725
 80086dc:	08008739 	.word	0x08008739
 80086e0:	08008725 	.word	0x08008725
 80086e4:	08008725 	.word	0x08008725
 80086e8:	08008725 	.word	0x08008725
 80086ec:	08008725 	.word	0x08008725
 80086f0:	08008725 	.word	0x08008725
 80086f4:	08008725 	.word	0x08008725
 80086f8:	08008725 	.word	0x08008725
 80086fc:	08008739 	.word	0x08008739
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	3304      	adds	r3, #4
 8008704:	2101      	movs	r1, #1
 8008706:	4618      	mov	r0, r3
 8008708:	f001 fc1e 	bl	8009f48 <RCCEx_PLL2_Config>
 800870c:	4603      	mov	r3, r0
 800870e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008710:	e013      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3324      	adds	r3, #36	; 0x24
 8008716:	2101      	movs	r1, #1
 8008718:	4618      	mov	r0, r3
 800871a:	f001 fcc7 	bl	800a0ac <RCCEx_PLL3_Config>
 800871e:	4603      	mov	r3, r0
 8008720:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008722:	e00a      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	75fb      	strb	r3, [r7, #23]
      break;
 8008728:	e007      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800872a:	bf00      	nop
 800872c:	58024400 	.word	0x58024400
 8008730:	58024800 	.word	0x58024800
 8008734:	00ffffcf 	.word	0x00ffffcf
      break;
 8008738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800873a:	7dfb      	ldrb	r3, [r7, #23]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d109      	bne.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008740:	4b96      	ldr	r3, [pc, #600]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008744:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800874c:	4993      	ldr	r1, [pc, #588]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800874e:	4313      	orrs	r3, r2
 8008750:	654b      	str	r3, [r1, #84]	; 0x54
 8008752:	e001      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0302 	and.w	r3, r3, #2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d038      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008768:	2b05      	cmp	r3, #5
 800876a:	d821      	bhi.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800876c:	a201      	add	r2, pc, #4	; (adr r2, 8008774 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800876e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008772:	bf00      	nop
 8008774:	080087b7 	.word	0x080087b7
 8008778:	0800878d 	.word	0x0800878d
 800877c:	0800879f 	.word	0x0800879f
 8008780:	080087b7 	.word	0x080087b7
 8008784:	080087b7 	.word	0x080087b7
 8008788:	080087b7 	.word	0x080087b7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3304      	adds	r3, #4
 8008790:	2101      	movs	r1, #1
 8008792:	4618      	mov	r0, r3
 8008794:	f001 fbd8 	bl	8009f48 <RCCEx_PLL2_Config>
 8008798:	4603      	mov	r3, r0
 800879a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800879c:	e00c      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	3324      	adds	r3, #36	; 0x24
 80087a2:	2101      	movs	r1, #1
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 fc81 	bl	800a0ac <RCCEx_PLL3_Config>
 80087aa:	4603      	mov	r3, r0
 80087ac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80087ae:	e003      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	75fb      	strb	r3, [r7, #23]
      break;
 80087b4:	e000      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80087b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087b8:	7dfb      	ldrb	r3, [r7, #23]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d109      	bne.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80087be:	4b77      	ldr	r3, [pc, #476]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80087c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c2:	f023 0207 	bic.w	r2, r3, #7
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ca:	4974      	ldr	r1, [pc, #464]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80087cc:	4313      	orrs	r3, r2
 80087ce:	654b      	str	r3, [r1, #84]	; 0x54
 80087d0:	e001      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
 80087d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0304 	and.w	r3, r3, #4
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d03a      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087e8:	2b05      	cmp	r3, #5
 80087ea:	d821      	bhi.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80087ec:	a201      	add	r2, pc, #4	; (adr r2, 80087f4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80087ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f2:	bf00      	nop
 80087f4:	08008837 	.word	0x08008837
 80087f8:	0800880d 	.word	0x0800880d
 80087fc:	0800881f 	.word	0x0800881f
 8008800:	08008837 	.word	0x08008837
 8008804:	08008837 	.word	0x08008837
 8008808:	08008837 	.word	0x08008837
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	3304      	adds	r3, #4
 8008810:	2101      	movs	r1, #1
 8008812:	4618      	mov	r0, r3
 8008814:	f001 fb98 	bl	8009f48 <RCCEx_PLL2_Config>
 8008818:	4603      	mov	r3, r0
 800881a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800881c:	e00c      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	3324      	adds	r3, #36	; 0x24
 8008822:	2101      	movs	r1, #1
 8008824:	4618      	mov	r0, r3
 8008826:	f001 fc41 	bl	800a0ac <RCCEx_PLL3_Config>
 800882a:	4603      	mov	r3, r0
 800882c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800882e:	e003      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	75fb      	strb	r3, [r7, #23]
      break;
 8008834:	e000      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10a      	bne.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800883e:	4b57      	ldr	r3, [pc, #348]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008842:	f023 0207 	bic.w	r2, r3, #7
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800884c:	4953      	ldr	r1, [pc, #332]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800884e:	4313      	orrs	r3, r2
 8008850:	658b      	str	r3, [r1, #88]	; 0x58
 8008852:	e001      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008854:	7dfb      	ldrb	r3, [r7, #23]
 8008856:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0320 	and.w	r3, r3, #32
 8008860:	2b00      	cmp	r3, #0
 8008862:	d04b      	beq.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800886a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800886e:	d02e      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008874:	d828      	bhi.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800887a:	d02a      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800887c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008880:	d822      	bhi.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008882:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008886:	d026      	beq.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008888:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800888c:	d81c      	bhi.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800888e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008892:	d010      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8008894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008898:	d816      	bhi.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800889a:	2b00      	cmp	r3, #0
 800889c:	d01d      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800889e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088a2:	d111      	bne.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3304      	adds	r3, #4
 80088a8:	2100      	movs	r1, #0
 80088aa:	4618      	mov	r0, r3
 80088ac:	f001 fb4c 	bl	8009f48 <RCCEx_PLL2_Config>
 80088b0:	4603      	mov	r3, r0
 80088b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80088b4:	e012      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	3324      	adds	r3, #36	; 0x24
 80088ba:	2102      	movs	r1, #2
 80088bc:	4618      	mov	r0, r3
 80088be:	f001 fbf5 	bl	800a0ac <RCCEx_PLL3_Config>
 80088c2:	4603      	mov	r3, r0
 80088c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80088c6:	e009      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	75fb      	strb	r3, [r7, #23]
      break;
 80088cc:	e006      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80088ce:	bf00      	nop
 80088d0:	e004      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80088d2:	bf00      	nop
 80088d4:	e002      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80088d6:	bf00      	nop
 80088d8:	e000      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80088da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10a      	bne.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088e2:	4b2e      	ldr	r3, [pc, #184]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80088e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088f0:	492a      	ldr	r1, [pc, #168]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	654b      	str	r3, [r1, #84]	; 0x54
 80088f6:	e001      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
 80088fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008904:	2b00      	cmp	r3, #0
 8008906:	d04d      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800890e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008912:	d02e      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008914:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008918:	d828      	bhi.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800891a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800891e:	d02a      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008924:	d822      	bhi.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008926:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800892a:	d026      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800892c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008930:	d81c      	bhi.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008936:	d010      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800893c:	d816      	bhi.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800893e:	2b00      	cmp	r3, #0
 8008940:	d01d      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8008942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008946:	d111      	bne.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	3304      	adds	r3, #4
 800894c:	2100      	movs	r1, #0
 800894e:	4618      	mov	r0, r3
 8008950:	f001 fafa 	bl	8009f48 <RCCEx_PLL2_Config>
 8008954:	4603      	mov	r3, r0
 8008956:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008958:	e012      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3324      	adds	r3, #36	; 0x24
 800895e:	2102      	movs	r1, #2
 8008960:	4618      	mov	r0, r3
 8008962:	f001 fba3 	bl	800a0ac <RCCEx_PLL3_Config>
 8008966:	4603      	mov	r3, r0
 8008968:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800896a:	e009      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	75fb      	strb	r3, [r7, #23]
      break;
 8008970:	e006      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008972:	bf00      	nop
 8008974:	e004      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008976:	bf00      	nop
 8008978:	e002      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800897a:	bf00      	nop
 800897c:	e000      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800897e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008980:	7dfb      	ldrb	r3, [r7, #23]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10c      	bne.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008986:	4b05      	ldr	r3, [pc, #20]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800898a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008994:	4901      	ldr	r1, [pc, #4]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008996:	4313      	orrs	r3, r2
 8008998:	658b      	str	r3, [r1, #88]	; 0x58
 800899a:	e003      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800899c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a0:	7dfb      	ldrb	r3, [r7, #23]
 80089a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d04b      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80089b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80089ba:	d02e      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80089bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80089c0:	d828      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80089c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089c6:	d02a      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80089c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089cc:	d822      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80089ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80089d2:	d026      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80089d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80089d8:	d81c      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80089da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089de:	d010      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80089e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089e4:	d816      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d01d      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80089ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089ee:	d111      	bne.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3304      	adds	r3, #4
 80089f4:	2100      	movs	r1, #0
 80089f6:	4618      	mov	r0, r3
 80089f8:	f001 faa6 	bl	8009f48 <RCCEx_PLL2_Config>
 80089fc:	4603      	mov	r3, r0
 80089fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008a00:	e012      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	3324      	adds	r3, #36	; 0x24
 8008a06:	2102      	movs	r1, #2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f001 fb4f 	bl	800a0ac <RCCEx_PLL3_Config>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008a12:	e009      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	75fb      	strb	r3, [r7, #23]
      break;
 8008a18:	e006      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008a1a:	bf00      	nop
 8008a1c:	e004      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008a1e:	bf00      	nop
 8008a20:	e002      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008a22:	bf00      	nop
 8008a24:	e000      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a28:	7dfb      	ldrb	r3, [r7, #23]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10a      	bne.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a2e:	4b9d      	ldr	r3, [pc, #628]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a3c:	4999      	ldr	r1, [pc, #612]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	658b      	str	r3, [r1, #88]	; 0x58
 8008a42:	e001      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a44:	7dfb      	ldrb	r3, [r7, #23]
 8008a46:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0308 	and.w	r3, r3, #8
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d01a      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a5e:	d10a      	bne.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	3324      	adds	r3, #36	; 0x24
 8008a64:	2102      	movs	r1, #2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f001 fb20 	bl	800a0ac <RCCEx_PLL3_Config>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008a76:	4b8b      	ldr	r3, [pc, #556]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a84:	4987      	ldr	r1, [pc, #540]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0310 	and.w	r3, r3, #16
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d01a      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aa0:	d10a      	bne.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	3324      	adds	r3, #36	; 0x24
 8008aa6:	2102      	movs	r1, #2
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f001 faff 	bl	800a0ac <RCCEx_PLL3_Config>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d001      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ab8:	4b7a      	ldr	r3, [pc, #488]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ac6:	4977      	ldr	r1, [pc, #476]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d034      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ade:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ae2:	d01d      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008ae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ae8:	d817      	bhi.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008af2:	d009      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008af4:	e011      	b.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	3304      	adds	r3, #4
 8008afa:	2100      	movs	r1, #0
 8008afc:	4618      	mov	r0, r3
 8008afe:	f001 fa23 	bl	8009f48 <RCCEx_PLL2_Config>
 8008b02:	4603      	mov	r3, r0
 8008b04:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008b06:	e00c      	b.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3324      	adds	r3, #36	; 0x24
 8008b0c:	2102      	movs	r1, #2
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f001 facc 	bl	800a0ac <RCCEx_PLL3_Config>
 8008b14:	4603      	mov	r3, r0
 8008b16:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008b18:	e003      	b.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b1e:	e000      	b.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b22:	7dfb      	ldrb	r3, [r7, #23]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10a      	bne.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b28:	4b5e      	ldr	r3, [pc, #376]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b36:	495b      	ldr	r1, [pc, #364]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	658b      	str	r3, [r1, #88]	; 0x58
 8008b3c:	e001      	b.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
 8008b40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d033      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b58:	d01c      	beq.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8008b5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b5e:	d816      	bhi.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b64:	d003      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008b66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b6a:	d007      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008b6c:	e00f      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b6e:	4b4d      	ldr	r3, [pc, #308]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b72:	4a4c      	ldr	r2, [pc, #304]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008b7a:	e00c      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3324      	adds	r3, #36	; 0x24
 8008b80:	2101      	movs	r1, #1
 8008b82:	4618      	mov	r0, r3
 8008b84:	f001 fa92 	bl	800a0ac <RCCEx_PLL3_Config>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008b8c:	e003      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	75fb      	strb	r3, [r7, #23]
      break;
 8008b92:	e000      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10a      	bne.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b9c:	4b41      	ldr	r3, [pc, #260]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008baa:	493e      	ldr	r1, [pc, #248]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	654b      	str	r3, [r1, #84]	; 0x54
 8008bb0:	e001      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d029      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8008bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bce:	d007      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008bd0:	e00f      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bd2:	4b34      	ldr	r3, [pc, #208]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd6:	4a33      	ldr	r2, [pc, #204]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008bde:	e00b      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	3304      	adds	r3, #4
 8008be4:	2102      	movs	r1, #2
 8008be6:	4618      	mov	r0, r3
 8008be8:	f001 f9ae 	bl	8009f48 <RCCEx_PLL2_Config>
 8008bec:	4603      	mov	r3, r0
 8008bee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008bf0:	e002      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8008bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bf8:	7dfb      	ldrb	r3, [r7, #23]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d109      	bne.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008bfe:	4b29      	ldr	r3, [pc, #164]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c0a:	4926      	ldr	r1, [pc, #152]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008c10:	e001      	b.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00a      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3324      	adds	r3, #36	; 0x24
 8008c26:	2102      	movs	r1, #2
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f001 fa3f 	bl	800a0ac <RCCEx_PLL3_Config>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d001      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d033      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c4c:	d017      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c52:	d811      	bhi.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c58:	d013      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c5e:	d80b      	bhi.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d010      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c68:	d106      	bne.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c6a:	4b0e      	ldr	r3, [pc, #56]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	4a0d      	ldr	r2, [pc, #52]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008c76:	e007      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c7c:	e004      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008c7e:	bf00      	nop
 8008c80:	e002      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008c82:	bf00      	nop
 8008c84:	e000      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008c86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10c      	bne.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c8e:	4b05      	ldr	r3, [pc, #20]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c9a:	4902      	ldr	r1, [pc, #8]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	654b      	str	r3, [r1, #84]	; 0x54
 8008ca0:	e004      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008ca2:	bf00      	nop
 8008ca4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
 8008caa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d008      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008cb8:	4b31      	ldr	r3, [pc, #196]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc4:	492e      	ldr	r1, [pc, #184]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d009      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008cd6:	4b2a      	ldr	r3, [pc, #168]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008ce4:	4926      	ldr	r1, [pc, #152]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d008      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008cf6:	4b22      	ldr	r3, [pc, #136]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cfa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d02:	491f      	ldr	r1, [pc, #124]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d04:	4313      	orrs	r3, r2
 8008d06:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00d      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d14:	4b1a      	ldr	r3, [pc, #104]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	4a19      	ldr	r2, [pc, #100]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d1e:	6113      	str	r3, [r2, #16]
 8008d20:	4b17      	ldr	r3, [pc, #92]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d22:	691a      	ldr	r2, [r3, #16]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008d2a:	4915      	ldr	r1, [pc, #84]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	da08      	bge.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008d38:	4b11      	ldr	r3, [pc, #68]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d3c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d44:	490e      	ldr	r1, [pc, #56]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d009      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008d56:	4b0a      	ldr	r3, [pc, #40]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d64:	4906      	ldr	r1, [pc, #24]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008d6a:	7dbb      	ldrb	r3, [r7, #22]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	e000      	b.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	58024400 	.word	0x58024400

08008d84 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b090      	sub	sp, #64	; 0x40
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d92:	f040 8095 	bne.w	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008d96:	4b97      	ldr	r3, [pc, #604]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d9a:	f003 0307 	and.w	r3, r3, #7
 8008d9e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da2:	2b04      	cmp	r3, #4
 8008da4:	f200 8088 	bhi.w	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008da8:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dae:	bf00      	nop
 8008db0:	08008dc5 	.word	0x08008dc5
 8008db4:	08008ded 	.word	0x08008ded
 8008db8:	08008e15 	.word	0x08008e15
 8008dbc:	08008eb1 	.word	0x08008eb1
 8008dc0:	08008e3d 	.word	0x08008e3d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008dc4:	4b8b      	ldr	r3, [pc, #556]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dd0:	d108      	bne.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 ff64 	bl	8009ca4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008de0:	f000 bc94 	b.w	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008de8:	f000 bc90 	b.w	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dec:	4b81      	ldr	r3, [pc, #516]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008df8:	d108      	bne.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dfa:	f107 0318 	add.w	r3, r7, #24
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 fca8 	bl	8009754 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e08:	f000 bc80 	b.w	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e10:	f000 bc7c 	b.w	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e14:	4b77      	ldr	r3, [pc, #476]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e20:	d108      	bne.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e22:	f107 030c 	add.w	r3, r7, #12
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 fde8 	bl	80099fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e30:	f000 bc6c 	b.w	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008e34:	2300      	movs	r3, #0
 8008e36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e38:	f000 bc68 	b.w	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e3c:	4b6d      	ldr	r3, [pc, #436]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e44:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e46:	4b6b      	ldr	r3, [pc, #428]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 0304 	and.w	r3, r3, #4
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d10c      	bne.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d109      	bne.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e58:	4b66      	ldr	r3, [pc, #408]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	08db      	lsrs	r3, r3, #3
 8008e5e:	f003 0303 	and.w	r3, r3, #3
 8008e62:	4a65      	ldr	r2, [pc, #404]	; (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008e64:	fa22 f303 	lsr.w	r3, r2, r3
 8008e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e6a:	e01f      	b.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e6c:	4b61      	ldr	r3, [pc, #388]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e78:	d106      	bne.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e80:	d102      	bne.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e82:	4b5e      	ldr	r3, [pc, #376]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e86:	e011      	b.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e88:	4b5a      	ldr	r3, [pc, #360]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e94:	d106      	bne.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e9c:	d102      	bne.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008e9e:	4b58      	ldr	r3, [pc, #352]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ea2:	e003      	b.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008ea8:	f000 bc30 	b.w	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008eac:	f000 bc2e 	b.w	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008eb0:	4b54      	ldr	r3, [pc, #336]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eb4:	f000 bc2a 	b.w	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ebc:	f000 bc26 	b.w	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec6:	f040 809f 	bne.w	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008eca:	4b4a      	ldr	r3, [pc, #296]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ece:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008ed2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eda:	d04d      	beq.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ee2:	f200 8084 	bhi.w	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee8:	2bc0      	cmp	r3, #192	; 0xc0
 8008eea:	d07d      	beq.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eee:	2bc0      	cmp	r3, #192	; 0xc0
 8008ef0:	d87d      	bhi.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	2b80      	cmp	r3, #128	; 0x80
 8008ef6:	d02d      	beq.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	2b80      	cmp	r3, #128	; 0x80
 8008efc:	d877      	bhi.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d003      	beq.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f06:	2b40      	cmp	r3, #64	; 0x40
 8008f08:	d012      	beq.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008f0a:	e070      	b.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f0c:	4b39      	ldr	r3, [pc, #228]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f18:	d107      	bne.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fec0 	bl	8009ca4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f28:	e3f0      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f2e:	e3ed      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f30:	4b30      	ldr	r3, [pc, #192]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f3c:	d107      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f3e:	f107 0318 	add.w	r3, r7, #24
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fc06 	bl	8009754 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f4c:	e3de      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f52:	e3db      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f54:	4b27      	ldr	r3, [pc, #156]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f60:	d107      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f62:	f107 030c 	add.w	r3, r7, #12
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 fd48 	bl	80099fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f70:	e3cc      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f76:	e3c9      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f78:	4b1e      	ldr	r3, [pc, #120]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f80:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f82:	4b1c      	ldr	r3, [pc, #112]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0304 	and.w	r3, r3, #4
 8008f8a:	2b04      	cmp	r3, #4
 8008f8c:	d10c      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d109      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f94:	4b17      	ldr	r3, [pc, #92]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	08db      	lsrs	r3, r3, #3
 8008f9a:	f003 0303 	and.w	r3, r3, #3
 8008f9e:	4a16      	ldr	r2, [pc, #88]	; (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa6:	e01e      	b.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fa8:	4b12      	ldr	r3, [pc, #72]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fb4:	d106      	bne.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fbc:	d102      	bne.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008fbe:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fc2:	e010      	b.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fc4:	4b0b      	ldr	r3, [pc, #44]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fd0:	d106      	bne.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fd8:	d102      	bne.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008fda:	4b09      	ldr	r3, [pc, #36]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fde:	e002      	b.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008fe4:	e392      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008fe6:	e391      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008fe8:	4b06      	ldr	r3, [pc, #24]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008fea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fec:	e38e      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ff2:	e38b      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008ff4:	58024400 	.word	0x58024400
 8008ff8:	03d09000 	.word	0x03d09000
 8008ffc:	003d0900 	.word	0x003d0900
 8009000:	017d7840 	.word	0x017d7840
 8009004:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800900e:	f040 809c 	bne.w	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009012:	4b9d      	ldr	r3, [pc, #628]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009016:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800901a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009022:	d054      	beq.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800902a:	f200 808b 	bhi.w	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800902e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009030:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009034:	f000 8083 	beq.w	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8009038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800903e:	f200 8081 	bhi.w	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009048:	d02f      	beq.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009050:	d878      	bhi.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	2b00      	cmp	r3, #0
 8009056:	d004      	beq.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8009058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800905e:	d012      	beq.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8009060:	e070      	b.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009062:	4b89      	ldr	r3, [pc, #548]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800906a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800906e:	d107      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009074:	4618      	mov	r0, r3
 8009076:	f000 fe15 	bl	8009ca4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800907a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800907e:	e345      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009084:	e342      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009086:	4b80      	ldr	r3, [pc, #512]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800908e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009092:	d107      	bne.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009094:	f107 0318 	add.w	r3, r7, #24
 8009098:	4618      	mov	r0, r3
 800909a:	f000 fb5b 	bl	8009754 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090a2:	e333      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090a8:	e330      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090aa:	4b77      	ldr	r3, [pc, #476]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090b6:	d107      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090b8:	f107 030c 	add.w	r3, r7, #12
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 fc9d 	bl	80099fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090c6:	e321      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090cc:	e31e      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80090ce:	4b6e      	ldr	r3, [pc, #440]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80090d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090d6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090d8:	4b6b      	ldr	r3, [pc, #428]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0304 	and.w	r3, r3, #4
 80090e0:	2b04      	cmp	r3, #4
 80090e2:	d10c      	bne.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80090e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d109      	bne.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090ea:	4b67      	ldr	r3, [pc, #412]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	08db      	lsrs	r3, r3, #3
 80090f0:	f003 0303 	and.w	r3, r3, #3
 80090f4:	4a65      	ldr	r2, [pc, #404]	; (800928c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80090f6:	fa22 f303 	lsr.w	r3, r2, r3
 80090fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090fc:	e01e      	b.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090fe:	4b62      	ldr	r3, [pc, #392]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800910a:	d106      	bne.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800910c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800910e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009112:	d102      	bne.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009114:	4b5e      	ldr	r3, [pc, #376]	; (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009118:	e010      	b.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800911a:	4b5b      	ldr	r3, [pc, #364]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009122:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009126:	d106      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800912e:	d102      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009130:	4b58      	ldr	r3, [pc, #352]	; (8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009134:	e002      	b.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009136:	2300      	movs	r3, #0
 8009138:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800913a:	e2e7      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800913c:	e2e6      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800913e:	4b56      	ldr	r3, [pc, #344]	; (8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009140:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009142:	e2e3      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009148:	e2e0      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009150:	f040 80a7 	bne.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009154:	4b4c      	ldr	r3, [pc, #304]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009158:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800915c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009164:	d055      	beq.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009168:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800916c:	f200 8096 	bhi.w	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009176:	f000 8084 	beq.w	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009180:	f200 808c 	bhi.w	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009186:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800918a:	d030      	beq.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800918c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009192:	f200 8083 	bhi.w	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009198:	2b00      	cmp	r3, #0
 800919a:	d004      	beq.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800919c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091a2:	d012      	beq.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80091a4:	e07a      	b.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091a6:	4b38      	ldr	r3, [pc, #224]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091b2:	d107      	bne.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 fd73 	bl	8009ca4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091c2:	e2a3      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80091c4:	2300      	movs	r3, #0
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091c8:	e2a0      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091ca:	4b2f      	ldr	r3, [pc, #188]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091d6:	d107      	bne.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091d8:	f107 0318 	add.w	r3, r7, #24
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 fab9 	bl	8009754 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80091e6:	e291      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80091e8:	2300      	movs	r3, #0
 80091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ec:	e28e      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091ee:	4b26      	ldr	r3, [pc, #152]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091fa:	d107      	bne.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091fc:	f107 030c 	add.w	r3, r7, #12
 8009200:	4618      	mov	r0, r3
 8009202:	f000 fbfb 	bl	80099fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800920a:	e27f      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800920c:	2300      	movs	r3, #0
 800920e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009210:	e27c      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009212:	4b1d      	ldr	r3, [pc, #116]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009216:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800921a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800921c:	4b1a      	ldr	r3, [pc, #104]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 0304 	and.w	r3, r3, #4
 8009224:	2b04      	cmp	r3, #4
 8009226:	d10c      	bne.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922a:	2b00      	cmp	r3, #0
 800922c:	d109      	bne.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800922e:	4b16      	ldr	r3, [pc, #88]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	08db      	lsrs	r3, r3, #3
 8009234:	f003 0303 	and.w	r3, r3, #3
 8009238:	4a14      	ldr	r2, [pc, #80]	; (800928c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800923a:	fa22 f303 	lsr.w	r3, r2, r3
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009240:	e01e      	b.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009242:	4b11      	ldr	r3, [pc, #68]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800924a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800924e:	d106      	bne.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009256:	d102      	bne.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009258:	4b0d      	ldr	r3, [pc, #52]	; (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800925a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800925c:	e010      	b.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800925e:	4b0a      	ldr	r3, [pc, #40]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800926a:	d106      	bne.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800926c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009272:	d102      	bne.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009274:	4b07      	ldr	r3, [pc, #28]	; (8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009278:	e002      	b.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800927a:	2300      	movs	r3, #0
 800927c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800927e:	e245      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009280:	e244      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009282:	4b05      	ldr	r3, [pc, #20]	; (8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009284:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009286:	e241      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009288:	58024400 	.word	0x58024400
 800928c:	03d09000 	.word	0x03d09000
 8009290:	003d0900 	.word	0x003d0900
 8009294:	017d7840 	.word	0x017d7840
 8009298:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800929c:	2300      	movs	r3, #0
 800929e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092a0:	e234      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092a8:	f040 809c 	bne.w	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80092ac:	4b9b      	ldr	r3, [pc, #620]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80092ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80092b4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80092b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092bc:	d054      	beq.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092c4:	f200 808b 	bhi.w	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80092c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092ce:	f000 8083 	beq.w	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80092d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092d8:	f200 8081 	bhi.w	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80092dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092e2:	d02f      	beq.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80092e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ea:	d878      	bhi.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80092ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d004      	beq.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80092f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092f8:	d012      	beq.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80092fa:	e070      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092fc:	4b87      	ldr	r3, [pc, #540]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009304:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009308:	d107      	bne.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800930a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800930e:	4618      	mov	r0, r3
 8009310:	f000 fcc8 	bl	8009ca4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009316:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009318:	e1f8      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800931e:	e1f5      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009320:	4b7e      	ldr	r3, [pc, #504]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800932c:	d107      	bne.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800932e:	f107 0318 	add.w	r3, r7, #24
 8009332:	4618      	mov	r0, r3
 8009334:	f000 fa0e 	bl	8009754 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800933c:	e1e6      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009342:	e1e3      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009344:	4b75      	ldr	r3, [pc, #468]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800934c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009350:	d107      	bne.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009352:	f107 030c 	add.w	r3, r7, #12
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fb50 	bl	80099fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009360:	e1d4      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009362:	2300      	movs	r3, #0
 8009364:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009366:	e1d1      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009368:	4b6c      	ldr	r3, [pc, #432]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800936a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800936c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009370:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009372:	4b6a      	ldr	r3, [pc, #424]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0304 	and.w	r3, r3, #4
 800937a:	2b04      	cmp	r3, #4
 800937c:	d10c      	bne.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800937e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009380:	2b00      	cmp	r3, #0
 8009382:	d109      	bne.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009384:	4b65      	ldr	r3, [pc, #404]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	08db      	lsrs	r3, r3, #3
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	4a64      	ldr	r2, [pc, #400]	; (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8009390:	fa22 f303 	lsr.w	r3, r2, r3
 8009394:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009396:	e01e      	b.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009398:	4b60      	ldr	r3, [pc, #384]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093a4:	d106      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80093a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093ac:	d102      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80093ae:	4b5d      	ldr	r3, [pc, #372]	; (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80093b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093b2:	e010      	b.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093b4:	4b59      	ldr	r3, [pc, #356]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093c0:	d106      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80093c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c8:	d102      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80093ca:	4b57      	ldr	r3, [pc, #348]	; (8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80093cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ce:	e002      	b.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80093d4:	e19a      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80093d6:	e199      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80093d8:	4b54      	ldr	r3, [pc, #336]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093dc:	e196      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093e2:	e193      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80093ea:	d173      	bne.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80093ec:	4b4b      	ldr	r3, [pc, #300]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80093ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80093f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80093f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093fc:	d02f      	beq.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80093fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009400:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009404:	d863      	bhi.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8009406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009408:	2b00      	cmp	r3, #0
 800940a:	d004      	beq.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009412:	d012      	beq.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8009414:	e05b      	b.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009416:	4b41      	ldr	r3, [pc, #260]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800941e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009422:	d107      	bne.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009424:	f107 0318 	add.w	r3, r7, #24
 8009428:	4618      	mov	r0, r3
 800942a:	f000 f993 	bl	8009754 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009432:	e16b      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009438:	e168      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800943a:	4b38      	ldr	r3, [pc, #224]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009446:	d107      	bne.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009448:	f107 030c 	add.w	r3, r7, #12
 800944c:	4618      	mov	r0, r3
 800944e:	f000 fad5 	bl	80099fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009456:	e159      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009458:	2300      	movs	r3, #0
 800945a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800945c:	e156      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800945e:	4b2f      	ldr	r3, [pc, #188]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009462:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009466:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009468:	4b2c      	ldr	r3, [pc, #176]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0304 	and.w	r3, r3, #4
 8009470:	2b04      	cmp	r3, #4
 8009472:	d10c      	bne.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8009474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009476:	2b00      	cmp	r3, #0
 8009478:	d109      	bne.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800947a:	4b28      	ldr	r3, [pc, #160]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	08db      	lsrs	r3, r3, #3
 8009480:	f003 0303 	and.w	r3, r3, #3
 8009484:	4a26      	ldr	r2, [pc, #152]	; (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8009486:	fa22 f303 	lsr.w	r3, r2, r3
 800948a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800948c:	e01e      	b.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800948e:	4b23      	ldr	r3, [pc, #140]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800949a:	d106      	bne.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800949c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094a2:	d102      	bne.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80094a4:	4b1f      	ldr	r3, [pc, #124]	; (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80094a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094a8:	e010      	b.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094aa:	4b1c      	ldr	r3, [pc, #112]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094b6:	d106      	bne.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80094b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094be:	d102      	bne.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80094c0:	4b19      	ldr	r3, [pc, #100]	; (8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80094c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094c4:	e002      	b.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80094ca:	e11f      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80094cc:	e11e      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80094ce:	2300      	movs	r3, #0
 80094d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094d2:	e11b      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094da:	d13e      	bne.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80094dc:	4b0f      	ldr	r3, [pc, #60]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80094de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094e4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80094e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d004      	beq.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094f2:	d01d      	beq.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80094f4:	e02e      	b.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094f6:	4b09      	ldr	r3, [pc, #36]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009502:	d107      	bne.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009508:	4618      	mov	r0, r3
 800950a:	f000 fbcb 	bl	8009ca4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800950e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009510:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009512:	e0fb      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009514:	2300      	movs	r3, #0
 8009516:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009518:	e0f8      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800951a:	bf00      	nop
 800951c:	58024400 	.word	0x58024400
 8009520:	03d09000 	.word	0x03d09000
 8009524:	003d0900 	.word	0x003d0900
 8009528:	017d7840 	.word	0x017d7840
 800952c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009530:	4b79      	ldr	r3, [pc, #484]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800953c:	d107      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800953e:	f107 0318 	add.w	r3, r7, #24
 8009542:	4618      	mov	r0, r3
 8009544:	f000 f906 	bl	8009754 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800954c:	e0de      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009552:	e0db      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009558:	e0d8      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009560:	f040 8085 	bne.w	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009564:	4b6c      	ldr	r3, [pc, #432]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009568:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800956c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800956e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009574:	d06b      	beq.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8009576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009578:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800957c:	d874      	bhi.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009584:	d056      	beq.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8009586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800958c:	d86c      	bhi.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800958e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009590:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009594:	d03b      	beq.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8009596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009598:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800959c:	d864      	bhi.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800959e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095a4:	d021      	beq.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80095a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095ac:	d85c      	bhi.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80095ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d004      	beq.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80095b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095ba:	d004      	beq.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80095bc:	e054      	b.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80095be:	f000 f8b3 	bl	8009728 <HAL_RCCEx_GetD3PCLK1Freq>
 80095c2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80095c4:	e0a2      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095c6:	4b54      	ldr	r3, [pc, #336]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095d2:	d107      	bne.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095d4:	f107 0318 	add.w	r3, r7, #24
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 f8bb 	bl	8009754 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80095e2:	e093      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80095e4:	2300      	movs	r3, #0
 80095e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095e8:	e090      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095ea:	4b4b      	ldr	r3, [pc, #300]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095f6:	d107      	bne.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095f8:	f107 030c 	add.w	r3, r7, #12
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f9fd 	bl	80099fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009606:	e081      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009608:	2300      	movs	r3, #0
 800960a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800960c:	e07e      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800960e:	4b42      	ldr	r3, [pc, #264]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0304 	and.w	r3, r3, #4
 8009616:	2b04      	cmp	r3, #4
 8009618:	d109      	bne.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800961a:	4b3f      	ldr	r3, [pc, #252]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	08db      	lsrs	r3, r3, #3
 8009620:	f003 0303 	and.w	r3, r3, #3
 8009624:	4a3d      	ldr	r2, [pc, #244]	; (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009626:	fa22 f303 	lsr.w	r3, r2, r3
 800962a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800962c:	e06e      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800962e:	2300      	movs	r3, #0
 8009630:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009632:	e06b      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009634:	4b38      	ldr	r3, [pc, #224]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800963c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009640:	d102      	bne.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8009642:	4b37      	ldr	r3, [pc, #220]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009644:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009646:	e061      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009648:	2300      	movs	r3, #0
 800964a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800964c:	e05e      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800964e:	4b32      	ldr	r3, [pc, #200]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800965a:	d102      	bne.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800965c:	4b31      	ldr	r3, [pc, #196]	; (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800965e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009660:	e054      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009666:	e051      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800966c:	e04e      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009674:	d148      	bne.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009676:	4b28      	ldr	r3, [pc, #160]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800967a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800967e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009686:	d02a      	beq.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8009688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800968e:	d838      	bhi.n	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8009690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009692:	2b00      	cmp	r3, #0
 8009694:	d004      	beq.n	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8009696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009698:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800969c:	d00d      	beq.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800969e:	e030      	b.n	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096a0:	4b1d      	ldr	r3, [pc, #116]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096ac:	d102      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 80096ae:	4b1d      	ldr	r3, [pc, #116]	; (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80096b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80096b2:	e02b      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80096b4:	2300      	movs	r3, #0
 80096b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096b8:	e028      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096ba:	4b17      	ldr	r3, [pc, #92]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096c6:	d107      	bne.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096cc:	4618      	mov	r0, r3
 80096ce:	f000 fae9 	bl	8009ca4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80096d6:	e019      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80096d8:	2300      	movs	r3, #0
 80096da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096dc:	e016      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096de:	4b0e      	ldr	r3, [pc, #56]	; (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096ea:	d107      	bne.n	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096ec:	f107 0318 	add.w	r3, r7, #24
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 f82f 	bl	8009754 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80096fa:	e007      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80096fc:	2300      	movs	r3, #0
 80096fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009700:	e004      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009706:	e001      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8009708:	2300      	movs	r3, #0
 800970a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800970c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800970e:	4618      	mov	r0, r3
 8009710:	3740      	adds	r7, #64	; 0x40
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	58024400 	.word	0x58024400
 800971c:	03d09000 	.word	0x03d09000
 8009720:	003d0900 	.word	0x003d0900
 8009724:	017d7840 	.word	0x017d7840

08009728 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800972c:	f7fe fb88 	bl	8007e40 <HAL_RCC_GetHCLKFreq>
 8009730:	4602      	mov	r2, r0
 8009732:	4b06      	ldr	r3, [pc, #24]	; (800974c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	091b      	lsrs	r3, r3, #4
 8009738:	f003 0307 	and.w	r3, r3, #7
 800973c:	4904      	ldr	r1, [pc, #16]	; (8009750 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800973e:	5ccb      	ldrb	r3, [r1, r3]
 8009740:	f003 031f 	and.w	r3, r3, #31
 8009744:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009748:	4618      	mov	r0, r3
 800974a:	bd80      	pop	{r7, pc}
 800974c:	58024400 	.word	0x58024400
 8009750:	0800ead8 	.word	0x0800ead8

08009754 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009754:	b480      	push	{r7}
 8009756:	b089      	sub	sp, #36	; 0x24
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800975c:	4ba1      	ldr	r3, [pc, #644]	; (80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800975e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009760:	f003 0303 	and.w	r3, r3, #3
 8009764:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009766:	4b9f      	ldr	r3, [pc, #636]	; (80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976a:	0b1b      	lsrs	r3, r3, #12
 800976c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009770:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009772:	4b9c      	ldr	r3, [pc, #624]	; (80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009776:	091b      	lsrs	r3, r3, #4
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800977e:	4b99      	ldr	r3, [pc, #612]	; (80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009782:	08db      	lsrs	r3, r3, #3
 8009784:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	fb02 f303 	mul.w	r3, r2, r3
 800978e:	ee07 3a90 	vmov	s15, r3
 8009792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009796:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	2b00      	cmp	r3, #0
 800979e:	f000 8111 	beq.w	80099c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	f000 8083 	beq.w	80098b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	f200 80a1 	bhi.w	80098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d003      	beq.n	80097c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d056      	beq.n	800986c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80097be:	e099      	b.n	80098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097c0:	4b88      	ldr	r3, [pc, #544]	; (80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0320 	and.w	r3, r3, #32
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d02d      	beq.n	8009828 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097cc:	4b85      	ldr	r3, [pc, #532]	; (80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	08db      	lsrs	r3, r3, #3
 80097d2:	f003 0303 	and.w	r3, r3, #3
 80097d6:	4a84      	ldr	r2, [pc, #528]	; (80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80097d8:	fa22 f303 	lsr.w	r3, r2, r3
 80097dc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	ee07 3a90 	vmov	s15, r3
 80097e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	ee07 3a90 	vmov	s15, r3
 80097ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097f6:	4b7b      	ldr	r3, [pc, #492]	; (80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097fe:	ee07 3a90 	vmov	s15, r3
 8009802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009806:	ed97 6a03 	vldr	s12, [r7, #12]
 800980a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80099ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800980e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800981a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800981e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009822:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009826:	e087      	b.n	8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	ee07 3a90 	vmov	s15, r3
 800982e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009832:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80099f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800983a:	4b6a      	ldr	r3, [pc, #424]	; (80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800983c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009842:	ee07 3a90 	vmov	s15, r3
 8009846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800984a:	ed97 6a03 	vldr	s12, [r7, #12]
 800984e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80099ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800985a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800985e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009866:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800986a:	e065      	b.n	8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	ee07 3a90 	vmov	s15, r3
 8009872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009876:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80099f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800987a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800987e:	4b59      	ldr	r3, [pc, #356]	; (80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009886:	ee07 3a90 	vmov	s15, r3
 800988a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800988e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009892:	eddf 5a56 	vldr	s11, [pc, #344]	; 80099ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800989a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800989e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098ae:	e043      	b.n	8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	ee07 3a90 	vmov	s15, r3
 80098b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80099f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80098be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098c2:	4b48      	ldr	r3, [pc, #288]	; (80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80098d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80099ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098f2:	e021      	b.n	8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	ee07 3a90 	vmov	s15, r3
 80098fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80099f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009906:	4b37      	ldr	r3, [pc, #220]	; (80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800990e:	ee07 3a90 	vmov	s15, r3
 8009912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009916:	ed97 6a03 	vldr	s12, [r7, #12]
 800991a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80099ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800991e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800992a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800992e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009932:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009936:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009938:	4b2a      	ldr	r3, [pc, #168]	; (80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800993a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993c:	0a5b      	lsrs	r3, r3, #9
 800993e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009942:	ee07 3a90 	vmov	s15, r3
 8009946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800994a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800994e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009952:	edd7 6a07 	vldr	s13, [r7, #28]
 8009956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800995a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800995e:	ee17 2a90 	vmov	r2, s15
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009966:	4b1f      	ldr	r3, [pc, #124]	; (80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996a:	0c1b      	lsrs	r3, r3, #16
 800996c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009970:	ee07 3a90 	vmov	s15, r3
 8009974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009978:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800997c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009980:	edd7 6a07 	vldr	s13, [r7, #28]
 8009984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800998c:	ee17 2a90 	vmov	r2, s15
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009994:	4b13      	ldr	r3, [pc, #76]	; (80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009998:	0e1b      	lsrs	r3, r3, #24
 800999a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800999e:	ee07 3a90 	vmov	s15, r3
 80099a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80099b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ba:	ee17 2a90 	vmov	r2, s15
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80099c2:	e008      	b.n	80099d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	609a      	str	r2, [r3, #8]
}
 80099d6:	bf00      	nop
 80099d8:	3724      	adds	r7, #36	; 0x24
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	58024400 	.word	0x58024400
 80099e8:	03d09000 	.word	0x03d09000
 80099ec:	46000000 	.word	0x46000000
 80099f0:	4c742400 	.word	0x4c742400
 80099f4:	4a742400 	.word	0x4a742400
 80099f8:	4bbebc20 	.word	0x4bbebc20

080099fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b089      	sub	sp, #36	; 0x24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a04:	4ba1      	ldr	r3, [pc, #644]	; (8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a08:	f003 0303 	and.w	r3, r3, #3
 8009a0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009a0e:	4b9f      	ldr	r3, [pc, #636]	; (8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a12:	0d1b      	lsrs	r3, r3, #20
 8009a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009a1a:	4b9c      	ldr	r3, [pc, #624]	; (8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1e:	0a1b      	lsrs	r3, r3, #8
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009a26:	4b99      	ldr	r3, [pc, #612]	; (8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a2a:	08db      	lsrs	r3, r3, #3
 8009a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	fb02 f303 	mul.w	r3, r2, r3
 8009a36:	ee07 3a90 	vmov	s15, r3
 8009a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 8111 	beq.w	8009c6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	f000 8083 	beq.w	8009b58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	f200 80a1 	bhi.w	8009b9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d003      	beq.n	8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d056      	beq.n	8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009a66:	e099      	b.n	8009b9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a68:	4b88      	ldr	r3, [pc, #544]	; (8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 0320 	and.w	r3, r3, #32
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d02d      	beq.n	8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a74:	4b85      	ldr	r3, [pc, #532]	; (8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	08db      	lsrs	r3, r3, #3
 8009a7a:	f003 0303 	and.w	r3, r3, #3
 8009a7e:	4a84      	ldr	r2, [pc, #528]	; (8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009a80:	fa22 f303 	lsr.w	r3, r2, r3
 8009a84:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	ee07 3a90 	vmov	s15, r3
 8009a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	ee07 3a90 	vmov	s15, r3
 8009a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a9e:	4b7b      	ldr	r3, [pc, #492]	; (8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aa6:	ee07 3a90 	vmov	s15, r3
 8009aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ab2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009ace:	e087      	b.n	8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ada:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ae2:	4b6a      	ldr	r3, [pc, #424]	; (8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aea:	ee07 3a90 	vmov	s15, r3
 8009aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009af6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b12:	e065      	b.n	8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b26:	4b59      	ldr	r3, [pc, #356]	; (8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b2e:	ee07 3a90 	vmov	s15, r3
 8009b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b56:	e043      	b.n	8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	ee07 3a90 	vmov	s15, r3
 8009b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b6a:	4b48      	ldr	r3, [pc, #288]	; (8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b9a:	e021      	b.n	8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	ee07 3a90 	vmov	s15, r3
 8009ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bae:	4b37      	ldr	r3, [pc, #220]	; (8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb6:	ee07 3a90 	vmov	s15, r3
 8009bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bc2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bde:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009be0:	4b2a      	ldr	r3, [pc, #168]	; (8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be4:	0a5b      	lsrs	r3, r3, #9
 8009be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bea:	ee07 3a90 	vmov	s15, r3
 8009bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c06:	ee17 2a90 	vmov	r2, s15
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009c0e:	4b1f      	ldr	r3, [pc, #124]	; (8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c12:	0c1b      	lsrs	r3, r3, #16
 8009c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c18:	ee07 3a90 	vmov	s15, r3
 8009c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c28:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c34:	ee17 2a90 	vmov	r2, s15
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009c3c:	4b13      	ldr	r3, [pc, #76]	; (8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c40:	0e1b      	lsrs	r3, r3, #24
 8009c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c56:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c62:	ee17 2a90 	vmov	r2, s15
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009c6a:	e008      	b.n	8009c7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	609a      	str	r2, [r3, #8]
}
 8009c7e:	bf00      	nop
 8009c80:	3724      	adds	r7, #36	; 0x24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	58024400 	.word	0x58024400
 8009c90:	03d09000 	.word	0x03d09000
 8009c94:	46000000 	.word	0x46000000
 8009c98:	4c742400 	.word	0x4c742400
 8009c9c:	4a742400 	.word	0x4a742400
 8009ca0:	4bbebc20 	.word	0x4bbebc20

08009ca4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b089      	sub	sp, #36	; 0x24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009cac:	4ba0      	ldr	r3, [pc, #640]	; (8009f30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb0:	f003 0303 	and.w	r3, r3, #3
 8009cb4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009cb6:	4b9e      	ldr	r3, [pc, #632]	; (8009f30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cba:	091b      	lsrs	r3, r3, #4
 8009cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cc0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009cc2:	4b9b      	ldr	r3, [pc, #620]	; (8009f30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc6:	f003 0301 	and.w	r3, r3, #1
 8009cca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009ccc:	4b98      	ldr	r3, [pc, #608]	; (8009f30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd0:	08db      	lsrs	r3, r3, #3
 8009cd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	fb02 f303 	mul.w	r3, r2, r3
 8009cdc:	ee07 3a90 	vmov	s15, r3
 8009ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f000 8111 	beq.w	8009f12 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	f000 8083 	beq.w	8009dfe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	f200 80a1 	bhi.w	8009e42 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d056      	beq.n	8009dba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009d0c:	e099      	b.n	8009e42 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d0e:	4b88      	ldr	r3, [pc, #544]	; (8009f30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f003 0320 	and.w	r3, r3, #32
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d02d      	beq.n	8009d76 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d1a:	4b85      	ldr	r3, [pc, #532]	; (8009f30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	08db      	lsrs	r3, r3, #3
 8009d20:	f003 0303 	and.w	r3, r3, #3
 8009d24:	4a83      	ldr	r2, [pc, #524]	; (8009f34 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009d26:	fa22 f303 	lsr.w	r3, r2, r3
 8009d2a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	ee07 3a90 	vmov	s15, r3
 8009d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	ee07 3a90 	vmov	s15, r3
 8009d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d44:	4b7a      	ldr	r3, [pc, #488]	; (8009f30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d4c:	ee07 3a90 	vmov	s15, r3
 8009d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d54:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d58:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009f38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d70:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009d74:	e087      	b.n	8009e86 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	ee07 3a90 	vmov	s15, r3
 8009d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d80:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009f3c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d88:	4b69      	ldr	r3, [pc, #420]	; (8009f30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d90:	ee07 3a90 	vmov	s15, r3
 8009d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d98:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d9c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009f38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009da0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009da4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009da8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009db4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009db8:	e065      	b.n	8009e86 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	ee07 3a90 	vmov	s15, r3
 8009dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009f40 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009dc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dcc:	4b58      	ldr	r3, [pc, #352]	; (8009f30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd4:	ee07 3a90 	vmov	s15, r3
 8009dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ddc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009de0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009f38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009de4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009df0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dfc:	e043      	b.n	8009e86 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	ee07 3a90 	vmov	s15, r3
 8009e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e08:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009f44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009e0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e10:	4b47      	ldr	r3, [pc, #284]	; (8009f30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e18:	ee07 3a90 	vmov	s15, r3
 8009e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e20:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e24:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009f38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e40:	e021      	b.n	8009e86 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	ee07 3a90 	vmov	s15, r3
 8009e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009f3c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009e50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e54:	4b36      	ldr	r3, [pc, #216]	; (8009f30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e5c:	ee07 3a90 	vmov	s15, r3
 8009e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e64:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e68:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009f38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e84:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009e86:	4b2a      	ldr	r3, [pc, #168]	; (8009f30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8a:	0a5b      	lsrs	r3, r3, #9
 8009e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e90:	ee07 3a90 	vmov	s15, r3
 8009e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ea0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eac:	ee17 2a90 	vmov	r2, s15
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009eb4:	4b1e      	ldr	r3, [pc, #120]	; (8009f30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb8:	0c1b      	lsrs	r3, r3, #16
 8009eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ebe:	ee07 3a90 	vmov	s15, r3
 8009ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009eca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ece:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eda:	ee17 2a90 	vmov	r2, s15
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009ee2:	4b13      	ldr	r3, [pc, #76]	; (8009f30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee6:	0e1b      	lsrs	r3, r3, #24
 8009ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eec:	ee07 3a90 	vmov	s15, r3
 8009ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ef8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009efc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f08:	ee17 2a90 	vmov	r2, s15
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009f10:	e008      	b.n	8009f24 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	609a      	str	r2, [r3, #8]
}
 8009f24:	bf00      	nop
 8009f26:	3724      	adds	r7, #36	; 0x24
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	58024400 	.word	0x58024400
 8009f34:	03d09000 	.word	0x03d09000
 8009f38:	46000000 	.word	0x46000000
 8009f3c:	4c742400 	.word	0x4c742400
 8009f40:	4a742400 	.word	0x4a742400
 8009f44:	4bbebc20 	.word	0x4bbebc20

08009f48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f52:	2300      	movs	r3, #0
 8009f54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f56:	4b53      	ldr	r3, [pc, #332]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 8009f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5a:	f003 0303 	and.w	r3, r3, #3
 8009f5e:	2b03      	cmp	r3, #3
 8009f60:	d101      	bne.n	8009f66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e099      	b.n	800a09a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009f66:	4b4f      	ldr	r3, [pc, #316]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a4e      	ldr	r2, [pc, #312]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 8009f6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009f70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f72:	f7f9 ff65 	bl	8003e40 <HAL_GetTick>
 8009f76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f78:	e008      	b.n	8009f8c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009f7a:	f7f9 ff61 	bl	8003e40 <HAL_GetTick>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d901      	bls.n	8009f8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	e086      	b.n	800a09a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f8c:	4b45      	ldr	r3, [pc, #276]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1f0      	bne.n	8009f7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009f98:	4b42      	ldr	r3, [pc, #264]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 8009f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	031b      	lsls	r3, r3, #12
 8009fa6:	493f      	ldr	r1, [pc, #252]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	628b      	str	r3, [r1, #40]	; 0x28
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	025b      	lsls	r3, r3, #9
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	431a      	orrs	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	041b      	lsls	r3, r3, #16
 8009fca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009fce:	431a      	orrs	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	061b      	lsls	r3, r3, #24
 8009fd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fdc:	4931      	ldr	r1, [pc, #196]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009fe2:	4b30      	ldr	r3, [pc, #192]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	695b      	ldr	r3, [r3, #20]
 8009fee:	492d      	ldr	r1, [pc, #180]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ff4:	4b2b      	ldr	r3, [pc, #172]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 8009ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff8:	f023 0220 	bic.w	r2, r3, #32
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	699b      	ldr	r3, [r3, #24]
 800a000:	4928      	ldr	r1, [pc, #160]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 800a002:	4313      	orrs	r3, r2
 800a004:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a006:	4b27      	ldr	r3, [pc, #156]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 800a008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00a:	4a26      	ldr	r2, [pc, #152]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 800a00c:	f023 0310 	bic.w	r3, r3, #16
 800a010:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a012:	4b24      	ldr	r3, [pc, #144]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 800a014:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a016:	4b24      	ldr	r3, [pc, #144]	; (800a0a8 <RCCEx_PLL2_Config+0x160>)
 800a018:	4013      	ands	r3, r2
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	69d2      	ldr	r2, [r2, #28]
 800a01e:	00d2      	lsls	r2, r2, #3
 800a020:	4920      	ldr	r1, [pc, #128]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 800a022:	4313      	orrs	r3, r2
 800a024:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a026:	4b1f      	ldr	r3, [pc, #124]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 800a028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02a:	4a1e      	ldr	r2, [pc, #120]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 800a02c:	f043 0310 	orr.w	r3, r3, #16
 800a030:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d106      	bne.n	800a046 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a038:	4b1a      	ldr	r3, [pc, #104]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 800a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03c:	4a19      	ldr	r2, [pc, #100]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 800a03e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a042:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a044:	e00f      	b.n	800a066 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d106      	bne.n	800a05a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a04c:	4b15      	ldr	r3, [pc, #84]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 800a04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a050:	4a14      	ldr	r2, [pc, #80]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 800a052:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a056:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a058:	e005      	b.n	800a066 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a05a:	4b12      	ldr	r3, [pc, #72]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 800a05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05e:	4a11      	ldr	r2, [pc, #68]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 800a060:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a064:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a066:	4b0f      	ldr	r3, [pc, #60]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a0e      	ldr	r2, [pc, #56]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 800a06c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a070:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a072:	f7f9 fee5 	bl	8003e40 <HAL_GetTick>
 800a076:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a078:	e008      	b.n	800a08c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a07a:	f7f9 fee1 	bl	8003e40 <HAL_GetTick>
 800a07e:	4602      	mov	r2, r0
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	1ad3      	subs	r3, r2, r3
 800a084:	2b02      	cmp	r3, #2
 800a086:	d901      	bls.n	800a08c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a088:	2303      	movs	r3, #3
 800a08a:	e006      	b.n	800a09a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a08c:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <RCCEx_PLL2_Config+0x15c>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d0f0      	beq.n	800a07a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a098:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	58024400 	.word	0x58024400
 800a0a8:	ffff0007 	.word	0xffff0007

0800a0ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a0ba:	4b53      	ldr	r3, [pc, #332]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0be:	f003 0303 	and.w	r3, r3, #3
 800a0c2:	2b03      	cmp	r3, #3
 800a0c4:	d101      	bne.n	800a0ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e099      	b.n	800a1fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a0ca:	4b4f      	ldr	r3, [pc, #316]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a4e      	ldr	r2, [pc, #312]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a0d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0d6:	f7f9 feb3 	bl	8003e40 <HAL_GetTick>
 800a0da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0dc:	e008      	b.n	800a0f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a0de:	f7f9 feaf 	bl	8003e40 <HAL_GetTick>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d901      	bls.n	800a0f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e086      	b.n	800a1fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0f0:	4b45      	ldr	r3, [pc, #276]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1f0      	bne.n	800a0de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a0fc:	4b42      	ldr	r3, [pc, #264]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a100:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	051b      	lsls	r3, r3, #20
 800a10a:	493f      	ldr	r1, [pc, #252]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a10c:	4313      	orrs	r3, r2
 800a10e:	628b      	str	r3, [r1, #40]	; 0x28
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	3b01      	subs	r3, #1
 800a116:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	3b01      	subs	r3, #1
 800a120:	025b      	lsls	r3, r3, #9
 800a122:	b29b      	uxth	r3, r3
 800a124:	431a      	orrs	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	041b      	lsls	r3, r3, #16
 800a12e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a132:	431a      	orrs	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	3b01      	subs	r3, #1
 800a13a:	061b      	lsls	r3, r3, #24
 800a13c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a140:	4931      	ldr	r1, [pc, #196]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a142:	4313      	orrs	r3, r2
 800a144:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a146:	4b30      	ldr	r3, [pc, #192]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	492d      	ldr	r1, [pc, #180]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a154:	4313      	orrs	r3, r2
 800a156:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a158:	4b2b      	ldr	r3, [pc, #172]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	4928      	ldr	r1, [pc, #160]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a166:	4313      	orrs	r3, r2
 800a168:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a16a:	4b27      	ldr	r3, [pc, #156]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16e:	4a26      	ldr	r2, [pc, #152]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a174:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a176:	4b24      	ldr	r3, [pc, #144]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a17a:	4b24      	ldr	r3, [pc, #144]	; (800a20c <RCCEx_PLL3_Config+0x160>)
 800a17c:	4013      	ands	r3, r2
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	69d2      	ldr	r2, [r2, #28]
 800a182:	00d2      	lsls	r2, r2, #3
 800a184:	4920      	ldr	r1, [pc, #128]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a186:	4313      	orrs	r3, r2
 800a188:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a18a:	4b1f      	ldr	r3, [pc, #124]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18e:	4a1e      	ldr	r2, [pc, #120]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a194:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d106      	bne.n	800a1aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a19c:	4b1a      	ldr	r3, [pc, #104]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a0:	4a19      	ldr	r2, [pc, #100]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a1a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a1a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1a8:	e00f      	b.n	800a1ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d106      	bne.n	800a1be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a1b0:	4b15      	ldr	r3, [pc, #84]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b4:	4a14      	ldr	r2, [pc, #80]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a1b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a1ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1bc:	e005      	b.n	800a1ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a1be:	4b12      	ldr	r3, [pc, #72]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c2:	4a11      	ldr	r2, [pc, #68]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a1c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a1ca:	4b0f      	ldr	r3, [pc, #60]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a0e      	ldr	r2, [pc, #56]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a1d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1d6:	f7f9 fe33 	bl	8003e40 <HAL_GetTick>
 800a1da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1dc:	e008      	b.n	800a1f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a1de:	f7f9 fe2f 	bl	8003e40 <HAL_GetTick>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	1ad3      	subs	r3, r2, r3
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d901      	bls.n	800a1f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e006      	b.n	800a1fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1f0:	4b05      	ldr	r3, [pc, #20]	; (800a208 <RCCEx_PLL3_Config+0x15c>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d0f0      	beq.n	800a1de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	58024400 	.word	0x58024400
 800a20c:	ffff0007 	.word	0xffff0007

0800a210 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d101      	bne.n	800a222 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e0f1      	b.n	800a406 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a78      	ldr	r2, [pc, #480]	; (800a410 <HAL_SPI_Init+0x200>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d00f      	beq.n	800a252 <HAL_SPI_Init+0x42>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a77      	ldr	r2, [pc, #476]	; (800a414 <HAL_SPI_Init+0x204>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d00a      	beq.n	800a252 <HAL_SPI_Init+0x42>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a75      	ldr	r2, [pc, #468]	; (800a418 <HAL_SPI_Init+0x208>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d005      	beq.n	800a252 <HAL_SPI_Init+0x42>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	2b0f      	cmp	r3, #15
 800a24c:	d901      	bls.n	800a252 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e0d9      	b.n	800a406 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 ff66 	bl	800b124 <SPI_GetPacketSize>
 800a258:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a6c      	ldr	r2, [pc, #432]	; (800a410 <HAL_SPI_Init+0x200>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d00c      	beq.n	800a27e <HAL_SPI_Init+0x6e>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a6a      	ldr	r2, [pc, #424]	; (800a414 <HAL_SPI_Init+0x204>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d007      	beq.n	800a27e <HAL_SPI_Init+0x6e>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a69      	ldr	r2, [pc, #420]	; (800a418 <HAL_SPI_Init+0x208>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d002      	beq.n	800a27e <HAL_SPI_Init+0x6e>
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2b08      	cmp	r3, #8
 800a27c:	d811      	bhi.n	800a2a2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a282:	4a63      	ldr	r2, [pc, #396]	; (800a410 <HAL_SPI_Init+0x200>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d009      	beq.n	800a29c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a61      	ldr	r2, [pc, #388]	; (800a414 <HAL_SPI_Init+0x204>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d004      	beq.n	800a29c <HAL_SPI_Init+0x8c>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a60      	ldr	r2, [pc, #384]	; (800a418 <HAL_SPI_Init+0x208>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d104      	bne.n	800a2a6 <HAL_SPI_Init+0x96>
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2b10      	cmp	r3, #16
 800a2a0:	d901      	bls.n	800a2a6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e0af      	b.n	800a406 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d106      	bne.n	800a2c0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f7f7 f880 	bl	80013c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f022 0201 	bic.w	r2, r2, #1
 800a2d6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a2e2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2ec:	d119      	bne.n	800a322 <HAL_SPI_Init+0x112>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2f6:	d103      	bne.n	800a300 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d008      	beq.n	800a312 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10c      	bne.n	800a322 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a30c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a310:	d107      	bne.n	800a322 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a320:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	69da      	ldr	r2, [r3, #28]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32a:	431a      	orrs	r2, r3
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	431a      	orrs	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a334:	ea42 0103 	orr.w	r1, r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68da      	ldr	r2, [r3, #12]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	430a      	orrs	r2, r1
 800a342:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34c:	431a      	orrs	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a352:	431a      	orrs	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	699b      	ldr	r3, [r3, #24]
 800a358:	431a      	orrs	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	431a      	orrs	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	431a      	orrs	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	431a      	orrs	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	431a      	orrs	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a376:	431a      	orrs	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	431a      	orrs	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a382:	ea42 0103 	orr.w	r1, r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d113      	bne.n	800a3c2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3ac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a3c0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f022 0201 	bic.w	r2, r2, #1
 800a3d0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00a      	beq.n	800a3f4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	430a      	orrs	r2, r1
 800a3f2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	40013000 	.word	0x40013000
 800a414:	40003800 	.word	0x40003800
 800a418:	40003c00 	.word	0x40003c00

0800a41c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b08a      	sub	sp, #40	; 0x28
 800a420:	af02      	add	r7, sp, #8
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	603b      	str	r3, [r7, #0]
 800a428:	4613      	mov	r3, r2
 800a42a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	3320      	adds	r3, #32
 800a432:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d101      	bne.n	800a446 <HAL_SPI_Transmit+0x2a>
 800a442:	2302      	movs	r3, #2
 800a444:	e1d7      	b.n	800a7f6 <HAL_SPI_Transmit+0x3da>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a44e:	f7f9 fcf7 	bl	8003e40 <HAL_GetTick>
 800a452:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d007      	beq.n	800a470 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a460:	2302      	movs	r3, #2
 800a462:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a46c:	7efb      	ldrb	r3, [r7, #27]
 800a46e:	e1c2      	b.n	800a7f6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d002      	beq.n	800a47c <HAL_SPI_Transmit+0x60>
 800a476:	88fb      	ldrh	r3, [r7, #6]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d107      	bne.n	800a48c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a488:	7efb      	ldrb	r3, [r7, #27]
 800a48a:	e1b4      	b.n	800a7f6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2203      	movs	r2, #3
 800a490:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	88fa      	ldrh	r2, [r7, #6]
 800a4a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	88fa      	ldrh	r2, [r7, #6]
 800a4ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a4dc:	d107      	bne.n	800a4ee <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	4b96      	ldr	r3, [pc, #600]	; (800a750 <HAL_SPI_Transmit+0x334>)
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	88f9      	ldrh	r1, [r7, #6]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	6812      	ldr	r2, [r2, #0]
 800a4fe:	430b      	orrs	r3, r1
 800a500:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f042 0201 	orr.w	r2, r2, #1
 800a510:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a51a:	d107      	bne.n	800a52c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a52a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	2b0f      	cmp	r3, #15
 800a532:	d947      	bls.n	800a5c4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a534:	e03f      	b.n	800a5b6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	f003 0302 	and.w	r3, r3, #2
 800a540:	2b02      	cmp	r3, #2
 800a542:	d114      	bne.n	800a56e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	6812      	ldr	r2, [r2, #0]
 800a54e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a554:	1d1a      	adds	r2, r3, #4
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a560:	b29b      	uxth	r3, r3
 800a562:	3b01      	subs	r3, #1
 800a564:	b29a      	uxth	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a56c:	e023      	b.n	800a5b6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a56e:	f7f9 fc67 	bl	8003e40 <HAL_GetTick>
 800a572:	4602      	mov	r2, r0
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	1ad3      	subs	r3, r2, r3
 800a578:	683a      	ldr	r2, [r7, #0]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d803      	bhi.n	800a586 <HAL_SPI_Transmit+0x16a>
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a584:	d102      	bne.n	800a58c <HAL_SPI_Transmit+0x170>
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d114      	bne.n	800a5b6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f000 fcfb 	bl	800af88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a5b2:	2303      	movs	r3, #3
 800a5b4:	e11f      	b.n	800a7f6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1b9      	bne.n	800a536 <HAL_SPI_Transmit+0x11a>
 800a5c2:	e0f2      	b.n	800a7aa <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	2b07      	cmp	r3, #7
 800a5ca:	f240 80e7 	bls.w	800a79c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a5ce:	e05d      	b.n	800a68c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	695b      	ldr	r3, [r3, #20]
 800a5d6:	f003 0302 	and.w	r3, r3, #2
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d132      	bne.n	800a644 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d918      	bls.n	800a61c <HAL_SPI_Transmit+0x200>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d014      	beq.n	800a61c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6812      	ldr	r2, [r2, #0]
 800a5fc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a602:	1d1a      	adds	r2, r3, #4
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a60e:	b29b      	uxth	r3, r3
 800a610:	3b02      	subs	r3, #2
 800a612:	b29a      	uxth	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a61a:	e037      	b.n	800a68c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a620:	881a      	ldrh	r2, [r3, #0]
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a62a:	1c9a      	adds	r2, r3, #2
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a636:	b29b      	uxth	r3, r3
 800a638:	3b01      	subs	r3, #1
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a642:	e023      	b.n	800a68c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a644:	f7f9 fbfc 	bl	8003e40 <HAL_GetTick>
 800a648:	4602      	mov	r2, r0
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	683a      	ldr	r2, [r7, #0]
 800a650:	429a      	cmp	r2, r3
 800a652:	d803      	bhi.n	800a65c <HAL_SPI_Transmit+0x240>
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65a:	d102      	bne.n	800a662 <HAL_SPI_Transmit+0x246>
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d114      	bne.n	800a68c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f000 fc90 	bl	800af88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a676:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a688:	2303      	movs	r3, #3
 800a68a:	e0b4      	b.n	800a7f6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a692:	b29b      	uxth	r3, r3
 800a694:	2b00      	cmp	r3, #0
 800a696:	d19b      	bne.n	800a5d0 <HAL_SPI_Transmit+0x1b4>
 800a698:	e087      	b.n	800a7aa <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	695b      	ldr	r3, [r3, #20]
 800a6a0:	f003 0302 	and.w	r3, r3, #2
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d155      	bne.n	800a754 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	2b03      	cmp	r3, #3
 800a6b2:	d918      	bls.n	800a6e6 <HAL_SPI_Transmit+0x2ca>
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6b8:	2b40      	cmp	r3, #64	; 0x40
 800a6ba:	d914      	bls.n	800a6e6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6812      	ldr	r2, [r2, #0]
 800a6c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6cc:	1d1a      	adds	r2, r3, #4
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	3b04      	subs	r3, #4
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a6e4:	e05a      	b.n	800a79c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d917      	bls.n	800a722 <HAL_SPI_Transmit+0x306>
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d013      	beq.n	800a722 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6fe:	881a      	ldrh	r2, [r3, #0]
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a708:	1c9a      	adds	r2, r3, #2
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a714:	b29b      	uxth	r3, r3
 800a716:	3b02      	subs	r3, #2
 800a718:	b29a      	uxth	r2, r3
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a720:	e03c      	b.n	800a79c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3320      	adds	r3, #32
 800a72c:	7812      	ldrb	r2, [r2, #0]
 800a72e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a734:	1c5a      	adds	r2, r3, #1
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a740:	b29b      	uxth	r3, r3
 800a742:	3b01      	subs	r3, #1
 800a744:	b29a      	uxth	r2, r3
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a74c:	e026      	b.n	800a79c <HAL_SPI_Transmit+0x380>
 800a74e:	bf00      	nop
 800a750:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a754:	f7f9 fb74 	bl	8003e40 <HAL_GetTick>
 800a758:	4602      	mov	r2, r0
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	429a      	cmp	r2, r3
 800a762:	d803      	bhi.n	800a76c <HAL_SPI_Transmit+0x350>
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76a:	d102      	bne.n	800a772 <HAL_SPI_Transmit+0x356>
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d114      	bne.n	800a79c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f000 fc08 	bl	800af88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a786:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	e02c      	b.n	800a7f6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f47f af78 	bne.w	800a69a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	2108      	movs	r1, #8
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f000 fc87 	bl	800b0c8 <SPI_WaitOnFlagUntilTimeout>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d007      	beq.n	800a7d0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7c6:	f043 0220 	orr.w	r2, r3, #32
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f000 fbd9 	bl	800af88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e000      	b.n	800a7f6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800a7f4:	7efb      	ldrb	r3, [r7, #27]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3720      	adds	r7, #32
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop

0800a800 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b08a      	sub	sp, #40	; 0x28
 800a804:	af02      	add	r7, sp, #8
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	603b      	str	r3, [r7, #0]
 800a80c:	4613      	mov	r3, r2
 800a80e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a810:	2300      	movs	r3, #0
 800a812:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	3330      	adds	r3, #48	; 0x30
 800a81a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a824:	d112      	bne.n	800a84c <HAL_SPI_Receive+0x4c>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d10e      	bne.n	800a84c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2204      	movs	r2, #4
 800a832:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a836:	88fa      	ldrh	r2, [r7, #6]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	9300      	str	r3, [sp, #0]
 800a83c:	4613      	mov	r3, r2
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	68b9      	ldr	r1, [r7, #8]
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f000 f978 	bl	800ab38 <HAL_SPI_TransmitReceive>
 800a848:	4603      	mov	r3, r0
 800a84a:	e16f      	b.n	800ab2c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a852:	2b01      	cmp	r3, #1
 800a854:	d101      	bne.n	800a85a <HAL_SPI_Receive+0x5a>
 800a856:	2302      	movs	r3, #2
 800a858:	e168      	b.n	800ab2c <HAL_SPI_Receive+0x32c>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a862:	f7f9 faed 	bl	8003e40 <HAL_GetTick>
 800a866:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	2b01      	cmp	r3, #1
 800a872:	d007      	beq.n	800a884 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800a874:	2302      	movs	r3, #2
 800a876:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a880:	7ffb      	ldrb	r3, [r7, #31]
 800a882:	e153      	b.n	800ab2c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d002      	beq.n	800a890 <HAL_SPI_Receive+0x90>
 800a88a:	88fb      	ldrh	r3, [r7, #6]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d107      	bne.n	800a8a0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a89c:	7ffb      	ldrb	r3, [r7, #31]
 800a89e:	e145      	b.n	800ab2c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2204      	movs	r2, #4
 800a8a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	88fa      	ldrh	r2, [r7, #6]
 800a8ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	88fa      	ldrh	r2, [r7, #6]
 800a8c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a8f0:	d107      	bne.n	800a902 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a900:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	685a      	ldr	r2, [r3, #4]
 800a908:	4b8a      	ldr	r3, [pc, #552]	; (800ab34 <HAL_SPI_Receive+0x334>)
 800a90a:	4013      	ands	r3, r2
 800a90c:	88f9      	ldrh	r1, [r7, #6]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	6812      	ldr	r2, [r2, #0]
 800a912:	430b      	orrs	r3, r1
 800a914:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f042 0201 	orr.w	r2, r2, #1
 800a924:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a92e:	d107      	bne.n	800a940 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a93e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	2b0f      	cmp	r3, #15
 800a946:	d948      	bls.n	800a9da <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a948:	e040      	b.n	800a9cc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	695a      	ldr	r2, [r3, #20]
 800a950:	f248 0308 	movw	r3, #32776	; 0x8008
 800a954:	4013      	ands	r3, r2
 800a956:	2b00      	cmp	r3, #0
 800a958:	d014      	beq.n	800a984 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a962:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a964:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a96a:	1d1a      	adds	r2, r3, #4
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a976:	b29b      	uxth	r3, r3
 800a978:	3b01      	subs	r3, #1
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a982:	e023      	b.n	800a9cc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a984:	f7f9 fa5c 	bl	8003e40 <HAL_GetTick>
 800a988:	4602      	mov	r2, r0
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	683a      	ldr	r2, [r7, #0]
 800a990:	429a      	cmp	r2, r3
 800a992:	d803      	bhi.n	800a99c <HAL_SPI_Receive+0x19c>
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a99a:	d102      	bne.n	800a9a2 <HAL_SPI_Receive+0x1a2>
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d114      	bne.n	800a9cc <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f000 faf0 	bl	800af88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	e0af      	b.n	800ab2c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1b8      	bne.n	800a94a <HAL_SPI_Receive+0x14a>
 800a9d8:	e095      	b.n	800ab06 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	2b07      	cmp	r3, #7
 800a9e0:	f240 808b 	bls.w	800aafa <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a9e4:	e03f      	b.n	800aa66 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	695b      	ldr	r3, [r3, #20]
 800a9ec:	f003 0301 	and.w	r3, r3, #1
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d114      	bne.n	800aa1e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9f8:	69ba      	ldr	r2, [r7, #24]
 800a9fa:	8812      	ldrh	r2, [r2, #0]
 800a9fc:	b292      	uxth	r2, r2
 800a9fe:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa04:	1c9a      	adds	r2, r3, #2
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	3b01      	subs	r3, #1
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800aa1c:	e023      	b.n	800aa66 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa1e:	f7f9 fa0f 	bl	8003e40 <HAL_GetTick>
 800aa22:	4602      	mov	r2, r0
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	683a      	ldr	r2, [r7, #0]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d803      	bhi.n	800aa36 <HAL_SPI_Receive+0x236>
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa34:	d102      	bne.n	800aa3c <HAL_SPI_Receive+0x23c>
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d114      	bne.n	800aa66 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 faa3 	bl	800af88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800aa62:	2303      	movs	r3, #3
 800aa64:	e062      	b.n	800ab2c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1b9      	bne.n	800a9e6 <HAL_SPI_Receive+0x1e6>
 800aa72:	e048      	b.n	800ab06 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	695b      	ldr	r3, [r3, #20]
 800aa7a:	f003 0301 	and.w	r3, r3, #1
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d117      	bne.n	800aab2 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa8e:	7812      	ldrb	r2, [r2, #0]
 800aa90:	b2d2      	uxtb	r2, r2
 800aa92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa98:	1c5a      	adds	r2, r3, #1
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800aab0:	e023      	b.n	800aafa <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aab2:	f7f9 f9c5 	bl	8003e40 <HAL_GetTick>
 800aab6:	4602      	mov	r2, r0
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d803      	bhi.n	800aaca <HAL_SPI_Receive+0x2ca>
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac8:	d102      	bne.n	800aad0 <HAL_SPI_Receive+0x2d0>
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d114      	bne.n	800aafa <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f000 fa59 	bl	800af88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aae4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e018      	b.n	800ab2c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1b6      	bne.n	800aa74 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f000 fa3e 	bl	800af88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d001      	beq.n	800ab2a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e000      	b.n	800ab2c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800ab2a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3720      	adds	r7, #32
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	ffff0000 	.word	0xffff0000

0800ab38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b08e      	sub	sp, #56	; 0x38
 800ab3c:	af02      	add	r7, sp, #8
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
 800ab44:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	3320      	adds	r3, #32
 800ab52:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	3330      	adds	r3, #48	; 0x30
 800ab5a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d101      	bne.n	800ab6a <HAL_SPI_TransmitReceive+0x32>
 800ab66:	2302      	movs	r3, #2
 800ab68:	e209      	b.n	800af7e <HAL_SPI_TransmitReceive+0x446>
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab72:	f7f9 f965 	bl	8003e40 <HAL_GetTick>
 800ab76:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800ab78:	887b      	ldrh	r3, [r7, #2]
 800ab7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800ab7c:	887b      	ldrh	r3, [r7, #2]
 800ab7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ab86:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ab8e:	7efb      	ldrb	r3, [r7, #27]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d014      	beq.n	800abbe <HAL_SPI_TransmitReceive+0x86>
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab9a:	d106      	bne.n	800abaa <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d102      	bne.n	800abaa <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800aba4:	7efb      	ldrb	r3, [r7, #27]
 800aba6:	2b04      	cmp	r3, #4
 800aba8:	d009      	beq.n	800abbe <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800abaa:	2302      	movs	r3, #2
 800abac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800abb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abbc:	e1df      	b.n	800af7e <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d005      	beq.n	800abd0 <HAL_SPI_TransmitReceive+0x98>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d002      	beq.n	800abd0 <HAL_SPI_TransmitReceive+0x98>
 800abca:	887b      	ldrh	r3, [r7, #2]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d109      	bne.n	800abe4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800abde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abe2:	e1cc      	b.n	800af7e <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800abea:	b2db      	uxtb	r3, r3
 800abec:	2b04      	cmp	r3, #4
 800abee:	d003      	beq.n	800abf8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2205      	movs	r2, #5
 800abf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	887a      	ldrh	r2, [r7, #2]
 800ac0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	887a      	ldrh	r2, [r7, #2]
 800ac12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	887a      	ldrh	r2, [r7, #2]
 800ac20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	887a      	ldrh	r2, [r7, #2]
 800ac28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	685a      	ldr	r2, [r3, #4]
 800ac3e:	4b82      	ldr	r3, [pc, #520]	; (800ae48 <HAL_SPI_TransmitReceive+0x310>)
 800ac40:	4013      	ands	r3, r2
 800ac42:	8879      	ldrh	r1, [r7, #2]
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	6812      	ldr	r2, [r2, #0]
 800ac48:	430b      	orrs	r3, r1
 800ac4a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f042 0201 	orr.w	r2, r2, #1
 800ac5a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac64:	d107      	bne.n	800ac76 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	2b0f      	cmp	r3, #15
 800ac7c:	d970      	bls.n	800ad60 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ac7e:	e068      	b.n	800ad52 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	695b      	ldr	r3, [r3, #20]
 800ac86:	f003 0302 	and.w	r3, r3, #2
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d11a      	bne.n	800acc4 <HAL_SPI_TransmitReceive+0x18c>
 800ac8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d017      	beq.n	800acc4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	6812      	ldr	r2, [r2, #0]
 800ac9e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aca4:	1d1a      	adds	r2, r3, #4
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	3b01      	subs	r3, #1
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800acc2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	695a      	ldr	r2, [r3, #20]
 800acca:	f248 0308 	movw	r3, #32776	; 0x8008
 800acce:	4013      	ands	r3, r2
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d01a      	beq.n	800ad0a <HAL_SPI_TransmitReceive+0x1d2>
 800acd4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d017      	beq.n	800ad0a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ace2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ace4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acea:	1d1a      	adds	r2, r3, #4
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	3b01      	subs	r3, #1
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad08:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad0a:	f7f9 f899 	bl	8003e40 <HAL_GetTick>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d803      	bhi.n	800ad22 <HAL_SPI_TransmitReceive+0x1ea>
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad20:	d102      	bne.n	800ad28 <HAL_SPI_TransmitReceive+0x1f0>
 800ad22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d114      	bne.n	800ad52 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f000 f92d 	bl	800af88 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800ad4e:	2303      	movs	r3, #3
 800ad50:	e115      	b.n	800af7e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ad52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d193      	bne.n	800ac80 <HAL_SPI_TransmitReceive+0x148>
 800ad58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d190      	bne.n	800ac80 <HAL_SPI_TransmitReceive+0x148>
 800ad5e:	e0e7      	b.n	800af30 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	2b07      	cmp	r3, #7
 800ad66:	f240 80dd 	bls.w	800af24 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ad6a:	e066      	b.n	800ae3a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	695b      	ldr	r3, [r3, #20]
 800ad72:	f003 0302 	and.w	r3, r3, #2
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	d119      	bne.n	800adae <HAL_SPI_TransmitReceive+0x276>
 800ad7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d016      	beq.n	800adae <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad84:	881a      	ldrh	r2, [r3, #0]
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad8e:	1c9a      	adds	r2, r3, #2
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800adac:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	695b      	ldr	r3, [r3, #20]
 800adb4:	f003 0301 	and.w	r3, r3, #1
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d11a      	bne.n	800adf2 <HAL_SPI_TransmitReceive+0x2ba>
 800adbc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d017      	beq.n	800adf2 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adc6:	6a3a      	ldr	r2, [r7, #32]
 800adc8:	8812      	ldrh	r2, [r2, #0]
 800adca:	b292      	uxth	r2, r2
 800adcc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800add2:	1c9a      	adds	r2, r3, #2
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800adde:	b29b      	uxth	r3, r3
 800ade0:	3b01      	subs	r3, #1
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800adf0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adf2:	f7f9 f825 	bl	8003e40 <HAL_GetTick>
 800adf6:	4602      	mov	r2, r0
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d803      	bhi.n	800ae0a <HAL_SPI_TransmitReceive+0x2d2>
 800ae02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae08:	d102      	bne.n	800ae10 <HAL_SPI_TransmitReceive+0x2d8>
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d114      	bne.n	800ae3a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f000 f8b9 	bl	800af88 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2201      	movs	r2, #1
 800ae32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800ae36:	2303      	movs	r3, #3
 800ae38:	e0a1      	b.n	800af7e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ae3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d195      	bne.n	800ad6c <HAL_SPI_TransmitReceive+0x234>
 800ae40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d192      	bne.n	800ad6c <HAL_SPI_TransmitReceive+0x234>
 800ae46:	e073      	b.n	800af30 <HAL_SPI_TransmitReceive+0x3f8>
 800ae48:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	f003 0302 	and.w	r3, r3, #2
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d11b      	bne.n	800ae92 <HAL_SPI_TransmitReceive+0x35a>
 800ae5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d018      	beq.n	800ae92 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	3320      	adds	r3, #32
 800ae6a:	7812      	ldrb	r2, [r2, #0]
 800ae6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae72:	1c5a      	adds	r2, r3, #1
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	3b01      	subs	r3, #1
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ae90:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	695b      	ldr	r3, [r3, #20]
 800ae98:	f003 0301 	and.w	r3, r3, #1
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d11d      	bne.n	800aedc <HAL_SPI_TransmitReceive+0x3a4>
 800aea0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d01a      	beq.n	800aedc <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aeb2:	7812      	ldrb	r2, [r2, #0]
 800aeb4:	b2d2      	uxtb	r2, r2
 800aeb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aebc:	1c5a      	adds	r2, r3, #1
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	3b01      	subs	r3, #1
 800aecc:	b29a      	uxth	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aeda:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aedc:	f7f8 ffb0 	bl	8003e40 <HAL_GetTick>
 800aee0:	4602      	mov	r2, r0
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d803      	bhi.n	800aef4 <HAL_SPI_TransmitReceive+0x3bc>
 800aeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef2:	d102      	bne.n	800aefa <HAL_SPI_TransmitReceive+0x3c2>
 800aef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d114      	bne.n	800af24 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f000 f844 	bl	800af88 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800af20:	2303      	movs	r3, #3
 800af22:	e02c      	b.n	800af7e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800af24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af26:	2b00      	cmp	r3, #0
 800af28:	d190      	bne.n	800ae4c <HAL_SPI_TransmitReceive+0x314>
 800af2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d18d      	bne.n	800ae4c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800af30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	2200      	movs	r2, #0
 800af38:	2108      	movs	r1, #8
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	f000 f8c4 	bl	800b0c8 <SPI_WaitOnFlagUntilTimeout>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d007      	beq.n	800af56 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af4c:	f043 0220 	orr.w	r2, r3, #32
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f000 f816 	bl	800af88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2201      	movs	r2, #1
 800af68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af72:	2b00      	cmp	r3, #0
 800af74:	d001      	beq.n	800af7a <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e001      	b.n	800af7e <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800af7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3730      	adds	r7, #48	; 0x30
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop

0800af88 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	695b      	ldr	r3, [r3, #20]
 800af96:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	699a      	ldr	r2, [r3, #24]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f042 0208 	orr.w	r2, r2, #8
 800afa6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	699a      	ldr	r2, [r3, #24]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f042 0210 	orr.w	r2, r2, #16
 800afb6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f022 0201 	bic.w	r2, r2, #1
 800afc6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6919      	ldr	r1, [r3, #16]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	4b3c      	ldr	r3, [pc, #240]	; (800b0c4 <SPI_CloseTransfer+0x13c>)
 800afd4:	400b      	ands	r3, r1
 800afd6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	689a      	ldr	r2, [r3, #8]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800afe6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	2b04      	cmp	r3, #4
 800aff2:	d014      	beq.n	800b01e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f003 0320 	and.w	r3, r3, #32
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00f      	beq.n	800b01e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b004:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	699a      	ldr	r2, [r3, #24]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f042 0220 	orr.w	r2, r2, #32
 800b01c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b024:	b2db      	uxtb	r3, r3
 800b026:	2b03      	cmp	r3, #3
 800b028:	d014      	beq.n	800b054 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00f      	beq.n	800b054 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b03a:	f043 0204 	orr.w	r2, r3, #4
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	699a      	ldr	r2, [r3, #24]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b052:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00f      	beq.n	800b07e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b064:	f043 0201 	orr.w	r2, r3, #1
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	699a      	ldr	r2, [r3, #24]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b07c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00f      	beq.n	800b0a8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b08e:	f043 0208 	orr.w	r2, r3, #8
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	699a      	ldr	r2, [r3, #24]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b0b8:	bf00      	nop
 800b0ba:	3714      	adds	r7, #20
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr
 800b0c4:	fffffc90 	.word	0xfffffc90

0800b0c8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	603b      	str	r3, [r7, #0]
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b0d8:	e010      	b.n	800b0fc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0da:	f7f8 feb1 	bl	8003e40 <HAL_GetTick>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	1ad3      	subs	r3, r2, r3
 800b0e4:	69ba      	ldr	r2, [r7, #24]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d803      	bhi.n	800b0f2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f0:	d102      	bne.n	800b0f8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b0f8:	2303      	movs	r3, #3
 800b0fa:	e00f      	b.n	800b11c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	695a      	ldr	r2, [r3, #20]
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	4013      	ands	r3, r2
 800b106:	68ba      	ldr	r2, [r7, #8]
 800b108:	429a      	cmp	r2, r3
 800b10a:	bf0c      	ite	eq
 800b10c:	2301      	moveq	r3, #1
 800b10e:	2300      	movne	r3, #0
 800b110:	b2db      	uxtb	r3, r3
 800b112:	461a      	mov	r2, r3
 800b114:	79fb      	ldrb	r3, [r7, #7]
 800b116:	429a      	cmp	r2, r3
 800b118:	d0df      	beq.n	800b0da <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b130:	095b      	lsrs	r3, r3, #5
 800b132:	3301      	adds	r3, #1
 800b134:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	3301      	adds	r3, #1
 800b13c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	3307      	adds	r3, #7
 800b142:	08db      	lsrs	r3, r3, #3
 800b144:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3714      	adds	r7, #20
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b082      	sub	sp, #8
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d101      	bne.n	800b16c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	e049      	b.n	800b200 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b172:	b2db      	uxtb	r3, r3
 800b174:	2b00      	cmp	r3, #0
 800b176:	d106      	bne.n	800b186 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f7f6 fc55 	bl	8001a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2202      	movs	r2, #2
 800b18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	3304      	adds	r3, #4
 800b196:	4619      	mov	r1, r3
 800b198:	4610      	mov	r0, r2
 800b19a:	f000 fbb1 	bl	800b900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d101      	bne.n	800b21a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e049      	b.n	800b2ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b220:	b2db      	uxtb	r3, r3
 800b222:	2b00      	cmp	r3, #0
 800b224:	d106      	bne.n	800b234 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 f841 	bl	800b2b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2202      	movs	r2, #2
 800b238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	3304      	adds	r3, #4
 800b244:	4619      	mov	r1, r3
 800b246:	4610      	mov	r0, r2
 800b248:	f000 fb5a 	bl	800b900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2201      	movs	r2, #1
 800b250:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2201      	movs	r2, #1
 800b260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2201      	movs	r2, #1
 800b268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2201      	movs	r2, #1
 800b270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2201      	movs	r2, #1
 800b298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b2b6:	b480      	push	{r7}
 800b2b8:	b083      	sub	sp, #12
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b2be:	bf00      	nop
 800b2c0:	370c      	adds	r7, #12
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr
	...

0800b2cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d109      	bne.n	800b2f0 <HAL_TIM_PWM_Start+0x24>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	bf14      	ite	ne
 800b2e8:	2301      	movne	r3, #1
 800b2ea:	2300      	moveq	r3, #0
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	e03c      	b.n	800b36a <HAL_TIM_PWM_Start+0x9e>
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	2b04      	cmp	r3, #4
 800b2f4:	d109      	bne.n	800b30a <HAL_TIM_PWM_Start+0x3e>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	bf14      	ite	ne
 800b302:	2301      	movne	r3, #1
 800b304:	2300      	moveq	r3, #0
 800b306:	b2db      	uxtb	r3, r3
 800b308:	e02f      	b.n	800b36a <HAL_TIM_PWM_Start+0x9e>
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	2b08      	cmp	r3, #8
 800b30e:	d109      	bne.n	800b324 <HAL_TIM_PWM_Start+0x58>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b316:	b2db      	uxtb	r3, r3
 800b318:	2b01      	cmp	r3, #1
 800b31a:	bf14      	ite	ne
 800b31c:	2301      	movne	r3, #1
 800b31e:	2300      	moveq	r3, #0
 800b320:	b2db      	uxtb	r3, r3
 800b322:	e022      	b.n	800b36a <HAL_TIM_PWM_Start+0x9e>
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	2b0c      	cmp	r3, #12
 800b328:	d109      	bne.n	800b33e <HAL_TIM_PWM_Start+0x72>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b330:	b2db      	uxtb	r3, r3
 800b332:	2b01      	cmp	r3, #1
 800b334:	bf14      	ite	ne
 800b336:	2301      	movne	r3, #1
 800b338:	2300      	moveq	r3, #0
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	e015      	b.n	800b36a <HAL_TIM_PWM_Start+0x9e>
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2b10      	cmp	r3, #16
 800b342:	d109      	bne.n	800b358 <HAL_TIM_PWM_Start+0x8c>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	bf14      	ite	ne
 800b350:	2301      	movne	r3, #1
 800b352:	2300      	moveq	r3, #0
 800b354:	b2db      	uxtb	r3, r3
 800b356:	e008      	b.n	800b36a <HAL_TIM_PWM_Start+0x9e>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	2b01      	cmp	r3, #1
 800b362:	bf14      	ite	ne
 800b364:	2301      	movne	r3, #1
 800b366:	2300      	moveq	r3, #0
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d001      	beq.n	800b372 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b36e:	2301      	movs	r3, #1
 800b370:	e0a1      	b.n	800b4b6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d104      	bne.n	800b382 <HAL_TIM_PWM_Start+0xb6>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2202      	movs	r2, #2
 800b37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b380:	e023      	b.n	800b3ca <HAL_TIM_PWM_Start+0xfe>
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	2b04      	cmp	r3, #4
 800b386:	d104      	bne.n	800b392 <HAL_TIM_PWM_Start+0xc6>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2202      	movs	r2, #2
 800b38c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b390:	e01b      	b.n	800b3ca <HAL_TIM_PWM_Start+0xfe>
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	2b08      	cmp	r3, #8
 800b396:	d104      	bne.n	800b3a2 <HAL_TIM_PWM_Start+0xd6>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2202      	movs	r2, #2
 800b39c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3a0:	e013      	b.n	800b3ca <HAL_TIM_PWM_Start+0xfe>
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	2b0c      	cmp	r3, #12
 800b3a6:	d104      	bne.n	800b3b2 <HAL_TIM_PWM_Start+0xe6>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2202      	movs	r2, #2
 800b3ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3b0:	e00b      	b.n	800b3ca <HAL_TIM_PWM_Start+0xfe>
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	2b10      	cmp	r3, #16
 800b3b6:	d104      	bne.n	800b3c2 <HAL_TIM_PWM_Start+0xf6>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3c0:	e003      	b.n	800b3ca <HAL_TIM_PWM_Start+0xfe>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2202      	movs	r2, #2
 800b3c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	6839      	ldr	r1, [r7, #0]
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f000 fea2 	bl	800c11c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a38      	ldr	r2, [pc, #224]	; (800b4c0 <HAL_TIM_PWM_Start+0x1f4>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d013      	beq.n	800b40a <HAL_TIM_PWM_Start+0x13e>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a37      	ldr	r2, [pc, #220]	; (800b4c4 <HAL_TIM_PWM_Start+0x1f8>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d00e      	beq.n	800b40a <HAL_TIM_PWM_Start+0x13e>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a35      	ldr	r2, [pc, #212]	; (800b4c8 <HAL_TIM_PWM_Start+0x1fc>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d009      	beq.n	800b40a <HAL_TIM_PWM_Start+0x13e>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a34      	ldr	r2, [pc, #208]	; (800b4cc <HAL_TIM_PWM_Start+0x200>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d004      	beq.n	800b40a <HAL_TIM_PWM_Start+0x13e>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a32      	ldr	r2, [pc, #200]	; (800b4d0 <HAL_TIM_PWM_Start+0x204>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d101      	bne.n	800b40e <HAL_TIM_PWM_Start+0x142>
 800b40a:	2301      	movs	r3, #1
 800b40c:	e000      	b.n	800b410 <HAL_TIM_PWM_Start+0x144>
 800b40e:	2300      	movs	r3, #0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d007      	beq.n	800b424 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b422:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a25      	ldr	r2, [pc, #148]	; (800b4c0 <HAL_TIM_PWM_Start+0x1f4>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d022      	beq.n	800b474 <HAL_TIM_PWM_Start+0x1a8>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b436:	d01d      	beq.n	800b474 <HAL_TIM_PWM_Start+0x1a8>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a25      	ldr	r2, [pc, #148]	; (800b4d4 <HAL_TIM_PWM_Start+0x208>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d018      	beq.n	800b474 <HAL_TIM_PWM_Start+0x1a8>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a24      	ldr	r2, [pc, #144]	; (800b4d8 <HAL_TIM_PWM_Start+0x20c>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d013      	beq.n	800b474 <HAL_TIM_PWM_Start+0x1a8>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a22      	ldr	r2, [pc, #136]	; (800b4dc <HAL_TIM_PWM_Start+0x210>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d00e      	beq.n	800b474 <HAL_TIM_PWM_Start+0x1a8>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a1a      	ldr	r2, [pc, #104]	; (800b4c4 <HAL_TIM_PWM_Start+0x1f8>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d009      	beq.n	800b474 <HAL_TIM_PWM_Start+0x1a8>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a1e      	ldr	r2, [pc, #120]	; (800b4e0 <HAL_TIM_PWM_Start+0x214>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d004      	beq.n	800b474 <HAL_TIM_PWM_Start+0x1a8>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a16      	ldr	r2, [pc, #88]	; (800b4c8 <HAL_TIM_PWM_Start+0x1fc>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d115      	bne.n	800b4a0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	689a      	ldr	r2, [r3, #8]
 800b47a:	4b1a      	ldr	r3, [pc, #104]	; (800b4e4 <HAL_TIM_PWM_Start+0x218>)
 800b47c:	4013      	ands	r3, r2
 800b47e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2b06      	cmp	r3, #6
 800b484:	d015      	beq.n	800b4b2 <HAL_TIM_PWM_Start+0x1e6>
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b48c:	d011      	beq.n	800b4b2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f042 0201 	orr.w	r2, r2, #1
 800b49c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b49e:	e008      	b.n	800b4b2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f042 0201 	orr.w	r2, r2, #1
 800b4ae:	601a      	str	r2, [r3, #0]
 800b4b0:	e000      	b.n	800b4b4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	40010000 	.word	0x40010000
 800b4c4:	40010400 	.word	0x40010400
 800b4c8:	40014000 	.word	0x40014000
 800b4cc:	40014400 	.word	0x40014400
 800b4d0:	40014800 	.word	0x40014800
 800b4d4:	40000400 	.word	0x40000400
 800b4d8:	40000800 	.word	0x40000800
 800b4dc:	40000c00 	.word	0x40000c00
 800b4e0:	40001800 	.word	0x40001800
 800b4e4:	00010007 	.word	0x00010007

0800b4e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d101      	bne.n	800b506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b502:	2302      	movs	r3, #2
 800b504:	e0ff      	b.n	800b706 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2201      	movs	r2, #1
 800b50a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2b14      	cmp	r3, #20
 800b512:	f200 80f0 	bhi.w	800b6f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b516:	a201      	add	r2, pc, #4	; (adr r2, 800b51c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b51c:	0800b571 	.word	0x0800b571
 800b520:	0800b6f7 	.word	0x0800b6f7
 800b524:	0800b6f7 	.word	0x0800b6f7
 800b528:	0800b6f7 	.word	0x0800b6f7
 800b52c:	0800b5b1 	.word	0x0800b5b1
 800b530:	0800b6f7 	.word	0x0800b6f7
 800b534:	0800b6f7 	.word	0x0800b6f7
 800b538:	0800b6f7 	.word	0x0800b6f7
 800b53c:	0800b5f3 	.word	0x0800b5f3
 800b540:	0800b6f7 	.word	0x0800b6f7
 800b544:	0800b6f7 	.word	0x0800b6f7
 800b548:	0800b6f7 	.word	0x0800b6f7
 800b54c:	0800b633 	.word	0x0800b633
 800b550:	0800b6f7 	.word	0x0800b6f7
 800b554:	0800b6f7 	.word	0x0800b6f7
 800b558:	0800b6f7 	.word	0x0800b6f7
 800b55c:	0800b675 	.word	0x0800b675
 800b560:	0800b6f7 	.word	0x0800b6f7
 800b564:	0800b6f7 	.word	0x0800b6f7
 800b568:	0800b6f7 	.word	0x0800b6f7
 800b56c:	0800b6b5 	.word	0x0800b6b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68b9      	ldr	r1, [r7, #8]
 800b576:	4618      	mov	r0, r3
 800b578:	f000 fa5c 	bl	800ba34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	699a      	ldr	r2, [r3, #24]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f042 0208 	orr.w	r2, r2, #8
 800b58a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	699a      	ldr	r2, [r3, #24]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f022 0204 	bic.w	r2, r2, #4
 800b59a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	6999      	ldr	r1, [r3, #24]
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	691a      	ldr	r2, [r3, #16]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	430a      	orrs	r2, r1
 800b5ac:	619a      	str	r2, [r3, #24]
      break;
 800b5ae:	e0a5      	b.n	800b6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	68b9      	ldr	r1, [r7, #8]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f000 facc 	bl	800bb54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	699a      	ldr	r2, [r3, #24]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	699a      	ldr	r2, [r3, #24]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	6999      	ldr	r1, [r3, #24]
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	691b      	ldr	r3, [r3, #16]
 800b5e6:	021a      	lsls	r2, r3, #8
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	430a      	orrs	r2, r1
 800b5ee:	619a      	str	r2, [r3, #24]
      break;
 800b5f0:	e084      	b.n	800b6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	68b9      	ldr	r1, [r7, #8]
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f000 fb35 	bl	800bc68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	69da      	ldr	r2, [r3, #28]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f042 0208 	orr.w	r2, r2, #8
 800b60c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	69da      	ldr	r2, [r3, #28]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f022 0204 	bic.w	r2, r2, #4
 800b61c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	69d9      	ldr	r1, [r3, #28]
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	691a      	ldr	r2, [r3, #16]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	430a      	orrs	r2, r1
 800b62e:	61da      	str	r2, [r3, #28]
      break;
 800b630:	e064      	b.n	800b6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	68b9      	ldr	r1, [r7, #8]
 800b638:	4618      	mov	r0, r3
 800b63a:	f000 fb9d 	bl	800bd78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	69da      	ldr	r2, [r3, #28]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b64c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	69da      	ldr	r2, [r3, #28]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b65c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	69d9      	ldr	r1, [r3, #28]
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	021a      	lsls	r2, r3, #8
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	430a      	orrs	r2, r1
 800b670:	61da      	str	r2, [r3, #28]
      break;
 800b672:	e043      	b.n	800b6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	68b9      	ldr	r1, [r7, #8]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 fbe6 	bl	800be4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f042 0208 	orr.w	r2, r2, #8
 800b68e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f022 0204 	bic.w	r2, r2, #4
 800b69e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	691a      	ldr	r2, [r3, #16]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	430a      	orrs	r2, r1
 800b6b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b6b2:	e023      	b.n	800b6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68b9      	ldr	r1, [r7, #8]
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f000 fc2a 	bl	800bf14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	691b      	ldr	r3, [r3, #16]
 800b6ea:	021a      	lsls	r2, r3, #8
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	430a      	orrs	r2, r1
 800b6f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b6f4:	e002      	b.n	800b6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	75fb      	strb	r3, [r7, #23]
      break;
 800b6fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b704:	7dfb      	ldrb	r3, [r7, #23]
}
 800b706:	4618      	mov	r0, r3
 800b708:	3718      	adds	r7, #24
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop

0800b710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b71a:	2300      	movs	r3, #0
 800b71c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b724:	2b01      	cmp	r3, #1
 800b726:	d101      	bne.n	800b72c <HAL_TIM_ConfigClockSource+0x1c>
 800b728:	2302      	movs	r3, #2
 800b72a:	e0dc      	b.n	800b8e6 <HAL_TIM_ConfigClockSource+0x1d6>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2201      	movs	r2, #1
 800b730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2202      	movs	r2, #2
 800b738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	4b6a      	ldr	r3, [pc, #424]	; (800b8f0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b748:	4013      	ands	r3, r2
 800b74a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a64      	ldr	r2, [pc, #400]	; (800b8f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b762:	4293      	cmp	r3, r2
 800b764:	f000 80a9 	beq.w	800b8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b768:	4a62      	ldr	r2, [pc, #392]	; (800b8f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	f200 80ae 	bhi.w	800b8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b770:	4a61      	ldr	r2, [pc, #388]	; (800b8f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b772:	4293      	cmp	r3, r2
 800b774:	f000 80a1 	beq.w	800b8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b778:	4a5f      	ldr	r2, [pc, #380]	; (800b8f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	f200 80a6 	bhi.w	800b8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b780:	4a5e      	ldr	r2, [pc, #376]	; (800b8fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800b782:	4293      	cmp	r3, r2
 800b784:	f000 8099 	beq.w	800b8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b788:	4a5c      	ldr	r2, [pc, #368]	; (800b8fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	f200 809e 	bhi.w	800b8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b790:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b794:	f000 8091 	beq.w	800b8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b798:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b79c:	f200 8096 	bhi.w	800b8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7a4:	f000 8089 	beq.w	800b8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b7a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7ac:	f200 808e 	bhi.w	800b8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7b4:	d03e      	beq.n	800b834 <HAL_TIM_ConfigClockSource+0x124>
 800b7b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7ba:	f200 8087 	bhi.w	800b8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7c2:	f000 8086 	beq.w	800b8d2 <HAL_TIM_ConfigClockSource+0x1c2>
 800b7c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7ca:	d87f      	bhi.n	800b8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7cc:	2b70      	cmp	r3, #112	; 0x70
 800b7ce:	d01a      	beq.n	800b806 <HAL_TIM_ConfigClockSource+0xf6>
 800b7d0:	2b70      	cmp	r3, #112	; 0x70
 800b7d2:	d87b      	bhi.n	800b8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7d4:	2b60      	cmp	r3, #96	; 0x60
 800b7d6:	d050      	beq.n	800b87a <HAL_TIM_ConfigClockSource+0x16a>
 800b7d8:	2b60      	cmp	r3, #96	; 0x60
 800b7da:	d877      	bhi.n	800b8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7dc:	2b50      	cmp	r3, #80	; 0x50
 800b7de:	d03c      	beq.n	800b85a <HAL_TIM_ConfigClockSource+0x14a>
 800b7e0:	2b50      	cmp	r3, #80	; 0x50
 800b7e2:	d873      	bhi.n	800b8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7e4:	2b40      	cmp	r3, #64	; 0x40
 800b7e6:	d058      	beq.n	800b89a <HAL_TIM_ConfigClockSource+0x18a>
 800b7e8:	2b40      	cmp	r3, #64	; 0x40
 800b7ea:	d86f      	bhi.n	800b8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7ec:	2b30      	cmp	r3, #48	; 0x30
 800b7ee:	d064      	beq.n	800b8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b7f0:	2b30      	cmp	r3, #48	; 0x30
 800b7f2:	d86b      	bhi.n	800b8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7f4:	2b20      	cmp	r3, #32
 800b7f6:	d060      	beq.n	800b8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b7f8:	2b20      	cmp	r3, #32
 800b7fa:	d867      	bhi.n	800b8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d05c      	beq.n	800b8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b800:	2b10      	cmp	r3, #16
 800b802:	d05a      	beq.n	800b8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b804:	e062      	b.n	800b8cc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6818      	ldr	r0, [r3, #0]
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	6899      	ldr	r1, [r3, #8]
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	685a      	ldr	r2, [r3, #4]
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	f000 fc61 	bl	800c0dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b828:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	609a      	str	r2, [r3, #8]
      break;
 800b832:	e04f      	b.n	800b8d4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6818      	ldr	r0, [r3, #0]
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	6899      	ldr	r1, [r3, #8]
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	685a      	ldr	r2, [r3, #4]
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	f000 fc4a 	bl	800c0dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	689a      	ldr	r2, [r3, #8]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b856:	609a      	str	r2, [r3, #8]
      break;
 800b858:	e03c      	b.n	800b8d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6818      	ldr	r0, [r3, #0]
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	6859      	ldr	r1, [r3, #4]
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	461a      	mov	r2, r3
 800b868:	f000 fbba 	bl	800bfe0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2150      	movs	r1, #80	; 0x50
 800b872:	4618      	mov	r0, r3
 800b874:	f000 fc14 	bl	800c0a0 <TIM_ITRx_SetConfig>
      break;
 800b878:	e02c      	b.n	800b8d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6818      	ldr	r0, [r3, #0]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	6859      	ldr	r1, [r3, #4]
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	461a      	mov	r2, r3
 800b888:	f000 fbd9 	bl	800c03e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2160      	movs	r1, #96	; 0x60
 800b892:	4618      	mov	r0, r3
 800b894:	f000 fc04 	bl	800c0a0 <TIM_ITRx_SetConfig>
      break;
 800b898:	e01c      	b.n	800b8d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6818      	ldr	r0, [r3, #0]
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	6859      	ldr	r1, [r3, #4]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	f000 fb9a 	bl	800bfe0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2140      	movs	r1, #64	; 0x40
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 fbf4 	bl	800c0a0 <TIM_ITRx_SetConfig>
      break;
 800b8b8:	e00c      	b.n	800b8d4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	f000 fbeb 	bl	800c0a0 <TIM_ITRx_SetConfig>
      break;
 800b8ca:	e003      	b.n	800b8d4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b8d0:	e000      	b.n	800b8d4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b8d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	ffceff88 	.word	0xffceff88
 800b8f4:	00100040 	.word	0x00100040
 800b8f8:	00100030 	.word	0x00100030
 800b8fc:	00100020 	.word	0x00100020

0800b900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b900:	b480      	push	{r7}
 800b902:	b085      	sub	sp, #20
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a40      	ldr	r2, [pc, #256]	; (800ba14 <TIM_Base_SetConfig+0x114>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d013      	beq.n	800b940 <TIM_Base_SetConfig+0x40>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b91e:	d00f      	beq.n	800b940 <TIM_Base_SetConfig+0x40>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a3d      	ldr	r2, [pc, #244]	; (800ba18 <TIM_Base_SetConfig+0x118>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d00b      	beq.n	800b940 <TIM_Base_SetConfig+0x40>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a3c      	ldr	r2, [pc, #240]	; (800ba1c <TIM_Base_SetConfig+0x11c>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d007      	beq.n	800b940 <TIM_Base_SetConfig+0x40>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a3b      	ldr	r2, [pc, #236]	; (800ba20 <TIM_Base_SetConfig+0x120>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d003      	beq.n	800b940 <TIM_Base_SetConfig+0x40>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a3a      	ldr	r2, [pc, #232]	; (800ba24 <TIM_Base_SetConfig+0x124>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d108      	bne.n	800b952 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	4313      	orrs	r3, r2
 800b950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4a2f      	ldr	r2, [pc, #188]	; (800ba14 <TIM_Base_SetConfig+0x114>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d01f      	beq.n	800b99a <TIM_Base_SetConfig+0x9a>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b960:	d01b      	beq.n	800b99a <TIM_Base_SetConfig+0x9a>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4a2c      	ldr	r2, [pc, #176]	; (800ba18 <TIM_Base_SetConfig+0x118>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d017      	beq.n	800b99a <TIM_Base_SetConfig+0x9a>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4a2b      	ldr	r2, [pc, #172]	; (800ba1c <TIM_Base_SetConfig+0x11c>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d013      	beq.n	800b99a <TIM_Base_SetConfig+0x9a>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a2a      	ldr	r2, [pc, #168]	; (800ba20 <TIM_Base_SetConfig+0x120>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d00f      	beq.n	800b99a <TIM_Base_SetConfig+0x9a>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4a29      	ldr	r2, [pc, #164]	; (800ba24 <TIM_Base_SetConfig+0x124>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d00b      	beq.n	800b99a <TIM_Base_SetConfig+0x9a>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a28      	ldr	r2, [pc, #160]	; (800ba28 <TIM_Base_SetConfig+0x128>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d007      	beq.n	800b99a <TIM_Base_SetConfig+0x9a>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4a27      	ldr	r2, [pc, #156]	; (800ba2c <TIM_Base_SetConfig+0x12c>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d003      	beq.n	800b99a <TIM_Base_SetConfig+0x9a>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4a26      	ldr	r2, [pc, #152]	; (800ba30 <TIM_Base_SetConfig+0x130>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d108      	bne.n	800b9ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	68fa      	ldr	r2, [r7, #12]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	695b      	ldr	r3, [r3, #20]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	689a      	ldr	r2, [r3, #8]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4a10      	ldr	r2, [pc, #64]	; (800ba14 <TIM_Base_SetConfig+0x114>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d00f      	beq.n	800b9f8 <TIM_Base_SetConfig+0xf8>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	4a12      	ldr	r2, [pc, #72]	; (800ba24 <TIM_Base_SetConfig+0x124>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d00b      	beq.n	800b9f8 <TIM_Base_SetConfig+0xf8>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4a11      	ldr	r2, [pc, #68]	; (800ba28 <TIM_Base_SetConfig+0x128>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d007      	beq.n	800b9f8 <TIM_Base_SetConfig+0xf8>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4a10      	ldr	r2, [pc, #64]	; (800ba2c <TIM_Base_SetConfig+0x12c>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d003      	beq.n	800b9f8 <TIM_Base_SetConfig+0xf8>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4a0f      	ldr	r2, [pc, #60]	; (800ba30 <TIM_Base_SetConfig+0x130>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d103      	bne.n	800ba00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	691a      	ldr	r2, [r3, #16]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	615a      	str	r2, [r3, #20]
}
 800ba06:	bf00      	nop
 800ba08:	3714      	adds	r7, #20
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	40010000 	.word	0x40010000
 800ba18:	40000400 	.word	0x40000400
 800ba1c:	40000800 	.word	0x40000800
 800ba20:	40000c00 	.word	0x40000c00
 800ba24:	40010400 	.word	0x40010400
 800ba28:	40014000 	.word	0x40014000
 800ba2c:	40014400 	.word	0x40014400
 800ba30:	40014800 	.word	0x40014800

0800ba34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b087      	sub	sp, #28
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a1b      	ldr	r3, [r3, #32]
 800ba42:	f023 0201 	bic.w	r2, r3, #1
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a1b      	ldr	r3, [r3, #32]
 800ba4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	699b      	ldr	r3, [r3, #24]
 800ba5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba5c:	68fa      	ldr	r2, [r7, #12]
 800ba5e:	4b37      	ldr	r3, [pc, #220]	; (800bb3c <TIM_OC1_SetConfig+0x108>)
 800ba60:	4013      	ands	r3, r2
 800ba62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f023 0303 	bic.w	r3, r3, #3
 800ba6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	f023 0302 	bic.w	r3, r3, #2
 800ba7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	697a      	ldr	r2, [r7, #20]
 800ba84:	4313      	orrs	r3, r2
 800ba86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a2d      	ldr	r2, [pc, #180]	; (800bb40 <TIM_OC1_SetConfig+0x10c>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d00f      	beq.n	800bab0 <TIM_OC1_SetConfig+0x7c>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a2c      	ldr	r2, [pc, #176]	; (800bb44 <TIM_OC1_SetConfig+0x110>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d00b      	beq.n	800bab0 <TIM_OC1_SetConfig+0x7c>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a2b      	ldr	r2, [pc, #172]	; (800bb48 <TIM_OC1_SetConfig+0x114>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d007      	beq.n	800bab0 <TIM_OC1_SetConfig+0x7c>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a2a      	ldr	r2, [pc, #168]	; (800bb4c <TIM_OC1_SetConfig+0x118>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d003      	beq.n	800bab0 <TIM_OC1_SetConfig+0x7c>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4a29      	ldr	r2, [pc, #164]	; (800bb50 <TIM_OC1_SetConfig+0x11c>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d10c      	bne.n	800baca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	f023 0308 	bic.w	r3, r3, #8
 800bab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	697a      	ldr	r2, [r7, #20]
 800babe:	4313      	orrs	r3, r2
 800bac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	f023 0304 	bic.w	r3, r3, #4
 800bac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a1c      	ldr	r2, [pc, #112]	; (800bb40 <TIM_OC1_SetConfig+0x10c>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d00f      	beq.n	800baf2 <TIM_OC1_SetConfig+0xbe>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a1b      	ldr	r2, [pc, #108]	; (800bb44 <TIM_OC1_SetConfig+0x110>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d00b      	beq.n	800baf2 <TIM_OC1_SetConfig+0xbe>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a1a      	ldr	r2, [pc, #104]	; (800bb48 <TIM_OC1_SetConfig+0x114>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d007      	beq.n	800baf2 <TIM_OC1_SetConfig+0xbe>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a19      	ldr	r2, [pc, #100]	; (800bb4c <TIM_OC1_SetConfig+0x118>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d003      	beq.n	800baf2 <TIM_OC1_SetConfig+0xbe>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a18      	ldr	r2, [pc, #96]	; (800bb50 <TIM_OC1_SetConfig+0x11c>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d111      	bne.n	800bb16 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800baf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	693a      	ldr	r2, [r7, #16]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	699b      	ldr	r3, [r3, #24]
 800bb10:	693a      	ldr	r2, [r7, #16]
 800bb12:	4313      	orrs	r3, r2
 800bb14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	68fa      	ldr	r2, [r7, #12]
 800bb20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	697a      	ldr	r2, [r7, #20]
 800bb2e:	621a      	str	r2, [r3, #32]
}
 800bb30:	bf00      	nop
 800bb32:	371c      	adds	r7, #28
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr
 800bb3c:	fffeff8f 	.word	0xfffeff8f
 800bb40:	40010000 	.word	0x40010000
 800bb44:	40010400 	.word	0x40010400
 800bb48:	40014000 	.word	0x40014000
 800bb4c:	40014400 	.word	0x40014400
 800bb50:	40014800 	.word	0x40014800

0800bb54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b087      	sub	sp, #28
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a1b      	ldr	r3, [r3, #32]
 800bb62:	f023 0210 	bic.w	r2, r3, #16
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a1b      	ldr	r3, [r3, #32]
 800bb6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	699b      	ldr	r3, [r3, #24]
 800bb7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	4b34      	ldr	r3, [pc, #208]	; (800bc50 <TIM_OC2_SetConfig+0xfc>)
 800bb80:	4013      	ands	r3, r2
 800bb82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	021b      	lsls	r3, r3, #8
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	4313      	orrs	r3, r2
 800bb96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	f023 0320 	bic.w	r3, r3, #32
 800bb9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	011b      	lsls	r3, r3, #4
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4a29      	ldr	r2, [pc, #164]	; (800bc54 <TIM_OC2_SetConfig+0x100>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d003      	beq.n	800bbbc <TIM_OC2_SetConfig+0x68>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4a28      	ldr	r2, [pc, #160]	; (800bc58 <TIM_OC2_SetConfig+0x104>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d10d      	bne.n	800bbd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	011b      	lsls	r3, r3, #4
 800bbca:	697a      	ldr	r2, [r7, #20]
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	4a1e      	ldr	r2, [pc, #120]	; (800bc54 <TIM_OC2_SetConfig+0x100>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d00f      	beq.n	800bc00 <TIM_OC2_SetConfig+0xac>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4a1d      	ldr	r2, [pc, #116]	; (800bc58 <TIM_OC2_SetConfig+0x104>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d00b      	beq.n	800bc00 <TIM_OC2_SetConfig+0xac>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4a1c      	ldr	r2, [pc, #112]	; (800bc5c <TIM_OC2_SetConfig+0x108>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d007      	beq.n	800bc00 <TIM_OC2_SetConfig+0xac>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4a1b      	ldr	r2, [pc, #108]	; (800bc60 <TIM_OC2_SetConfig+0x10c>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d003      	beq.n	800bc00 <TIM_OC2_SetConfig+0xac>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	4a1a      	ldr	r2, [pc, #104]	; (800bc64 <TIM_OC2_SetConfig+0x110>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d113      	bne.n	800bc28 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	695b      	ldr	r3, [r3, #20]
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	693a      	ldr	r2, [r7, #16]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	693a      	ldr	r2, [r7, #16]
 800bc2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	685a      	ldr	r2, [r3, #4]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	697a      	ldr	r2, [r7, #20]
 800bc40:	621a      	str	r2, [r3, #32]
}
 800bc42:	bf00      	nop
 800bc44:	371c      	adds	r7, #28
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	feff8fff 	.word	0xfeff8fff
 800bc54:	40010000 	.word	0x40010000
 800bc58:	40010400 	.word	0x40010400
 800bc5c:	40014000 	.word	0x40014000
 800bc60:	40014400 	.word	0x40014400
 800bc64:	40014800 	.word	0x40014800

0800bc68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b087      	sub	sp, #28
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	69db      	ldr	r3, [r3, #28]
 800bc8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	4b33      	ldr	r3, [pc, #204]	; (800bd60 <TIM_OC3_SetConfig+0xf8>)
 800bc94:	4013      	ands	r3, r2
 800bc96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f023 0303 	bic.w	r3, r3, #3
 800bc9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bcb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	021b      	lsls	r3, r3, #8
 800bcb8:	697a      	ldr	r2, [r7, #20]
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a28      	ldr	r2, [pc, #160]	; (800bd64 <TIM_OC3_SetConfig+0xfc>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d003      	beq.n	800bcce <TIM_OC3_SetConfig+0x66>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a27      	ldr	r2, [pc, #156]	; (800bd68 <TIM_OC3_SetConfig+0x100>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d10d      	bne.n	800bcea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bcd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	021b      	lsls	r3, r3, #8
 800bcdc:	697a      	ldr	r2, [r7, #20]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4a1d      	ldr	r2, [pc, #116]	; (800bd64 <TIM_OC3_SetConfig+0xfc>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d00f      	beq.n	800bd12 <TIM_OC3_SetConfig+0xaa>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a1c      	ldr	r2, [pc, #112]	; (800bd68 <TIM_OC3_SetConfig+0x100>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d00b      	beq.n	800bd12 <TIM_OC3_SetConfig+0xaa>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4a1b      	ldr	r2, [pc, #108]	; (800bd6c <TIM_OC3_SetConfig+0x104>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d007      	beq.n	800bd12 <TIM_OC3_SetConfig+0xaa>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a1a      	ldr	r2, [pc, #104]	; (800bd70 <TIM_OC3_SetConfig+0x108>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d003      	beq.n	800bd12 <TIM_OC3_SetConfig+0xaa>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a19      	ldr	r2, [pc, #100]	; (800bd74 <TIM_OC3_SetConfig+0x10c>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d113      	bne.n	800bd3a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	695b      	ldr	r3, [r3, #20]
 800bd26:	011b      	lsls	r3, r3, #4
 800bd28:	693a      	ldr	r2, [r7, #16]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	699b      	ldr	r3, [r3, #24]
 800bd32:	011b      	lsls	r3, r3, #4
 800bd34:	693a      	ldr	r2, [r7, #16]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	693a      	ldr	r2, [r7, #16]
 800bd3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	685a      	ldr	r2, [r3, #4]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	697a      	ldr	r2, [r7, #20]
 800bd52:	621a      	str	r2, [r3, #32]
}
 800bd54:	bf00      	nop
 800bd56:	371c      	adds	r7, #28
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	fffeff8f 	.word	0xfffeff8f
 800bd64:	40010000 	.word	0x40010000
 800bd68:	40010400 	.word	0x40010400
 800bd6c:	40014000 	.word	0x40014000
 800bd70:	40014400 	.word	0x40014400
 800bd74:	40014800 	.word	0x40014800

0800bd78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b087      	sub	sp, #28
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a1b      	ldr	r3, [r3, #32]
 800bd86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6a1b      	ldr	r3, [r3, #32]
 800bd92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	69db      	ldr	r3, [r3, #28]
 800bd9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bda0:	68fa      	ldr	r2, [r7, #12]
 800bda2:	4b24      	ldr	r3, [pc, #144]	; (800be34 <TIM_OC4_SetConfig+0xbc>)
 800bda4:	4013      	ands	r3, r2
 800bda6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	021b      	lsls	r3, r3, #8
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bdc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	031b      	lsls	r3, r3, #12
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	4a19      	ldr	r2, [pc, #100]	; (800be38 <TIM_OC4_SetConfig+0xc0>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d00f      	beq.n	800bdf8 <TIM_OC4_SetConfig+0x80>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	4a18      	ldr	r2, [pc, #96]	; (800be3c <TIM_OC4_SetConfig+0xc4>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d00b      	beq.n	800bdf8 <TIM_OC4_SetConfig+0x80>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a17      	ldr	r2, [pc, #92]	; (800be40 <TIM_OC4_SetConfig+0xc8>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d007      	beq.n	800bdf8 <TIM_OC4_SetConfig+0x80>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4a16      	ldr	r2, [pc, #88]	; (800be44 <TIM_OC4_SetConfig+0xcc>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d003      	beq.n	800bdf8 <TIM_OC4_SetConfig+0x80>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a15      	ldr	r2, [pc, #84]	; (800be48 <TIM_OC4_SetConfig+0xd0>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d109      	bne.n	800be0c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bdfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	695b      	ldr	r3, [r3, #20]
 800be04:	019b      	lsls	r3, r3, #6
 800be06:	697a      	ldr	r2, [r7, #20]
 800be08:	4313      	orrs	r3, r2
 800be0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	697a      	ldr	r2, [r7, #20]
 800be10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	685a      	ldr	r2, [r3, #4]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	693a      	ldr	r2, [r7, #16]
 800be24:	621a      	str	r2, [r3, #32]
}
 800be26:	bf00      	nop
 800be28:	371c      	adds	r7, #28
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop
 800be34:	feff8fff 	.word	0xfeff8fff
 800be38:	40010000 	.word	0x40010000
 800be3c:	40010400 	.word	0x40010400
 800be40:	40014000 	.word	0x40014000
 800be44:	40014400 	.word	0x40014400
 800be48:	40014800 	.word	0x40014800

0800be4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b087      	sub	sp, #28
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a1b      	ldr	r3, [r3, #32]
 800be5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a1b      	ldr	r3, [r3, #32]
 800be66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	4b21      	ldr	r3, [pc, #132]	; (800befc <TIM_OC5_SetConfig+0xb0>)
 800be78:	4013      	ands	r3, r2
 800be7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	4313      	orrs	r3, r2
 800be84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800be8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	041b      	lsls	r3, r3, #16
 800be94:	693a      	ldr	r2, [r7, #16]
 800be96:	4313      	orrs	r3, r2
 800be98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a18      	ldr	r2, [pc, #96]	; (800bf00 <TIM_OC5_SetConfig+0xb4>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d00f      	beq.n	800bec2 <TIM_OC5_SetConfig+0x76>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a17      	ldr	r2, [pc, #92]	; (800bf04 <TIM_OC5_SetConfig+0xb8>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d00b      	beq.n	800bec2 <TIM_OC5_SetConfig+0x76>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a16      	ldr	r2, [pc, #88]	; (800bf08 <TIM_OC5_SetConfig+0xbc>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d007      	beq.n	800bec2 <TIM_OC5_SetConfig+0x76>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4a15      	ldr	r2, [pc, #84]	; (800bf0c <TIM_OC5_SetConfig+0xc0>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d003      	beq.n	800bec2 <TIM_OC5_SetConfig+0x76>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4a14      	ldr	r2, [pc, #80]	; (800bf10 <TIM_OC5_SetConfig+0xc4>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d109      	bne.n	800bed6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bec8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	695b      	ldr	r3, [r3, #20]
 800bece:	021b      	lsls	r3, r3, #8
 800bed0:	697a      	ldr	r2, [r7, #20]
 800bed2:	4313      	orrs	r3, r2
 800bed4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	697a      	ldr	r2, [r7, #20]
 800beda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	68fa      	ldr	r2, [r7, #12]
 800bee0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	685a      	ldr	r2, [r3, #4]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	693a      	ldr	r2, [r7, #16]
 800beee:	621a      	str	r2, [r3, #32]
}
 800bef0:	bf00      	nop
 800bef2:	371c      	adds	r7, #28
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr
 800befc:	fffeff8f 	.word	0xfffeff8f
 800bf00:	40010000 	.word	0x40010000
 800bf04:	40010400 	.word	0x40010400
 800bf08:	40014000 	.word	0x40014000
 800bf0c:	40014400 	.word	0x40014400
 800bf10:	40014800 	.word	0x40014800

0800bf14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b087      	sub	sp, #28
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a1b      	ldr	r3, [r3, #32]
 800bf22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a1b      	ldr	r3, [r3, #32]
 800bf2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	4b22      	ldr	r3, [pc, #136]	; (800bfc8 <TIM_OC6_SetConfig+0xb4>)
 800bf40:	4013      	ands	r3, r2
 800bf42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	021b      	lsls	r3, r3, #8
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	051b      	lsls	r3, r3, #20
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a19      	ldr	r2, [pc, #100]	; (800bfcc <TIM_OC6_SetConfig+0xb8>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d00f      	beq.n	800bf8c <TIM_OC6_SetConfig+0x78>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4a18      	ldr	r2, [pc, #96]	; (800bfd0 <TIM_OC6_SetConfig+0xbc>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d00b      	beq.n	800bf8c <TIM_OC6_SetConfig+0x78>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4a17      	ldr	r2, [pc, #92]	; (800bfd4 <TIM_OC6_SetConfig+0xc0>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d007      	beq.n	800bf8c <TIM_OC6_SetConfig+0x78>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4a16      	ldr	r2, [pc, #88]	; (800bfd8 <TIM_OC6_SetConfig+0xc4>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d003      	beq.n	800bf8c <TIM_OC6_SetConfig+0x78>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4a15      	ldr	r2, [pc, #84]	; (800bfdc <TIM_OC6_SetConfig+0xc8>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d109      	bne.n	800bfa0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	695b      	ldr	r3, [r3, #20]
 800bf98:	029b      	lsls	r3, r3, #10
 800bf9a:	697a      	ldr	r2, [r7, #20]
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	697a      	ldr	r2, [r7, #20]
 800bfa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	685a      	ldr	r2, [r3, #4]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	693a      	ldr	r2, [r7, #16]
 800bfb8:	621a      	str	r2, [r3, #32]
}
 800bfba:	bf00      	nop
 800bfbc:	371c      	adds	r7, #28
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr
 800bfc6:	bf00      	nop
 800bfc8:	feff8fff 	.word	0xfeff8fff
 800bfcc:	40010000 	.word	0x40010000
 800bfd0:	40010400 	.word	0x40010400
 800bfd4:	40014000 	.word	0x40014000
 800bfd8:	40014400 	.word	0x40014400
 800bfdc:	40014800 	.word	0x40014800

0800bfe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b087      	sub	sp, #28
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6a1b      	ldr	r3, [r3, #32]
 800bff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6a1b      	ldr	r3, [r3, #32]
 800bff6:	f023 0201 	bic.w	r2, r3, #1
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	699b      	ldr	r3, [r3, #24]
 800c002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c00a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	011b      	lsls	r3, r3, #4
 800c010:	693a      	ldr	r2, [r7, #16]
 800c012:	4313      	orrs	r3, r2
 800c014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	f023 030a 	bic.w	r3, r3, #10
 800c01c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c01e:	697a      	ldr	r2, [r7, #20]
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	4313      	orrs	r3, r2
 800c024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	693a      	ldr	r2, [r7, #16]
 800c02a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	697a      	ldr	r2, [r7, #20]
 800c030:	621a      	str	r2, [r3, #32]
}
 800c032:	bf00      	nop
 800c034:	371c      	adds	r7, #28
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr

0800c03e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c03e:	b480      	push	{r7}
 800c040:	b087      	sub	sp, #28
 800c042:	af00      	add	r7, sp, #0
 800c044:	60f8      	str	r0, [r7, #12]
 800c046:	60b9      	str	r1, [r7, #8]
 800c048:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	f023 0210 	bic.w	r2, r3, #16
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	699b      	ldr	r3, [r3, #24]
 800c05a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6a1b      	ldr	r3, [r3, #32]
 800c060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c068:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	031b      	lsls	r3, r3, #12
 800c06e:	697a      	ldr	r2, [r7, #20]
 800c070:	4313      	orrs	r3, r2
 800c072:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c07a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	011b      	lsls	r3, r3, #4
 800c080:	693a      	ldr	r2, [r7, #16]
 800c082:	4313      	orrs	r3, r2
 800c084:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	697a      	ldr	r2, [r7, #20]
 800c08a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	693a      	ldr	r2, [r7, #16]
 800c090:	621a      	str	r2, [r3, #32]
}
 800c092:	bf00      	nop
 800c094:	371c      	adds	r7, #28
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
	...

0800c0a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	4b09      	ldr	r3, [pc, #36]	; (800c0d8 <TIM_ITRx_SetConfig+0x38>)
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	f043 0307 	orr.w	r3, r3, #7
 800c0c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	609a      	str	r2, [r3, #8]
}
 800c0ca:	bf00      	nop
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	ffcfff8f 	.word	0xffcfff8f

0800c0dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b087      	sub	sp, #28
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
 800c0e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	021a      	lsls	r2, r3, #8
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	431a      	orrs	r2, r3
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	4313      	orrs	r3, r2
 800c104:	697a      	ldr	r2, [r7, #20]
 800c106:	4313      	orrs	r3, r2
 800c108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	697a      	ldr	r2, [r7, #20]
 800c10e:	609a      	str	r2, [r3, #8]
}
 800c110:	bf00      	nop
 800c112:	371c      	adds	r7, #28
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b087      	sub	sp, #28
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	f003 031f 	and.w	r3, r3, #31
 800c12e:	2201      	movs	r2, #1
 800c130:	fa02 f303 	lsl.w	r3, r2, r3
 800c134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6a1a      	ldr	r2, [r3, #32]
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	43db      	mvns	r3, r3
 800c13e:	401a      	ands	r2, r3
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6a1a      	ldr	r2, [r3, #32]
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	f003 031f 	and.w	r3, r3, #31
 800c14e:	6879      	ldr	r1, [r7, #4]
 800c150:	fa01 f303 	lsl.w	r3, r1, r3
 800c154:	431a      	orrs	r2, r3
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	621a      	str	r2, [r3, #32]
}
 800c15a:	bf00      	nop
 800c15c:	371c      	adds	r7, #28
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr
	...

0800c168 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d109      	bne.n	800c18c <HAL_TIMEx_PWMN_Start+0x24>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	2b01      	cmp	r3, #1
 800c182:	bf14      	ite	ne
 800c184:	2301      	movne	r3, #1
 800c186:	2300      	moveq	r3, #0
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	e022      	b.n	800c1d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	2b04      	cmp	r3, #4
 800c190:	d109      	bne.n	800c1a6 <HAL_TIMEx_PWMN_Start+0x3e>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	bf14      	ite	ne
 800c19e:	2301      	movne	r3, #1
 800c1a0:	2300      	moveq	r3, #0
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	e015      	b.n	800c1d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	2b08      	cmp	r3, #8
 800c1aa:	d109      	bne.n	800c1c0 <HAL_TIMEx_PWMN_Start+0x58>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	bf14      	ite	ne
 800c1b8:	2301      	movne	r3, #1
 800c1ba:	2300      	moveq	r3, #0
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	e008      	b.n	800c1d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	bf14      	ite	ne
 800c1cc:	2301      	movne	r3, #1
 800c1ce:	2300      	moveq	r3, #0
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d001      	beq.n	800c1da <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e073      	b.n	800c2c2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d104      	bne.n	800c1ea <HAL_TIMEx_PWMN_Start+0x82>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2202      	movs	r2, #2
 800c1e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1e8:	e013      	b.n	800c212 <HAL_TIMEx_PWMN_Start+0xaa>
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	2b04      	cmp	r3, #4
 800c1ee:	d104      	bne.n	800c1fa <HAL_TIMEx_PWMN_Start+0x92>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2202      	movs	r2, #2
 800c1f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1f8:	e00b      	b.n	800c212 <HAL_TIMEx_PWMN_Start+0xaa>
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	2b08      	cmp	r3, #8
 800c1fe:	d104      	bne.n	800c20a <HAL_TIMEx_PWMN_Start+0xa2>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2202      	movs	r2, #2
 800c204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c208:	e003      	b.n	800c212 <HAL_TIMEx_PWMN_Start+0xaa>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2202      	movs	r2, #2
 800c20e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2204      	movs	r2, #4
 800c218:	6839      	ldr	r1, [r7, #0]
 800c21a:	4618      	mov	r0, r3
 800c21c:	f000 f972 	bl	800c504 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c22e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a25      	ldr	r2, [pc, #148]	; (800c2cc <HAL_TIMEx_PWMN_Start+0x164>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d022      	beq.n	800c280 <HAL_TIMEx_PWMN_Start+0x118>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c242:	d01d      	beq.n	800c280 <HAL_TIMEx_PWMN_Start+0x118>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	4a21      	ldr	r2, [pc, #132]	; (800c2d0 <HAL_TIMEx_PWMN_Start+0x168>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d018      	beq.n	800c280 <HAL_TIMEx_PWMN_Start+0x118>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4a20      	ldr	r2, [pc, #128]	; (800c2d4 <HAL_TIMEx_PWMN_Start+0x16c>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d013      	beq.n	800c280 <HAL_TIMEx_PWMN_Start+0x118>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a1e      	ldr	r2, [pc, #120]	; (800c2d8 <HAL_TIMEx_PWMN_Start+0x170>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d00e      	beq.n	800c280 <HAL_TIMEx_PWMN_Start+0x118>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4a1d      	ldr	r2, [pc, #116]	; (800c2dc <HAL_TIMEx_PWMN_Start+0x174>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d009      	beq.n	800c280 <HAL_TIMEx_PWMN_Start+0x118>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a1b      	ldr	r2, [pc, #108]	; (800c2e0 <HAL_TIMEx_PWMN_Start+0x178>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d004      	beq.n	800c280 <HAL_TIMEx_PWMN_Start+0x118>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a1a      	ldr	r2, [pc, #104]	; (800c2e4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d115      	bne.n	800c2ac <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	689a      	ldr	r2, [r3, #8]
 800c286:	4b18      	ldr	r3, [pc, #96]	; (800c2e8 <HAL_TIMEx_PWMN_Start+0x180>)
 800c288:	4013      	ands	r3, r2
 800c28a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2b06      	cmp	r3, #6
 800c290:	d015      	beq.n	800c2be <HAL_TIMEx_PWMN_Start+0x156>
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c298:	d011      	beq.n	800c2be <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f042 0201 	orr.w	r2, r2, #1
 800c2a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2aa:	e008      	b.n	800c2be <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f042 0201 	orr.w	r2, r2, #1
 800c2ba:	601a      	str	r2, [r3, #0]
 800c2bc:	e000      	b.n	800c2c0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	40010000 	.word	0x40010000
 800c2d0:	40000400 	.word	0x40000400
 800c2d4:	40000800 	.word	0x40000800
 800c2d8:	40000c00 	.word	0x40000c00
 800c2dc:	40010400 	.word	0x40010400
 800c2e0:	40001800 	.word	0x40001800
 800c2e4:	40014000 	.word	0x40014000
 800c2e8:	00010007 	.word	0x00010007

0800c2ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b085      	sub	sp, #20
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d101      	bne.n	800c304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c300:	2302      	movs	r3, #2
 800c302:	e06d      	b.n	800c3e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2201      	movs	r2, #1
 800c308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2202      	movs	r2, #2
 800c310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a30      	ldr	r2, [pc, #192]	; (800c3ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d004      	beq.n	800c338 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a2f      	ldr	r2, [pc, #188]	; (800c3f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d108      	bne.n	800c34a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c33e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	4313      	orrs	r3, r2
 800c348:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c350:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	4313      	orrs	r3, r2
 800c35a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	68fa      	ldr	r2, [r7, #12]
 800c362:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a20      	ldr	r2, [pc, #128]	; (800c3ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d022      	beq.n	800c3b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c376:	d01d      	beq.n	800c3b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a1d      	ldr	r2, [pc, #116]	; (800c3f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d018      	beq.n	800c3b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4a1c      	ldr	r2, [pc, #112]	; (800c3f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d013      	beq.n	800c3b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a1a      	ldr	r2, [pc, #104]	; (800c3fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d00e      	beq.n	800c3b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a15      	ldr	r2, [pc, #84]	; (800c3f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d009      	beq.n	800c3b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a16      	ldr	r2, [pc, #88]	; (800c400 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d004      	beq.n	800c3b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a15      	ldr	r2, [pc, #84]	; (800c404 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d10c      	bne.n	800c3ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3714      	adds	r7, #20
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr
 800c3ec:	40010000 	.word	0x40010000
 800c3f0:	40010400 	.word	0x40010400
 800c3f4:	40000400 	.word	0x40000400
 800c3f8:	40000800 	.word	0x40000800
 800c3fc:	40000c00 	.word	0x40000c00
 800c400:	40001800 	.word	0x40001800
 800c404:	40014000 	.word	0x40014000

0800c408 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c412:	2300      	movs	r3, #0
 800c414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d101      	bne.n	800c424 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c420:	2302      	movs	r3, #2
 800c422:	e065      	b.n	800c4f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2201      	movs	r2, #1
 800c428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	4313      	orrs	r3, r2
 800c438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	4313      	orrs	r3, r2
 800c446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	4313      	orrs	r3, r2
 800c454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4313      	orrs	r3, r2
 800c462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	4313      	orrs	r3, r2
 800c470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	695b      	ldr	r3, [r3, #20]
 800c47c:	4313      	orrs	r3, r2
 800c47e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c48a:	4313      	orrs	r3, r2
 800c48c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	041b      	lsls	r3, r3, #16
 800c49a:	4313      	orrs	r3, r2
 800c49c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a16      	ldr	r2, [pc, #88]	; (800c4fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d004      	beq.n	800c4b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a14      	ldr	r2, [pc, #80]	; (800c500 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d115      	bne.n	800c4de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4bc:	051b      	lsls	r3, r3, #20
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	69db      	ldr	r3, [r3, #28]
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	6a1b      	ldr	r3, [r3, #32]
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4ee:	2300      	movs	r3, #0
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3714      	adds	r7, #20
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr
 800c4fc:	40010000 	.word	0x40010000
 800c500:	40010400 	.word	0x40010400

0800c504 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800c504:	b480      	push	{r7}
 800c506:	b087      	sub	sp, #28
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	f003 031f 	and.w	r3, r3, #31
 800c516:	2204      	movs	r2, #4
 800c518:	fa02 f303 	lsl.w	r3, r2, r3
 800c51c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6a1a      	ldr	r2, [r3, #32]
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	43db      	mvns	r3, r3
 800c526:	401a      	ands	r2, r3
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6a1a      	ldr	r2, [r3, #32]
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	f003 031f 	and.w	r3, r3, #31
 800c536:	6879      	ldr	r1, [r7, #4]
 800c538:	fa01 f303 	lsl.w	r3, r1, r3
 800c53c:	431a      	orrs	r2, r3
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	621a      	str	r2, [r3, #32]
}
 800c542:	bf00      	nop
 800c544:	371c      	adds	r7, #28
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr

0800c54e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b082      	sub	sp, #8
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d101      	bne.n	800c560 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c55c:	2301      	movs	r3, #1
 800c55e:	e042      	b.n	800c5e6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c566:	2b00      	cmp	r3, #0
 800c568:	d106      	bne.n	800c578 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2200      	movs	r2, #0
 800c56e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7f5 fb46 	bl	8001c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2224      	movs	r2, #36	; 0x24
 800c57c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f022 0201 	bic.w	r2, r2, #1
 800c58e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 f8c3 	bl	800c71c <UART_SetConfig>
 800c596:	4603      	mov	r3, r0
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d101      	bne.n	800c5a0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c59c:	2301      	movs	r3, #1
 800c59e:	e022      	b.n	800c5e6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d002      	beq.n	800c5ae <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fe1f 	bl	800d1ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	685a      	ldr	r2, [r3, #4]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c5bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	689a      	ldr	r2, [r3, #8]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c5cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f042 0201 	orr.w	r2, r2, #1
 800c5dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 fea6 	bl	800d330 <UART_CheckIdleState>
 800c5e4:	4603      	mov	r3, r0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3708      	adds	r7, #8
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b08a      	sub	sp, #40	; 0x28
 800c5f2:	af02      	add	r7, sp, #8
 800c5f4:	60f8      	str	r0, [r7, #12]
 800c5f6:	60b9      	str	r1, [r7, #8]
 800c5f8:	603b      	str	r3, [r7, #0]
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c604:	2b20      	cmp	r3, #32
 800c606:	f040 8083 	bne.w	800c710 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d002      	beq.n	800c616 <HAL_UART_Transmit+0x28>
 800c610:	88fb      	ldrh	r3, [r7, #6]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d101      	bne.n	800c61a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c616:	2301      	movs	r3, #1
 800c618:	e07b      	b.n	800c712 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c620:	2b01      	cmp	r3, #1
 800c622:	d101      	bne.n	800c628 <HAL_UART_Transmit+0x3a>
 800c624:	2302      	movs	r3, #2
 800c626:	e074      	b.n	800c712 <HAL_UART_Transmit+0x124>
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2200      	movs	r2, #0
 800c634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2221      	movs	r2, #33	; 0x21
 800c63c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c640:	f7f7 fbfe 	bl	8003e40 <HAL_GetTick>
 800c644:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	88fa      	ldrh	r2, [r7, #6]
 800c64a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	88fa      	ldrh	r2, [r7, #6]
 800c652:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c65e:	d108      	bne.n	800c672 <HAL_UART_Transmit+0x84>
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	691b      	ldr	r3, [r3, #16]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d104      	bne.n	800c672 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c668:	2300      	movs	r3, #0
 800c66a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	61bb      	str	r3, [r7, #24]
 800c670:	e003      	b.n	800c67a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c676:	2300      	movs	r3, #0
 800c678:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2200      	movs	r2, #0
 800c67e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c682:	e02c      	b.n	800c6de <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	2200      	movs	r2, #0
 800c68c:	2180      	movs	r1, #128	; 0x80
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	f000 fe99 	bl	800d3c6 <UART_WaitOnFlagUntilTimeout>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d001      	beq.n	800c69e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c69a:	2303      	movs	r3, #3
 800c69c:	e039      	b.n	800c712 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d10b      	bne.n	800c6bc <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	881b      	ldrh	r3, [r3, #0]
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c6b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	3302      	adds	r3, #2
 800c6b8:	61bb      	str	r3, [r7, #24]
 800c6ba:	e007      	b.n	800c6cc <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	781a      	ldrb	r2, [r3, #0]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	3b01      	subs	r3, #1
 800c6d6:	b29a      	uxth	r2, r3
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1cc      	bne.n	800c684 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	9300      	str	r3, [sp, #0]
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	2140      	movs	r1, #64	; 0x40
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f000 fe66 	bl	800d3c6 <UART_WaitOnFlagUntilTimeout>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d001      	beq.n	800c704 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c700:	2303      	movs	r3, #3
 800c702:	e006      	b.n	800c712 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2220      	movs	r2, #32
 800c708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c70c:	2300      	movs	r3, #0
 800c70e:	e000      	b.n	800c712 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c710:	2302      	movs	r3, #2
  }
}
 800c712:	4618      	mov	r0, r3
 800c714:	3720      	adds	r7, #32
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
	...

0800c71c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c71c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c720:	b092      	sub	sp, #72	; 0x48
 800c722:	af00      	add	r7, sp, #0
 800c724:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c726:	2300      	movs	r3, #0
 800c728:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	689a      	ldr	r2, [r3, #8]
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	691b      	ldr	r3, [r3, #16]
 800c734:	431a      	orrs	r2, r3
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	695b      	ldr	r3, [r3, #20]
 800c73a:	431a      	orrs	r2, r3
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	69db      	ldr	r3, [r3, #28]
 800c740:	4313      	orrs	r3, r2
 800c742:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	4bbe      	ldr	r3, [pc, #760]	; (800ca44 <UART_SetConfig+0x328>)
 800c74c:	4013      	ands	r3, r2
 800c74e:	697a      	ldr	r2, [r7, #20]
 800c750:	6812      	ldr	r2, [r2, #0]
 800c752:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c754:	430b      	orrs	r3, r1
 800c756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	68da      	ldr	r2, [r3, #12]
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	430a      	orrs	r2, r1
 800c76c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	699b      	ldr	r3, [r3, #24]
 800c772:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4ab3      	ldr	r2, [pc, #716]	; (800ca48 <UART_SetConfig+0x32c>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d004      	beq.n	800c788 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	6a1b      	ldr	r3, [r3, #32]
 800c782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c784:	4313      	orrs	r3, r2
 800c786:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	689a      	ldr	r2, [r3, #8]
 800c78e:	4baf      	ldr	r3, [pc, #700]	; (800ca4c <UART_SetConfig+0x330>)
 800c790:	4013      	ands	r3, r2
 800c792:	697a      	ldr	r2, [r7, #20]
 800c794:	6812      	ldr	r2, [r2, #0]
 800c796:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c798:	430b      	orrs	r3, r1
 800c79a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a2:	f023 010f 	bic.w	r1, r3, #15
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	430a      	orrs	r2, r1
 800c7b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4aa6      	ldr	r2, [pc, #664]	; (800ca50 <UART_SetConfig+0x334>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d177      	bne.n	800c8ac <UART_SetConfig+0x190>
 800c7bc:	4ba5      	ldr	r3, [pc, #660]	; (800ca54 <UART_SetConfig+0x338>)
 800c7be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c7c4:	2b28      	cmp	r3, #40	; 0x28
 800c7c6:	d86d      	bhi.n	800c8a4 <UART_SetConfig+0x188>
 800c7c8:	a201      	add	r2, pc, #4	; (adr r2, 800c7d0 <UART_SetConfig+0xb4>)
 800c7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ce:	bf00      	nop
 800c7d0:	0800c875 	.word	0x0800c875
 800c7d4:	0800c8a5 	.word	0x0800c8a5
 800c7d8:	0800c8a5 	.word	0x0800c8a5
 800c7dc:	0800c8a5 	.word	0x0800c8a5
 800c7e0:	0800c8a5 	.word	0x0800c8a5
 800c7e4:	0800c8a5 	.word	0x0800c8a5
 800c7e8:	0800c8a5 	.word	0x0800c8a5
 800c7ec:	0800c8a5 	.word	0x0800c8a5
 800c7f0:	0800c87d 	.word	0x0800c87d
 800c7f4:	0800c8a5 	.word	0x0800c8a5
 800c7f8:	0800c8a5 	.word	0x0800c8a5
 800c7fc:	0800c8a5 	.word	0x0800c8a5
 800c800:	0800c8a5 	.word	0x0800c8a5
 800c804:	0800c8a5 	.word	0x0800c8a5
 800c808:	0800c8a5 	.word	0x0800c8a5
 800c80c:	0800c8a5 	.word	0x0800c8a5
 800c810:	0800c885 	.word	0x0800c885
 800c814:	0800c8a5 	.word	0x0800c8a5
 800c818:	0800c8a5 	.word	0x0800c8a5
 800c81c:	0800c8a5 	.word	0x0800c8a5
 800c820:	0800c8a5 	.word	0x0800c8a5
 800c824:	0800c8a5 	.word	0x0800c8a5
 800c828:	0800c8a5 	.word	0x0800c8a5
 800c82c:	0800c8a5 	.word	0x0800c8a5
 800c830:	0800c88d 	.word	0x0800c88d
 800c834:	0800c8a5 	.word	0x0800c8a5
 800c838:	0800c8a5 	.word	0x0800c8a5
 800c83c:	0800c8a5 	.word	0x0800c8a5
 800c840:	0800c8a5 	.word	0x0800c8a5
 800c844:	0800c8a5 	.word	0x0800c8a5
 800c848:	0800c8a5 	.word	0x0800c8a5
 800c84c:	0800c8a5 	.word	0x0800c8a5
 800c850:	0800c895 	.word	0x0800c895
 800c854:	0800c8a5 	.word	0x0800c8a5
 800c858:	0800c8a5 	.word	0x0800c8a5
 800c85c:	0800c8a5 	.word	0x0800c8a5
 800c860:	0800c8a5 	.word	0x0800c8a5
 800c864:	0800c8a5 	.word	0x0800c8a5
 800c868:	0800c8a5 	.word	0x0800c8a5
 800c86c:	0800c8a5 	.word	0x0800c8a5
 800c870:	0800c89d 	.word	0x0800c89d
 800c874:	2301      	movs	r3, #1
 800c876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c87a:	e222      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c87c:	2304      	movs	r3, #4
 800c87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c882:	e21e      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c884:	2308      	movs	r3, #8
 800c886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c88a:	e21a      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c88c:	2310      	movs	r3, #16
 800c88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c892:	e216      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c894:	2320      	movs	r3, #32
 800c896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c89a:	e212      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c89c:	2340      	movs	r3, #64	; 0x40
 800c89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8a2:	e20e      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c8a4:	2380      	movs	r3, #128	; 0x80
 800c8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8aa:	e20a      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a69      	ldr	r2, [pc, #420]	; (800ca58 <UART_SetConfig+0x33c>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d130      	bne.n	800c918 <UART_SetConfig+0x1fc>
 800c8b6:	4b67      	ldr	r3, [pc, #412]	; (800ca54 <UART_SetConfig+0x338>)
 800c8b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ba:	f003 0307 	and.w	r3, r3, #7
 800c8be:	2b05      	cmp	r3, #5
 800c8c0:	d826      	bhi.n	800c910 <UART_SetConfig+0x1f4>
 800c8c2:	a201      	add	r2, pc, #4	; (adr r2, 800c8c8 <UART_SetConfig+0x1ac>)
 800c8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c8:	0800c8e1 	.word	0x0800c8e1
 800c8cc:	0800c8e9 	.word	0x0800c8e9
 800c8d0:	0800c8f1 	.word	0x0800c8f1
 800c8d4:	0800c8f9 	.word	0x0800c8f9
 800c8d8:	0800c901 	.word	0x0800c901
 800c8dc:	0800c909 	.word	0x0800c909
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8e6:	e1ec      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c8e8:	2304      	movs	r3, #4
 800c8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ee:	e1e8      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c8f0:	2308      	movs	r3, #8
 800c8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8f6:	e1e4      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c8f8:	2310      	movs	r3, #16
 800c8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8fe:	e1e0      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c900:	2320      	movs	r3, #32
 800c902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c906:	e1dc      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c908:	2340      	movs	r3, #64	; 0x40
 800c90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c90e:	e1d8      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c910:	2380      	movs	r3, #128	; 0x80
 800c912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c916:	e1d4      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a4f      	ldr	r2, [pc, #316]	; (800ca5c <UART_SetConfig+0x340>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d130      	bne.n	800c984 <UART_SetConfig+0x268>
 800c922:	4b4c      	ldr	r3, [pc, #304]	; (800ca54 <UART_SetConfig+0x338>)
 800c924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c926:	f003 0307 	and.w	r3, r3, #7
 800c92a:	2b05      	cmp	r3, #5
 800c92c:	d826      	bhi.n	800c97c <UART_SetConfig+0x260>
 800c92e:	a201      	add	r2, pc, #4	; (adr r2, 800c934 <UART_SetConfig+0x218>)
 800c930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c934:	0800c94d 	.word	0x0800c94d
 800c938:	0800c955 	.word	0x0800c955
 800c93c:	0800c95d 	.word	0x0800c95d
 800c940:	0800c965 	.word	0x0800c965
 800c944:	0800c96d 	.word	0x0800c96d
 800c948:	0800c975 	.word	0x0800c975
 800c94c:	2300      	movs	r3, #0
 800c94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c952:	e1b6      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c954:	2304      	movs	r3, #4
 800c956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c95a:	e1b2      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c95c:	2308      	movs	r3, #8
 800c95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c962:	e1ae      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c964:	2310      	movs	r3, #16
 800c966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c96a:	e1aa      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c96c:	2320      	movs	r3, #32
 800c96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c972:	e1a6      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c974:	2340      	movs	r3, #64	; 0x40
 800c976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c97a:	e1a2      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c97c:	2380      	movs	r3, #128	; 0x80
 800c97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c982:	e19e      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a35      	ldr	r2, [pc, #212]	; (800ca60 <UART_SetConfig+0x344>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d130      	bne.n	800c9f0 <UART_SetConfig+0x2d4>
 800c98e:	4b31      	ldr	r3, [pc, #196]	; (800ca54 <UART_SetConfig+0x338>)
 800c990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c992:	f003 0307 	and.w	r3, r3, #7
 800c996:	2b05      	cmp	r3, #5
 800c998:	d826      	bhi.n	800c9e8 <UART_SetConfig+0x2cc>
 800c99a:	a201      	add	r2, pc, #4	; (adr r2, 800c9a0 <UART_SetConfig+0x284>)
 800c99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a0:	0800c9b9 	.word	0x0800c9b9
 800c9a4:	0800c9c1 	.word	0x0800c9c1
 800c9a8:	0800c9c9 	.word	0x0800c9c9
 800c9ac:	0800c9d1 	.word	0x0800c9d1
 800c9b0:	0800c9d9 	.word	0x0800c9d9
 800c9b4:	0800c9e1 	.word	0x0800c9e1
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9be:	e180      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c9c0:	2304      	movs	r3, #4
 800c9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9c6:	e17c      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c9c8:	2308      	movs	r3, #8
 800c9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ce:	e178      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c9d0:	2310      	movs	r3, #16
 800c9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9d6:	e174      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c9d8:	2320      	movs	r3, #32
 800c9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9de:	e170      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c9e0:	2340      	movs	r3, #64	; 0x40
 800c9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9e6:	e16c      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c9e8:	2380      	movs	r3, #128	; 0x80
 800c9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ee:	e168      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a1b      	ldr	r2, [pc, #108]	; (800ca64 <UART_SetConfig+0x348>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d142      	bne.n	800ca80 <UART_SetConfig+0x364>
 800c9fa:	4b16      	ldr	r3, [pc, #88]	; (800ca54 <UART_SetConfig+0x338>)
 800c9fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9fe:	f003 0307 	and.w	r3, r3, #7
 800ca02:	2b05      	cmp	r3, #5
 800ca04:	d838      	bhi.n	800ca78 <UART_SetConfig+0x35c>
 800ca06:	a201      	add	r2, pc, #4	; (adr r2, 800ca0c <UART_SetConfig+0x2f0>)
 800ca08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca0c:	0800ca25 	.word	0x0800ca25
 800ca10:	0800ca2d 	.word	0x0800ca2d
 800ca14:	0800ca35 	.word	0x0800ca35
 800ca18:	0800ca3d 	.word	0x0800ca3d
 800ca1c:	0800ca69 	.word	0x0800ca69
 800ca20:	0800ca71 	.word	0x0800ca71
 800ca24:	2300      	movs	r3, #0
 800ca26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca2a:	e14a      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800ca2c:	2304      	movs	r3, #4
 800ca2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca32:	e146      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800ca34:	2308      	movs	r3, #8
 800ca36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca3a:	e142      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800ca3c:	2310      	movs	r3, #16
 800ca3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca42:	e13e      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800ca44:	cfff69f3 	.word	0xcfff69f3
 800ca48:	58000c00 	.word	0x58000c00
 800ca4c:	11fff4ff 	.word	0x11fff4ff
 800ca50:	40011000 	.word	0x40011000
 800ca54:	58024400 	.word	0x58024400
 800ca58:	40004400 	.word	0x40004400
 800ca5c:	40004800 	.word	0x40004800
 800ca60:	40004c00 	.word	0x40004c00
 800ca64:	40005000 	.word	0x40005000
 800ca68:	2320      	movs	r3, #32
 800ca6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca6e:	e128      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800ca70:	2340      	movs	r3, #64	; 0x40
 800ca72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca76:	e124      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800ca78:	2380      	movs	r3, #128	; 0x80
 800ca7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca7e:	e120      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4acb      	ldr	r2, [pc, #812]	; (800cdb4 <UART_SetConfig+0x698>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d176      	bne.n	800cb78 <UART_SetConfig+0x45c>
 800ca8a:	4bcb      	ldr	r3, [pc, #812]	; (800cdb8 <UART_SetConfig+0x69c>)
 800ca8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca92:	2b28      	cmp	r3, #40	; 0x28
 800ca94:	d86c      	bhi.n	800cb70 <UART_SetConfig+0x454>
 800ca96:	a201      	add	r2, pc, #4	; (adr r2, 800ca9c <UART_SetConfig+0x380>)
 800ca98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca9c:	0800cb41 	.word	0x0800cb41
 800caa0:	0800cb71 	.word	0x0800cb71
 800caa4:	0800cb71 	.word	0x0800cb71
 800caa8:	0800cb71 	.word	0x0800cb71
 800caac:	0800cb71 	.word	0x0800cb71
 800cab0:	0800cb71 	.word	0x0800cb71
 800cab4:	0800cb71 	.word	0x0800cb71
 800cab8:	0800cb71 	.word	0x0800cb71
 800cabc:	0800cb49 	.word	0x0800cb49
 800cac0:	0800cb71 	.word	0x0800cb71
 800cac4:	0800cb71 	.word	0x0800cb71
 800cac8:	0800cb71 	.word	0x0800cb71
 800cacc:	0800cb71 	.word	0x0800cb71
 800cad0:	0800cb71 	.word	0x0800cb71
 800cad4:	0800cb71 	.word	0x0800cb71
 800cad8:	0800cb71 	.word	0x0800cb71
 800cadc:	0800cb51 	.word	0x0800cb51
 800cae0:	0800cb71 	.word	0x0800cb71
 800cae4:	0800cb71 	.word	0x0800cb71
 800cae8:	0800cb71 	.word	0x0800cb71
 800caec:	0800cb71 	.word	0x0800cb71
 800caf0:	0800cb71 	.word	0x0800cb71
 800caf4:	0800cb71 	.word	0x0800cb71
 800caf8:	0800cb71 	.word	0x0800cb71
 800cafc:	0800cb59 	.word	0x0800cb59
 800cb00:	0800cb71 	.word	0x0800cb71
 800cb04:	0800cb71 	.word	0x0800cb71
 800cb08:	0800cb71 	.word	0x0800cb71
 800cb0c:	0800cb71 	.word	0x0800cb71
 800cb10:	0800cb71 	.word	0x0800cb71
 800cb14:	0800cb71 	.word	0x0800cb71
 800cb18:	0800cb71 	.word	0x0800cb71
 800cb1c:	0800cb61 	.word	0x0800cb61
 800cb20:	0800cb71 	.word	0x0800cb71
 800cb24:	0800cb71 	.word	0x0800cb71
 800cb28:	0800cb71 	.word	0x0800cb71
 800cb2c:	0800cb71 	.word	0x0800cb71
 800cb30:	0800cb71 	.word	0x0800cb71
 800cb34:	0800cb71 	.word	0x0800cb71
 800cb38:	0800cb71 	.word	0x0800cb71
 800cb3c:	0800cb69 	.word	0x0800cb69
 800cb40:	2301      	movs	r3, #1
 800cb42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb46:	e0bc      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cb48:	2304      	movs	r3, #4
 800cb4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb4e:	e0b8      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cb50:	2308      	movs	r3, #8
 800cb52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb56:	e0b4      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cb58:	2310      	movs	r3, #16
 800cb5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb5e:	e0b0      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cb60:	2320      	movs	r3, #32
 800cb62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb66:	e0ac      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cb68:	2340      	movs	r3, #64	; 0x40
 800cb6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb6e:	e0a8      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cb70:	2380      	movs	r3, #128	; 0x80
 800cb72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb76:	e0a4      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a8f      	ldr	r2, [pc, #572]	; (800cdbc <UART_SetConfig+0x6a0>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d130      	bne.n	800cbe4 <UART_SetConfig+0x4c8>
 800cb82:	4b8d      	ldr	r3, [pc, #564]	; (800cdb8 <UART_SetConfig+0x69c>)
 800cb84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb86:	f003 0307 	and.w	r3, r3, #7
 800cb8a:	2b05      	cmp	r3, #5
 800cb8c:	d826      	bhi.n	800cbdc <UART_SetConfig+0x4c0>
 800cb8e:	a201      	add	r2, pc, #4	; (adr r2, 800cb94 <UART_SetConfig+0x478>)
 800cb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb94:	0800cbad 	.word	0x0800cbad
 800cb98:	0800cbb5 	.word	0x0800cbb5
 800cb9c:	0800cbbd 	.word	0x0800cbbd
 800cba0:	0800cbc5 	.word	0x0800cbc5
 800cba4:	0800cbcd 	.word	0x0800cbcd
 800cba8:	0800cbd5 	.word	0x0800cbd5
 800cbac:	2300      	movs	r3, #0
 800cbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbb2:	e086      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cbb4:	2304      	movs	r3, #4
 800cbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbba:	e082      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cbbc:	2308      	movs	r3, #8
 800cbbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbc2:	e07e      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cbc4:	2310      	movs	r3, #16
 800cbc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbca:	e07a      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cbcc:	2320      	movs	r3, #32
 800cbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbd2:	e076      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cbd4:	2340      	movs	r3, #64	; 0x40
 800cbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbda:	e072      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cbdc:	2380      	movs	r3, #128	; 0x80
 800cbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbe2:	e06e      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4a75      	ldr	r2, [pc, #468]	; (800cdc0 <UART_SetConfig+0x6a4>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d130      	bne.n	800cc50 <UART_SetConfig+0x534>
 800cbee:	4b72      	ldr	r3, [pc, #456]	; (800cdb8 <UART_SetConfig+0x69c>)
 800cbf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbf2:	f003 0307 	and.w	r3, r3, #7
 800cbf6:	2b05      	cmp	r3, #5
 800cbf8:	d826      	bhi.n	800cc48 <UART_SetConfig+0x52c>
 800cbfa:	a201      	add	r2, pc, #4	; (adr r2, 800cc00 <UART_SetConfig+0x4e4>)
 800cbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc00:	0800cc19 	.word	0x0800cc19
 800cc04:	0800cc21 	.word	0x0800cc21
 800cc08:	0800cc29 	.word	0x0800cc29
 800cc0c:	0800cc31 	.word	0x0800cc31
 800cc10:	0800cc39 	.word	0x0800cc39
 800cc14:	0800cc41 	.word	0x0800cc41
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc1e:	e050      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cc20:	2304      	movs	r3, #4
 800cc22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc26:	e04c      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cc28:	2308      	movs	r3, #8
 800cc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc2e:	e048      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cc30:	2310      	movs	r3, #16
 800cc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc36:	e044      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cc38:	2320      	movs	r3, #32
 800cc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc3e:	e040      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cc40:	2340      	movs	r3, #64	; 0x40
 800cc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc46:	e03c      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cc48:	2380      	movs	r3, #128	; 0x80
 800cc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc4e:	e038      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a5b      	ldr	r2, [pc, #364]	; (800cdc4 <UART_SetConfig+0x6a8>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d130      	bne.n	800ccbc <UART_SetConfig+0x5a0>
 800cc5a:	4b57      	ldr	r3, [pc, #348]	; (800cdb8 <UART_SetConfig+0x69c>)
 800cc5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc5e:	f003 0307 	and.w	r3, r3, #7
 800cc62:	2b05      	cmp	r3, #5
 800cc64:	d826      	bhi.n	800ccb4 <UART_SetConfig+0x598>
 800cc66:	a201      	add	r2, pc, #4	; (adr r2, 800cc6c <UART_SetConfig+0x550>)
 800cc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc6c:	0800cc85 	.word	0x0800cc85
 800cc70:	0800cc8d 	.word	0x0800cc8d
 800cc74:	0800cc95 	.word	0x0800cc95
 800cc78:	0800cc9d 	.word	0x0800cc9d
 800cc7c:	0800cca5 	.word	0x0800cca5
 800cc80:	0800ccad 	.word	0x0800ccad
 800cc84:	2302      	movs	r3, #2
 800cc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc8a:	e01a      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cc8c:	2304      	movs	r3, #4
 800cc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc92:	e016      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cc94:	2308      	movs	r3, #8
 800cc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9a:	e012      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cc9c:	2310      	movs	r3, #16
 800cc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cca2:	e00e      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800cca4:	2320      	movs	r3, #32
 800cca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccaa:	e00a      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800ccac:	2340      	movs	r3, #64	; 0x40
 800ccae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccb2:	e006      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800ccb4:	2380      	movs	r3, #128	; 0x80
 800ccb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccba:	e002      	b.n	800ccc2 <UART_SetConfig+0x5a6>
 800ccbc:	2380      	movs	r3, #128	; 0x80
 800ccbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a3f      	ldr	r2, [pc, #252]	; (800cdc4 <UART_SetConfig+0x6a8>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	f040 80f8 	bne.w	800cebe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ccce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ccd2:	2b20      	cmp	r3, #32
 800ccd4:	dc46      	bgt.n	800cd64 <UART_SetConfig+0x648>
 800ccd6:	2b02      	cmp	r3, #2
 800ccd8:	f2c0 8082 	blt.w	800cde0 <UART_SetConfig+0x6c4>
 800ccdc:	3b02      	subs	r3, #2
 800ccde:	2b1e      	cmp	r3, #30
 800cce0:	d87e      	bhi.n	800cde0 <UART_SetConfig+0x6c4>
 800cce2:	a201      	add	r2, pc, #4	; (adr r2, 800cce8 <UART_SetConfig+0x5cc>)
 800cce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce8:	0800cd6b 	.word	0x0800cd6b
 800ccec:	0800cde1 	.word	0x0800cde1
 800ccf0:	0800cd73 	.word	0x0800cd73
 800ccf4:	0800cde1 	.word	0x0800cde1
 800ccf8:	0800cde1 	.word	0x0800cde1
 800ccfc:	0800cde1 	.word	0x0800cde1
 800cd00:	0800cd83 	.word	0x0800cd83
 800cd04:	0800cde1 	.word	0x0800cde1
 800cd08:	0800cde1 	.word	0x0800cde1
 800cd0c:	0800cde1 	.word	0x0800cde1
 800cd10:	0800cde1 	.word	0x0800cde1
 800cd14:	0800cde1 	.word	0x0800cde1
 800cd18:	0800cde1 	.word	0x0800cde1
 800cd1c:	0800cde1 	.word	0x0800cde1
 800cd20:	0800cd93 	.word	0x0800cd93
 800cd24:	0800cde1 	.word	0x0800cde1
 800cd28:	0800cde1 	.word	0x0800cde1
 800cd2c:	0800cde1 	.word	0x0800cde1
 800cd30:	0800cde1 	.word	0x0800cde1
 800cd34:	0800cde1 	.word	0x0800cde1
 800cd38:	0800cde1 	.word	0x0800cde1
 800cd3c:	0800cde1 	.word	0x0800cde1
 800cd40:	0800cde1 	.word	0x0800cde1
 800cd44:	0800cde1 	.word	0x0800cde1
 800cd48:	0800cde1 	.word	0x0800cde1
 800cd4c:	0800cde1 	.word	0x0800cde1
 800cd50:	0800cde1 	.word	0x0800cde1
 800cd54:	0800cde1 	.word	0x0800cde1
 800cd58:	0800cde1 	.word	0x0800cde1
 800cd5c:	0800cde1 	.word	0x0800cde1
 800cd60:	0800cdd3 	.word	0x0800cdd3
 800cd64:	2b40      	cmp	r3, #64	; 0x40
 800cd66:	d037      	beq.n	800cdd8 <UART_SetConfig+0x6bc>
 800cd68:	e03a      	b.n	800cde0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cd6a:	f7fc fcdd 	bl	8009728 <HAL_RCCEx_GetD3PCLK1Freq>
 800cd6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd70:	e03c      	b.n	800cdec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7fc fcec 	bl	8009754 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd80:	e034      	b.n	800cdec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd82:	f107 0318 	add.w	r3, r7, #24
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fc fe38 	bl	80099fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd90:	e02c      	b.n	800cdec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd92:	4b09      	ldr	r3, [pc, #36]	; (800cdb8 <UART_SetConfig+0x69c>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f003 0320 	and.w	r3, r3, #32
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d016      	beq.n	800cdcc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd9e:	4b06      	ldr	r3, [pc, #24]	; (800cdb8 <UART_SetConfig+0x69c>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	08db      	lsrs	r3, r3, #3
 800cda4:	f003 0303 	and.w	r3, r3, #3
 800cda8:	4a07      	ldr	r2, [pc, #28]	; (800cdc8 <UART_SetConfig+0x6ac>)
 800cdaa:	fa22 f303 	lsr.w	r3, r2, r3
 800cdae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cdb0:	e01c      	b.n	800cdec <UART_SetConfig+0x6d0>
 800cdb2:	bf00      	nop
 800cdb4:	40011400 	.word	0x40011400
 800cdb8:	58024400 	.word	0x58024400
 800cdbc:	40007800 	.word	0x40007800
 800cdc0:	40007c00 	.word	0x40007c00
 800cdc4:	58000c00 	.word	0x58000c00
 800cdc8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cdcc:	4b9d      	ldr	r3, [pc, #628]	; (800d044 <UART_SetConfig+0x928>)
 800cdce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdd0:	e00c      	b.n	800cdec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cdd2:	4b9d      	ldr	r3, [pc, #628]	; (800d048 <UART_SetConfig+0x92c>)
 800cdd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdd6:	e009      	b.n	800cdec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cdd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdde:	e005      	b.n	800cdec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cde0:	2300      	movs	r3, #0
 800cde2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cde4:	2301      	movs	r3, #1
 800cde6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cdea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cdec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	f000 81de 	beq.w	800d1b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf8:	4a94      	ldr	r2, [pc, #592]	; (800d04c <UART_SetConfig+0x930>)
 800cdfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdfe:	461a      	mov	r2, r3
 800ce00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce02:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce06:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	685a      	ldr	r2, [r3, #4]
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	005b      	lsls	r3, r3, #1
 800ce10:	4413      	add	r3, r2
 800ce12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d305      	bcc.n	800ce24 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d903      	bls.n	800ce2c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ce24:	2301      	movs	r3, #1
 800ce26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ce2a:	e1c1      	b.n	800d1b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce2e:	2200      	movs	r2, #0
 800ce30:	60bb      	str	r3, [r7, #8]
 800ce32:	60fa      	str	r2, [r7, #12]
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce38:	4a84      	ldr	r2, [pc, #528]	; (800d04c <UART_SetConfig+0x930>)
 800ce3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	2200      	movs	r2, #0
 800ce42:	603b      	str	r3, [r7, #0]
 800ce44:	607a      	str	r2, [r7, #4]
 800ce46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ce4e:	f7f3 fa97 	bl	8000380 <__aeabi_uldivmod>
 800ce52:	4602      	mov	r2, r0
 800ce54:	460b      	mov	r3, r1
 800ce56:	4610      	mov	r0, r2
 800ce58:	4619      	mov	r1, r3
 800ce5a:	f04f 0200 	mov.w	r2, #0
 800ce5e:	f04f 0300 	mov.w	r3, #0
 800ce62:	020b      	lsls	r3, r1, #8
 800ce64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ce68:	0202      	lsls	r2, r0, #8
 800ce6a:	6979      	ldr	r1, [r7, #20]
 800ce6c:	6849      	ldr	r1, [r1, #4]
 800ce6e:	0849      	lsrs	r1, r1, #1
 800ce70:	2000      	movs	r0, #0
 800ce72:	460c      	mov	r4, r1
 800ce74:	4605      	mov	r5, r0
 800ce76:	eb12 0804 	adds.w	r8, r2, r4
 800ce7a:	eb43 0905 	adc.w	r9, r3, r5
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	2200      	movs	r2, #0
 800ce84:	469a      	mov	sl, r3
 800ce86:	4693      	mov	fp, r2
 800ce88:	4652      	mov	r2, sl
 800ce8a:	465b      	mov	r3, fp
 800ce8c:	4640      	mov	r0, r8
 800ce8e:	4649      	mov	r1, r9
 800ce90:	f7f3 fa76 	bl	8000380 <__aeabi_uldivmod>
 800ce94:	4602      	mov	r2, r0
 800ce96:	460b      	mov	r3, r1
 800ce98:	4613      	mov	r3, r2
 800ce9a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cea2:	d308      	bcc.n	800ceb6 <UART_SetConfig+0x79a>
 800cea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ceaa:	d204      	bcs.n	800ceb6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ceb2:	60da      	str	r2, [r3, #12]
 800ceb4:	e17c      	b.n	800d1b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cebc:	e178      	b.n	800d1b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	69db      	ldr	r3, [r3, #28]
 800cec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cec6:	f040 80c5 	bne.w	800d054 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ceca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cece:	2b20      	cmp	r3, #32
 800ced0:	dc48      	bgt.n	800cf64 <UART_SetConfig+0x848>
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	db7b      	blt.n	800cfce <UART_SetConfig+0x8b2>
 800ced6:	2b20      	cmp	r3, #32
 800ced8:	d879      	bhi.n	800cfce <UART_SetConfig+0x8b2>
 800ceda:	a201      	add	r2, pc, #4	; (adr r2, 800cee0 <UART_SetConfig+0x7c4>)
 800cedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee0:	0800cf6b 	.word	0x0800cf6b
 800cee4:	0800cf73 	.word	0x0800cf73
 800cee8:	0800cfcf 	.word	0x0800cfcf
 800ceec:	0800cfcf 	.word	0x0800cfcf
 800cef0:	0800cf7b 	.word	0x0800cf7b
 800cef4:	0800cfcf 	.word	0x0800cfcf
 800cef8:	0800cfcf 	.word	0x0800cfcf
 800cefc:	0800cfcf 	.word	0x0800cfcf
 800cf00:	0800cf8b 	.word	0x0800cf8b
 800cf04:	0800cfcf 	.word	0x0800cfcf
 800cf08:	0800cfcf 	.word	0x0800cfcf
 800cf0c:	0800cfcf 	.word	0x0800cfcf
 800cf10:	0800cfcf 	.word	0x0800cfcf
 800cf14:	0800cfcf 	.word	0x0800cfcf
 800cf18:	0800cfcf 	.word	0x0800cfcf
 800cf1c:	0800cfcf 	.word	0x0800cfcf
 800cf20:	0800cf9b 	.word	0x0800cf9b
 800cf24:	0800cfcf 	.word	0x0800cfcf
 800cf28:	0800cfcf 	.word	0x0800cfcf
 800cf2c:	0800cfcf 	.word	0x0800cfcf
 800cf30:	0800cfcf 	.word	0x0800cfcf
 800cf34:	0800cfcf 	.word	0x0800cfcf
 800cf38:	0800cfcf 	.word	0x0800cfcf
 800cf3c:	0800cfcf 	.word	0x0800cfcf
 800cf40:	0800cfcf 	.word	0x0800cfcf
 800cf44:	0800cfcf 	.word	0x0800cfcf
 800cf48:	0800cfcf 	.word	0x0800cfcf
 800cf4c:	0800cfcf 	.word	0x0800cfcf
 800cf50:	0800cfcf 	.word	0x0800cfcf
 800cf54:	0800cfcf 	.word	0x0800cfcf
 800cf58:	0800cfcf 	.word	0x0800cfcf
 800cf5c:	0800cfcf 	.word	0x0800cfcf
 800cf60:	0800cfc1 	.word	0x0800cfc1
 800cf64:	2b40      	cmp	r3, #64	; 0x40
 800cf66:	d02e      	beq.n	800cfc6 <UART_SetConfig+0x8aa>
 800cf68:	e031      	b.n	800cfce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf6a:	f7fa ff99 	bl	8007ea0 <HAL_RCC_GetPCLK1Freq>
 800cf6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf70:	e033      	b.n	800cfda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf72:	f7fa ffab 	bl	8007ecc <HAL_RCC_GetPCLK2Freq>
 800cf76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf78:	e02f      	b.n	800cfda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7fc fbe8 	bl	8009754 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf88:	e027      	b.n	800cfda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf8a:	f107 0318 	add.w	r3, r7, #24
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fc fd34 	bl	80099fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf98:	e01f      	b.n	800cfda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf9a:	4b2d      	ldr	r3, [pc, #180]	; (800d050 <UART_SetConfig+0x934>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f003 0320 	and.w	r3, r3, #32
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d009      	beq.n	800cfba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cfa6:	4b2a      	ldr	r3, [pc, #168]	; (800d050 <UART_SetConfig+0x934>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	08db      	lsrs	r3, r3, #3
 800cfac:	f003 0303 	and.w	r3, r3, #3
 800cfb0:	4a24      	ldr	r2, [pc, #144]	; (800d044 <UART_SetConfig+0x928>)
 800cfb2:	fa22 f303 	lsr.w	r3, r2, r3
 800cfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cfb8:	e00f      	b.n	800cfda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cfba:	4b22      	ldr	r3, [pc, #136]	; (800d044 <UART_SetConfig+0x928>)
 800cfbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfbe:	e00c      	b.n	800cfda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cfc0:	4b21      	ldr	r3, [pc, #132]	; (800d048 <UART_SetConfig+0x92c>)
 800cfc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfc4:	e009      	b.n	800cfda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfcc:	e005      	b.n	800cfda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cfd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cfda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f000 80e7 	beq.w	800d1b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe6:	4a19      	ldr	r2, [pc, #100]	; (800d04c <UART_SetConfig+0x930>)
 800cfe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfec:	461a      	mov	r2, r3
 800cfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cff4:	005a      	lsls	r2, r3, #1
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	085b      	lsrs	r3, r3, #1
 800cffc:	441a      	add	r2, r3
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	fbb2 f3f3 	udiv	r3, r2, r3
 800d006:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00a:	2b0f      	cmp	r3, #15
 800d00c:	d916      	bls.n	800d03c <UART_SetConfig+0x920>
 800d00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d014:	d212      	bcs.n	800d03c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d018:	b29b      	uxth	r3, r3
 800d01a:	f023 030f 	bic.w	r3, r3, #15
 800d01e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d022:	085b      	lsrs	r3, r3, #1
 800d024:	b29b      	uxth	r3, r3
 800d026:	f003 0307 	and.w	r3, r3, #7
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d02e:	4313      	orrs	r3, r2
 800d030:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d038:	60da      	str	r2, [r3, #12]
 800d03a:	e0b9      	b.n	800d1b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d03c:	2301      	movs	r3, #1
 800d03e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d042:	e0b5      	b.n	800d1b0 <UART_SetConfig+0xa94>
 800d044:	03d09000 	.word	0x03d09000
 800d048:	003d0900 	.word	0x003d0900
 800d04c:	080159a0 	.word	0x080159a0
 800d050:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d054:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d058:	2b20      	cmp	r3, #32
 800d05a:	dc49      	bgt.n	800d0f0 <UART_SetConfig+0x9d4>
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	db7c      	blt.n	800d15a <UART_SetConfig+0xa3e>
 800d060:	2b20      	cmp	r3, #32
 800d062:	d87a      	bhi.n	800d15a <UART_SetConfig+0xa3e>
 800d064:	a201      	add	r2, pc, #4	; (adr r2, 800d06c <UART_SetConfig+0x950>)
 800d066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d06a:	bf00      	nop
 800d06c:	0800d0f7 	.word	0x0800d0f7
 800d070:	0800d0ff 	.word	0x0800d0ff
 800d074:	0800d15b 	.word	0x0800d15b
 800d078:	0800d15b 	.word	0x0800d15b
 800d07c:	0800d107 	.word	0x0800d107
 800d080:	0800d15b 	.word	0x0800d15b
 800d084:	0800d15b 	.word	0x0800d15b
 800d088:	0800d15b 	.word	0x0800d15b
 800d08c:	0800d117 	.word	0x0800d117
 800d090:	0800d15b 	.word	0x0800d15b
 800d094:	0800d15b 	.word	0x0800d15b
 800d098:	0800d15b 	.word	0x0800d15b
 800d09c:	0800d15b 	.word	0x0800d15b
 800d0a0:	0800d15b 	.word	0x0800d15b
 800d0a4:	0800d15b 	.word	0x0800d15b
 800d0a8:	0800d15b 	.word	0x0800d15b
 800d0ac:	0800d127 	.word	0x0800d127
 800d0b0:	0800d15b 	.word	0x0800d15b
 800d0b4:	0800d15b 	.word	0x0800d15b
 800d0b8:	0800d15b 	.word	0x0800d15b
 800d0bc:	0800d15b 	.word	0x0800d15b
 800d0c0:	0800d15b 	.word	0x0800d15b
 800d0c4:	0800d15b 	.word	0x0800d15b
 800d0c8:	0800d15b 	.word	0x0800d15b
 800d0cc:	0800d15b 	.word	0x0800d15b
 800d0d0:	0800d15b 	.word	0x0800d15b
 800d0d4:	0800d15b 	.word	0x0800d15b
 800d0d8:	0800d15b 	.word	0x0800d15b
 800d0dc:	0800d15b 	.word	0x0800d15b
 800d0e0:	0800d15b 	.word	0x0800d15b
 800d0e4:	0800d15b 	.word	0x0800d15b
 800d0e8:	0800d15b 	.word	0x0800d15b
 800d0ec:	0800d14d 	.word	0x0800d14d
 800d0f0:	2b40      	cmp	r3, #64	; 0x40
 800d0f2:	d02e      	beq.n	800d152 <UART_SetConfig+0xa36>
 800d0f4:	e031      	b.n	800d15a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0f6:	f7fa fed3 	bl	8007ea0 <HAL_RCC_GetPCLK1Freq>
 800d0fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0fc:	e033      	b.n	800d166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0fe:	f7fa fee5 	bl	8007ecc <HAL_RCC_GetPCLK2Freq>
 800d102:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d104:	e02f      	b.n	800d166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fc fb22 	bl	8009754 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d114:	e027      	b.n	800d166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d116:	f107 0318 	add.w	r3, r7, #24
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7fc fc6e 	bl	80099fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d120:	69fb      	ldr	r3, [r7, #28]
 800d122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d124:	e01f      	b.n	800d166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d126:	4b2d      	ldr	r3, [pc, #180]	; (800d1dc <UART_SetConfig+0xac0>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f003 0320 	and.w	r3, r3, #32
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d009      	beq.n	800d146 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d132:	4b2a      	ldr	r3, [pc, #168]	; (800d1dc <UART_SetConfig+0xac0>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	08db      	lsrs	r3, r3, #3
 800d138:	f003 0303 	and.w	r3, r3, #3
 800d13c:	4a28      	ldr	r2, [pc, #160]	; (800d1e0 <UART_SetConfig+0xac4>)
 800d13e:	fa22 f303 	lsr.w	r3, r2, r3
 800d142:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d144:	e00f      	b.n	800d166 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d146:	4b26      	ldr	r3, [pc, #152]	; (800d1e0 <UART_SetConfig+0xac4>)
 800d148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d14a:	e00c      	b.n	800d166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d14c:	4b25      	ldr	r3, [pc, #148]	; (800d1e4 <UART_SetConfig+0xac8>)
 800d14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d150:	e009      	b.n	800d166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d158:	e005      	b.n	800d166 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d15a:	2300      	movs	r3, #0
 800d15c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d164:	bf00      	nop
    }

    if (pclk != 0U)
 800d166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d021      	beq.n	800d1b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d170:	4a1d      	ldr	r2, [pc, #116]	; (800d1e8 <UART_SetConfig+0xacc>)
 800d172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d176:	461a      	mov	r2, r3
 800d178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d17a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	085b      	lsrs	r3, r3, #1
 800d184:	441a      	add	r2, r3
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d18e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d192:	2b0f      	cmp	r3, #15
 800d194:	d909      	bls.n	800d1aa <UART_SetConfig+0xa8e>
 800d196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d19c:	d205      	bcs.n	800d1aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	60da      	str	r2, [r3, #12]
 800d1a8:	e002      	b.n	800d1b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d1cc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3748      	adds	r7, #72	; 0x48
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d1da:	bf00      	nop
 800d1dc:	58024400 	.word	0x58024400
 800d1e0:	03d09000 	.word	0x03d09000
 800d1e4:	003d0900 	.word	0x003d0900
 800d1e8:	080159a0 	.word	0x080159a0

0800d1ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1f8:	f003 0301 	and.w	r3, r3, #1
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d00a      	beq.n	800d216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	430a      	orrs	r2, r1
 800d214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d21a:	f003 0302 	and.w	r3, r3, #2
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d00a      	beq.n	800d238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	430a      	orrs	r2, r1
 800d236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d23c:	f003 0304 	and.w	r3, r3, #4
 800d240:	2b00      	cmp	r3, #0
 800d242:	d00a      	beq.n	800d25a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	430a      	orrs	r2, r1
 800d258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d25e:	f003 0308 	and.w	r3, r3, #8
 800d262:	2b00      	cmp	r3, #0
 800d264:	d00a      	beq.n	800d27c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	430a      	orrs	r2, r1
 800d27a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d280:	f003 0310 	and.w	r3, r3, #16
 800d284:	2b00      	cmp	r3, #0
 800d286:	d00a      	beq.n	800d29e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	689b      	ldr	r3, [r3, #8]
 800d28e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	430a      	orrs	r2, r1
 800d29c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2a2:	f003 0320 	and.w	r3, r3, #32
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d00a      	beq.n	800d2c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	689b      	ldr	r3, [r3, #8]
 800d2b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	430a      	orrs	r2, r1
 800d2be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d01a      	beq.n	800d302 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	430a      	orrs	r2, r1
 800d2e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2ea:	d10a      	bne.n	800d302 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	430a      	orrs	r2, r1
 800d300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00a      	beq.n	800d324 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	430a      	orrs	r2, r1
 800d322:	605a      	str	r2, [r3, #4]
  }
}
 800d324:	bf00      	nop
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b086      	sub	sp, #24
 800d334:	af02      	add	r7, sp, #8
 800d336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2200      	movs	r2, #0
 800d33c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d340:	f7f6 fd7e 	bl	8003e40 <HAL_GetTick>
 800d344:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f003 0308 	and.w	r3, r3, #8
 800d350:	2b08      	cmp	r3, #8
 800d352:	d10e      	bne.n	800d372 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d358:	9300      	str	r3, [sp, #0]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2200      	movs	r2, #0
 800d35e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 f82f 	bl	800d3c6 <UART_WaitOnFlagUntilTimeout>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d001      	beq.n	800d372 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d36e:	2303      	movs	r3, #3
 800d370:	e025      	b.n	800d3be <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f003 0304 	and.w	r3, r3, #4
 800d37c:	2b04      	cmp	r3, #4
 800d37e:	d10e      	bne.n	800d39e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2200      	movs	r2, #0
 800d38a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 f819 	bl	800d3c6 <UART_WaitOnFlagUntilTimeout>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d001      	beq.n	800d39e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d39a:	2303      	movs	r3, #3
 800d39c:	e00f      	b.n	800d3be <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2220      	movs	r2, #32
 800d3a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2220      	movs	r2, #32
 800d3aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d3bc:	2300      	movs	r3, #0
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3710      	adds	r7, #16
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}

0800d3c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d3c6:	b580      	push	{r7, lr}
 800d3c8:	b09c      	sub	sp, #112	; 0x70
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	60f8      	str	r0, [r7, #12]
 800d3ce:	60b9      	str	r1, [r7, #8]
 800d3d0:	603b      	str	r3, [r7, #0]
 800d3d2:	4613      	mov	r3, r2
 800d3d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3d6:	e0a9      	b.n	800d52c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3de:	f000 80a5 	beq.w	800d52c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3e2:	f7f6 fd2d 	bl	8003e40 <HAL_GetTick>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	1ad3      	subs	r3, r2, r3
 800d3ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d302      	bcc.n	800d3f8 <UART_WaitOnFlagUntilTimeout+0x32>
 800d3f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d140      	bne.n	800d47a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d400:	e853 3f00 	ldrex	r3, [r3]
 800d404:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d408:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d40c:	667b      	str	r3, [r7, #100]	; 0x64
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	461a      	mov	r2, r3
 800d414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d416:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d418:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d41c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d41e:	e841 2300 	strex	r3, r2, [r1]
 800d422:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d426:	2b00      	cmp	r3, #0
 800d428:	d1e6      	bne.n	800d3f8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	3308      	adds	r3, #8
 800d430:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d434:	e853 3f00 	ldrex	r3, [r3]
 800d438:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43c:	f023 0301 	bic.w	r3, r3, #1
 800d440:	663b      	str	r3, [r7, #96]	; 0x60
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	3308      	adds	r3, #8
 800d448:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d44a:	64ba      	str	r2, [r7, #72]	; 0x48
 800d44c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d44e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d452:	e841 2300 	strex	r3, r2, [r1]
 800d456:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d1e5      	bne.n	800d42a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2220      	movs	r2, #32
 800d462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2220      	movs	r2, #32
 800d46a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2200      	movs	r2, #0
 800d472:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d476:	2303      	movs	r3, #3
 800d478:	e069      	b.n	800d54e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f003 0304 	and.w	r3, r3, #4
 800d484:	2b00      	cmp	r3, #0
 800d486:	d051      	beq.n	800d52c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	69db      	ldr	r3, [r3, #28]
 800d48e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d496:	d149      	bne.n	800d52c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d4a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4aa:	e853 3f00 	ldrex	r3, [r3]
 800d4ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d4b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	461a      	mov	r2, r3
 800d4be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4c0:	637b      	str	r3, [r7, #52]	; 0x34
 800d4c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4c8:	e841 2300 	strex	r3, r2, [r1]
 800d4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1e6      	bne.n	800d4a2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	3308      	adds	r3, #8
 800d4da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	e853 3f00 	ldrex	r3, [r3]
 800d4e2:	613b      	str	r3, [r7, #16]
   return(result);
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	f023 0301 	bic.w	r3, r3, #1
 800d4ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	3308      	adds	r3, #8
 800d4f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d4f4:	623a      	str	r2, [r7, #32]
 800d4f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f8:	69f9      	ldr	r1, [r7, #28]
 800d4fa:	6a3a      	ldr	r2, [r7, #32]
 800d4fc:	e841 2300 	strex	r3, r2, [r1]
 800d500:	61bb      	str	r3, [r7, #24]
   return(result);
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d1e5      	bne.n	800d4d4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2220      	movs	r2, #32
 800d50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2220      	movs	r2, #32
 800d514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2220      	movs	r2, #32
 800d51c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2200      	movs	r2, #0
 800d524:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d528:	2303      	movs	r3, #3
 800d52a:	e010      	b.n	800d54e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	69da      	ldr	r2, [r3, #28]
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	4013      	ands	r3, r2
 800d536:	68ba      	ldr	r2, [r7, #8]
 800d538:	429a      	cmp	r2, r3
 800d53a:	bf0c      	ite	eq
 800d53c:	2301      	moveq	r3, #1
 800d53e:	2300      	movne	r3, #0
 800d540:	b2db      	uxtb	r3, r3
 800d542:	461a      	mov	r2, r3
 800d544:	79fb      	ldrb	r3, [r7, #7]
 800d546:	429a      	cmp	r2, r3
 800d548:	f43f af46 	beq.w	800d3d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d54c:	2300      	movs	r3, #0
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3770      	adds	r7, #112	; 0x70
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}

0800d556 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d556:	b480      	push	{r7}
 800d558:	b085      	sub	sp, #20
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d564:	2b01      	cmp	r3, #1
 800d566:	d101      	bne.n	800d56c <HAL_UARTEx_DisableFifoMode+0x16>
 800d568:	2302      	movs	r3, #2
 800d56a:	e027      	b.n	800d5bc <HAL_UARTEx_DisableFifoMode+0x66>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2201      	movs	r2, #1
 800d570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2224      	movs	r2, #36	; 0x24
 800d578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f022 0201 	bic.w	r2, r2, #1
 800d592:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d59a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	68fa      	ldr	r2, [r7, #12]
 800d5a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2220      	movs	r2, #32
 800d5ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d5ba:	2300      	movs	r3, #0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3714      	adds	r7, #20
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d101      	bne.n	800d5e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d5dc:	2302      	movs	r3, #2
 800d5de:	e02d      	b.n	800d63c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2224      	movs	r2, #36	; 0x24
 800d5ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f022 0201 	bic.w	r2, r2, #1
 800d606:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	683a      	ldr	r2, [r7, #0]
 800d618:	430a      	orrs	r2, r1
 800d61a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 f84f 	bl	800d6c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	68fa      	ldr	r2, [r7, #12]
 800d628:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2220      	movs	r2, #32
 800d62e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2200      	movs	r2, #0
 800d636:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d63a:	2300      	movs	r3, #0
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3710      	adds	r7, #16
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d654:	2b01      	cmp	r3, #1
 800d656:	d101      	bne.n	800d65c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d658:	2302      	movs	r3, #2
 800d65a:	e02d      	b.n	800d6b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2201      	movs	r2, #1
 800d660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2224      	movs	r2, #36	; 0x24
 800d668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f022 0201 	bic.w	r2, r2, #1
 800d682:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	689b      	ldr	r3, [r3, #8]
 800d68a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	683a      	ldr	r2, [r7, #0]
 800d694:	430a      	orrs	r2, r1
 800d696:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f000 f811 	bl	800d6c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	68fa      	ldr	r2, [r7, #12]
 800d6a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2220      	movs	r2, #32
 800d6aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d6b6:	2300      	movs	r3, #0
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3710      	adds	r7, #16
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d108      	bne.n	800d6e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d6e0:	e031      	b.n	800d746 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d6e2:	2310      	movs	r3, #16
 800d6e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d6e6:	2310      	movs	r3, #16
 800d6e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	689b      	ldr	r3, [r3, #8]
 800d6f0:	0e5b      	lsrs	r3, r3, #25
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	f003 0307 	and.w	r3, r3, #7
 800d6f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	689b      	ldr	r3, [r3, #8]
 800d700:	0f5b      	lsrs	r3, r3, #29
 800d702:	b2db      	uxtb	r3, r3
 800d704:	f003 0307 	and.w	r3, r3, #7
 800d708:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d70a:	7bbb      	ldrb	r3, [r7, #14]
 800d70c:	7b3a      	ldrb	r2, [r7, #12]
 800d70e:	4911      	ldr	r1, [pc, #68]	; (800d754 <UARTEx_SetNbDataToProcess+0x94>)
 800d710:	5c8a      	ldrb	r2, [r1, r2]
 800d712:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d716:	7b3a      	ldrb	r2, [r7, #12]
 800d718:	490f      	ldr	r1, [pc, #60]	; (800d758 <UARTEx_SetNbDataToProcess+0x98>)
 800d71a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d71c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d720:	b29a      	uxth	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d728:	7bfb      	ldrb	r3, [r7, #15]
 800d72a:	7b7a      	ldrb	r2, [r7, #13]
 800d72c:	4909      	ldr	r1, [pc, #36]	; (800d754 <UARTEx_SetNbDataToProcess+0x94>)
 800d72e:	5c8a      	ldrb	r2, [r1, r2]
 800d730:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d734:	7b7a      	ldrb	r2, [r7, #13]
 800d736:	4908      	ldr	r1, [pc, #32]	; (800d758 <UARTEx_SetNbDataToProcess+0x98>)
 800d738:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d73a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d73e:	b29a      	uxth	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d746:	bf00      	nop
 800d748:	3714      	adds	r7, #20
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr
 800d752:	bf00      	nop
 800d754:	080159b8 	.word	0x080159b8
 800d758:	080159c0 	.word	0x080159c0

0800d75c <__errno>:
 800d75c:	4b01      	ldr	r3, [pc, #4]	; (800d764 <__errno+0x8>)
 800d75e:	6818      	ldr	r0, [r3, #0]
 800d760:	4770      	bx	lr
 800d762:	bf00      	nop
 800d764:	240000a4 	.word	0x240000a4

0800d768 <__libc_init_array>:
 800d768:	b570      	push	{r4, r5, r6, lr}
 800d76a:	4d0d      	ldr	r5, [pc, #52]	; (800d7a0 <__libc_init_array+0x38>)
 800d76c:	4c0d      	ldr	r4, [pc, #52]	; (800d7a4 <__libc_init_array+0x3c>)
 800d76e:	1b64      	subs	r4, r4, r5
 800d770:	10a4      	asrs	r4, r4, #2
 800d772:	2600      	movs	r6, #0
 800d774:	42a6      	cmp	r6, r4
 800d776:	d109      	bne.n	800d78c <__libc_init_array+0x24>
 800d778:	4d0b      	ldr	r5, [pc, #44]	; (800d7a8 <__libc_init_array+0x40>)
 800d77a:	4c0c      	ldr	r4, [pc, #48]	; (800d7ac <__libc_init_array+0x44>)
 800d77c:	f001 f98a 	bl	800ea94 <_init>
 800d780:	1b64      	subs	r4, r4, r5
 800d782:	10a4      	asrs	r4, r4, #2
 800d784:	2600      	movs	r6, #0
 800d786:	42a6      	cmp	r6, r4
 800d788:	d105      	bne.n	800d796 <__libc_init_array+0x2e>
 800d78a:	bd70      	pop	{r4, r5, r6, pc}
 800d78c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d790:	4798      	blx	r3
 800d792:	3601      	adds	r6, #1
 800d794:	e7ee      	b.n	800d774 <__libc_init_array+0xc>
 800d796:	f855 3b04 	ldr.w	r3, [r5], #4
 800d79a:	4798      	blx	r3
 800d79c:	3601      	adds	r6, #1
 800d79e:	e7f2      	b.n	800d786 <__libc_init_array+0x1e>
 800d7a0:	08015a68 	.word	0x08015a68
 800d7a4:	08015a68 	.word	0x08015a68
 800d7a8:	08015a68 	.word	0x08015a68
 800d7ac:	08015a6c 	.word	0x08015a6c

0800d7b0 <memset>:
 800d7b0:	4402      	add	r2, r0
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d100      	bne.n	800d7ba <memset+0xa>
 800d7b8:	4770      	bx	lr
 800d7ba:	f803 1b01 	strb.w	r1, [r3], #1
 800d7be:	e7f9      	b.n	800d7b4 <memset+0x4>

0800d7c0 <iprintf>:
 800d7c0:	b40f      	push	{r0, r1, r2, r3}
 800d7c2:	4b0a      	ldr	r3, [pc, #40]	; (800d7ec <iprintf+0x2c>)
 800d7c4:	b513      	push	{r0, r1, r4, lr}
 800d7c6:	681c      	ldr	r4, [r3, #0]
 800d7c8:	b124      	cbz	r4, 800d7d4 <iprintf+0x14>
 800d7ca:	69a3      	ldr	r3, [r4, #24]
 800d7cc:	b913      	cbnz	r3, 800d7d4 <iprintf+0x14>
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	f000 f886 	bl	800d8e0 <__sinit>
 800d7d4:	ab05      	add	r3, sp, #20
 800d7d6:	9a04      	ldr	r2, [sp, #16]
 800d7d8:	68a1      	ldr	r1, [r4, #8]
 800d7da:	9301      	str	r3, [sp, #4]
 800d7dc:	4620      	mov	r0, r4
 800d7de:	f000 fb39 	bl	800de54 <_vfiprintf_r>
 800d7e2:	b002      	add	sp, #8
 800d7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7e8:	b004      	add	sp, #16
 800d7ea:	4770      	bx	lr
 800d7ec:	240000a4 	.word	0x240000a4

0800d7f0 <siprintf>:
 800d7f0:	b40e      	push	{r1, r2, r3}
 800d7f2:	b500      	push	{lr}
 800d7f4:	b09c      	sub	sp, #112	; 0x70
 800d7f6:	ab1d      	add	r3, sp, #116	; 0x74
 800d7f8:	9002      	str	r0, [sp, #8]
 800d7fa:	9006      	str	r0, [sp, #24]
 800d7fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d800:	4809      	ldr	r0, [pc, #36]	; (800d828 <siprintf+0x38>)
 800d802:	9107      	str	r1, [sp, #28]
 800d804:	9104      	str	r1, [sp, #16]
 800d806:	4909      	ldr	r1, [pc, #36]	; (800d82c <siprintf+0x3c>)
 800d808:	f853 2b04 	ldr.w	r2, [r3], #4
 800d80c:	9105      	str	r1, [sp, #20]
 800d80e:	6800      	ldr	r0, [r0, #0]
 800d810:	9301      	str	r3, [sp, #4]
 800d812:	a902      	add	r1, sp, #8
 800d814:	f000 f9f4 	bl	800dc00 <_svfiprintf_r>
 800d818:	9b02      	ldr	r3, [sp, #8]
 800d81a:	2200      	movs	r2, #0
 800d81c:	701a      	strb	r2, [r3, #0]
 800d81e:	b01c      	add	sp, #112	; 0x70
 800d820:	f85d eb04 	ldr.w	lr, [sp], #4
 800d824:	b003      	add	sp, #12
 800d826:	4770      	bx	lr
 800d828:	240000a4 	.word	0x240000a4
 800d82c:	ffff0208 	.word	0xffff0208

0800d830 <std>:
 800d830:	2300      	movs	r3, #0
 800d832:	b510      	push	{r4, lr}
 800d834:	4604      	mov	r4, r0
 800d836:	e9c0 3300 	strd	r3, r3, [r0]
 800d83a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d83e:	6083      	str	r3, [r0, #8]
 800d840:	8181      	strh	r1, [r0, #12]
 800d842:	6643      	str	r3, [r0, #100]	; 0x64
 800d844:	81c2      	strh	r2, [r0, #14]
 800d846:	6183      	str	r3, [r0, #24]
 800d848:	4619      	mov	r1, r3
 800d84a:	2208      	movs	r2, #8
 800d84c:	305c      	adds	r0, #92	; 0x5c
 800d84e:	f7ff ffaf 	bl	800d7b0 <memset>
 800d852:	4b05      	ldr	r3, [pc, #20]	; (800d868 <std+0x38>)
 800d854:	6263      	str	r3, [r4, #36]	; 0x24
 800d856:	4b05      	ldr	r3, [pc, #20]	; (800d86c <std+0x3c>)
 800d858:	62a3      	str	r3, [r4, #40]	; 0x28
 800d85a:	4b05      	ldr	r3, [pc, #20]	; (800d870 <std+0x40>)
 800d85c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d85e:	4b05      	ldr	r3, [pc, #20]	; (800d874 <std+0x44>)
 800d860:	6224      	str	r4, [r4, #32]
 800d862:	6323      	str	r3, [r4, #48]	; 0x30
 800d864:	bd10      	pop	{r4, pc}
 800d866:	bf00      	nop
 800d868:	0800e3fd 	.word	0x0800e3fd
 800d86c:	0800e41f 	.word	0x0800e41f
 800d870:	0800e457 	.word	0x0800e457
 800d874:	0800e47b 	.word	0x0800e47b

0800d878 <_cleanup_r>:
 800d878:	4901      	ldr	r1, [pc, #4]	; (800d880 <_cleanup_r+0x8>)
 800d87a:	f000 b8af 	b.w	800d9dc <_fwalk_reent>
 800d87e:	bf00      	nop
 800d880:	0800e755 	.word	0x0800e755

0800d884 <__sfmoreglue>:
 800d884:	b570      	push	{r4, r5, r6, lr}
 800d886:	2268      	movs	r2, #104	; 0x68
 800d888:	1e4d      	subs	r5, r1, #1
 800d88a:	4355      	muls	r5, r2
 800d88c:	460e      	mov	r6, r1
 800d88e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d892:	f000 f8e5 	bl	800da60 <_malloc_r>
 800d896:	4604      	mov	r4, r0
 800d898:	b140      	cbz	r0, 800d8ac <__sfmoreglue+0x28>
 800d89a:	2100      	movs	r1, #0
 800d89c:	e9c0 1600 	strd	r1, r6, [r0]
 800d8a0:	300c      	adds	r0, #12
 800d8a2:	60a0      	str	r0, [r4, #8]
 800d8a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d8a8:	f7ff ff82 	bl	800d7b0 <memset>
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	bd70      	pop	{r4, r5, r6, pc}

0800d8b0 <__sfp_lock_acquire>:
 800d8b0:	4801      	ldr	r0, [pc, #4]	; (800d8b8 <__sfp_lock_acquire+0x8>)
 800d8b2:	f000 b8b3 	b.w	800da1c <__retarget_lock_acquire_recursive>
 800d8b6:	bf00      	nop
 800d8b8:	24000dad 	.word	0x24000dad

0800d8bc <__sfp_lock_release>:
 800d8bc:	4801      	ldr	r0, [pc, #4]	; (800d8c4 <__sfp_lock_release+0x8>)
 800d8be:	f000 b8ae 	b.w	800da1e <__retarget_lock_release_recursive>
 800d8c2:	bf00      	nop
 800d8c4:	24000dad 	.word	0x24000dad

0800d8c8 <__sinit_lock_acquire>:
 800d8c8:	4801      	ldr	r0, [pc, #4]	; (800d8d0 <__sinit_lock_acquire+0x8>)
 800d8ca:	f000 b8a7 	b.w	800da1c <__retarget_lock_acquire_recursive>
 800d8ce:	bf00      	nop
 800d8d0:	24000dae 	.word	0x24000dae

0800d8d4 <__sinit_lock_release>:
 800d8d4:	4801      	ldr	r0, [pc, #4]	; (800d8dc <__sinit_lock_release+0x8>)
 800d8d6:	f000 b8a2 	b.w	800da1e <__retarget_lock_release_recursive>
 800d8da:	bf00      	nop
 800d8dc:	24000dae 	.word	0x24000dae

0800d8e0 <__sinit>:
 800d8e0:	b510      	push	{r4, lr}
 800d8e2:	4604      	mov	r4, r0
 800d8e4:	f7ff fff0 	bl	800d8c8 <__sinit_lock_acquire>
 800d8e8:	69a3      	ldr	r3, [r4, #24]
 800d8ea:	b11b      	cbz	r3, 800d8f4 <__sinit+0x14>
 800d8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8f0:	f7ff bff0 	b.w	800d8d4 <__sinit_lock_release>
 800d8f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d8f8:	6523      	str	r3, [r4, #80]	; 0x50
 800d8fa:	4b13      	ldr	r3, [pc, #76]	; (800d948 <__sinit+0x68>)
 800d8fc:	4a13      	ldr	r2, [pc, #76]	; (800d94c <__sinit+0x6c>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	62a2      	str	r2, [r4, #40]	; 0x28
 800d902:	42a3      	cmp	r3, r4
 800d904:	bf04      	itt	eq
 800d906:	2301      	moveq	r3, #1
 800d908:	61a3      	streq	r3, [r4, #24]
 800d90a:	4620      	mov	r0, r4
 800d90c:	f000 f820 	bl	800d950 <__sfp>
 800d910:	6060      	str	r0, [r4, #4]
 800d912:	4620      	mov	r0, r4
 800d914:	f000 f81c 	bl	800d950 <__sfp>
 800d918:	60a0      	str	r0, [r4, #8]
 800d91a:	4620      	mov	r0, r4
 800d91c:	f000 f818 	bl	800d950 <__sfp>
 800d920:	2200      	movs	r2, #0
 800d922:	60e0      	str	r0, [r4, #12]
 800d924:	2104      	movs	r1, #4
 800d926:	6860      	ldr	r0, [r4, #4]
 800d928:	f7ff ff82 	bl	800d830 <std>
 800d92c:	68a0      	ldr	r0, [r4, #8]
 800d92e:	2201      	movs	r2, #1
 800d930:	2109      	movs	r1, #9
 800d932:	f7ff ff7d 	bl	800d830 <std>
 800d936:	68e0      	ldr	r0, [r4, #12]
 800d938:	2202      	movs	r2, #2
 800d93a:	2112      	movs	r1, #18
 800d93c:	f7ff ff78 	bl	800d830 <std>
 800d940:	2301      	movs	r3, #1
 800d942:	61a3      	str	r3, [r4, #24]
 800d944:	e7d2      	b.n	800d8ec <__sinit+0xc>
 800d946:	bf00      	nop
 800d948:	080159c8 	.word	0x080159c8
 800d94c:	0800d879 	.word	0x0800d879

0800d950 <__sfp>:
 800d950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d952:	4607      	mov	r7, r0
 800d954:	f7ff ffac 	bl	800d8b0 <__sfp_lock_acquire>
 800d958:	4b1e      	ldr	r3, [pc, #120]	; (800d9d4 <__sfp+0x84>)
 800d95a:	681e      	ldr	r6, [r3, #0]
 800d95c:	69b3      	ldr	r3, [r6, #24]
 800d95e:	b913      	cbnz	r3, 800d966 <__sfp+0x16>
 800d960:	4630      	mov	r0, r6
 800d962:	f7ff ffbd 	bl	800d8e0 <__sinit>
 800d966:	3648      	adds	r6, #72	; 0x48
 800d968:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d96c:	3b01      	subs	r3, #1
 800d96e:	d503      	bpl.n	800d978 <__sfp+0x28>
 800d970:	6833      	ldr	r3, [r6, #0]
 800d972:	b30b      	cbz	r3, 800d9b8 <__sfp+0x68>
 800d974:	6836      	ldr	r6, [r6, #0]
 800d976:	e7f7      	b.n	800d968 <__sfp+0x18>
 800d978:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d97c:	b9d5      	cbnz	r5, 800d9b4 <__sfp+0x64>
 800d97e:	4b16      	ldr	r3, [pc, #88]	; (800d9d8 <__sfp+0x88>)
 800d980:	60e3      	str	r3, [r4, #12]
 800d982:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d986:	6665      	str	r5, [r4, #100]	; 0x64
 800d988:	f000 f847 	bl	800da1a <__retarget_lock_init_recursive>
 800d98c:	f7ff ff96 	bl	800d8bc <__sfp_lock_release>
 800d990:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d994:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d998:	6025      	str	r5, [r4, #0]
 800d99a:	61a5      	str	r5, [r4, #24]
 800d99c:	2208      	movs	r2, #8
 800d99e:	4629      	mov	r1, r5
 800d9a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d9a4:	f7ff ff04 	bl	800d7b0 <memset>
 800d9a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d9ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9b4:	3468      	adds	r4, #104	; 0x68
 800d9b6:	e7d9      	b.n	800d96c <__sfp+0x1c>
 800d9b8:	2104      	movs	r1, #4
 800d9ba:	4638      	mov	r0, r7
 800d9bc:	f7ff ff62 	bl	800d884 <__sfmoreglue>
 800d9c0:	4604      	mov	r4, r0
 800d9c2:	6030      	str	r0, [r6, #0]
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	d1d5      	bne.n	800d974 <__sfp+0x24>
 800d9c8:	f7ff ff78 	bl	800d8bc <__sfp_lock_release>
 800d9cc:	230c      	movs	r3, #12
 800d9ce:	603b      	str	r3, [r7, #0]
 800d9d0:	e7ee      	b.n	800d9b0 <__sfp+0x60>
 800d9d2:	bf00      	nop
 800d9d4:	080159c8 	.word	0x080159c8
 800d9d8:	ffff0001 	.word	0xffff0001

0800d9dc <_fwalk_reent>:
 800d9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9e0:	4606      	mov	r6, r0
 800d9e2:	4688      	mov	r8, r1
 800d9e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d9e8:	2700      	movs	r7, #0
 800d9ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9ee:	f1b9 0901 	subs.w	r9, r9, #1
 800d9f2:	d505      	bpl.n	800da00 <_fwalk_reent+0x24>
 800d9f4:	6824      	ldr	r4, [r4, #0]
 800d9f6:	2c00      	cmp	r4, #0
 800d9f8:	d1f7      	bne.n	800d9ea <_fwalk_reent+0xe>
 800d9fa:	4638      	mov	r0, r7
 800d9fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da00:	89ab      	ldrh	r3, [r5, #12]
 800da02:	2b01      	cmp	r3, #1
 800da04:	d907      	bls.n	800da16 <_fwalk_reent+0x3a>
 800da06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da0a:	3301      	adds	r3, #1
 800da0c:	d003      	beq.n	800da16 <_fwalk_reent+0x3a>
 800da0e:	4629      	mov	r1, r5
 800da10:	4630      	mov	r0, r6
 800da12:	47c0      	blx	r8
 800da14:	4307      	orrs	r7, r0
 800da16:	3568      	adds	r5, #104	; 0x68
 800da18:	e7e9      	b.n	800d9ee <_fwalk_reent+0x12>

0800da1a <__retarget_lock_init_recursive>:
 800da1a:	4770      	bx	lr

0800da1c <__retarget_lock_acquire_recursive>:
 800da1c:	4770      	bx	lr

0800da1e <__retarget_lock_release_recursive>:
 800da1e:	4770      	bx	lr

0800da20 <sbrk_aligned>:
 800da20:	b570      	push	{r4, r5, r6, lr}
 800da22:	4e0e      	ldr	r6, [pc, #56]	; (800da5c <sbrk_aligned+0x3c>)
 800da24:	460c      	mov	r4, r1
 800da26:	6831      	ldr	r1, [r6, #0]
 800da28:	4605      	mov	r5, r0
 800da2a:	b911      	cbnz	r1, 800da32 <sbrk_aligned+0x12>
 800da2c:	f000 fcd6 	bl	800e3dc <_sbrk_r>
 800da30:	6030      	str	r0, [r6, #0]
 800da32:	4621      	mov	r1, r4
 800da34:	4628      	mov	r0, r5
 800da36:	f000 fcd1 	bl	800e3dc <_sbrk_r>
 800da3a:	1c43      	adds	r3, r0, #1
 800da3c:	d00a      	beq.n	800da54 <sbrk_aligned+0x34>
 800da3e:	1cc4      	adds	r4, r0, #3
 800da40:	f024 0403 	bic.w	r4, r4, #3
 800da44:	42a0      	cmp	r0, r4
 800da46:	d007      	beq.n	800da58 <sbrk_aligned+0x38>
 800da48:	1a21      	subs	r1, r4, r0
 800da4a:	4628      	mov	r0, r5
 800da4c:	f000 fcc6 	bl	800e3dc <_sbrk_r>
 800da50:	3001      	adds	r0, #1
 800da52:	d101      	bne.n	800da58 <sbrk_aligned+0x38>
 800da54:	f04f 34ff 	mov.w	r4, #4294967295
 800da58:	4620      	mov	r0, r4
 800da5a:	bd70      	pop	{r4, r5, r6, pc}
 800da5c:	24000db4 	.word	0x24000db4

0800da60 <_malloc_r>:
 800da60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da64:	1ccd      	adds	r5, r1, #3
 800da66:	f025 0503 	bic.w	r5, r5, #3
 800da6a:	3508      	adds	r5, #8
 800da6c:	2d0c      	cmp	r5, #12
 800da6e:	bf38      	it	cc
 800da70:	250c      	movcc	r5, #12
 800da72:	2d00      	cmp	r5, #0
 800da74:	4607      	mov	r7, r0
 800da76:	db01      	blt.n	800da7c <_malloc_r+0x1c>
 800da78:	42a9      	cmp	r1, r5
 800da7a:	d905      	bls.n	800da88 <_malloc_r+0x28>
 800da7c:	230c      	movs	r3, #12
 800da7e:	603b      	str	r3, [r7, #0]
 800da80:	2600      	movs	r6, #0
 800da82:	4630      	mov	r0, r6
 800da84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da88:	4e2e      	ldr	r6, [pc, #184]	; (800db44 <_malloc_r+0xe4>)
 800da8a:	f000 ff3f 	bl	800e90c <__malloc_lock>
 800da8e:	6833      	ldr	r3, [r6, #0]
 800da90:	461c      	mov	r4, r3
 800da92:	bb34      	cbnz	r4, 800dae2 <_malloc_r+0x82>
 800da94:	4629      	mov	r1, r5
 800da96:	4638      	mov	r0, r7
 800da98:	f7ff ffc2 	bl	800da20 <sbrk_aligned>
 800da9c:	1c43      	adds	r3, r0, #1
 800da9e:	4604      	mov	r4, r0
 800daa0:	d14d      	bne.n	800db3e <_malloc_r+0xde>
 800daa2:	6834      	ldr	r4, [r6, #0]
 800daa4:	4626      	mov	r6, r4
 800daa6:	2e00      	cmp	r6, #0
 800daa8:	d140      	bne.n	800db2c <_malloc_r+0xcc>
 800daaa:	6823      	ldr	r3, [r4, #0]
 800daac:	4631      	mov	r1, r6
 800daae:	4638      	mov	r0, r7
 800dab0:	eb04 0803 	add.w	r8, r4, r3
 800dab4:	f000 fc92 	bl	800e3dc <_sbrk_r>
 800dab8:	4580      	cmp	r8, r0
 800daba:	d13a      	bne.n	800db32 <_malloc_r+0xd2>
 800dabc:	6821      	ldr	r1, [r4, #0]
 800dabe:	3503      	adds	r5, #3
 800dac0:	1a6d      	subs	r5, r5, r1
 800dac2:	f025 0503 	bic.w	r5, r5, #3
 800dac6:	3508      	adds	r5, #8
 800dac8:	2d0c      	cmp	r5, #12
 800daca:	bf38      	it	cc
 800dacc:	250c      	movcc	r5, #12
 800dace:	4629      	mov	r1, r5
 800dad0:	4638      	mov	r0, r7
 800dad2:	f7ff ffa5 	bl	800da20 <sbrk_aligned>
 800dad6:	3001      	adds	r0, #1
 800dad8:	d02b      	beq.n	800db32 <_malloc_r+0xd2>
 800dada:	6823      	ldr	r3, [r4, #0]
 800dadc:	442b      	add	r3, r5
 800dade:	6023      	str	r3, [r4, #0]
 800dae0:	e00e      	b.n	800db00 <_malloc_r+0xa0>
 800dae2:	6822      	ldr	r2, [r4, #0]
 800dae4:	1b52      	subs	r2, r2, r5
 800dae6:	d41e      	bmi.n	800db26 <_malloc_r+0xc6>
 800dae8:	2a0b      	cmp	r2, #11
 800daea:	d916      	bls.n	800db1a <_malloc_r+0xba>
 800daec:	1961      	adds	r1, r4, r5
 800daee:	42a3      	cmp	r3, r4
 800daf0:	6025      	str	r5, [r4, #0]
 800daf2:	bf18      	it	ne
 800daf4:	6059      	strne	r1, [r3, #4]
 800daf6:	6863      	ldr	r3, [r4, #4]
 800daf8:	bf08      	it	eq
 800dafa:	6031      	streq	r1, [r6, #0]
 800dafc:	5162      	str	r2, [r4, r5]
 800dafe:	604b      	str	r3, [r1, #4]
 800db00:	4638      	mov	r0, r7
 800db02:	f104 060b 	add.w	r6, r4, #11
 800db06:	f000 ff07 	bl	800e918 <__malloc_unlock>
 800db0a:	f026 0607 	bic.w	r6, r6, #7
 800db0e:	1d23      	adds	r3, r4, #4
 800db10:	1af2      	subs	r2, r6, r3
 800db12:	d0b6      	beq.n	800da82 <_malloc_r+0x22>
 800db14:	1b9b      	subs	r3, r3, r6
 800db16:	50a3      	str	r3, [r4, r2]
 800db18:	e7b3      	b.n	800da82 <_malloc_r+0x22>
 800db1a:	6862      	ldr	r2, [r4, #4]
 800db1c:	42a3      	cmp	r3, r4
 800db1e:	bf0c      	ite	eq
 800db20:	6032      	streq	r2, [r6, #0]
 800db22:	605a      	strne	r2, [r3, #4]
 800db24:	e7ec      	b.n	800db00 <_malloc_r+0xa0>
 800db26:	4623      	mov	r3, r4
 800db28:	6864      	ldr	r4, [r4, #4]
 800db2a:	e7b2      	b.n	800da92 <_malloc_r+0x32>
 800db2c:	4634      	mov	r4, r6
 800db2e:	6876      	ldr	r6, [r6, #4]
 800db30:	e7b9      	b.n	800daa6 <_malloc_r+0x46>
 800db32:	230c      	movs	r3, #12
 800db34:	603b      	str	r3, [r7, #0]
 800db36:	4638      	mov	r0, r7
 800db38:	f000 feee 	bl	800e918 <__malloc_unlock>
 800db3c:	e7a1      	b.n	800da82 <_malloc_r+0x22>
 800db3e:	6025      	str	r5, [r4, #0]
 800db40:	e7de      	b.n	800db00 <_malloc_r+0xa0>
 800db42:	bf00      	nop
 800db44:	24000db0 	.word	0x24000db0

0800db48 <__ssputs_r>:
 800db48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db4c:	688e      	ldr	r6, [r1, #8]
 800db4e:	429e      	cmp	r6, r3
 800db50:	4682      	mov	sl, r0
 800db52:	460c      	mov	r4, r1
 800db54:	4690      	mov	r8, r2
 800db56:	461f      	mov	r7, r3
 800db58:	d838      	bhi.n	800dbcc <__ssputs_r+0x84>
 800db5a:	898a      	ldrh	r2, [r1, #12]
 800db5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db60:	d032      	beq.n	800dbc8 <__ssputs_r+0x80>
 800db62:	6825      	ldr	r5, [r4, #0]
 800db64:	6909      	ldr	r1, [r1, #16]
 800db66:	eba5 0901 	sub.w	r9, r5, r1
 800db6a:	6965      	ldr	r5, [r4, #20]
 800db6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db74:	3301      	adds	r3, #1
 800db76:	444b      	add	r3, r9
 800db78:	106d      	asrs	r5, r5, #1
 800db7a:	429d      	cmp	r5, r3
 800db7c:	bf38      	it	cc
 800db7e:	461d      	movcc	r5, r3
 800db80:	0553      	lsls	r3, r2, #21
 800db82:	d531      	bpl.n	800dbe8 <__ssputs_r+0xa0>
 800db84:	4629      	mov	r1, r5
 800db86:	f7ff ff6b 	bl	800da60 <_malloc_r>
 800db8a:	4606      	mov	r6, r0
 800db8c:	b950      	cbnz	r0, 800dba4 <__ssputs_r+0x5c>
 800db8e:	230c      	movs	r3, #12
 800db90:	f8ca 3000 	str.w	r3, [sl]
 800db94:	89a3      	ldrh	r3, [r4, #12]
 800db96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db9a:	81a3      	strh	r3, [r4, #12]
 800db9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dba4:	6921      	ldr	r1, [r4, #16]
 800dba6:	464a      	mov	r2, r9
 800dba8:	f000 fe88 	bl	800e8bc <memcpy>
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dbb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbb6:	81a3      	strh	r3, [r4, #12]
 800dbb8:	6126      	str	r6, [r4, #16]
 800dbba:	6165      	str	r5, [r4, #20]
 800dbbc:	444e      	add	r6, r9
 800dbbe:	eba5 0509 	sub.w	r5, r5, r9
 800dbc2:	6026      	str	r6, [r4, #0]
 800dbc4:	60a5      	str	r5, [r4, #8]
 800dbc6:	463e      	mov	r6, r7
 800dbc8:	42be      	cmp	r6, r7
 800dbca:	d900      	bls.n	800dbce <__ssputs_r+0x86>
 800dbcc:	463e      	mov	r6, r7
 800dbce:	6820      	ldr	r0, [r4, #0]
 800dbd0:	4632      	mov	r2, r6
 800dbd2:	4641      	mov	r1, r8
 800dbd4:	f000 fe80 	bl	800e8d8 <memmove>
 800dbd8:	68a3      	ldr	r3, [r4, #8]
 800dbda:	1b9b      	subs	r3, r3, r6
 800dbdc:	60a3      	str	r3, [r4, #8]
 800dbde:	6823      	ldr	r3, [r4, #0]
 800dbe0:	4433      	add	r3, r6
 800dbe2:	6023      	str	r3, [r4, #0]
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	e7db      	b.n	800dba0 <__ssputs_r+0x58>
 800dbe8:	462a      	mov	r2, r5
 800dbea:	f000 fee7 	bl	800e9bc <_realloc_r>
 800dbee:	4606      	mov	r6, r0
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	d1e1      	bne.n	800dbb8 <__ssputs_r+0x70>
 800dbf4:	6921      	ldr	r1, [r4, #16]
 800dbf6:	4650      	mov	r0, sl
 800dbf8:	f000 fe94 	bl	800e924 <_free_r>
 800dbfc:	e7c7      	b.n	800db8e <__ssputs_r+0x46>
	...

0800dc00 <_svfiprintf_r>:
 800dc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc04:	4698      	mov	r8, r3
 800dc06:	898b      	ldrh	r3, [r1, #12]
 800dc08:	061b      	lsls	r3, r3, #24
 800dc0a:	b09d      	sub	sp, #116	; 0x74
 800dc0c:	4607      	mov	r7, r0
 800dc0e:	460d      	mov	r5, r1
 800dc10:	4614      	mov	r4, r2
 800dc12:	d50e      	bpl.n	800dc32 <_svfiprintf_r+0x32>
 800dc14:	690b      	ldr	r3, [r1, #16]
 800dc16:	b963      	cbnz	r3, 800dc32 <_svfiprintf_r+0x32>
 800dc18:	2140      	movs	r1, #64	; 0x40
 800dc1a:	f7ff ff21 	bl	800da60 <_malloc_r>
 800dc1e:	6028      	str	r0, [r5, #0]
 800dc20:	6128      	str	r0, [r5, #16]
 800dc22:	b920      	cbnz	r0, 800dc2e <_svfiprintf_r+0x2e>
 800dc24:	230c      	movs	r3, #12
 800dc26:	603b      	str	r3, [r7, #0]
 800dc28:	f04f 30ff 	mov.w	r0, #4294967295
 800dc2c:	e0d1      	b.n	800ddd2 <_svfiprintf_r+0x1d2>
 800dc2e:	2340      	movs	r3, #64	; 0x40
 800dc30:	616b      	str	r3, [r5, #20]
 800dc32:	2300      	movs	r3, #0
 800dc34:	9309      	str	r3, [sp, #36]	; 0x24
 800dc36:	2320      	movs	r3, #32
 800dc38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc40:	2330      	movs	r3, #48	; 0x30
 800dc42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ddec <_svfiprintf_r+0x1ec>
 800dc46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc4a:	f04f 0901 	mov.w	r9, #1
 800dc4e:	4623      	mov	r3, r4
 800dc50:	469a      	mov	sl, r3
 800dc52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc56:	b10a      	cbz	r2, 800dc5c <_svfiprintf_r+0x5c>
 800dc58:	2a25      	cmp	r2, #37	; 0x25
 800dc5a:	d1f9      	bne.n	800dc50 <_svfiprintf_r+0x50>
 800dc5c:	ebba 0b04 	subs.w	fp, sl, r4
 800dc60:	d00b      	beq.n	800dc7a <_svfiprintf_r+0x7a>
 800dc62:	465b      	mov	r3, fp
 800dc64:	4622      	mov	r2, r4
 800dc66:	4629      	mov	r1, r5
 800dc68:	4638      	mov	r0, r7
 800dc6a:	f7ff ff6d 	bl	800db48 <__ssputs_r>
 800dc6e:	3001      	adds	r0, #1
 800dc70:	f000 80aa 	beq.w	800ddc8 <_svfiprintf_r+0x1c8>
 800dc74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc76:	445a      	add	r2, fp
 800dc78:	9209      	str	r2, [sp, #36]	; 0x24
 800dc7a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	f000 80a2 	beq.w	800ddc8 <_svfiprintf_r+0x1c8>
 800dc84:	2300      	movs	r3, #0
 800dc86:	f04f 32ff 	mov.w	r2, #4294967295
 800dc8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc8e:	f10a 0a01 	add.w	sl, sl, #1
 800dc92:	9304      	str	r3, [sp, #16]
 800dc94:	9307      	str	r3, [sp, #28]
 800dc96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc9a:	931a      	str	r3, [sp, #104]	; 0x68
 800dc9c:	4654      	mov	r4, sl
 800dc9e:	2205      	movs	r2, #5
 800dca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dca4:	4851      	ldr	r0, [pc, #324]	; (800ddec <_svfiprintf_r+0x1ec>)
 800dca6:	f7f2 fb1b 	bl	80002e0 <memchr>
 800dcaa:	9a04      	ldr	r2, [sp, #16]
 800dcac:	b9d8      	cbnz	r0, 800dce6 <_svfiprintf_r+0xe6>
 800dcae:	06d0      	lsls	r0, r2, #27
 800dcb0:	bf44      	itt	mi
 800dcb2:	2320      	movmi	r3, #32
 800dcb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcb8:	0711      	lsls	r1, r2, #28
 800dcba:	bf44      	itt	mi
 800dcbc:	232b      	movmi	r3, #43	; 0x2b
 800dcbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcc2:	f89a 3000 	ldrb.w	r3, [sl]
 800dcc6:	2b2a      	cmp	r3, #42	; 0x2a
 800dcc8:	d015      	beq.n	800dcf6 <_svfiprintf_r+0xf6>
 800dcca:	9a07      	ldr	r2, [sp, #28]
 800dccc:	4654      	mov	r4, sl
 800dcce:	2000      	movs	r0, #0
 800dcd0:	f04f 0c0a 	mov.w	ip, #10
 800dcd4:	4621      	mov	r1, r4
 800dcd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcda:	3b30      	subs	r3, #48	; 0x30
 800dcdc:	2b09      	cmp	r3, #9
 800dcde:	d94e      	bls.n	800dd7e <_svfiprintf_r+0x17e>
 800dce0:	b1b0      	cbz	r0, 800dd10 <_svfiprintf_r+0x110>
 800dce2:	9207      	str	r2, [sp, #28]
 800dce4:	e014      	b.n	800dd10 <_svfiprintf_r+0x110>
 800dce6:	eba0 0308 	sub.w	r3, r0, r8
 800dcea:	fa09 f303 	lsl.w	r3, r9, r3
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	9304      	str	r3, [sp, #16]
 800dcf2:	46a2      	mov	sl, r4
 800dcf4:	e7d2      	b.n	800dc9c <_svfiprintf_r+0x9c>
 800dcf6:	9b03      	ldr	r3, [sp, #12]
 800dcf8:	1d19      	adds	r1, r3, #4
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	9103      	str	r1, [sp, #12]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	bfbb      	ittet	lt
 800dd02:	425b      	neglt	r3, r3
 800dd04:	f042 0202 	orrlt.w	r2, r2, #2
 800dd08:	9307      	strge	r3, [sp, #28]
 800dd0a:	9307      	strlt	r3, [sp, #28]
 800dd0c:	bfb8      	it	lt
 800dd0e:	9204      	strlt	r2, [sp, #16]
 800dd10:	7823      	ldrb	r3, [r4, #0]
 800dd12:	2b2e      	cmp	r3, #46	; 0x2e
 800dd14:	d10c      	bne.n	800dd30 <_svfiprintf_r+0x130>
 800dd16:	7863      	ldrb	r3, [r4, #1]
 800dd18:	2b2a      	cmp	r3, #42	; 0x2a
 800dd1a:	d135      	bne.n	800dd88 <_svfiprintf_r+0x188>
 800dd1c:	9b03      	ldr	r3, [sp, #12]
 800dd1e:	1d1a      	adds	r2, r3, #4
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	9203      	str	r2, [sp, #12]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	bfb8      	it	lt
 800dd28:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd2c:	3402      	adds	r4, #2
 800dd2e:	9305      	str	r3, [sp, #20]
 800dd30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ddfc <_svfiprintf_r+0x1fc>
 800dd34:	7821      	ldrb	r1, [r4, #0]
 800dd36:	2203      	movs	r2, #3
 800dd38:	4650      	mov	r0, sl
 800dd3a:	f7f2 fad1 	bl	80002e0 <memchr>
 800dd3e:	b140      	cbz	r0, 800dd52 <_svfiprintf_r+0x152>
 800dd40:	2340      	movs	r3, #64	; 0x40
 800dd42:	eba0 000a 	sub.w	r0, r0, sl
 800dd46:	fa03 f000 	lsl.w	r0, r3, r0
 800dd4a:	9b04      	ldr	r3, [sp, #16]
 800dd4c:	4303      	orrs	r3, r0
 800dd4e:	3401      	adds	r4, #1
 800dd50:	9304      	str	r3, [sp, #16]
 800dd52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd56:	4826      	ldr	r0, [pc, #152]	; (800ddf0 <_svfiprintf_r+0x1f0>)
 800dd58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd5c:	2206      	movs	r2, #6
 800dd5e:	f7f2 fabf 	bl	80002e0 <memchr>
 800dd62:	2800      	cmp	r0, #0
 800dd64:	d038      	beq.n	800ddd8 <_svfiprintf_r+0x1d8>
 800dd66:	4b23      	ldr	r3, [pc, #140]	; (800ddf4 <_svfiprintf_r+0x1f4>)
 800dd68:	bb1b      	cbnz	r3, 800ddb2 <_svfiprintf_r+0x1b2>
 800dd6a:	9b03      	ldr	r3, [sp, #12]
 800dd6c:	3307      	adds	r3, #7
 800dd6e:	f023 0307 	bic.w	r3, r3, #7
 800dd72:	3308      	adds	r3, #8
 800dd74:	9303      	str	r3, [sp, #12]
 800dd76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd78:	4433      	add	r3, r6
 800dd7a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd7c:	e767      	b.n	800dc4e <_svfiprintf_r+0x4e>
 800dd7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd82:	460c      	mov	r4, r1
 800dd84:	2001      	movs	r0, #1
 800dd86:	e7a5      	b.n	800dcd4 <_svfiprintf_r+0xd4>
 800dd88:	2300      	movs	r3, #0
 800dd8a:	3401      	adds	r4, #1
 800dd8c:	9305      	str	r3, [sp, #20]
 800dd8e:	4619      	mov	r1, r3
 800dd90:	f04f 0c0a 	mov.w	ip, #10
 800dd94:	4620      	mov	r0, r4
 800dd96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd9a:	3a30      	subs	r2, #48	; 0x30
 800dd9c:	2a09      	cmp	r2, #9
 800dd9e:	d903      	bls.n	800dda8 <_svfiprintf_r+0x1a8>
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d0c5      	beq.n	800dd30 <_svfiprintf_r+0x130>
 800dda4:	9105      	str	r1, [sp, #20]
 800dda6:	e7c3      	b.n	800dd30 <_svfiprintf_r+0x130>
 800dda8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddac:	4604      	mov	r4, r0
 800ddae:	2301      	movs	r3, #1
 800ddb0:	e7f0      	b.n	800dd94 <_svfiprintf_r+0x194>
 800ddb2:	ab03      	add	r3, sp, #12
 800ddb4:	9300      	str	r3, [sp, #0]
 800ddb6:	462a      	mov	r2, r5
 800ddb8:	4b0f      	ldr	r3, [pc, #60]	; (800ddf8 <_svfiprintf_r+0x1f8>)
 800ddba:	a904      	add	r1, sp, #16
 800ddbc:	4638      	mov	r0, r7
 800ddbe:	f3af 8000 	nop.w
 800ddc2:	1c42      	adds	r2, r0, #1
 800ddc4:	4606      	mov	r6, r0
 800ddc6:	d1d6      	bne.n	800dd76 <_svfiprintf_r+0x176>
 800ddc8:	89ab      	ldrh	r3, [r5, #12]
 800ddca:	065b      	lsls	r3, r3, #25
 800ddcc:	f53f af2c 	bmi.w	800dc28 <_svfiprintf_r+0x28>
 800ddd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddd2:	b01d      	add	sp, #116	; 0x74
 800ddd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd8:	ab03      	add	r3, sp, #12
 800ddda:	9300      	str	r3, [sp, #0]
 800dddc:	462a      	mov	r2, r5
 800ddde:	4b06      	ldr	r3, [pc, #24]	; (800ddf8 <_svfiprintf_r+0x1f8>)
 800dde0:	a904      	add	r1, sp, #16
 800dde2:	4638      	mov	r0, r7
 800dde4:	f000 f9d4 	bl	800e190 <_printf_i>
 800dde8:	e7eb      	b.n	800ddc2 <_svfiprintf_r+0x1c2>
 800ddea:	bf00      	nop
 800ddec:	08015a2c 	.word	0x08015a2c
 800ddf0:	08015a36 	.word	0x08015a36
 800ddf4:	00000000 	.word	0x00000000
 800ddf8:	0800db49 	.word	0x0800db49
 800ddfc:	08015a32 	.word	0x08015a32

0800de00 <__sfputc_r>:
 800de00:	6893      	ldr	r3, [r2, #8]
 800de02:	3b01      	subs	r3, #1
 800de04:	2b00      	cmp	r3, #0
 800de06:	b410      	push	{r4}
 800de08:	6093      	str	r3, [r2, #8]
 800de0a:	da08      	bge.n	800de1e <__sfputc_r+0x1e>
 800de0c:	6994      	ldr	r4, [r2, #24]
 800de0e:	42a3      	cmp	r3, r4
 800de10:	db01      	blt.n	800de16 <__sfputc_r+0x16>
 800de12:	290a      	cmp	r1, #10
 800de14:	d103      	bne.n	800de1e <__sfputc_r+0x1e>
 800de16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de1a:	f000 bb33 	b.w	800e484 <__swbuf_r>
 800de1e:	6813      	ldr	r3, [r2, #0]
 800de20:	1c58      	adds	r0, r3, #1
 800de22:	6010      	str	r0, [r2, #0]
 800de24:	7019      	strb	r1, [r3, #0]
 800de26:	4608      	mov	r0, r1
 800de28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de2c:	4770      	bx	lr

0800de2e <__sfputs_r>:
 800de2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de30:	4606      	mov	r6, r0
 800de32:	460f      	mov	r7, r1
 800de34:	4614      	mov	r4, r2
 800de36:	18d5      	adds	r5, r2, r3
 800de38:	42ac      	cmp	r4, r5
 800de3a:	d101      	bne.n	800de40 <__sfputs_r+0x12>
 800de3c:	2000      	movs	r0, #0
 800de3e:	e007      	b.n	800de50 <__sfputs_r+0x22>
 800de40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de44:	463a      	mov	r2, r7
 800de46:	4630      	mov	r0, r6
 800de48:	f7ff ffda 	bl	800de00 <__sfputc_r>
 800de4c:	1c43      	adds	r3, r0, #1
 800de4e:	d1f3      	bne.n	800de38 <__sfputs_r+0xa>
 800de50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de54 <_vfiprintf_r>:
 800de54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de58:	460d      	mov	r5, r1
 800de5a:	b09d      	sub	sp, #116	; 0x74
 800de5c:	4614      	mov	r4, r2
 800de5e:	4698      	mov	r8, r3
 800de60:	4606      	mov	r6, r0
 800de62:	b118      	cbz	r0, 800de6c <_vfiprintf_r+0x18>
 800de64:	6983      	ldr	r3, [r0, #24]
 800de66:	b90b      	cbnz	r3, 800de6c <_vfiprintf_r+0x18>
 800de68:	f7ff fd3a 	bl	800d8e0 <__sinit>
 800de6c:	4b89      	ldr	r3, [pc, #548]	; (800e094 <_vfiprintf_r+0x240>)
 800de6e:	429d      	cmp	r5, r3
 800de70:	d11b      	bne.n	800deaa <_vfiprintf_r+0x56>
 800de72:	6875      	ldr	r5, [r6, #4]
 800de74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de76:	07d9      	lsls	r1, r3, #31
 800de78:	d405      	bmi.n	800de86 <_vfiprintf_r+0x32>
 800de7a:	89ab      	ldrh	r3, [r5, #12]
 800de7c:	059a      	lsls	r2, r3, #22
 800de7e:	d402      	bmi.n	800de86 <_vfiprintf_r+0x32>
 800de80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de82:	f7ff fdcb 	bl	800da1c <__retarget_lock_acquire_recursive>
 800de86:	89ab      	ldrh	r3, [r5, #12]
 800de88:	071b      	lsls	r3, r3, #28
 800de8a:	d501      	bpl.n	800de90 <_vfiprintf_r+0x3c>
 800de8c:	692b      	ldr	r3, [r5, #16]
 800de8e:	b9eb      	cbnz	r3, 800decc <_vfiprintf_r+0x78>
 800de90:	4629      	mov	r1, r5
 800de92:	4630      	mov	r0, r6
 800de94:	f000 fb5a 	bl	800e54c <__swsetup_r>
 800de98:	b1c0      	cbz	r0, 800decc <_vfiprintf_r+0x78>
 800de9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de9c:	07dc      	lsls	r4, r3, #31
 800de9e:	d50e      	bpl.n	800debe <_vfiprintf_r+0x6a>
 800dea0:	f04f 30ff 	mov.w	r0, #4294967295
 800dea4:	b01d      	add	sp, #116	; 0x74
 800dea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deaa:	4b7b      	ldr	r3, [pc, #492]	; (800e098 <_vfiprintf_r+0x244>)
 800deac:	429d      	cmp	r5, r3
 800deae:	d101      	bne.n	800deb4 <_vfiprintf_r+0x60>
 800deb0:	68b5      	ldr	r5, [r6, #8]
 800deb2:	e7df      	b.n	800de74 <_vfiprintf_r+0x20>
 800deb4:	4b79      	ldr	r3, [pc, #484]	; (800e09c <_vfiprintf_r+0x248>)
 800deb6:	429d      	cmp	r5, r3
 800deb8:	bf08      	it	eq
 800deba:	68f5      	ldreq	r5, [r6, #12]
 800debc:	e7da      	b.n	800de74 <_vfiprintf_r+0x20>
 800debe:	89ab      	ldrh	r3, [r5, #12]
 800dec0:	0598      	lsls	r0, r3, #22
 800dec2:	d4ed      	bmi.n	800dea0 <_vfiprintf_r+0x4c>
 800dec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dec6:	f7ff fdaa 	bl	800da1e <__retarget_lock_release_recursive>
 800deca:	e7e9      	b.n	800dea0 <_vfiprintf_r+0x4c>
 800decc:	2300      	movs	r3, #0
 800dece:	9309      	str	r3, [sp, #36]	; 0x24
 800ded0:	2320      	movs	r3, #32
 800ded2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ded6:	f8cd 800c 	str.w	r8, [sp, #12]
 800deda:	2330      	movs	r3, #48	; 0x30
 800dedc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e0a0 <_vfiprintf_r+0x24c>
 800dee0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dee4:	f04f 0901 	mov.w	r9, #1
 800dee8:	4623      	mov	r3, r4
 800deea:	469a      	mov	sl, r3
 800deec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800def0:	b10a      	cbz	r2, 800def6 <_vfiprintf_r+0xa2>
 800def2:	2a25      	cmp	r2, #37	; 0x25
 800def4:	d1f9      	bne.n	800deea <_vfiprintf_r+0x96>
 800def6:	ebba 0b04 	subs.w	fp, sl, r4
 800defa:	d00b      	beq.n	800df14 <_vfiprintf_r+0xc0>
 800defc:	465b      	mov	r3, fp
 800defe:	4622      	mov	r2, r4
 800df00:	4629      	mov	r1, r5
 800df02:	4630      	mov	r0, r6
 800df04:	f7ff ff93 	bl	800de2e <__sfputs_r>
 800df08:	3001      	adds	r0, #1
 800df0a:	f000 80aa 	beq.w	800e062 <_vfiprintf_r+0x20e>
 800df0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df10:	445a      	add	r2, fp
 800df12:	9209      	str	r2, [sp, #36]	; 0x24
 800df14:	f89a 3000 	ldrb.w	r3, [sl]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f000 80a2 	beq.w	800e062 <_vfiprintf_r+0x20e>
 800df1e:	2300      	movs	r3, #0
 800df20:	f04f 32ff 	mov.w	r2, #4294967295
 800df24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df28:	f10a 0a01 	add.w	sl, sl, #1
 800df2c:	9304      	str	r3, [sp, #16]
 800df2e:	9307      	str	r3, [sp, #28]
 800df30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df34:	931a      	str	r3, [sp, #104]	; 0x68
 800df36:	4654      	mov	r4, sl
 800df38:	2205      	movs	r2, #5
 800df3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df3e:	4858      	ldr	r0, [pc, #352]	; (800e0a0 <_vfiprintf_r+0x24c>)
 800df40:	f7f2 f9ce 	bl	80002e0 <memchr>
 800df44:	9a04      	ldr	r2, [sp, #16]
 800df46:	b9d8      	cbnz	r0, 800df80 <_vfiprintf_r+0x12c>
 800df48:	06d1      	lsls	r1, r2, #27
 800df4a:	bf44      	itt	mi
 800df4c:	2320      	movmi	r3, #32
 800df4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df52:	0713      	lsls	r3, r2, #28
 800df54:	bf44      	itt	mi
 800df56:	232b      	movmi	r3, #43	; 0x2b
 800df58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df5c:	f89a 3000 	ldrb.w	r3, [sl]
 800df60:	2b2a      	cmp	r3, #42	; 0x2a
 800df62:	d015      	beq.n	800df90 <_vfiprintf_r+0x13c>
 800df64:	9a07      	ldr	r2, [sp, #28]
 800df66:	4654      	mov	r4, sl
 800df68:	2000      	movs	r0, #0
 800df6a:	f04f 0c0a 	mov.w	ip, #10
 800df6e:	4621      	mov	r1, r4
 800df70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df74:	3b30      	subs	r3, #48	; 0x30
 800df76:	2b09      	cmp	r3, #9
 800df78:	d94e      	bls.n	800e018 <_vfiprintf_r+0x1c4>
 800df7a:	b1b0      	cbz	r0, 800dfaa <_vfiprintf_r+0x156>
 800df7c:	9207      	str	r2, [sp, #28]
 800df7e:	e014      	b.n	800dfaa <_vfiprintf_r+0x156>
 800df80:	eba0 0308 	sub.w	r3, r0, r8
 800df84:	fa09 f303 	lsl.w	r3, r9, r3
 800df88:	4313      	orrs	r3, r2
 800df8a:	9304      	str	r3, [sp, #16]
 800df8c:	46a2      	mov	sl, r4
 800df8e:	e7d2      	b.n	800df36 <_vfiprintf_r+0xe2>
 800df90:	9b03      	ldr	r3, [sp, #12]
 800df92:	1d19      	adds	r1, r3, #4
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	9103      	str	r1, [sp, #12]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	bfbb      	ittet	lt
 800df9c:	425b      	neglt	r3, r3
 800df9e:	f042 0202 	orrlt.w	r2, r2, #2
 800dfa2:	9307      	strge	r3, [sp, #28]
 800dfa4:	9307      	strlt	r3, [sp, #28]
 800dfa6:	bfb8      	it	lt
 800dfa8:	9204      	strlt	r2, [sp, #16]
 800dfaa:	7823      	ldrb	r3, [r4, #0]
 800dfac:	2b2e      	cmp	r3, #46	; 0x2e
 800dfae:	d10c      	bne.n	800dfca <_vfiprintf_r+0x176>
 800dfb0:	7863      	ldrb	r3, [r4, #1]
 800dfb2:	2b2a      	cmp	r3, #42	; 0x2a
 800dfb4:	d135      	bne.n	800e022 <_vfiprintf_r+0x1ce>
 800dfb6:	9b03      	ldr	r3, [sp, #12]
 800dfb8:	1d1a      	adds	r2, r3, #4
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	9203      	str	r2, [sp, #12]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	bfb8      	it	lt
 800dfc2:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfc6:	3402      	adds	r4, #2
 800dfc8:	9305      	str	r3, [sp, #20]
 800dfca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e0b0 <_vfiprintf_r+0x25c>
 800dfce:	7821      	ldrb	r1, [r4, #0]
 800dfd0:	2203      	movs	r2, #3
 800dfd2:	4650      	mov	r0, sl
 800dfd4:	f7f2 f984 	bl	80002e0 <memchr>
 800dfd8:	b140      	cbz	r0, 800dfec <_vfiprintf_r+0x198>
 800dfda:	2340      	movs	r3, #64	; 0x40
 800dfdc:	eba0 000a 	sub.w	r0, r0, sl
 800dfe0:	fa03 f000 	lsl.w	r0, r3, r0
 800dfe4:	9b04      	ldr	r3, [sp, #16]
 800dfe6:	4303      	orrs	r3, r0
 800dfe8:	3401      	adds	r4, #1
 800dfea:	9304      	str	r3, [sp, #16]
 800dfec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dff0:	482c      	ldr	r0, [pc, #176]	; (800e0a4 <_vfiprintf_r+0x250>)
 800dff2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dff6:	2206      	movs	r2, #6
 800dff8:	f7f2 f972 	bl	80002e0 <memchr>
 800dffc:	2800      	cmp	r0, #0
 800dffe:	d03f      	beq.n	800e080 <_vfiprintf_r+0x22c>
 800e000:	4b29      	ldr	r3, [pc, #164]	; (800e0a8 <_vfiprintf_r+0x254>)
 800e002:	bb1b      	cbnz	r3, 800e04c <_vfiprintf_r+0x1f8>
 800e004:	9b03      	ldr	r3, [sp, #12]
 800e006:	3307      	adds	r3, #7
 800e008:	f023 0307 	bic.w	r3, r3, #7
 800e00c:	3308      	adds	r3, #8
 800e00e:	9303      	str	r3, [sp, #12]
 800e010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e012:	443b      	add	r3, r7
 800e014:	9309      	str	r3, [sp, #36]	; 0x24
 800e016:	e767      	b.n	800dee8 <_vfiprintf_r+0x94>
 800e018:	fb0c 3202 	mla	r2, ip, r2, r3
 800e01c:	460c      	mov	r4, r1
 800e01e:	2001      	movs	r0, #1
 800e020:	e7a5      	b.n	800df6e <_vfiprintf_r+0x11a>
 800e022:	2300      	movs	r3, #0
 800e024:	3401      	adds	r4, #1
 800e026:	9305      	str	r3, [sp, #20]
 800e028:	4619      	mov	r1, r3
 800e02a:	f04f 0c0a 	mov.w	ip, #10
 800e02e:	4620      	mov	r0, r4
 800e030:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e034:	3a30      	subs	r2, #48	; 0x30
 800e036:	2a09      	cmp	r2, #9
 800e038:	d903      	bls.n	800e042 <_vfiprintf_r+0x1ee>
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d0c5      	beq.n	800dfca <_vfiprintf_r+0x176>
 800e03e:	9105      	str	r1, [sp, #20]
 800e040:	e7c3      	b.n	800dfca <_vfiprintf_r+0x176>
 800e042:	fb0c 2101 	mla	r1, ip, r1, r2
 800e046:	4604      	mov	r4, r0
 800e048:	2301      	movs	r3, #1
 800e04a:	e7f0      	b.n	800e02e <_vfiprintf_r+0x1da>
 800e04c:	ab03      	add	r3, sp, #12
 800e04e:	9300      	str	r3, [sp, #0]
 800e050:	462a      	mov	r2, r5
 800e052:	4b16      	ldr	r3, [pc, #88]	; (800e0ac <_vfiprintf_r+0x258>)
 800e054:	a904      	add	r1, sp, #16
 800e056:	4630      	mov	r0, r6
 800e058:	f3af 8000 	nop.w
 800e05c:	4607      	mov	r7, r0
 800e05e:	1c78      	adds	r0, r7, #1
 800e060:	d1d6      	bne.n	800e010 <_vfiprintf_r+0x1bc>
 800e062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e064:	07d9      	lsls	r1, r3, #31
 800e066:	d405      	bmi.n	800e074 <_vfiprintf_r+0x220>
 800e068:	89ab      	ldrh	r3, [r5, #12]
 800e06a:	059a      	lsls	r2, r3, #22
 800e06c:	d402      	bmi.n	800e074 <_vfiprintf_r+0x220>
 800e06e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e070:	f7ff fcd5 	bl	800da1e <__retarget_lock_release_recursive>
 800e074:	89ab      	ldrh	r3, [r5, #12]
 800e076:	065b      	lsls	r3, r3, #25
 800e078:	f53f af12 	bmi.w	800dea0 <_vfiprintf_r+0x4c>
 800e07c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e07e:	e711      	b.n	800dea4 <_vfiprintf_r+0x50>
 800e080:	ab03      	add	r3, sp, #12
 800e082:	9300      	str	r3, [sp, #0]
 800e084:	462a      	mov	r2, r5
 800e086:	4b09      	ldr	r3, [pc, #36]	; (800e0ac <_vfiprintf_r+0x258>)
 800e088:	a904      	add	r1, sp, #16
 800e08a:	4630      	mov	r0, r6
 800e08c:	f000 f880 	bl	800e190 <_printf_i>
 800e090:	e7e4      	b.n	800e05c <_vfiprintf_r+0x208>
 800e092:	bf00      	nop
 800e094:	080159ec 	.word	0x080159ec
 800e098:	08015a0c 	.word	0x08015a0c
 800e09c:	080159cc 	.word	0x080159cc
 800e0a0:	08015a2c 	.word	0x08015a2c
 800e0a4:	08015a36 	.word	0x08015a36
 800e0a8:	00000000 	.word	0x00000000
 800e0ac:	0800de2f 	.word	0x0800de2f
 800e0b0:	08015a32 	.word	0x08015a32

0800e0b4 <_printf_common>:
 800e0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0b8:	4616      	mov	r6, r2
 800e0ba:	4699      	mov	r9, r3
 800e0bc:	688a      	ldr	r2, [r1, #8]
 800e0be:	690b      	ldr	r3, [r1, #16]
 800e0c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	bfb8      	it	lt
 800e0c8:	4613      	movlt	r3, r2
 800e0ca:	6033      	str	r3, [r6, #0]
 800e0cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e0d0:	4607      	mov	r7, r0
 800e0d2:	460c      	mov	r4, r1
 800e0d4:	b10a      	cbz	r2, 800e0da <_printf_common+0x26>
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	6033      	str	r3, [r6, #0]
 800e0da:	6823      	ldr	r3, [r4, #0]
 800e0dc:	0699      	lsls	r1, r3, #26
 800e0de:	bf42      	ittt	mi
 800e0e0:	6833      	ldrmi	r3, [r6, #0]
 800e0e2:	3302      	addmi	r3, #2
 800e0e4:	6033      	strmi	r3, [r6, #0]
 800e0e6:	6825      	ldr	r5, [r4, #0]
 800e0e8:	f015 0506 	ands.w	r5, r5, #6
 800e0ec:	d106      	bne.n	800e0fc <_printf_common+0x48>
 800e0ee:	f104 0a19 	add.w	sl, r4, #25
 800e0f2:	68e3      	ldr	r3, [r4, #12]
 800e0f4:	6832      	ldr	r2, [r6, #0]
 800e0f6:	1a9b      	subs	r3, r3, r2
 800e0f8:	42ab      	cmp	r3, r5
 800e0fa:	dc26      	bgt.n	800e14a <_printf_common+0x96>
 800e0fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e100:	1e13      	subs	r3, r2, #0
 800e102:	6822      	ldr	r2, [r4, #0]
 800e104:	bf18      	it	ne
 800e106:	2301      	movne	r3, #1
 800e108:	0692      	lsls	r2, r2, #26
 800e10a:	d42b      	bmi.n	800e164 <_printf_common+0xb0>
 800e10c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e110:	4649      	mov	r1, r9
 800e112:	4638      	mov	r0, r7
 800e114:	47c0      	blx	r8
 800e116:	3001      	adds	r0, #1
 800e118:	d01e      	beq.n	800e158 <_printf_common+0xa4>
 800e11a:	6823      	ldr	r3, [r4, #0]
 800e11c:	68e5      	ldr	r5, [r4, #12]
 800e11e:	6832      	ldr	r2, [r6, #0]
 800e120:	f003 0306 	and.w	r3, r3, #6
 800e124:	2b04      	cmp	r3, #4
 800e126:	bf08      	it	eq
 800e128:	1aad      	subeq	r5, r5, r2
 800e12a:	68a3      	ldr	r3, [r4, #8]
 800e12c:	6922      	ldr	r2, [r4, #16]
 800e12e:	bf0c      	ite	eq
 800e130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e134:	2500      	movne	r5, #0
 800e136:	4293      	cmp	r3, r2
 800e138:	bfc4      	itt	gt
 800e13a:	1a9b      	subgt	r3, r3, r2
 800e13c:	18ed      	addgt	r5, r5, r3
 800e13e:	2600      	movs	r6, #0
 800e140:	341a      	adds	r4, #26
 800e142:	42b5      	cmp	r5, r6
 800e144:	d11a      	bne.n	800e17c <_printf_common+0xc8>
 800e146:	2000      	movs	r0, #0
 800e148:	e008      	b.n	800e15c <_printf_common+0xa8>
 800e14a:	2301      	movs	r3, #1
 800e14c:	4652      	mov	r2, sl
 800e14e:	4649      	mov	r1, r9
 800e150:	4638      	mov	r0, r7
 800e152:	47c0      	blx	r8
 800e154:	3001      	adds	r0, #1
 800e156:	d103      	bne.n	800e160 <_printf_common+0xac>
 800e158:	f04f 30ff 	mov.w	r0, #4294967295
 800e15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e160:	3501      	adds	r5, #1
 800e162:	e7c6      	b.n	800e0f2 <_printf_common+0x3e>
 800e164:	18e1      	adds	r1, r4, r3
 800e166:	1c5a      	adds	r2, r3, #1
 800e168:	2030      	movs	r0, #48	; 0x30
 800e16a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e16e:	4422      	add	r2, r4
 800e170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e178:	3302      	adds	r3, #2
 800e17a:	e7c7      	b.n	800e10c <_printf_common+0x58>
 800e17c:	2301      	movs	r3, #1
 800e17e:	4622      	mov	r2, r4
 800e180:	4649      	mov	r1, r9
 800e182:	4638      	mov	r0, r7
 800e184:	47c0      	blx	r8
 800e186:	3001      	adds	r0, #1
 800e188:	d0e6      	beq.n	800e158 <_printf_common+0xa4>
 800e18a:	3601      	adds	r6, #1
 800e18c:	e7d9      	b.n	800e142 <_printf_common+0x8e>
	...

0800e190 <_printf_i>:
 800e190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e194:	7e0f      	ldrb	r7, [r1, #24]
 800e196:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e198:	2f78      	cmp	r7, #120	; 0x78
 800e19a:	4691      	mov	r9, r2
 800e19c:	4680      	mov	r8, r0
 800e19e:	460c      	mov	r4, r1
 800e1a0:	469a      	mov	sl, r3
 800e1a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e1a6:	d807      	bhi.n	800e1b8 <_printf_i+0x28>
 800e1a8:	2f62      	cmp	r7, #98	; 0x62
 800e1aa:	d80a      	bhi.n	800e1c2 <_printf_i+0x32>
 800e1ac:	2f00      	cmp	r7, #0
 800e1ae:	f000 80d8 	beq.w	800e362 <_printf_i+0x1d2>
 800e1b2:	2f58      	cmp	r7, #88	; 0x58
 800e1b4:	f000 80a3 	beq.w	800e2fe <_printf_i+0x16e>
 800e1b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e1bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e1c0:	e03a      	b.n	800e238 <_printf_i+0xa8>
 800e1c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e1c6:	2b15      	cmp	r3, #21
 800e1c8:	d8f6      	bhi.n	800e1b8 <_printf_i+0x28>
 800e1ca:	a101      	add	r1, pc, #4	; (adr r1, 800e1d0 <_printf_i+0x40>)
 800e1cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e1d0:	0800e229 	.word	0x0800e229
 800e1d4:	0800e23d 	.word	0x0800e23d
 800e1d8:	0800e1b9 	.word	0x0800e1b9
 800e1dc:	0800e1b9 	.word	0x0800e1b9
 800e1e0:	0800e1b9 	.word	0x0800e1b9
 800e1e4:	0800e1b9 	.word	0x0800e1b9
 800e1e8:	0800e23d 	.word	0x0800e23d
 800e1ec:	0800e1b9 	.word	0x0800e1b9
 800e1f0:	0800e1b9 	.word	0x0800e1b9
 800e1f4:	0800e1b9 	.word	0x0800e1b9
 800e1f8:	0800e1b9 	.word	0x0800e1b9
 800e1fc:	0800e349 	.word	0x0800e349
 800e200:	0800e26d 	.word	0x0800e26d
 800e204:	0800e32b 	.word	0x0800e32b
 800e208:	0800e1b9 	.word	0x0800e1b9
 800e20c:	0800e1b9 	.word	0x0800e1b9
 800e210:	0800e36b 	.word	0x0800e36b
 800e214:	0800e1b9 	.word	0x0800e1b9
 800e218:	0800e26d 	.word	0x0800e26d
 800e21c:	0800e1b9 	.word	0x0800e1b9
 800e220:	0800e1b9 	.word	0x0800e1b9
 800e224:	0800e333 	.word	0x0800e333
 800e228:	682b      	ldr	r3, [r5, #0]
 800e22a:	1d1a      	adds	r2, r3, #4
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	602a      	str	r2, [r5, #0]
 800e230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e238:	2301      	movs	r3, #1
 800e23a:	e0a3      	b.n	800e384 <_printf_i+0x1f4>
 800e23c:	6820      	ldr	r0, [r4, #0]
 800e23e:	6829      	ldr	r1, [r5, #0]
 800e240:	0606      	lsls	r6, r0, #24
 800e242:	f101 0304 	add.w	r3, r1, #4
 800e246:	d50a      	bpl.n	800e25e <_printf_i+0xce>
 800e248:	680e      	ldr	r6, [r1, #0]
 800e24a:	602b      	str	r3, [r5, #0]
 800e24c:	2e00      	cmp	r6, #0
 800e24e:	da03      	bge.n	800e258 <_printf_i+0xc8>
 800e250:	232d      	movs	r3, #45	; 0x2d
 800e252:	4276      	negs	r6, r6
 800e254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e258:	485e      	ldr	r0, [pc, #376]	; (800e3d4 <_printf_i+0x244>)
 800e25a:	230a      	movs	r3, #10
 800e25c:	e019      	b.n	800e292 <_printf_i+0x102>
 800e25e:	680e      	ldr	r6, [r1, #0]
 800e260:	602b      	str	r3, [r5, #0]
 800e262:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e266:	bf18      	it	ne
 800e268:	b236      	sxthne	r6, r6
 800e26a:	e7ef      	b.n	800e24c <_printf_i+0xbc>
 800e26c:	682b      	ldr	r3, [r5, #0]
 800e26e:	6820      	ldr	r0, [r4, #0]
 800e270:	1d19      	adds	r1, r3, #4
 800e272:	6029      	str	r1, [r5, #0]
 800e274:	0601      	lsls	r1, r0, #24
 800e276:	d501      	bpl.n	800e27c <_printf_i+0xec>
 800e278:	681e      	ldr	r6, [r3, #0]
 800e27a:	e002      	b.n	800e282 <_printf_i+0xf2>
 800e27c:	0646      	lsls	r6, r0, #25
 800e27e:	d5fb      	bpl.n	800e278 <_printf_i+0xe8>
 800e280:	881e      	ldrh	r6, [r3, #0]
 800e282:	4854      	ldr	r0, [pc, #336]	; (800e3d4 <_printf_i+0x244>)
 800e284:	2f6f      	cmp	r7, #111	; 0x6f
 800e286:	bf0c      	ite	eq
 800e288:	2308      	moveq	r3, #8
 800e28a:	230a      	movne	r3, #10
 800e28c:	2100      	movs	r1, #0
 800e28e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e292:	6865      	ldr	r5, [r4, #4]
 800e294:	60a5      	str	r5, [r4, #8]
 800e296:	2d00      	cmp	r5, #0
 800e298:	bfa2      	ittt	ge
 800e29a:	6821      	ldrge	r1, [r4, #0]
 800e29c:	f021 0104 	bicge.w	r1, r1, #4
 800e2a0:	6021      	strge	r1, [r4, #0]
 800e2a2:	b90e      	cbnz	r6, 800e2a8 <_printf_i+0x118>
 800e2a4:	2d00      	cmp	r5, #0
 800e2a6:	d04d      	beq.n	800e344 <_printf_i+0x1b4>
 800e2a8:	4615      	mov	r5, r2
 800e2aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800e2ae:	fb03 6711 	mls	r7, r3, r1, r6
 800e2b2:	5dc7      	ldrb	r7, [r0, r7]
 800e2b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e2b8:	4637      	mov	r7, r6
 800e2ba:	42bb      	cmp	r3, r7
 800e2bc:	460e      	mov	r6, r1
 800e2be:	d9f4      	bls.n	800e2aa <_printf_i+0x11a>
 800e2c0:	2b08      	cmp	r3, #8
 800e2c2:	d10b      	bne.n	800e2dc <_printf_i+0x14c>
 800e2c4:	6823      	ldr	r3, [r4, #0]
 800e2c6:	07de      	lsls	r6, r3, #31
 800e2c8:	d508      	bpl.n	800e2dc <_printf_i+0x14c>
 800e2ca:	6923      	ldr	r3, [r4, #16]
 800e2cc:	6861      	ldr	r1, [r4, #4]
 800e2ce:	4299      	cmp	r1, r3
 800e2d0:	bfde      	ittt	le
 800e2d2:	2330      	movle	r3, #48	; 0x30
 800e2d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e2d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e2dc:	1b52      	subs	r2, r2, r5
 800e2de:	6122      	str	r2, [r4, #16]
 800e2e0:	f8cd a000 	str.w	sl, [sp]
 800e2e4:	464b      	mov	r3, r9
 800e2e6:	aa03      	add	r2, sp, #12
 800e2e8:	4621      	mov	r1, r4
 800e2ea:	4640      	mov	r0, r8
 800e2ec:	f7ff fee2 	bl	800e0b4 <_printf_common>
 800e2f0:	3001      	adds	r0, #1
 800e2f2:	d14c      	bne.n	800e38e <_printf_i+0x1fe>
 800e2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f8:	b004      	add	sp, #16
 800e2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2fe:	4835      	ldr	r0, [pc, #212]	; (800e3d4 <_printf_i+0x244>)
 800e300:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e304:	6829      	ldr	r1, [r5, #0]
 800e306:	6823      	ldr	r3, [r4, #0]
 800e308:	f851 6b04 	ldr.w	r6, [r1], #4
 800e30c:	6029      	str	r1, [r5, #0]
 800e30e:	061d      	lsls	r5, r3, #24
 800e310:	d514      	bpl.n	800e33c <_printf_i+0x1ac>
 800e312:	07df      	lsls	r7, r3, #31
 800e314:	bf44      	itt	mi
 800e316:	f043 0320 	orrmi.w	r3, r3, #32
 800e31a:	6023      	strmi	r3, [r4, #0]
 800e31c:	b91e      	cbnz	r6, 800e326 <_printf_i+0x196>
 800e31e:	6823      	ldr	r3, [r4, #0]
 800e320:	f023 0320 	bic.w	r3, r3, #32
 800e324:	6023      	str	r3, [r4, #0]
 800e326:	2310      	movs	r3, #16
 800e328:	e7b0      	b.n	800e28c <_printf_i+0xfc>
 800e32a:	6823      	ldr	r3, [r4, #0]
 800e32c:	f043 0320 	orr.w	r3, r3, #32
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	2378      	movs	r3, #120	; 0x78
 800e334:	4828      	ldr	r0, [pc, #160]	; (800e3d8 <_printf_i+0x248>)
 800e336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e33a:	e7e3      	b.n	800e304 <_printf_i+0x174>
 800e33c:	0659      	lsls	r1, r3, #25
 800e33e:	bf48      	it	mi
 800e340:	b2b6      	uxthmi	r6, r6
 800e342:	e7e6      	b.n	800e312 <_printf_i+0x182>
 800e344:	4615      	mov	r5, r2
 800e346:	e7bb      	b.n	800e2c0 <_printf_i+0x130>
 800e348:	682b      	ldr	r3, [r5, #0]
 800e34a:	6826      	ldr	r6, [r4, #0]
 800e34c:	6961      	ldr	r1, [r4, #20]
 800e34e:	1d18      	adds	r0, r3, #4
 800e350:	6028      	str	r0, [r5, #0]
 800e352:	0635      	lsls	r5, r6, #24
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	d501      	bpl.n	800e35c <_printf_i+0x1cc>
 800e358:	6019      	str	r1, [r3, #0]
 800e35a:	e002      	b.n	800e362 <_printf_i+0x1d2>
 800e35c:	0670      	lsls	r0, r6, #25
 800e35e:	d5fb      	bpl.n	800e358 <_printf_i+0x1c8>
 800e360:	8019      	strh	r1, [r3, #0]
 800e362:	2300      	movs	r3, #0
 800e364:	6123      	str	r3, [r4, #16]
 800e366:	4615      	mov	r5, r2
 800e368:	e7ba      	b.n	800e2e0 <_printf_i+0x150>
 800e36a:	682b      	ldr	r3, [r5, #0]
 800e36c:	1d1a      	adds	r2, r3, #4
 800e36e:	602a      	str	r2, [r5, #0]
 800e370:	681d      	ldr	r5, [r3, #0]
 800e372:	6862      	ldr	r2, [r4, #4]
 800e374:	2100      	movs	r1, #0
 800e376:	4628      	mov	r0, r5
 800e378:	f7f1 ffb2 	bl	80002e0 <memchr>
 800e37c:	b108      	cbz	r0, 800e382 <_printf_i+0x1f2>
 800e37e:	1b40      	subs	r0, r0, r5
 800e380:	6060      	str	r0, [r4, #4]
 800e382:	6863      	ldr	r3, [r4, #4]
 800e384:	6123      	str	r3, [r4, #16]
 800e386:	2300      	movs	r3, #0
 800e388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e38c:	e7a8      	b.n	800e2e0 <_printf_i+0x150>
 800e38e:	6923      	ldr	r3, [r4, #16]
 800e390:	462a      	mov	r2, r5
 800e392:	4649      	mov	r1, r9
 800e394:	4640      	mov	r0, r8
 800e396:	47d0      	blx	sl
 800e398:	3001      	adds	r0, #1
 800e39a:	d0ab      	beq.n	800e2f4 <_printf_i+0x164>
 800e39c:	6823      	ldr	r3, [r4, #0]
 800e39e:	079b      	lsls	r3, r3, #30
 800e3a0:	d413      	bmi.n	800e3ca <_printf_i+0x23a>
 800e3a2:	68e0      	ldr	r0, [r4, #12]
 800e3a4:	9b03      	ldr	r3, [sp, #12]
 800e3a6:	4298      	cmp	r0, r3
 800e3a8:	bfb8      	it	lt
 800e3aa:	4618      	movlt	r0, r3
 800e3ac:	e7a4      	b.n	800e2f8 <_printf_i+0x168>
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	4632      	mov	r2, r6
 800e3b2:	4649      	mov	r1, r9
 800e3b4:	4640      	mov	r0, r8
 800e3b6:	47d0      	blx	sl
 800e3b8:	3001      	adds	r0, #1
 800e3ba:	d09b      	beq.n	800e2f4 <_printf_i+0x164>
 800e3bc:	3501      	adds	r5, #1
 800e3be:	68e3      	ldr	r3, [r4, #12]
 800e3c0:	9903      	ldr	r1, [sp, #12]
 800e3c2:	1a5b      	subs	r3, r3, r1
 800e3c4:	42ab      	cmp	r3, r5
 800e3c6:	dcf2      	bgt.n	800e3ae <_printf_i+0x21e>
 800e3c8:	e7eb      	b.n	800e3a2 <_printf_i+0x212>
 800e3ca:	2500      	movs	r5, #0
 800e3cc:	f104 0619 	add.w	r6, r4, #25
 800e3d0:	e7f5      	b.n	800e3be <_printf_i+0x22e>
 800e3d2:	bf00      	nop
 800e3d4:	08015a3d 	.word	0x08015a3d
 800e3d8:	08015a4e 	.word	0x08015a4e

0800e3dc <_sbrk_r>:
 800e3dc:	b538      	push	{r3, r4, r5, lr}
 800e3de:	4d06      	ldr	r5, [pc, #24]	; (800e3f8 <_sbrk_r+0x1c>)
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	4604      	mov	r4, r0
 800e3e4:	4608      	mov	r0, r1
 800e3e6:	602b      	str	r3, [r5, #0]
 800e3e8:	f7f3 f940 	bl	800166c <_sbrk>
 800e3ec:	1c43      	adds	r3, r0, #1
 800e3ee:	d102      	bne.n	800e3f6 <_sbrk_r+0x1a>
 800e3f0:	682b      	ldr	r3, [r5, #0]
 800e3f2:	b103      	cbz	r3, 800e3f6 <_sbrk_r+0x1a>
 800e3f4:	6023      	str	r3, [r4, #0]
 800e3f6:	bd38      	pop	{r3, r4, r5, pc}
 800e3f8:	24000db8 	.word	0x24000db8

0800e3fc <__sread>:
 800e3fc:	b510      	push	{r4, lr}
 800e3fe:	460c      	mov	r4, r1
 800e400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e404:	f000 fb0a 	bl	800ea1c <_read_r>
 800e408:	2800      	cmp	r0, #0
 800e40a:	bfab      	itete	ge
 800e40c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e40e:	89a3      	ldrhlt	r3, [r4, #12]
 800e410:	181b      	addge	r3, r3, r0
 800e412:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e416:	bfac      	ite	ge
 800e418:	6563      	strge	r3, [r4, #84]	; 0x54
 800e41a:	81a3      	strhlt	r3, [r4, #12]
 800e41c:	bd10      	pop	{r4, pc}

0800e41e <__swrite>:
 800e41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e422:	461f      	mov	r7, r3
 800e424:	898b      	ldrh	r3, [r1, #12]
 800e426:	05db      	lsls	r3, r3, #23
 800e428:	4605      	mov	r5, r0
 800e42a:	460c      	mov	r4, r1
 800e42c:	4616      	mov	r6, r2
 800e42e:	d505      	bpl.n	800e43c <__swrite+0x1e>
 800e430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e434:	2302      	movs	r3, #2
 800e436:	2200      	movs	r2, #0
 800e438:	f000 f9c8 	bl	800e7cc <_lseek_r>
 800e43c:	89a3      	ldrh	r3, [r4, #12]
 800e43e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e446:	81a3      	strh	r3, [r4, #12]
 800e448:	4632      	mov	r2, r6
 800e44a:	463b      	mov	r3, r7
 800e44c:	4628      	mov	r0, r5
 800e44e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e452:	f000 b869 	b.w	800e528 <_write_r>

0800e456 <__sseek>:
 800e456:	b510      	push	{r4, lr}
 800e458:	460c      	mov	r4, r1
 800e45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e45e:	f000 f9b5 	bl	800e7cc <_lseek_r>
 800e462:	1c43      	adds	r3, r0, #1
 800e464:	89a3      	ldrh	r3, [r4, #12]
 800e466:	bf15      	itete	ne
 800e468:	6560      	strne	r0, [r4, #84]	; 0x54
 800e46a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e46e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e472:	81a3      	strheq	r3, [r4, #12]
 800e474:	bf18      	it	ne
 800e476:	81a3      	strhne	r3, [r4, #12]
 800e478:	bd10      	pop	{r4, pc}

0800e47a <__sclose>:
 800e47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e47e:	f000 b8d3 	b.w	800e628 <_close_r>
	...

0800e484 <__swbuf_r>:
 800e484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e486:	460e      	mov	r6, r1
 800e488:	4614      	mov	r4, r2
 800e48a:	4605      	mov	r5, r0
 800e48c:	b118      	cbz	r0, 800e496 <__swbuf_r+0x12>
 800e48e:	6983      	ldr	r3, [r0, #24]
 800e490:	b90b      	cbnz	r3, 800e496 <__swbuf_r+0x12>
 800e492:	f7ff fa25 	bl	800d8e0 <__sinit>
 800e496:	4b21      	ldr	r3, [pc, #132]	; (800e51c <__swbuf_r+0x98>)
 800e498:	429c      	cmp	r4, r3
 800e49a:	d12b      	bne.n	800e4f4 <__swbuf_r+0x70>
 800e49c:	686c      	ldr	r4, [r5, #4]
 800e49e:	69a3      	ldr	r3, [r4, #24]
 800e4a0:	60a3      	str	r3, [r4, #8]
 800e4a2:	89a3      	ldrh	r3, [r4, #12]
 800e4a4:	071a      	lsls	r2, r3, #28
 800e4a6:	d52f      	bpl.n	800e508 <__swbuf_r+0x84>
 800e4a8:	6923      	ldr	r3, [r4, #16]
 800e4aa:	b36b      	cbz	r3, 800e508 <__swbuf_r+0x84>
 800e4ac:	6923      	ldr	r3, [r4, #16]
 800e4ae:	6820      	ldr	r0, [r4, #0]
 800e4b0:	1ac0      	subs	r0, r0, r3
 800e4b2:	6963      	ldr	r3, [r4, #20]
 800e4b4:	b2f6      	uxtb	r6, r6
 800e4b6:	4283      	cmp	r3, r0
 800e4b8:	4637      	mov	r7, r6
 800e4ba:	dc04      	bgt.n	800e4c6 <__swbuf_r+0x42>
 800e4bc:	4621      	mov	r1, r4
 800e4be:	4628      	mov	r0, r5
 800e4c0:	f000 f948 	bl	800e754 <_fflush_r>
 800e4c4:	bb30      	cbnz	r0, 800e514 <__swbuf_r+0x90>
 800e4c6:	68a3      	ldr	r3, [r4, #8]
 800e4c8:	3b01      	subs	r3, #1
 800e4ca:	60a3      	str	r3, [r4, #8]
 800e4cc:	6823      	ldr	r3, [r4, #0]
 800e4ce:	1c5a      	adds	r2, r3, #1
 800e4d0:	6022      	str	r2, [r4, #0]
 800e4d2:	701e      	strb	r6, [r3, #0]
 800e4d4:	6963      	ldr	r3, [r4, #20]
 800e4d6:	3001      	adds	r0, #1
 800e4d8:	4283      	cmp	r3, r0
 800e4da:	d004      	beq.n	800e4e6 <__swbuf_r+0x62>
 800e4dc:	89a3      	ldrh	r3, [r4, #12]
 800e4de:	07db      	lsls	r3, r3, #31
 800e4e0:	d506      	bpl.n	800e4f0 <__swbuf_r+0x6c>
 800e4e2:	2e0a      	cmp	r6, #10
 800e4e4:	d104      	bne.n	800e4f0 <__swbuf_r+0x6c>
 800e4e6:	4621      	mov	r1, r4
 800e4e8:	4628      	mov	r0, r5
 800e4ea:	f000 f933 	bl	800e754 <_fflush_r>
 800e4ee:	b988      	cbnz	r0, 800e514 <__swbuf_r+0x90>
 800e4f0:	4638      	mov	r0, r7
 800e4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4f4:	4b0a      	ldr	r3, [pc, #40]	; (800e520 <__swbuf_r+0x9c>)
 800e4f6:	429c      	cmp	r4, r3
 800e4f8:	d101      	bne.n	800e4fe <__swbuf_r+0x7a>
 800e4fa:	68ac      	ldr	r4, [r5, #8]
 800e4fc:	e7cf      	b.n	800e49e <__swbuf_r+0x1a>
 800e4fe:	4b09      	ldr	r3, [pc, #36]	; (800e524 <__swbuf_r+0xa0>)
 800e500:	429c      	cmp	r4, r3
 800e502:	bf08      	it	eq
 800e504:	68ec      	ldreq	r4, [r5, #12]
 800e506:	e7ca      	b.n	800e49e <__swbuf_r+0x1a>
 800e508:	4621      	mov	r1, r4
 800e50a:	4628      	mov	r0, r5
 800e50c:	f000 f81e 	bl	800e54c <__swsetup_r>
 800e510:	2800      	cmp	r0, #0
 800e512:	d0cb      	beq.n	800e4ac <__swbuf_r+0x28>
 800e514:	f04f 37ff 	mov.w	r7, #4294967295
 800e518:	e7ea      	b.n	800e4f0 <__swbuf_r+0x6c>
 800e51a:	bf00      	nop
 800e51c:	080159ec 	.word	0x080159ec
 800e520:	08015a0c 	.word	0x08015a0c
 800e524:	080159cc 	.word	0x080159cc

0800e528 <_write_r>:
 800e528:	b538      	push	{r3, r4, r5, lr}
 800e52a:	4d07      	ldr	r5, [pc, #28]	; (800e548 <_write_r+0x20>)
 800e52c:	4604      	mov	r4, r0
 800e52e:	4608      	mov	r0, r1
 800e530:	4611      	mov	r1, r2
 800e532:	2200      	movs	r2, #0
 800e534:	602a      	str	r2, [r5, #0]
 800e536:	461a      	mov	r2, r3
 800e538:	f7f3 f847 	bl	80015ca <_write>
 800e53c:	1c43      	adds	r3, r0, #1
 800e53e:	d102      	bne.n	800e546 <_write_r+0x1e>
 800e540:	682b      	ldr	r3, [r5, #0]
 800e542:	b103      	cbz	r3, 800e546 <_write_r+0x1e>
 800e544:	6023      	str	r3, [r4, #0]
 800e546:	bd38      	pop	{r3, r4, r5, pc}
 800e548:	24000db8 	.word	0x24000db8

0800e54c <__swsetup_r>:
 800e54c:	4b32      	ldr	r3, [pc, #200]	; (800e618 <__swsetup_r+0xcc>)
 800e54e:	b570      	push	{r4, r5, r6, lr}
 800e550:	681d      	ldr	r5, [r3, #0]
 800e552:	4606      	mov	r6, r0
 800e554:	460c      	mov	r4, r1
 800e556:	b125      	cbz	r5, 800e562 <__swsetup_r+0x16>
 800e558:	69ab      	ldr	r3, [r5, #24]
 800e55a:	b913      	cbnz	r3, 800e562 <__swsetup_r+0x16>
 800e55c:	4628      	mov	r0, r5
 800e55e:	f7ff f9bf 	bl	800d8e0 <__sinit>
 800e562:	4b2e      	ldr	r3, [pc, #184]	; (800e61c <__swsetup_r+0xd0>)
 800e564:	429c      	cmp	r4, r3
 800e566:	d10f      	bne.n	800e588 <__swsetup_r+0x3c>
 800e568:	686c      	ldr	r4, [r5, #4]
 800e56a:	89a3      	ldrh	r3, [r4, #12]
 800e56c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e570:	0719      	lsls	r1, r3, #28
 800e572:	d42c      	bmi.n	800e5ce <__swsetup_r+0x82>
 800e574:	06dd      	lsls	r5, r3, #27
 800e576:	d411      	bmi.n	800e59c <__swsetup_r+0x50>
 800e578:	2309      	movs	r3, #9
 800e57a:	6033      	str	r3, [r6, #0]
 800e57c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e580:	81a3      	strh	r3, [r4, #12]
 800e582:	f04f 30ff 	mov.w	r0, #4294967295
 800e586:	e03e      	b.n	800e606 <__swsetup_r+0xba>
 800e588:	4b25      	ldr	r3, [pc, #148]	; (800e620 <__swsetup_r+0xd4>)
 800e58a:	429c      	cmp	r4, r3
 800e58c:	d101      	bne.n	800e592 <__swsetup_r+0x46>
 800e58e:	68ac      	ldr	r4, [r5, #8]
 800e590:	e7eb      	b.n	800e56a <__swsetup_r+0x1e>
 800e592:	4b24      	ldr	r3, [pc, #144]	; (800e624 <__swsetup_r+0xd8>)
 800e594:	429c      	cmp	r4, r3
 800e596:	bf08      	it	eq
 800e598:	68ec      	ldreq	r4, [r5, #12]
 800e59a:	e7e6      	b.n	800e56a <__swsetup_r+0x1e>
 800e59c:	0758      	lsls	r0, r3, #29
 800e59e:	d512      	bpl.n	800e5c6 <__swsetup_r+0x7a>
 800e5a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e5a2:	b141      	cbz	r1, 800e5b6 <__swsetup_r+0x6a>
 800e5a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e5a8:	4299      	cmp	r1, r3
 800e5aa:	d002      	beq.n	800e5b2 <__swsetup_r+0x66>
 800e5ac:	4630      	mov	r0, r6
 800e5ae:	f000 f9b9 	bl	800e924 <_free_r>
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	6363      	str	r3, [r4, #52]	; 0x34
 800e5b6:	89a3      	ldrh	r3, [r4, #12]
 800e5b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e5bc:	81a3      	strh	r3, [r4, #12]
 800e5be:	2300      	movs	r3, #0
 800e5c0:	6063      	str	r3, [r4, #4]
 800e5c2:	6923      	ldr	r3, [r4, #16]
 800e5c4:	6023      	str	r3, [r4, #0]
 800e5c6:	89a3      	ldrh	r3, [r4, #12]
 800e5c8:	f043 0308 	orr.w	r3, r3, #8
 800e5cc:	81a3      	strh	r3, [r4, #12]
 800e5ce:	6923      	ldr	r3, [r4, #16]
 800e5d0:	b94b      	cbnz	r3, 800e5e6 <__swsetup_r+0x9a>
 800e5d2:	89a3      	ldrh	r3, [r4, #12]
 800e5d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e5d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5dc:	d003      	beq.n	800e5e6 <__swsetup_r+0x9a>
 800e5de:	4621      	mov	r1, r4
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	f000 f92b 	bl	800e83c <__smakebuf_r>
 800e5e6:	89a0      	ldrh	r0, [r4, #12]
 800e5e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e5ec:	f010 0301 	ands.w	r3, r0, #1
 800e5f0:	d00a      	beq.n	800e608 <__swsetup_r+0xbc>
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	60a3      	str	r3, [r4, #8]
 800e5f6:	6963      	ldr	r3, [r4, #20]
 800e5f8:	425b      	negs	r3, r3
 800e5fa:	61a3      	str	r3, [r4, #24]
 800e5fc:	6923      	ldr	r3, [r4, #16]
 800e5fe:	b943      	cbnz	r3, 800e612 <__swsetup_r+0xc6>
 800e600:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e604:	d1ba      	bne.n	800e57c <__swsetup_r+0x30>
 800e606:	bd70      	pop	{r4, r5, r6, pc}
 800e608:	0781      	lsls	r1, r0, #30
 800e60a:	bf58      	it	pl
 800e60c:	6963      	ldrpl	r3, [r4, #20]
 800e60e:	60a3      	str	r3, [r4, #8]
 800e610:	e7f4      	b.n	800e5fc <__swsetup_r+0xb0>
 800e612:	2000      	movs	r0, #0
 800e614:	e7f7      	b.n	800e606 <__swsetup_r+0xba>
 800e616:	bf00      	nop
 800e618:	240000a4 	.word	0x240000a4
 800e61c:	080159ec 	.word	0x080159ec
 800e620:	08015a0c 	.word	0x08015a0c
 800e624:	080159cc 	.word	0x080159cc

0800e628 <_close_r>:
 800e628:	b538      	push	{r3, r4, r5, lr}
 800e62a:	4d06      	ldr	r5, [pc, #24]	; (800e644 <_close_r+0x1c>)
 800e62c:	2300      	movs	r3, #0
 800e62e:	4604      	mov	r4, r0
 800e630:	4608      	mov	r0, r1
 800e632:	602b      	str	r3, [r5, #0]
 800e634:	f7f2 ffe5 	bl	8001602 <_close>
 800e638:	1c43      	adds	r3, r0, #1
 800e63a:	d102      	bne.n	800e642 <_close_r+0x1a>
 800e63c:	682b      	ldr	r3, [r5, #0]
 800e63e:	b103      	cbz	r3, 800e642 <_close_r+0x1a>
 800e640:	6023      	str	r3, [r4, #0]
 800e642:	bd38      	pop	{r3, r4, r5, pc}
 800e644:	24000db8 	.word	0x24000db8

0800e648 <__sflush_r>:
 800e648:	898a      	ldrh	r2, [r1, #12]
 800e64a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e64e:	4605      	mov	r5, r0
 800e650:	0710      	lsls	r0, r2, #28
 800e652:	460c      	mov	r4, r1
 800e654:	d458      	bmi.n	800e708 <__sflush_r+0xc0>
 800e656:	684b      	ldr	r3, [r1, #4]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	dc05      	bgt.n	800e668 <__sflush_r+0x20>
 800e65c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e65e:	2b00      	cmp	r3, #0
 800e660:	dc02      	bgt.n	800e668 <__sflush_r+0x20>
 800e662:	2000      	movs	r0, #0
 800e664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e66a:	2e00      	cmp	r6, #0
 800e66c:	d0f9      	beq.n	800e662 <__sflush_r+0x1a>
 800e66e:	2300      	movs	r3, #0
 800e670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e674:	682f      	ldr	r7, [r5, #0]
 800e676:	602b      	str	r3, [r5, #0]
 800e678:	d032      	beq.n	800e6e0 <__sflush_r+0x98>
 800e67a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e67c:	89a3      	ldrh	r3, [r4, #12]
 800e67e:	075a      	lsls	r2, r3, #29
 800e680:	d505      	bpl.n	800e68e <__sflush_r+0x46>
 800e682:	6863      	ldr	r3, [r4, #4]
 800e684:	1ac0      	subs	r0, r0, r3
 800e686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e688:	b10b      	cbz	r3, 800e68e <__sflush_r+0x46>
 800e68a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e68c:	1ac0      	subs	r0, r0, r3
 800e68e:	2300      	movs	r3, #0
 800e690:	4602      	mov	r2, r0
 800e692:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e694:	6a21      	ldr	r1, [r4, #32]
 800e696:	4628      	mov	r0, r5
 800e698:	47b0      	blx	r6
 800e69a:	1c43      	adds	r3, r0, #1
 800e69c:	89a3      	ldrh	r3, [r4, #12]
 800e69e:	d106      	bne.n	800e6ae <__sflush_r+0x66>
 800e6a0:	6829      	ldr	r1, [r5, #0]
 800e6a2:	291d      	cmp	r1, #29
 800e6a4:	d82c      	bhi.n	800e700 <__sflush_r+0xb8>
 800e6a6:	4a2a      	ldr	r2, [pc, #168]	; (800e750 <__sflush_r+0x108>)
 800e6a8:	40ca      	lsrs	r2, r1
 800e6aa:	07d6      	lsls	r6, r2, #31
 800e6ac:	d528      	bpl.n	800e700 <__sflush_r+0xb8>
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	6062      	str	r2, [r4, #4]
 800e6b2:	04d9      	lsls	r1, r3, #19
 800e6b4:	6922      	ldr	r2, [r4, #16]
 800e6b6:	6022      	str	r2, [r4, #0]
 800e6b8:	d504      	bpl.n	800e6c4 <__sflush_r+0x7c>
 800e6ba:	1c42      	adds	r2, r0, #1
 800e6bc:	d101      	bne.n	800e6c2 <__sflush_r+0x7a>
 800e6be:	682b      	ldr	r3, [r5, #0]
 800e6c0:	b903      	cbnz	r3, 800e6c4 <__sflush_r+0x7c>
 800e6c2:	6560      	str	r0, [r4, #84]	; 0x54
 800e6c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6c6:	602f      	str	r7, [r5, #0]
 800e6c8:	2900      	cmp	r1, #0
 800e6ca:	d0ca      	beq.n	800e662 <__sflush_r+0x1a>
 800e6cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6d0:	4299      	cmp	r1, r3
 800e6d2:	d002      	beq.n	800e6da <__sflush_r+0x92>
 800e6d4:	4628      	mov	r0, r5
 800e6d6:	f000 f925 	bl	800e924 <_free_r>
 800e6da:	2000      	movs	r0, #0
 800e6dc:	6360      	str	r0, [r4, #52]	; 0x34
 800e6de:	e7c1      	b.n	800e664 <__sflush_r+0x1c>
 800e6e0:	6a21      	ldr	r1, [r4, #32]
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	47b0      	blx	r6
 800e6e8:	1c41      	adds	r1, r0, #1
 800e6ea:	d1c7      	bne.n	800e67c <__sflush_r+0x34>
 800e6ec:	682b      	ldr	r3, [r5, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d0c4      	beq.n	800e67c <__sflush_r+0x34>
 800e6f2:	2b1d      	cmp	r3, #29
 800e6f4:	d001      	beq.n	800e6fa <__sflush_r+0xb2>
 800e6f6:	2b16      	cmp	r3, #22
 800e6f8:	d101      	bne.n	800e6fe <__sflush_r+0xb6>
 800e6fa:	602f      	str	r7, [r5, #0]
 800e6fc:	e7b1      	b.n	800e662 <__sflush_r+0x1a>
 800e6fe:	89a3      	ldrh	r3, [r4, #12]
 800e700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e704:	81a3      	strh	r3, [r4, #12]
 800e706:	e7ad      	b.n	800e664 <__sflush_r+0x1c>
 800e708:	690f      	ldr	r7, [r1, #16]
 800e70a:	2f00      	cmp	r7, #0
 800e70c:	d0a9      	beq.n	800e662 <__sflush_r+0x1a>
 800e70e:	0793      	lsls	r3, r2, #30
 800e710:	680e      	ldr	r6, [r1, #0]
 800e712:	bf08      	it	eq
 800e714:	694b      	ldreq	r3, [r1, #20]
 800e716:	600f      	str	r7, [r1, #0]
 800e718:	bf18      	it	ne
 800e71a:	2300      	movne	r3, #0
 800e71c:	eba6 0807 	sub.w	r8, r6, r7
 800e720:	608b      	str	r3, [r1, #8]
 800e722:	f1b8 0f00 	cmp.w	r8, #0
 800e726:	dd9c      	ble.n	800e662 <__sflush_r+0x1a>
 800e728:	6a21      	ldr	r1, [r4, #32]
 800e72a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e72c:	4643      	mov	r3, r8
 800e72e:	463a      	mov	r2, r7
 800e730:	4628      	mov	r0, r5
 800e732:	47b0      	blx	r6
 800e734:	2800      	cmp	r0, #0
 800e736:	dc06      	bgt.n	800e746 <__sflush_r+0xfe>
 800e738:	89a3      	ldrh	r3, [r4, #12]
 800e73a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e73e:	81a3      	strh	r3, [r4, #12]
 800e740:	f04f 30ff 	mov.w	r0, #4294967295
 800e744:	e78e      	b.n	800e664 <__sflush_r+0x1c>
 800e746:	4407      	add	r7, r0
 800e748:	eba8 0800 	sub.w	r8, r8, r0
 800e74c:	e7e9      	b.n	800e722 <__sflush_r+0xda>
 800e74e:	bf00      	nop
 800e750:	20400001 	.word	0x20400001

0800e754 <_fflush_r>:
 800e754:	b538      	push	{r3, r4, r5, lr}
 800e756:	690b      	ldr	r3, [r1, #16]
 800e758:	4605      	mov	r5, r0
 800e75a:	460c      	mov	r4, r1
 800e75c:	b913      	cbnz	r3, 800e764 <_fflush_r+0x10>
 800e75e:	2500      	movs	r5, #0
 800e760:	4628      	mov	r0, r5
 800e762:	bd38      	pop	{r3, r4, r5, pc}
 800e764:	b118      	cbz	r0, 800e76e <_fflush_r+0x1a>
 800e766:	6983      	ldr	r3, [r0, #24]
 800e768:	b90b      	cbnz	r3, 800e76e <_fflush_r+0x1a>
 800e76a:	f7ff f8b9 	bl	800d8e0 <__sinit>
 800e76e:	4b14      	ldr	r3, [pc, #80]	; (800e7c0 <_fflush_r+0x6c>)
 800e770:	429c      	cmp	r4, r3
 800e772:	d11b      	bne.n	800e7ac <_fflush_r+0x58>
 800e774:	686c      	ldr	r4, [r5, #4]
 800e776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d0ef      	beq.n	800e75e <_fflush_r+0xa>
 800e77e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e780:	07d0      	lsls	r0, r2, #31
 800e782:	d404      	bmi.n	800e78e <_fflush_r+0x3a>
 800e784:	0599      	lsls	r1, r3, #22
 800e786:	d402      	bmi.n	800e78e <_fflush_r+0x3a>
 800e788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e78a:	f7ff f947 	bl	800da1c <__retarget_lock_acquire_recursive>
 800e78e:	4628      	mov	r0, r5
 800e790:	4621      	mov	r1, r4
 800e792:	f7ff ff59 	bl	800e648 <__sflush_r>
 800e796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e798:	07da      	lsls	r2, r3, #31
 800e79a:	4605      	mov	r5, r0
 800e79c:	d4e0      	bmi.n	800e760 <_fflush_r+0xc>
 800e79e:	89a3      	ldrh	r3, [r4, #12]
 800e7a0:	059b      	lsls	r3, r3, #22
 800e7a2:	d4dd      	bmi.n	800e760 <_fflush_r+0xc>
 800e7a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7a6:	f7ff f93a 	bl	800da1e <__retarget_lock_release_recursive>
 800e7aa:	e7d9      	b.n	800e760 <_fflush_r+0xc>
 800e7ac:	4b05      	ldr	r3, [pc, #20]	; (800e7c4 <_fflush_r+0x70>)
 800e7ae:	429c      	cmp	r4, r3
 800e7b0:	d101      	bne.n	800e7b6 <_fflush_r+0x62>
 800e7b2:	68ac      	ldr	r4, [r5, #8]
 800e7b4:	e7df      	b.n	800e776 <_fflush_r+0x22>
 800e7b6:	4b04      	ldr	r3, [pc, #16]	; (800e7c8 <_fflush_r+0x74>)
 800e7b8:	429c      	cmp	r4, r3
 800e7ba:	bf08      	it	eq
 800e7bc:	68ec      	ldreq	r4, [r5, #12]
 800e7be:	e7da      	b.n	800e776 <_fflush_r+0x22>
 800e7c0:	080159ec 	.word	0x080159ec
 800e7c4:	08015a0c 	.word	0x08015a0c
 800e7c8:	080159cc 	.word	0x080159cc

0800e7cc <_lseek_r>:
 800e7cc:	b538      	push	{r3, r4, r5, lr}
 800e7ce:	4d07      	ldr	r5, [pc, #28]	; (800e7ec <_lseek_r+0x20>)
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	4608      	mov	r0, r1
 800e7d4:	4611      	mov	r1, r2
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	602a      	str	r2, [r5, #0]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	f7f2 ff38 	bl	8001650 <_lseek>
 800e7e0:	1c43      	adds	r3, r0, #1
 800e7e2:	d102      	bne.n	800e7ea <_lseek_r+0x1e>
 800e7e4:	682b      	ldr	r3, [r5, #0]
 800e7e6:	b103      	cbz	r3, 800e7ea <_lseek_r+0x1e>
 800e7e8:	6023      	str	r3, [r4, #0]
 800e7ea:	bd38      	pop	{r3, r4, r5, pc}
 800e7ec:	24000db8 	.word	0x24000db8

0800e7f0 <__swhatbuf_r>:
 800e7f0:	b570      	push	{r4, r5, r6, lr}
 800e7f2:	460e      	mov	r6, r1
 800e7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7f8:	2900      	cmp	r1, #0
 800e7fa:	b096      	sub	sp, #88	; 0x58
 800e7fc:	4614      	mov	r4, r2
 800e7fe:	461d      	mov	r5, r3
 800e800:	da08      	bge.n	800e814 <__swhatbuf_r+0x24>
 800e802:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e806:	2200      	movs	r2, #0
 800e808:	602a      	str	r2, [r5, #0]
 800e80a:	061a      	lsls	r2, r3, #24
 800e80c:	d410      	bmi.n	800e830 <__swhatbuf_r+0x40>
 800e80e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e812:	e00e      	b.n	800e832 <__swhatbuf_r+0x42>
 800e814:	466a      	mov	r2, sp
 800e816:	f000 f913 	bl	800ea40 <_fstat_r>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	dbf1      	blt.n	800e802 <__swhatbuf_r+0x12>
 800e81e:	9a01      	ldr	r2, [sp, #4]
 800e820:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e824:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e828:	425a      	negs	r2, r3
 800e82a:	415a      	adcs	r2, r3
 800e82c:	602a      	str	r2, [r5, #0]
 800e82e:	e7ee      	b.n	800e80e <__swhatbuf_r+0x1e>
 800e830:	2340      	movs	r3, #64	; 0x40
 800e832:	2000      	movs	r0, #0
 800e834:	6023      	str	r3, [r4, #0]
 800e836:	b016      	add	sp, #88	; 0x58
 800e838:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e83c <__smakebuf_r>:
 800e83c:	898b      	ldrh	r3, [r1, #12]
 800e83e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e840:	079d      	lsls	r5, r3, #30
 800e842:	4606      	mov	r6, r0
 800e844:	460c      	mov	r4, r1
 800e846:	d507      	bpl.n	800e858 <__smakebuf_r+0x1c>
 800e848:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e84c:	6023      	str	r3, [r4, #0]
 800e84e:	6123      	str	r3, [r4, #16]
 800e850:	2301      	movs	r3, #1
 800e852:	6163      	str	r3, [r4, #20]
 800e854:	b002      	add	sp, #8
 800e856:	bd70      	pop	{r4, r5, r6, pc}
 800e858:	ab01      	add	r3, sp, #4
 800e85a:	466a      	mov	r2, sp
 800e85c:	f7ff ffc8 	bl	800e7f0 <__swhatbuf_r>
 800e860:	9900      	ldr	r1, [sp, #0]
 800e862:	4605      	mov	r5, r0
 800e864:	4630      	mov	r0, r6
 800e866:	f7ff f8fb 	bl	800da60 <_malloc_r>
 800e86a:	b948      	cbnz	r0, 800e880 <__smakebuf_r+0x44>
 800e86c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e870:	059a      	lsls	r2, r3, #22
 800e872:	d4ef      	bmi.n	800e854 <__smakebuf_r+0x18>
 800e874:	f023 0303 	bic.w	r3, r3, #3
 800e878:	f043 0302 	orr.w	r3, r3, #2
 800e87c:	81a3      	strh	r3, [r4, #12]
 800e87e:	e7e3      	b.n	800e848 <__smakebuf_r+0xc>
 800e880:	4b0d      	ldr	r3, [pc, #52]	; (800e8b8 <__smakebuf_r+0x7c>)
 800e882:	62b3      	str	r3, [r6, #40]	; 0x28
 800e884:	89a3      	ldrh	r3, [r4, #12]
 800e886:	6020      	str	r0, [r4, #0]
 800e888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e88c:	81a3      	strh	r3, [r4, #12]
 800e88e:	9b00      	ldr	r3, [sp, #0]
 800e890:	6163      	str	r3, [r4, #20]
 800e892:	9b01      	ldr	r3, [sp, #4]
 800e894:	6120      	str	r0, [r4, #16]
 800e896:	b15b      	cbz	r3, 800e8b0 <__smakebuf_r+0x74>
 800e898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e89c:	4630      	mov	r0, r6
 800e89e:	f000 f8e1 	bl	800ea64 <_isatty_r>
 800e8a2:	b128      	cbz	r0, 800e8b0 <__smakebuf_r+0x74>
 800e8a4:	89a3      	ldrh	r3, [r4, #12]
 800e8a6:	f023 0303 	bic.w	r3, r3, #3
 800e8aa:	f043 0301 	orr.w	r3, r3, #1
 800e8ae:	81a3      	strh	r3, [r4, #12]
 800e8b0:	89a0      	ldrh	r0, [r4, #12]
 800e8b2:	4305      	orrs	r5, r0
 800e8b4:	81a5      	strh	r5, [r4, #12]
 800e8b6:	e7cd      	b.n	800e854 <__smakebuf_r+0x18>
 800e8b8:	0800d879 	.word	0x0800d879

0800e8bc <memcpy>:
 800e8bc:	440a      	add	r2, r1
 800e8be:	4291      	cmp	r1, r2
 800e8c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8c4:	d100      	bne.n	800e8c8 <memcpy+0xc>
 800e8c6:	4770      	bx	lr
 800e8c8:	b510      	push	{r4, lr}
 800e8ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8d2:	4291      	cmp	r1, r2
 800e8d4:	d1f9      	bne.n	800e8ca <memcpy+0xe>
 800e8d6:	bd10      	pop	{r4, pc}

0800e8d8 <memmove>:
 800e8d8:	4288      	cmp	r0, r1
 800e8da:	b510      	push	{r4, lr}
 800e8dc:	eb01 0402 	add.w	r4, r1, r2
 800e8e0:	d902      	bls.n	800e8e8 <memmove+0x10>
 800e8e2:	4284      	cmp	r4, r0
 800e8e4:	4623      	mov	r3, r4
 800e8e6:	d807      	bhi.n	800e8f8 <memmove+0x20>
 800e8e8:	1e43      	subs	r3, r0, #1
 800e8ea:	42a1      	cmp	r1, r4
 800e8ec:	d008      	beq.n	800e900 <memmove+0x28>
 800e8ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8f6:	e7f8      	b.n	800e8ea <memmove+0x12>
 800e8f8:	4402      	add	r2, r0
 800e8fa:	4601      	mov	r1, r0
 800e8fc:	428a      	cmp	r2, r1
 800e8fe:	d100      	bne.n	800e902 <memmove+0x2a>
 800e900:	bd10      	pop	{r4, pc}
 800e902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e906:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e90a:	e7f7      	b.n	800e8fc <memmove+0x24>

0800e90c <__malloc_lock>:
 800e90c:	4801      	ldr	r0, [pc, #4]	; (800e914 <__malloc_lock+0x8>)
 800e90e:	f7ff b885 	b.w	800da1c <__retarget_lock_acquire_recursive>
 800e912:	bf00      	nop
 800e914:	24000dac 	.word	0x24000dac

0800e918 <__malloc_unlock>:
 800e918:	4801      	ldr	r0, [pc, #4]	; (800e920 <__malloc_unlock+0x8>)
 800e91a:	f7ff b880 	b.w	800da1e <__retarget_lock_release_recursive>
 800e91e:	bf00      	nop
 800e920:	24000dac 	.word	0x24000dac

0800e924 <_free_r>:
 800e924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e926:	2900      	cmp	r1, #0
 800e928:	d044      	beq.n	800e9b4 <_free_r+0x90>
 800e92a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e92e:	9001      	str	r0, [sp, #4]
 800e930:	2b00      	cmp	r3, #0
 800e932:	f1a1 0404 	sub.w	r4, r1, #4
 800e936:	bfb8      	it	lt
 800e938:	18e4      	addlt	r4, r4, r3
 800e93a:	f7ff ffe7 	bl	800e90c <__malloc_lock>
 800e93e:	4a1e      	ldr	r2, [pc, #120]	; (800e9b8 <_free_r+0x94>)
 800e940:	9801      	ldr	r0, [sp, #4]
 800e942:	6813      	ldr	r3, [r2, #0]
 800e944:	b933      	cbnz	r3, 800e954 <_free_r+0x30>
 800e946:	6063      	str	r3, [r4, #4]
 800e948:	6014      	str	r4, [r2, #0]
 800e94a:	b003      	add	sp, #12
 800e94c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e950:	f7ff bfe2 	b.w	800e918 <__malloc_unlock>
 800e954:	42a3      	cmp	r3, r4
 800e956:	d908      	bls.n	800e96a <_free_r+0x46>
 800e958:	6825      	ldr	r5, [r4, #0]
 800e95a:	1961      	adds	r1, r4, r5
 800e95c:	428b      	cmp	r3, r1
 800e95e:	bf01      	itttt	eq
 800e960:	6819      	ldreq	r1, [r3, #0]
 800e962:	685b      	ldreq	r3, [r3, #4]
 800e964:	1949      	addeq	r1, r1, r5
 800e966:	6021      	streq	r1, [r4, #0]
 800e968:	e7ed      	b.n	800e946 <_free_r+0x22>
 800e96a:	461a      	mov	r2, r3
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	b10b      	cbz	r3, 800e974 <_free_r+0x50>
 800e970:	42a3      	cmp	r3, r4
 800e972:	d9fa      	bls.n	800e96a <_free_r+0x46>
 800e974:	6811      	ldr	r1, [r2, #0]
 800e976:	1855      	adds	r5, r2, r1
 800e978:	42a5      	cmp	r5, r4
 800e97a:	d10b      	bne.n	800e994 <_free_r+0x70>
 800e97c:	6824      	ldr	r4, [r4, #0]
 800e97e:	4421      	add	r1, r4
 800e980:	1854      	adds	r4, r2, r1
 800e982:	42a3      	cmp	r3, r4
 800e984:	6011      	str	r1, [r2, #0]
 800e986:	d1e0      	bne.n	800e94a <_free_r+0x26>
 800e988:	681c      	ldr	r4, [r3, #0]
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	6053      	str	r3, [r2, #4]
 800e98e:	4421      	add	r1, r4
 800e990:	6011      	str	r1, [r2, #0]
 800e992:	e7da      	b.n	800e94a <_free_r+0x26>
 800e994:	d902      	bls.n	800e99c <_free_r+0x78>
 800e996:	230c      	movs	r3, #12
 800e998:	6003      	str	r3, [r0, #0]
 800e99a:	e7d6      	b.n	800e94a <_free_r+0x26>
 800e99c:	6825      	ldr	r5, [r4, #0]
 800e99e:	1961      	adds	r1, r4, r5
 800e9a0:	428b      	cmp	r3, r1
 800e9a2:	bf04      	itt	eq
 800e9a4:	6819      	ldreq	r1, [r3, #0]
 800e9a6:	685b      	ldreq	r3, [r3, #4]
 800e9a8:	6063      	str	r3, [r4, #4]
 800e9aa:	bf04      	itt	eq
 800e9ac:	1949      	addeq	r1, r1, r5
 800e9ae:	6021      	streq	r1, [r4, #0]
 800e9b0:	6054      	str	r4, [r2, #4]
 800e9b2:	e7ca      	b.n	800e94a <_free_r+0x26>
 800e9b4:	b003      	add	sp, #12
 800e9b6:	bd30      	pop	{r4, r5, pc}
 800e9b8:	24000db0 	.word	0x24000db0

0800e9bc <_realloc_r>:
 800e9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9c0:	4680      	mov	r8, r0
 800e9c2:	4614      	mov	r4, r2
 800e9c4:	460e      	mov	r6, r1
 800e9c6:	b921      	cbnz	r1, 800e9d2 <_realloc_r+0x16>
 800e9c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9cc:	4611      	mov	r1, r2
 800e9ce:	f7ff b847 	b.w	800da60 <_malloc_r>
 800e9d2:	b92a      	cbnz	r2, 800e9e0 <_realloc_r+0x24>
 800e9d4:	f7ff ffa6 	bl	800e924 <_free_r>
 800e9d8:	4625      	mov	r5, r4
 800e9da:	4628      	mov	r0, r5
 800e9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9e0:	f000 f850 	bl	800ea84 <_malloc_usable_size_r>
 800e9e4:	4284      	cmp	r4, r0
 800e9e6:	4607      	mov	r7, r0
 800e9e8:	d802      	bhi.n	800e9f0 <_realloc_r+0x34>
 800e9ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e9ee:	d812      	bhi.n	800ea16 <_realloc_r+0x5a>
 800e9f0:	4621      	mov	r1, r4
 800e9f2:	4640      	mov	r0, r8
 800e9f4:	f7ff f834 	bl	800da60 <_malloc_r>
 800e9f8:	4605      	mov	r5, r0
 800e9fa:	2800      	cmp	r0, #0
 800e9fc:	d0ed      	beq.n	800e9da <_realloc_r+0x1e>
 800e9fe:	42bc      	cmp	r4, r7
 800ea00:	4622      	mov	r2, r4
 800ea02:	4631      	mov	r1, r6
 800ea04:	bf28      	it	cs
 800ea06:	463a      	movcs	r2, r7
 800ea08:	f7ff ff58 	bl	800e8bc <memcpy>
 800ea0c:	4631      	mov	r1, r6
 800ea0e:	4640      	mov	r0, r8
 800ea10:	f7ff ff88 	bl	800e924 <_free_r>
 800ea14:	e7e1      	b.n	800e9da <_realloc_r+0x1e>
 800ea16:	4635      	mov	r5, r6
 800ea18:	e7df      	b.n	800e9da <_realloc_r+0x1e>
	...

0800ea1c <_read_r>:
 800ea1c:	b538      	push	{r3, r4, r5, lr}
 800ea1e:	4d07      	ldr	r5, [pc, #28]	; (800ea3c <_read_r+0x20>)
 800ea20:	4604      	mov	r4, r0
 800ea22:	4608      	mov	r0, r1
 800ea24:	4611      	mov	r1, r2
 800ea26:	2200      	movs	r2, #0
 800ea28:	602a      	str	r2, [r5, #0]
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	f7f2 fdb0 	bl	8001590 <_read>
 800ea30:	1c43      	adds	r3, r0, #1
 800ea32:	d102      	bne.n	800ea3a <_read_r+0x1e>
 800ea34:	682b      	ldr	r3, [r5, #0]
 800ea36:	b103      	cbz	r3, 800ea3a <_read_r+0x1e>
 800ea38:	6023      	str	r3, [r4, #0]
 800ea3a:	bd38      	pop	{r3, r4, r5, pc}
 800ea3c:	24000db8 	.word	0x24000db8

0800ea40 <_fstat_r>:
 800ea40:	b538      	push	{r3, r4, r5, lr}
 800ea42:	4d07      	ldr	r5, [pc, #28]	; (800ea60 <_fstat_r+0x20>)
 800ea44:	2300      	movs	r3, #0
 800ea46:	4604      	mov	r4, r0
 800ea48:	4608      	mov	r0, r1
 800ea4a:	4611      	mov	r1, r2
 800ea4c:	602b      	str	r3, [r5, #0]
 800ea4e:	f7f2 fde4 	bl	800161a <_fstat>
 800ea52:	1c43      	adds	r3, r0, #1
 800ea54:	d102      	bne.n	800ea5c <_fstat_r+0x1c>
 800ea56:	682b      	ldr	r3, [r5, #0]
 800ea58:	b103      	cbz	r3, 800ea5c <_fstat_r+0x1c>
 800ea5a:	6023      	str	r3, [r4, #0]
 800ea5c:	bd38      	pop	{r3, r4, r5, pc}
 800ea5e:	bf00      	nop
 800ea60:	24000db8 	.word	0x24000db8

0800ea64 <_isatty_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4d06      	ldr	r5, [pc, #24]	; (800ea80 <_isatty_r+0x1c>)
 800ea68:	2300      	movs	r3, #0
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	4608      	mov	r0, r1
 800ea6e:	602b      	str	r3, [r5, #0]
 800ea70:	f7f2 fde3 	bl	800163a <_isatty>
 800ea74:	1c43      	adds	r3, r0, #1
 800ea76:	d102      	bne.n	800ea7e <_isatty_r+0x1a>
 800ea78:	682b      	ldr	r3, [r5, #0]
 800ea7a:	b103      	cbz	r3, 800ea7e <_isatty_r+0x1a>
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	bd38      	pop	{r3, r4, r5, pc}
 800ea80:	24000db8 	.word	0x24000db8

0800ea84 <_malloc_usable_size_r>:
 800ea84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea88:	1f18      	subs	r0, r3, #4
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	bfbc      	itt	lt
 800ea8e:	580b      	ldrlt	r3, [r1, r0]
 800ea90:	18c0      	addlt	r0, r0, r3
 800ea92:	4770      	bx	lr

0800ea94 <_init>:
 800ea94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea96:	bf00      	nop
 800ea98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea9a:	bc08      	pop	{r3}
 800ea9c:	469e      	mov	lr, r3
 800ea9e:	4770      	bx	lr

0800eaa0 <_fini>:
 800eaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaa2:	bf00      	nop
 800eaa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaa6:	bc08      	pop	{r3}
 800eaa8:	469e      	mov	lr, r3
 800eaaa:	4770      	bx	lr
