
MIC_TAR_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5d0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800b870  0800b870  0001b870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b95c  0800b95c  0001b95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b964  0800b964  0001b964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b968  0800b968  0001b968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800b96c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000478  24000074  0800b9e0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240004ec  0800b9e0  000204ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001dc1a  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000037b1  00000000  00000000  0003dcbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001558  00000000  00000000  00041470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013e0  00000000  00000000  000429c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a92d  00000000  00000000  00043da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f319  00000000  00000000  0007e6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016cbac  00000000  00000000  0009d9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020a59a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000060e8  00000000  00000000  0020a5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b858 	.word	0x0800b858

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800b858 	.word	0x0800b858

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_DMA_Init+0x6c>)
 800068c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_DMA_Init+0x6c>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_DMA_Init+0x6c>)
 800069c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2102      	movs	r1, #2
 80006ac:	200b      	movs	r0, #11
 80006ae:	f001 fc22 	bl	8001ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006b2:	200b      	movs	r0, #11
 80006b4:	f001 fc39 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2102      	movs	r1, #2
 80006bc:	200c      	movs	r0, #12
 80006be:	f001 fc1a 	bl	8001ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006c2:	200c      	movs	r0, #12
 80006c4:	f001 fc31 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 2, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2102      	movs	r1, #2
 80006cc:	200d      	movs	r0, #13
 80006ce:	f001 fc12 	bl	8001ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80006d2:	200d      	movs	r0, #13
 80006d4:	f001 fc29 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 2, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2102      	movs	r1, #2
 80006dc:	2066      	movs	r0, #102	; 0x66
 80006de:	f001 fc0a 	bl	8001ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80006e2:	2066      	movs	r0, #102	; 0x66
 80006e4:	f001 fc21 	bl	8001f2a <HAL_NVIC_EnableIRQ>

}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	58024400 	.word	0x58024400

080006f4 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070a:	4b42      	ldr	r3, [pc, #264]	; (8000814 <MX_GPIO_Init+0x120>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	4a40      	ldr	r2, [pc, #256]	; (8000814 <MX_GPIO_Init+0x120>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800071a:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <MX_GPIO_Init+0x120>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000720:	f003 0310 	and.w	r3, r3, #16
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000728:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <MX_GPIO_Init+0x120>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	4a39      	ldr	r2, [pc, #228]	; (8000814 <MX_GPIO_Init+0x120>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000738:	4b36      	ldr	r3, [pc, #216]	; (8000814 <MX_GPIO_Init+0x120>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	4b33      	ldr	r3, [pc, #204]	; (8000814 <MX_GPIO_Init+0x120>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	4a31      	ldr	r2, [pc, #196]	; (8000814 <MX_GPIO_Init+0x120>)
 800074e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000756:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_GPIO_Init+0x120>)
 8000758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <MX_GPIO_Init+0x120>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <MX_GPIO_Init+0x120>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000774:	4b27      	ldr	r3, [pc, #156]	; (8000814 <MX_GPIO_Init+0x120>)
 8000776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_GPIO_Init+0x120>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000788:	4a22      	ldr	r2, [pc, #136]	; (8000814 <MX_GPIO_Init+0x120>)
 800078a:	f043 0302 	orr.w	r3, r3, #2
 800078e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_GPIO_Init+0x120>)
 8000794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000798:	f003 0302 	and.w	r3, r3, #2
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2108      	movs	r1, #8
 80007a4:	481c      	ldr	r0, [pc, #112]	; (8000818 <MX_GPIO_Init+0x124>)
 80007a6:	f003 ff7b 	bl	80046a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 80007b0:	4819      	ldr	r0, [pc, #100]	; (8000818 <MX_GPIO_Init+0x124>)
 80007b2:	f003 ff75 	bl	80046a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007b6:	2308      	movs	r3, #8
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4812      	ldr	r0, [pc, #72]	; (8000818 <MX_GPIO_Init+0x124>)
 80007ce:	f003 fdb7 	bl	8004340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80007d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007dc:	2302      	movs	r3, #2
 80007de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	480d      	ldr	r0, [pc, #52]	; (800081c <MX_GPIO_Init+0x128>)
 80007e8:	f003 fdaa 	bl	8004340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 80007ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_GPIO_Init+0x124>)
 8000806:	f003 fd9b 	bl	8004340 <HAL_GPIO_Init>

}
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	; 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	58024400 	.word	0x58024400
 8000818:	58021000 	.word	0x58021000
 800081c:	58020800 	.word	0x58020800

08000820 <MX_I2S1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi3_rx;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_I2S1_Init+0x60>)
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <MX_I2S1_Init+0x64>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_I2S1_Init+0x60>)
 800082c:	2206      	movs	r2, #6
 800082e:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_I2S1_Init+0x60>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_I2S1_Init+0x60>)
 8000838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800083c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_I2S1_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_I2S1_Init+0x60>)
 8000846:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800084a:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_I2S1_Init+0x60>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_I2S1_Init+0x60>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_I2S1_Init+0x60>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_I2S1_Init+0x60>)
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_ENABLE;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_I2S1_Init+0x60>)
 8000866:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_I2S1_Init+0x60>)
 800086e:	f003 ff31 	bl	80046d4 <HAL_I2S_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000878:	f000 fca2 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	24000090 	.word	0x24000090
 8000884:	40013000 	.word	0x40013000

08000888 <MX_I2S2_Init>:
/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_I2S2_Init+0x60>)
 800088e:	4a17      	ldr	r2, [pc, #92]	; (80008ec <MX_I2S2_Init+0x64>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_I2S2_Init+0x60>)
 8000894:	2206      	movs	r2, #6
 8000896:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_I2S2_Init+0x60>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008ae:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80008b2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_ENABLE;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80008d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_I2S2_Init+0x60>)
 80008d6:	f003 fefd 	bl	80046d4 <HAL_I2S_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2S2_Init+0x5c>
  {
    Error_Handler();
 80008e0:	f000 fc6e 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	240000e4 	.word	0x240000e4
 80008ec:	40003800 	.word	0x40003800

080008f0 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_I2S3_Init+0x60>)
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <MX_I2S3_Init+0x64>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_I2S3_Init+0x60>)
 80008fc:	2206      	movs	r2, #6
 80008fe:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_I2S3_Init+0x60>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_I2S3_Init+0x60>)
 8000908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800090c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_I2S3_Init+0x60>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_I2S3_Init+0x60>)
 8000916:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800091a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_I2S3_Init+0x60>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_I2S3_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_I2S3_Init+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_I2S3_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_ENABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_I2S3_Init+0x60>)
 8000936:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_I2S3_Init+0x60>)
 800093e:	f003 fec9 	bl	80046d4 <HAL_I2S_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2S3_Init+0x5c>
  {
    Error_Handler();
 8000948:	f000 fc3a 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24000138 	.word	0x24000138
 8000954:	40003c00 	.word	0x40003c00

08000958 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	; 0x50
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8000970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4aa5      	ldr	r2, [pc, #660]	; (8000c18 <HAL_I2S_MspInit+0x2c0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	f040 8098 	bne.w	8000aba <HAL_I2S_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800098a:	4ba4      	ldr	r3, [pc, #656]	; (8000c1c <HAL_I2S_MspInit+0x2c4>)
 800098c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000990:	4aa2      	ldr	r2, [pc, #648]	; (8000c1c <HAL_I2S_MspInit+0x2c4>)
 8000992:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000996:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800099a:	4ba0      	ldr	r3, [pc, #640]	; (8000c1c <HAL_I2S_MspInit+0x2c4>)
 800099c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80009a6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b9c      	ldr	r3, [pc, #624]	; (8000c1c <HAL_I2S_MspInit+0x2c4>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ae:	4a9b      	ldr	r2, [pc, #620]	; (8000c1c <HAL_I2S_MspInit+0x2c4>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b8:	4b98      	ldr	r3, [pc, #608]	; (8000c1c <HAL_I2S_MspInit+0x2c4>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
 80009c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009c6:	2330      	movs	r3, #48	; 0x30
 80009c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009d6:	2305      	movs	r3, #5
 80009d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009de:	4619      	mov	r1, r3
 80009e0:	488f      	ldr	r0, [pc, #572]	; (8000c20 <HAL_I2S_MspInit+0x2c8>)
 80009e2:	f003 fcad 	bl	8004340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009e6:	2340      	movs	r3, #64	; 0x40
 80009e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ee:	2302      	movs	r3, #2
 80009f0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009f6:	2305      	movs	r3, #5
 80009f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009fe:	4619      	mov	r1, r3
 8000a00:	4887      	ldr	r0, [pc, #540]	; (8000c20 <HAL_I2S_MspInit+0x2c8>)
 8000a02:	f003 fc9d 	bl	8004340 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8000a06:	4b87      	ldr	r3, [pc, #540]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000a08:	4a87      	ldr	r2, [pc, #540]	; (8000c28 <HAL_I2S_MspInit+0x2d0>)
 8000a0a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000a0c:	4b85      	ldr	r3, [pc, #532]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000a0e:	2225      	movs	r2, #37	; 0x25
 8000a10:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a12:	4b84      	ldr	r3, [pc, #528]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a18:	4b82      	ldr	r3, [pc, #520]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a1e:	4b81      	ldr	r3, [pc, #516]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a24:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a26:	4b7f      	ldr	r3, [pc, #508]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000a28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a2c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a2e:	4b7d      	ldr	r3, [pc, #500]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000a30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a34:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000a36:	4b7b      	ldr	r3, [pc, #492]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a3c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a3e:	4b79      	ldr	r3, [pc, #484]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000a40:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a44:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a46:	4b77      	ldr	r3, [pc, #476]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000a48:	2204      	movs	r2, #4
 8000a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a4c:	4b75      	ldr	r3, [pc, #468]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000a4e:	2203      	movs	r2, #3
 8000a50:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000a52:	4b74      	ldr	r3, [pc, #464]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000a58:	4b72      	ldr	r3, [pc, #456]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a5e:	4871      	ldr	r0, [pc, #452]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000a60:	f001 fa7e 	bl	8001f60 <HAL_DMA_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 8000a6a:	f000 fba9 	bl	80011c0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8000a6e:	2306      	movs	r3, #6
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	633b      	str	r3, [r7, #48]	; 0x30
    pSyncConfig.SyncEnable = DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    pSyncConfig.EventEnable = ENABLE;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    pSyncConfig.RequestNumber = 1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_DMAEx_ConfigMuxSync(&hdma_spi1_rx, &pSyncConfig) != HAL_OK)
 8000a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4865      	ldr	r0, [pc, #404]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000a8e:	f003 fb3f 	bl	8004110 <HAL_DMAEx_ConfigMuxSync>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_I2S_MspInit+0x144>
    {
      Error_Handler();
 8000a98:	f000 fb92 	bl	80011c0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi1_rx);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a61      	ldr	r2, [pc, #388]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000aa0:	649a      	str	r2, [r3, #72]	; 0x48
 8000aa2:	4a60      	ldr	r2, [pc, #384]	; (8000c24 <HAL_I2S_MspInit+0x2cc>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2101      	movs	r1, #1
 8000aac:	2023      	movs	r0, #35	; 0x23
 8000aae:	f001 fa22 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ab2:	2023      	movs	r0, #35	; 0x23
 8000ab4:	f001 fa39 	bl	8001f2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ab8:	e182      	b.n	8000dc0 <HAL_I2S_MspInit+0x468>
  else if(i2sHandle->Instance==SPI2)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a5b      	ldr	r2, [pc, #364]	; (8000c2c <HAL_I2S_MspInit+0x2d4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	f040 80bd 	bne.w	8000c40 <HAL_I2S_MspInit+0x2e8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ac6:	4b55      	ldr	r3, [pc, #340]	; (8000c1c <HAL_I2S_MspInit+0x2c4>)
 8000ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000acc:	4a53      	ldr	r2, [pc, #332]	; (8000c1c <HAL_I2S_MspInit+0x2c4>)
 8000ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ad6:	4b51      	ldr	r3, [pc, #324]	; (8000c1c <HAL_I2S_MspInit+0x2c4>)
 8000ad8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae0:	623b      	str	r3, [r7, #32]
 8000ae2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	4b4d      	ldr	r3, [pc, #308]	; (8000c1c <HAL_I2S_MspInit+0x2c4>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	4a4c      	ldr	r2, [pc, #304]	; (8000c1c <HAL_I2S_MspInit+0x2c4>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af4:	4b49      	ldr	r3, [pc, #292]	; (8000c1c <HAL_I2S_MspInit+0x2c4>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	61fb      	str	r3, [r7, #28]
 8000b00:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b46      	ldr	r3, [pc, #280]	; (8000c1c <HAL_I2S_MspInit+0x2c4>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a44      	ldr	r2, [pc, #272]	; (8000c1c <HAL_I2S_MspInit+0x2c4>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b42      	ldr	r3, [pc, #264]	; (8000c1c <HAL_I2S_MspInit+0x2c4>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b20:	2304      	movs	r3, #4
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b30:	2305      	movs	r3, #5
 8000b32:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b38:	4619      	mov	r1, r3
 8000b3a:	483d      	ldr	r0, [pc, #244]	; (8000c30 <HAL_I2S_MspInit+0x2d8>)
 8000b3c:	f003 fc00 	bl	8004340 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000b40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b44:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b52:	2305      	movs	r3, #5
 8000b54:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4835      	ldr	r0, [pc, #212]	; (8000c34 <HAL_I2S_MspInit+0x2dc>)
 8000b5e:	f003 fbef 	bl	8004340 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8000b62:	4b35      	ldr	r3, [pc, #212]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000b64:	4a35      	ldr	r2, [pc, #212]	; (8000c3c <HAL_I2S_MspInit+0x2e4>)
 8000b66:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8000b68:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000b6a:	2227      	movs	r2, #39	; 0x27
 8000b6c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6e:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b74:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b80:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b82:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000b84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b88:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b8a:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000b8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b90:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b98:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b9a:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000b9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ba0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ba2:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000ba4:	2204      	movs	r2, #4
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ba8:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000baa:	2203      	movs	r2, #3
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000bae:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000bb4:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000bba:	481f      	ldr	r0, [pc, #124]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000bbc:	f001 f9d0 	bl	8001f60 <HAL_DMA_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_I2S_MspInit+0x272>
      Error_Handler();
 8000bc6:	f000 fafb 	bl	80011c0 <Error_Handler>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH0_EVT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 8000bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
    pSyncConfig.SyncEnable = ENABLE;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    pSyncConfig.EventEnable = DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    pSyncConfig.RequestNumber = 1;
 8000be0:	2301      	movs	r3, #1
 8000be2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_DMAEx_ConfigMuxSync(&hdma_spi2_rx, &pSyncConfig) != HAL_OK)
 8000be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be8:	4619      	mov	r1, r3
 8000bea:	4813      	ldr	r0, [pc, #76]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000bec:	f003 fa90 	bl	8004110 <HAL_DMAEx_ConfigMuxSync>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_I2S_MspInit+0x2a2>
      Error_Handler();
 8000bf6:	f000 fae3 	bl	80011c0 <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000bfe:	649a      	str	r2, [r3, #72]	; 0x48
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <HAL_I2S_MspInit+0x2e0>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2101      	movs	r1, #1
 8000c0a:	2024      	movs	r0, #36	; 0x24
 8000c0c:	f001 f973 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000c10:	2024      	movs	r0, #36	; 0x24
 8000c12:	f001 f98a 	bl	8001f2a <HAL_NVIC_EnableIRQ>
}
 8000c16:	e0d3      	b.n	8000dc0 <HAL_I2S_MspInit+0x468>
 8000c18:	40013000 	.word	0x40013000
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	58020000 	.word	0x58020000
 8000c24:	2400018c 	.word	0x2400018c
 8000c28:	40020010 	.word	0x40020010
 8000c2c:	40003800 	.word	0x40003800
 8000c30:	58020800 	.word	0x58020800
 8000c34:	58020400 	.word	0x58020400
 8000c38:	24000204 	.word	0x24000204
 8000c3c:	40020028 	.word	0x40020028
  else if(i2sHandle->Instance==SPI3)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a60      	ldr	r2, [pc, #384]	; (8000dc8 <HAL_I2S_MspInit+0x470>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	f040 80ba 	bne.w	8000dc0 <HAL_I2S_MspInit+0x468>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c4c:	4b5f      	ldr	r3, [pc, #380]	; (8000dcc <HAL_I2S_MspInit+0x474>)
 8000c4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c52:	4a5e      	ldr	r2, [pc, #376]	; (8000dcc <HAL_I2S_MspInit+0x474>)
 8000c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c5c:	4b5b      	ldr	r3, [pc, #364]	; (8000dcc <HAL_I2S_MspInit+0x474>)
 8000c5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b58      	ldr	r3, [pc, #352]	; (8000dcc <HAL_I2S_MspInit+0x474>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	4a56      	ldr	r2, [pc, #344]	; (8000dcc <HAL_I2S_MspInit+0x474>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7a:	4b54      	ldr	r3, [pc, #336]	; (8000dcc <HAL_I2S_MspInit+0x474>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c88:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <HAL_I2S_MspInit+0x474>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	4a4f      	ldr	r2, [pc, #316]	; (8000dcc <HAL_I2S_MspInit+0x474>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c98:	4b4c      	ldr	r3, [pc, #304]	; (8000dcc <HAL_I2S_MspInit+0x474>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cb8:	2306      	movs	r3, #6
 8000cba:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4843      	ldr	r0, [pc, #268]	; (8000dd0 <HAL_I2S_MspInit+0x478>)
 8000cc4:	f003 fb3c 	bl	8004340 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cda:	2306      	movs	r3, #6
 8000cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	483b      	ldr	r0, [pc, #236]	; (8000dd4 <HAL_I2S_MspInit+0x47c>)
 8000ce6:	f003 fb2b 	bl	8004340 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cfc:	2306      	movs	r3, #6
 8000cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d04:	4619      	mov	r1, r3
 8000d06:	4833      	ldr	r0, [pc, #204]	; (8000dd4 <HAL_I2S_MspInit+0x47c>)
 8000d08:	f003 fb1a 	bl	8004340 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream2;
 8000d0c:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000d0e:	4a33      	ldr	r2, [pc, #204]	; (8000ddc <HAL_I2S_MspInit+0x484>)
 8000d10:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8000d12:	4b31      	ldr	r3, [pc, #196]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000d14:	223d      	movs	r2, #61	; 0x3d
 8000d16:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d18:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d24:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000d26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d2a:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000d2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d32:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000d36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d3a:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8000d3c:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d42:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000d46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d4a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000d4e:	2204      	movs	r2, #4
 8000d50:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000d54:	2203      	movs	r2, #3
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8000d64:	481c      	ldr	r0, [pc, #112]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000d66:	f001 f8fb 	bl	8001f60 <HAL_DMA_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_I2S_MspInit+0x41c>
      Error_Handler();
 8000d70:	f000 fa26 	bl	80011c0 <Error_Handler>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH0_EVT;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 8000d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
    pSyncConfig.SyncEnable = ENABLE;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    pSyncConfig.EventEnable = DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    pSyncConfig.RequestNumber = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_DMAEx_ConfigMuxSync(&hdma_spi3_rx, &pSyncConfig) != HAL_OK)
 8000d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d92:	4619      	mov	r1, r3
 8000d94:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000d96:	f003 f9bb 	bl	8004110 <HAL_DMAEx_ConfigMuxSync>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_I2S_MspInit+0x44c>
      Error_Handler();
 8000da0:	f000 fa0e 	bl	80011c0 <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi3_rx);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000da8:	649a      	str	r2, [r3, #72]	; 0x48
 8000daa:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <HAL_I2S_MspInit+0x480>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2101      	movs	r1, #1
 8000db4:	2033      	movs	r0, #51	; 0x33
 8000db6:	f001 f89e 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000dba:	2033      	movs	r0, #51	; 0x33
 8000dbc:	f001 f8b5 	bl	8001f2a <HAL_NVIC_EnableIRQ>
}
 8000dc0:	bf00      	nop
 8000dc2:	3750      	adds	r7, #80	; 0x50
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40003c00 	.word	0x40003c00
 8000dcc:	58024400 	.word	0x58024400
 8000dd0:	58020000 	.word	0x58020000
 8000dd4:	58020800 	.word	0x58020800
 8000dd8:	2400027c 	.word	0x2400027c
 8000ddc:	40020040 	.word	0x40020040

08000de0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8000de8:	1d39      	adds	r1, r7, #4
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	2201      	movs	r2, #1
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <__io_putchar+0x20>)
 8000df2:	f008 fcbb 	bl	800976c <HAL_UART_Transmit>
    return ch;
 8000df6:	687b      	ldr	r3, [r7, #4]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	24000448 	.word	0x24000448

08000e04 <HAL_I2S_RxCpltCallback>:
/*
 * 重写printf
 */

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

	if(hi2s==&hi2s1){
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a44      	ldr	r2, [pc, #272]	; (8000f20 <HAL_I2S_RxCpltCallback+0x11c>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d127      	bne.n	8000e64 <HAL_I2S_RxCpltCallback+0x60>
		//10 0
		//11 1
		if(hi2s1_Data[0] & 0x800000){//negative
 8000e14:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <HAL_I2S_RxCpltCallback+0x120>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d007      	beq.n	8000e30 <HAL_I2S_RxCpltCallback+0x2c>
			hi2s1_Data_s[0]=(0xff000000 | hi2s1_Data[0]);
 8000e20:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <HAL_I2S_RxCpltCallback+0x120>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <HAL_I2S_RxCpltCallback+0x124>)
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	e005      	b.n	8000e3c <HAL_I2S_RxCpltCallback+0x38>
		}else{//positive
			hi2s1_Data_s[0]=0x00ffffff & hi2s1_Data[0];
 8000e30:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <HAL_I2S_RxCpltCallback+0x120>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e38:	4a3b      	ldr	r2, [pc, #236]	; (8000f28 <HAL_I2S_RxCpltCallback+0x124>)
 8000e3a:	6013      	str	r3, [r2, #0]
		}

		if(hi2s1_Data[1] & 0x800000){//negative
 8000e3c:	4b39      	ldr	r3, [pc, #228]	; (8000f24 <HAL_I2S_RxCpltCallback+0x120>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d007      	beq.n	8000e58 <HAL_I2S_RxCpltCallback+0x54>
			hi2s1_Data_s[1]=0xff000000 | hi2s1_Data[1];
 8000e48:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <HAL_I2S_RxCpltCallback+0x120>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <HAL_I2S_RxCpltCallback+0x124>)
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	e005      	b.n	8000e64 <HAL_I2S_RxCpltCallback+0x60>
		}else{//positive
			hi2s1_Data_s[1]=0x00ffffff & hi2s1_Data[1];
 8000e58:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <HAL_I2S_RxCpltCallback+0x120>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e60:	4a31      	ldr	r2, [pc, #196]	; (8000f28 <HAL_I2S_RxCpltCallback+0x124>)
 8000e62:	6053      	str	r3, [r2, #4]
		}

		}


	if(hi2s==&hi2s2){
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a31      	ldr	r2, [pc, #196]	; (8000f2c <HAL_I2S_RxCpltCallback+0x128>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d127      	bne.n	8000ebc <HAL_I2S_RxCpltCallback+0xb8>
		//10 0
		//11 1
		if(hi2s2_Data[0] & 0x800000){//negative
 8000e6c:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <HAL_I2S_RxCpltCallback+0x12c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d007      	beq.n	8000e88 <HAL_I2S_RxCpltCallback+0x84>
			hi2s2_Data_s[0]=0xff000000 | hi2s2_Data[0];
 8000e78:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <HAL_I2S_RxCpltCallback+0x12c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <HAL_I2S_RxCpltCallback+0x130>)
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	e005      	b.n	8000e94 <HAL_I2S_RxCpltCallback+0x90>
		}else{//positive
			hi2s2_Data_s[0]=0x00ffffff & hi2s2_Data[0];
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <HAL_I2S_RxCpltCallback+0x12c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e90:	4a28      	ldr	r2, [pc, #160]	; (8000f34 <HAL_I2S_RxCpltCallback+0x130>)
 8000e92:	6013      	str	r3, [r2, #0]
		}

		if(hi2s2_Data[1] & 0x800000){//negative
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <HAL_I2S_RxCpltCallback+0x12c>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d007      	beq.n	8000eb0 <HAL_I2S_RxCpltCallback+0xac>
			hi2s2_Data_s[1]=0xff000000 | hi2s2_Data[1];
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <HAL_I2S_RxCpltCallback+0x12c>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <HAL_I2S_RxCpltCallback+0x130>)
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	e005      	b.n	8000ebc <HAL_I2S_RxCpltCallback+0xb8>
		}else{//positive
			hi2s2_Data_s[1]=0x00ffffff & hi2s2_Data[1];
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <HAL_I2S_RxCpltCallback+0x12c>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000eb8:	4a1e      	ldr	r2, [pc, #120]	; (8000f34 <HAL_I2S_RxCpltCallback+0x130>)
 8000eba:	6053      	str	r3, [r2, #4]
		}

		}

	if(hi2s==&hi2s3){
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a1e      	ldr	r2, [pc, #120]	; (8000f38 <HAL_I2S_RxCpltCallback+0x134>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d127      	bne.n	8000f14 <HAL_I2S_RxCpltCallback+0x110>
		//10 0
		//11 1
		if(hi2s3_Data[0] & 0x800000){//negative
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <HAL_I2S_RxCpltCallback+0x138>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d007      	beq.n	8000ee0 <HAL_I2S_RxCpltCallback+0xdc>
			hi2s3_Data_s[0]=0xff000000 | hi2s3_Data[0];
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <HAL_I2S_RxCpltCallback+0x138>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_I2S_RxCpltCallback+0x13c>)
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	e005      	b.n	8000eec <HAL_I2S_RxCpltCallback+0xe8>
		}else{//positive
			hi2s3_Data_s[0]=0x00ffffff & hi2s3_Data[0];
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_I2S_RxCpltCallback+0x138>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000ee8:	4a15      	ldr	r2, [pc, #84]	; (8000f40 <HAL_I2S_RxCpltCallback+0x13c>)
 8000eea:	6013      	str	r3, [r2, #0]
		}

		if(hi2s3_Data[1] & 0x800000){//negative
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <HAL_I2S_RxCpltCallback+0x138>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d007      	beq.n	8000f08 <HAL_I2S_RxCpltCallback+0x104>
			hi2s3_Data_s[1]=0xff000000 | hi2s3_Data[1];
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_I2S_RxCpltCallback+0x138>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_I2S_RxCpltCallback+0x13c>)
 8000f04:	605a      	str	r2, [r3, #4]
		}

		}


}
 8000f06:	e005      	b.n	8000f14 <HAL_I2S_RxCpltCallback+0x110>
			hi2s3_Data_s[1]=0x00ffffff & hi2s3_Data[1];
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_I2S_RxCpltCallback+0x138>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <HAL_I2S_RxCpltCallback+0x13c>)
 8000f12:	6053      	str	r3, [r2, #4]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	24000090 	.word	0x24000090
 8000f24:	240002f4 	.word	0x240002f4
 8000f28:	2400030c 	.word	0x2400030c
 8000f2c:	240000e4 	.word	0x240000e4
 8000f30:	240002fc 	.word	0x240002fc
 8000f34:	24000314 	.word	0x24000314
 8000f38:	24000138 	.word	0x24000138
 8000f3c:	24000304 	.word	0x24000304
 8000f40:	2400031c 	.word	0x2400031c

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f000 fe5b 	bl	8001c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f851 	bl	8000ff4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f52:	f000 f909 	bl	8001168 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f56:	f7ff fbcd 	bl	80006f4 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000f5a:	f000 f937 	bl	80011cc <MX_SPI4_Init>
  MX_DMA_Init();
 8000f5e:	f7ff fb91 	bl	8000684 <MX_DMA_Init>
  MX_I2S1_Init();
 8000f62:	f7ff fc5d 	bl	8000820 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000f66:	f7ff fc8f 	bl	8000888 <MX_I2S2_Init>
  MX_TIM1_Init();
 8000f6a:	f000 fbaf 	bl	80016cc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f6e:	f000 fc59 	bl	8001824 <MX_TIM3_Init>
  MX_UART4_Init();
 8000f72:	f000 fd6d 	bl	8001a50 <MX_UART4_Init>
  MX_I2S3_Init();
 8000f76:	f7ff fcbb 	bl	80008f0 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4812      	ldr	r0, [pc, #72]	; (8000fc8 <main+0x84>)
 8000f7e:	f007 fb4b 	bl	8008618 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  LCD_Test();
//  uint8_t text[20]={0};

  HAL_I2S_Receive_DMA(&hi2s1, (uint16_t*)hi2s1_Data,&hi2s2, (uint16_t*)hi2s2_Data,&hi2s3, (uint16_t*)hi2s3_Data,2);
 8000f82:	2302      	movs	r3, #2
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <main+0x88>)
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <main+0x8c>)
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <main+0x90>)
 8000f90:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <main+0x94>)
 8000f92:	4912      	ldr	r1, [pc, #72]	; (8000fdc <main+0x98>)
 8000f94:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <main+0x9c>)
 8000f96:	f003 fcbd 	bl	8004914 <HAL_I2S_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf("%d,%d,%d,%d,%d,%d\r\n",hi2s1_Data_s[0],hi2s1_Data_s[1],hi2s2_Data_s[0],hi2s2_Data_s[1],hi2s3_Data_s[0],hi2s3_Data_s[1]);
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <main+0xa0>)
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <main+0xa0>)
 8000fa0:	685c      	ldr	r4, [r3, #4]
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <main+0xa4>)
 8000fa4:	681d      	ldr	r5, [r3, #0]
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <main+0xa4>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <main+0xa8>)
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	490f      	ldr	r1, [pc, #60]	; (8000fec <main+0xa8>)
 8000fb0:	6849      	ldr	r1, [r1, #4]
 8000fb2:	9102      	str	r1, [sp, #8]
 8000fb4:	9201      	str	r2, [sp, #4]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	462b      	mov	r3, r5
 8000fba:	4622      	mov	r2, r4
 8000fbc:	4601      	mov	r1, r0
 8000fbe:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <main+0xac>)
 8000fc0:	f009 fcbc 	bl	800a93c <iprintf>
 8000fc4:	e7e9      	b.n	8000f9a <main+0x56>
 8000fc6:	bf00      	nop
 8000fc8:	240003fc 	.word	0x240003fc
 8000fcc:	24000304 	.word	0x24000304
 8000fd0:	24000138 	.word	0x24000138
 8000fd4:	240002fc 	.word	0x240002fc
 8000fd8:	240000e4 	.word	0x240000e4
 8000fdc:	240002f4 	.word	0x240002f4
 8000fe0:	24000090 	.word	0x24000090
 8000fe4:	2400030c 	.word	0x2400030c
 8000fe8:	24000314 	.word	0x24000314
 8000fec:	2400031c 	.word	0x2400031c
 8000ff0:	0800b870 	.word	0x0800b870

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09e      	sub	sp, #120	; 0x78
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffe:	224c      	movs	r2, #76	; 0x4c
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f009 fc92 	bl	800a92c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f009 fc8b 	bl	800a92c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001016:	2002      	movs	r0, #2
 8001018:	f003 ff94 	bl	8004f44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	4b4e      	ldr	r3, [pc, #312]	; (800115c <SystemClock_Config+0x168>)
 8001022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001024:	4a4d      	ldr	r2, [pc, #308]	; (800115c <SystemClock_Config+0x168>)
 8001026:	f023 0301 	bic.w	r3, r3, #1
 800102a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800102c:	4b4b      	ldr	r3, [pc, #300]	; (800115c <SystemClock_Config+0x168>)
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	4b4a      	ldr	r3, [pc, #296]	; (8001160 <SystemClock_Config+0x16c>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	4a49      	ldr	r2, [pc, #292]	; (8001160 <SystemClock_Config+0x16c>)
 800103c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001040:	6193      	str	r3, [r2, #24]
 8001042:	4b47      	ldr	r3, [pc, #284]	; (8001160 <SystemClock_Config+0x16c>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800104e:	bf00      	nop
 8001050:	4b43      	ldr	r3, [pc, #268]	; (8001160 <SystemClock_Config+0x16c>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800105c:	d1f8      	bne.n	8001050 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b41      	ldr	r3, [pc, #260]	; (8001164 <SystemClock_Config+0x170>)
 8001060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001064:	4a3f      	ldr	r2, [pc, #252]	; (8001164 <SystemClock_Config+0x170>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800106e:	4b3d      	ldr	r3, [pc, #244]	; (8001164 <SystemClock_Config+0x170>)
 8001070:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800107c:	2300      	movs	r3, #0
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	4b37      	ldr	r3, [pc, #220]	; (8001160 <SystemClock_Config+0x16c>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a36      	ldr	r2, [pc, #216]	; (8001160 <SystemClock_Config+0x16c>)
 8001086:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b34      	ldr	r3, [pc, #208]	; (8001160 <SystemClock_Config+0x16c>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4b31      	ldr	r3, [pc, #196]	; (800115c <SystemClock_Config+0x168>)
 8001098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109a:	4a30      	ldr	r2, [pc, #192]	; (800115c <SystemClock_Config+0x168>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010a2:	4b2e      	ldr	r3, [pc, #184]	; (800115c <SystemClock_Config+0x168>)
 80010a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010ae:	bf00      	nop
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <SystemClock_Config+0x16c>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010bc:	d1f8      	bne.n	80010b0 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <SystemClock_Config+0x170>)
 80010c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	4a27      	ldr	r2, [pc, #156]	; (8001164 <SystemClock_Config+0x170>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ce:	2301      	movs	r3, #1
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d8:	2302      	movs	r3, #2
 80010da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010dc:	2302      	movs	r3, #2
 80010de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 10;
 80010e0:	230a      	movs	r3, #10
 80010e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 384;
 80010e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80010ee:	2305      	movs	r3, #5
 80010f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80010f6:	2304      	movs	r3, #4
 80010f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001106:	4618      	mov	r0, r3
 8001108:	f003 ff56 	bl	8004fb8 <HAL_RCC_OscConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x122>
  {
    Error_Handler();
 8001112:	f000 f855 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	233f      	movs	r3, #63	; 0x3f
 8001118:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2303      	movs	r3, #3
 800111c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001122:	2308      	movs	r3, #8
 8001124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001126:	2340      	movs	r3, #64	; 0x40
 8001128:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800112a:	2340      	movs	r3, #64	; 0x40
 800112c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800112e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001134:	2340      	movs	r3, #64	; 0x40
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2104      	movs	r1, #4
 800113e:	4618      	mov	r0, r3
 8001140:	f004 fb68 	bl	8005814 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0x15a>
  {
    Error_Handler();
 800114a:	f000 f839 	bl	80011c0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800114e:	f004 fd17 	bl	8005b80 <HAL_RCC_EnableCSS>
}
 8001152:	bf00      	nop
 8001154:	3778      	adds	r7, #120	; 0x78
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	58000400 	.word	0x58000400
 8001160:	58024800 	.word	0x58024800
 8001164:	58024400 	.word	0x58024400

08001168 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0b0      	sub	sp, #192	; 0xc0
 800116c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	22bc      	movs	r2, #188	; 0xbc
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f009 fbd9 	bl	800a92c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 800117a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 10;
 8001180:	230a      	movs	r3, #10
 8001182:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001188:	2302      	movs	r3, #2
 800118a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800118c:	2302      	movs	r3, #2
 800118e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001190:	2302      	movs	r3, #2
 8001192:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001194:	2340      	movs	r3, #64	; 0x40
 8001196:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80011a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 fecf 	bl	8005f4c <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80011b4:	f000 f804 	bl	80011c0 <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	37c0      	adds	r7, #192	; 0xc0
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <Error_Handler+0x8>
	...

080011cc <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <MX_SPI4_Init+0xa8>)
 80011d2:	4a29      	ldr	r2, [pc, #164]	; (8001278 <MX_SPI4_Init+0xac>)
 80011d4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80011d6:	4b27      	ldr	r3, [pc, #156]	; (8001274 <MX_SPI4_Init+0xa8>)
 80011d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011dc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 80011de:	4b25      	ldr	r3, [pc, #148]	; (8001274 <MX_SPI4_Init+0xa8>)
 80011e0:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80011e4:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e6:	4b23      	ldr	r3, [pc, #140]	; (8001274 <MX_SPI4_Init+0xa8>)
 80011e8:	2207      	movs	r2, #7
 80011ea:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ec:	4b21      	ldr	r3, [pc, #132]	; (8001274 <MX_SPI4_Init+0xa8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <MX_SPI4_Init+0xa8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80011f8:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <MX_SPI4_Init+0xa8>)
 80011fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011fe:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001200:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <MX_SPI4_Init+0xa8>)
 8001202:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001206:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_SPI4_Init+0xa8>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MX_SPI4_Init+0xa8>)
 8001210:	2200      	movs	r2, #0
 8001212:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_SPI4_Init+0xa8>)
 8001216:	2200      	movs	r2, #0
 8001218:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_SPI4_Init+0xa8>)
 800121c:	2200      	movs	r2, #0
 800121e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_SPI4_Init+0xa8>)
 8001222:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001226:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_SPI4_Init+0xa8>)
 800122a:	2200      	movs	r2, #0
 800122c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_SPI4_Init+0xa8>)
 8001230:	2200      	movs	r2, #0
 8001232:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_SPI4_Init+0xa8>)
 8001236:	2200      	movs	r2, #0
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_SPI4_Init+0xa8>)
 800123c:	2200      	movs	r2, #0
 800123e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_SPI4_Init+0xa8>)
 8001242:	2200      	movs	r2, #0
 8001244:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_SPI4_Init+0xa8>)
 8001248:	2200      	movs	r2, #0
 800124a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_SPI4_Init+0xa8>)
 800124e:	2200      	movs	r2, #0
 8001250:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_SPI4_Init+0xa8>)
 8001254:	2200      	movs	r2, #0
 8001256:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_SPI4_Init+0xa8>)
 800125a:	2200      	movs	r2, #0
 800125c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_SPI4_Init+0xa8>)
 8001260:	f007 f800 	bl	8008264 <HAL_SPI_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 800126a:	f7ff ffa9 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	24000324 	.word	0x24000324
 8001278:	40013400 	.word	0x40013400

0800127c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0b8      	sub	sp, #224	; 0xe0
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	22bc      	movs	r2, #188	; 0xbc
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f009 fb45 	bl	800a92c <memset>
  if(spiHandle->Instance==SPI4)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a25      	ldr	r2, [pc, #148]	; (800133c <HAL_SPI_MspInit+0xc0>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d142      	bne.n	8001332 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80012ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 fe46 	bl	8005f4c <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80012c6:	f7ff ff7b 	bl	80011c0 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_SPI_MspInit+0xc4>)
 80012cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_SPI_MspInit+0xc4>)
 80012d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_SPI_MspInit+0xc4>)
 80012dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_SPI_MspInit+0xc4>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ee:	4a14      	ldr	r2, [pc, #80]	; (8001340 <HAL_SPI_MspInit+0xc4>)
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_SPI_MspInit+0xc4>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001306:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800130a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001320:	2305      	movs	r3, #5
 8001322:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001326:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <HAL_SPI_MspInit+0xc8>)
 800132e:	f003 f807 	bl	8004340 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001332:	bf00      	nop
 8001334:	37e0      	adds	r7, #224	; 0xe0
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40013400 	.word	0x40013400
 8001340:	58024400 	.word	0x58024400
 8001344:	58021000 	.word	0x58021000

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_MspInit+0x34>)
 8001350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001354:	4a09      	ldr	r2, [pc, #36]	; (800137c <HAL_MspInit+0x34>)
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <HAL_MspInit+0x34>)
 8001360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800136c:	2004      	movs	r0, #4
 800136e:	f000 fdb7 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	58024400 	.word	0x58024400

08001380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <NMI_Handler+0x4>

08001386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <HardFault_Handler+0x4>

0800138c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <MemManage_Handler+0x4>

08001392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <BusFault_Handler+0x4>

08001398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <UsageFault_Handler+0x4>

0800139e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013cc:	f000 fc8c 	bl	8001ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <DMA1_Stream0_IRQHandler+0x10>)
 80013da:	f001 fb87 	bl	8002aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2400018c 	.word	0x2400018c

080013e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <DMA1_Stream1_IRQHandler+0x10>)
 80013ee:	f001 fb7d 	bl	8002aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	24000204 	.word	0x24000204

080013fc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <DMA1_Stream2_IRQHandler+0x10>)
 8001402:	f001 fb73 	bl	8002aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2400027c 	.word	0x2400027c

08001410 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <SPI1_IRQHandler+0x10>)
 8001416:	f003 fc33 	bl	8004c80 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	24000090 	.word	0x24000090

08001424 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <SPI2_IRQHandler+0x10>)
 800142a:	f003 fc29 	bl	8004c80 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	240000e4 	.word	0x240000e4

08001438 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <SPI3_IRQHandler+0x10>)
 800143e:	f003 fc1f 	bl	8004c80 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	24000138 	.word	0x24000138

0800144c <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream0
  HAL_DMAEx_MUX_IRQHandler(&hdma_spi1_rx);
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <DMAMUX1_OVR_IRQHandler+0x1c>)
 8001452:	f002 ff23 	bl	800429c <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_spi2_rx);
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <DMAMUX1_OVR_IRQHandler+0x20>)
 8001458:	f002 ff20 	bl	800429c <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Stream2
  HAL_DMAEx_MUX_IRQHandler(&hdma_spi3_rx);
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <DMAMUX1_OVR_IRQHandler+0x24>)
 800145e:	f002 ff1d 	bl	800429c <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2400018c 	.word	0x2400018c
 800146c:	24000204 	.word	0x24000204
 8001470:	2400027c 	.word	0x2400027c

08001474 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	e00a      	b.n	800149c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001486:	f3af 8000 	nop.w
 800148a:	4601      	mov	r1, r0
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	60ba      	str	r2, [r7, #8]
 8001492:	b2ca      	uxtb	r2, r1
 8001494:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf0      	blt.n	8001486 <_read+0x12>
	}

return len;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	e009      	b.n	80014d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	60ba      	str	r2, [r7, #8]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fc89 	bl	8000de0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	dbf1      	blt.n	80014c0 <_write+0x12>
	}
	return len;
 80014dc:	687b      	ldr	r3, [r7, #4]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_close>:

int _close(int file)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
	return -1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150e:	605a      	str	r2, [r3, #4]
	return 0;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <_isatty>:

int _isatty(int file)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
	return 1;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
	return 0;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <_sbrk+0x5c>)
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <_sbrk+0x60>)
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <_sbrk+0x64>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <_sbrk+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	d207      	bcs.n	8001590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001580:	f009 f9aa 	bl	800a8d8 <__errno>
 8001584:	4603      	mov	r3, r0
 8001586:	220c      	movs	r2, #12
 8001588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	e009      	b.n	80015a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <_sbrk+0x64>)
 80015a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	24080000 	.word	0x24080000
 80015b0:	00000400 	.word	0x00000400
 80015b4:	240003ac 	.word	0x240003ac
 80015b8:	240004f0 	.word	0x240004f0

080015bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015c0:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <SystemInit+0xe4>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c6:	4a36      	ldr	r2, [pc, #216]	; (80016a0 <SystemInit+0xe4>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015d0:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <SystemInit+0xe8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	2b06      	cmp	r3, #6
 80015da:	d807      	bhi.n	80015ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015dc:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <SystemInit+0xe8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f023 030f 	bic.w	r3, r3, #15
 80015e4:	4a2f      	ldr	r2, [pc, #188]	; (80016a4 <SystemInit+0xe8>)
 80015e6:	f043 0307 	orr.w	r3, r3, #7
 80015ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <SystemInit+0xec>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a2d      	ldr	r2, [pc, #180]	; (80016a8 <SystemInit+0xec>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <SystemInit+0xec>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015fe:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <SystemInit+0xec>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4929      	ldr	r1, [pc, #164]	; (80016a8 <SystemInit+0xec>)
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <SystemInit+0xf0>)
 8001606:	4013      	ands	r3, r2
 8001608:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <SystemInit+0xe8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001616:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <SystemInit+0xe8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 030f 	bic.w	r3, r3, #15
 800161e:	4a21      	ldr	r2, [pc, #132]	; (80016a4 <SystemInit+0xe8>)
 8001620:	f043 0307 	orr.w	r3, r3, #7
 8001624:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <SystemInit+0xec>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <SystemInit+0xec>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <SystemInit+0xec>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <SystemInit+0xec>)
 800163a:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <SystemInit+0xf4>)
 800163c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <SystemInit+0xec>)
 8001640:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <SystemInit+0xf8>)
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001644:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <SystemInit+0xec>)
 8001646:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <SystemInit+0xfc>)
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <SystemInit+0xec>)
 800164c:	2200      	movs	r2, #0
 800164e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <SystemInit+0xec>)
 8001652:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <SystemInit+0xfc>)
 8001654:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <SystemInit+0xec>)
 8001658:	2200      	movs	r2, #0
 800165a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <SystemInit+0xec>)
 800165e:	4a16      	ldr	r2, [pc, #88]	; (80016b8 <SystemInit+0xfc>)
 8001660:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <SystemInit+0xec>)
 8001664:	2200      	movs	r2, #0
 8001666:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <SystemInit+0xec>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <SystemInit+0xec>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001672:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <SystemInit+0xec>)
 8001676:	2200      	movs	r2, #0
 8001678:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <SystemInit+0x100>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <SystemInit+0x104>)
 8001680:	4013      	ands	r3, r2
 8001682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001686:	d202      	bcs.n	800168e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <SystemInit+0x108>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <SystemInit+0x10c>)
 8001690:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001694:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	52002000 	.word	0x52002000
 80016a8:	58024400 	.word	0x58024400
 80016ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80016b0:	02020200 	.word	0x02020200
 80016b4:	01ff0000 	.word	0x01ff0000
 80016b8:	01010280 	.word	0x01010280
 80016bc:	5c001000 	.word	0x5c001000
 80016c0:	ffff0000 	.word	0xffff0000
 80016c4:	51008108 	.word	0x51008108
 80016c8:	52004000 	.word	0x52004000

080016cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b09a      	sub	sp, #104	; 0x68
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	615a      	str	r2, [r3, #20]
 80016fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	222c      	movs	r2, #44	; 0x2c
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f009 f910 	bl	800a92c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800170c:	4b43      	ldr	r3, [pc, #268]	; (800181c <MX_TIM1_Init+0x150>)
 800170e:	4a44      	ldr	r2, [pc, #272]	; (8001820 <MX_TIM1_Init+0x154>)
 8001710:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24-1;
 8001712:	4b42      	ldr	r3, [pc, #264]	; (800181c <MX_TIM1_Init+0x150>)
 8001714:	2217      	movs	r2, #23
 8001716:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b40      	ldr	r3, [pc, #256]	; (800181c <MX_TIM1_Init+0x150>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800171e:	4b3f      	ldr	r3, [pc, #252]	; (800181c <MX_TIM1_Init+0x150>)
 8001720:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001724:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001726:	4b3d      	ldr	r3, [pc, #244]	; (800181c <MX_TIM1_Init+0x150>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800172c:	4b3b      	ldr	r3, [pc, #236]	; (800181c <MX_TIM1_Init+0x150>)
 800172e:	2200      	movs	r2, #0
 8001730:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001732:	4b3a      	ldr	r3, [pc, #232]	; (800181c <MX_TIM1_Init+0x150>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001738:	4838      	ldr	r0, [pc, #224]	; (800181c <MX_TIM1_Init+0x150>)
 800173a:	f006 feb4 	bl	80084a6 <HAL_TIM_Base_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001744:	f7ff fd3c 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800174e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001752:	4619      	mov	r1, r3
 8001754:	4831      	ldr	r0, [pc, #196]	; (800181c <MX_TIM1_Init+0x150>)
 8001756:	f007 f981 	bl	8008a5c <HAL_TIM_ConfigClockSource>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001760:	f7ff fd2e 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001764:	482d      	ldr	r0, [pc, #180]	; (800181c <MX_TIM1_Init+0x150>)
 8001766:	f006 fef5 	bl	8008554 <HAL_TIM_PWM_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001770:	f7ff fd26 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001780:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001784:	4619      	mov	r1, r3
 8001786:	4825      	ldr	r0, [pc, #148]	; (800181c <MX_TIM1_Init+0x150>)
 8001788:	f007 fe94 	bl	80094b4 <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001792:	f7ff fd15 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001796:	2360      	movs	r3, #96	; 0x60
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179e:	2300      	movs	r3, #0
 80017a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80017a2:	2308      	movs	r3, #8
 80017a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017b6:	2204      	movs	r2, #4
 80017b8:	4619      	mov	r1, r3
 80017ba:	4818      	ldr	r0, [pc, #96]	; (800181c <MX_TIM1_Init+0x150>)
 80017bc:	f007 f83a 	bl	8008834 <HAL_TIM_PWM_ConfigChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80017c6:	f7ff fcfb 	bl	80011c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	4807      	ldr	r0, [pc, #28]	; (800181c <MX_TIM1_Init+0x150>)
 8001800:	f007 fee6 	bl	80095d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800180a:	f7ff fcd9 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800180e:	4803      	ldr	r0, [pc, #12]	; (800181c <MX_TIM1_Init+0x150>)
 8001810:	f000 f8ba 	bl	8001988 <HAL_TIM_MspPostInit>

}
 8001814:	bf00      	nop
 8001816:	3768      	adds	r7, #104	; 0x68
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	240003b0 	.word	0x240003b0
 8001820:	40010000 	.word	0x40010000

08001824 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08e      	sub	sp, #56	; 0x38
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]
 8001852:	615a      	str	r2, [r3, #20]
 8001854:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001856:	4b2d      	ldr	r3, [pc, #180]	; (800190c <MX_TIM3_Init+0xe8>)
 8001858:	4a2d      	ldr	r2, [pc, #180]	; (8001910 <MX_TIM3_Init+0xec>)
 800185a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <MX_TIM3_Init+0xe8>)
 800185e:	22ef      	movs	r2, #239	; 0xef
 8001860:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001862:	4b2a      	ldr	r3, [pc, #168]	; (800190c <MX_TIM3_Init+0xe8>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8001868:	4b28      	ldr	r3, [pc, #160]	; (800190c <MX_TIM3_Init+0xe8>)
 800186a:	f241 3287 	movw	r2, #4999	; 0x1387
 800186e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001870:	4b26      	ldr	r3, [pc, #152]	; (800190c <MX_TIM3_Init+0xe8>)
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001876:	4b25      	ldr	r3, [pc, #148]	; (800190c <MX_TIM3_Init+0xe8>)
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800187c:	4823      	ldr	r0, [pc, #140]	; (800190c <MX_TIM3_Init+0xe8>)
 800187e:	f006 fe12 	bl	80084a6 <HAL_TIM_Base_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001888:	f7ff fc9a 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001896:	4619      	mov	r1, r3
 8001898:	481c      	ldr	r0, [pc, #112]	; (800190c <MX_TIM3_Init+0xe8>)
 800189a:	f007 f8df 	bl	8008a5c <HAL_TIM_ConfigClockSource>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80018a4:	f7ff fc8c 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018a8:	4818      	ldr	r0, [pc, #96]	; (800190c <MX_TIM3_Init+0xe8>)
 80018aa:	f006 fe53 	bl	8008554 <HAL_TIM_PWM_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80018b4:	f7ff fc84 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	4619      	mov	r1, r3
 80018c6:	4811      	ldr	r0, [pc, #68]	; (800190c <MX_TIM3_Init+0xe8>)
 80018c8:	f007 fdf4 	bl	80094b4 <HAL_TIMEx_MasterConfigSynchronization>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80018d2:	f7ff fc75 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d6:	2360      	movs	r3, #96	; 0x60
 80018d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2500-1;
 80018da:	f640 13c3 	movw	r3, #2499	; 0x9c3
 80018de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e8:	463b      	mov	r3, r7
 80018ea:	2200      	movs	r2, #0
 80018ec:	4619      	mov	r1, r3
 80018ee:	4807      	ldr	r0, [pc, #28]	; (800190c <MX_TIM3_Init+0xe8>)
 80018f0:	f006 ffa0 	bl	8008834 <HAL_TIM_PWM_ConfigChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80018fa:	f7ff fc61 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018fe:	4803      	ldr	r0, [pc, #12]	; (800190c <MX_TIM3_Init+0xe8>)
 8001900:	f000 f842 	bl	8001988 <HAL_TIM_MspPostInit>

}
 8001904:	bf00      	nop
 8001906:	3738      	adds	r7, #56	; 0x38
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	240003fc 	.word	0x240003fc
 8001910:	40000400 	.word	0x40000400

08001914 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a16      	ldr	r2, [pc, #88]	; (800197c <HAL_TIM_Base_MspInit+0x68>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d10f      	bne.n	8001946 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001926:	4b16      	ldr	r3, [pc, #88]	; (8001980 <HAL_TIM_Base_MspInit+0x6c>)
 8001928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800192c:	4a14      	ldr	r2, [pc, #80]	; (8001980 <HAL_TIM_Base_MspInit+0x6c>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_TIM_Base_MspInit+0x6c>)
 8001938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001944:	e013      	b.n	800196e <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM3)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <HAL_TIM_Base_MspInit+0x70>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d10e      	bne.n	800196e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_TIM_Base_MspInit+0x6c>)
 8001952:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <HAL_TIM_Base_MspInit+0x6c>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <HAL_TIM_Base_MspInit+0x6c>)
 8001962:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40010000 	.word	0x40010000
 8001980:	58024400 	.word	0x58024400
 8001984:	40000400 	.word	0x40000400

08001988 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <HAL_TIM_MspPostInit+0xb4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d120      	bne.n	80019ec <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019aa:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_TIM_MspPostInit+0xb8>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b0:	4a23      	ldr	r2, [pc, #140]	; (8001a40 <HAL_TIM_MspPostInit+0xb8>)
 80019b2:	f043 0310 	orr.w	r3, r3, #16
 80019b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <HAL_TIM_MspPostInit+0xb8>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = LCD_LIGHT_Pin;
 80019c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019da:	2301      	movs	r3, #1
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_LIGHT_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	4817      	ldr	r0, [pc, #92]	; (8001a44 <HAL_TIM_MspPostInit+0xbc>)
 80019e6:	f002 fcab 	bl	8004340 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019ea:	e023      	b.n	8001a34 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a15      	ldr	r2, [pc, #84]	; (8001a48 <HAL_TIM_MspPostInit+0xc0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d11e      	bne.n	8001a34 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_TIM_MspPostInit+0xb8>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fc:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_TIM_MspPostInit+0xb8>)
 80019fe:	f043 0302 	orr.w	r3, r3, #2
 8001a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_TIM_MspPostInit+0xb8>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a14:	2310      	movs	r3, #16
 8001a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a24:	2302      	movs	r3, #2
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4807      	ldr	r0, [pc, #28]	; (8001a4c <HAL_TIM_MspPostInit+0xc4>)
 8001a30:	f002 fc86 	bl	8004340 <HAL_GPIO_Init>
}
 8001a34:	bf00      	nop
 8001a36:	3728      	adds	r7, #40	; 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	58024400 	.word	0x58024400
 8001a44:	58021000 	.word	0x58021000
 8001a48:	40000400 	.word	0x40000400
 8001a4c:	58020400 	.word	0x58020400

08001a50 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a54:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <MX_UART4_Init+0x90>)
 8001a56:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <MX_UART4_Init+0x94>)
 8001a58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8001a5a:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <MX_UART4_Init+0x90>)
 8001a5c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001a60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a62:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <MX_UART4_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <MX_UART4_Init+0x90>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <MX_UART4_Init+0x90>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <MX_UART4_Init+0x90>)
 8001a76:	220c      	movs	r2, #12
 8001a78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7a:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <MX_UART4_Init+0x90>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <MX_UART4_Init+0x90>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <MX_UART4_Init+0x90>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_UART4_Init+0x90>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <MX_UART4_Init+0x90>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a98:	4811      	ldr	r0, [pc, #68]	; (8001ae0 <MX_UART4_Init+0x90>)
 8001a9a:	f007 fe17 	bl	80096cc <HAL_UART_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001aa4:	f7ff fb8c 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <MX_UART4_Init+0x90>)
 8001aac:	f008 fe4a 	bl	800a744 <HAL_UARTEx_SetTxFifoThreshold>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001ab6:	f7ff fb83 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aba:	2100      	movs	r1, #0
 8001abc:	4808      	ldr	r0, [pc, #32]	; (8001ae0 <MX_UART4_Init+0x90>)
 8001abe:	f008 fe7f 	bl	800a7c0 <HAL_UARTEx_SetRxFifoThreshold>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001ac8:	f7ff fb7a 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001acc:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <MX_UART4_Init+0x90>)
 8001ace:	f008 fe00 	bl	800a6d2 <HAL_UARTEx_DisableFifoMode>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001ad8:	f7ff fb72 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	24000448 	.word	0x24000448
 8001ae4:	40004c00 	.word	0x40004c00

08001ae8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0b8      	sub	sp, #224	; 0xe0
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	22bc      	movs	r2, #188	; 0xbc
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f008 ff0f 	bl	800a92c <memset>
  if(uartHandle->Instance==UART4)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a24      	ldr	r2, [pc, #144]	; (8001ba4 <HAL_UART_MspInit+0xbc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d141      	bne.n	8001b9c <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b22:	f107 0310 	add.w	r3, r7, #16
 8001b26:	4618      	mov	r0, r3
 8001b28:	f004 fa10 	bl	8005f4c <HAL_RCCEx_PeriphCLKConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b32:	f7ff fb45 	bl	80011c0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b36:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <HAL_UART_MspInit+0xc0>)
 8001b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b3c:	4a1a      	ldr	r2, [pc, #104]	; (8001ba8 <HAL_UART_MspInit+0xc0>)
 8001b3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b46:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_UART_MspInit+0xc0>)
 8001b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_UART_MspInit+0xc0>)
 8001b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5a:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <HAL_UART_MspInit+0xc0>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b64:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_UART_MspInit+0xc0>)
 8001b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b72:	2303      	movs	r3, #3
 8001b74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b94:	4619      	mov	r1, r3
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <HAL_UART_MspInit+0xc4>)
 8001b98:	f002 fbd2 	bl	8004340 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	37e0      	adds	r7, #224	; 0xe0
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40004c00 	.word	0x40004c00
 8001ba8:	58024400 	.word	0x58024400
 8001bac:	58020000 	.word	0x58020000

08001bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bb4:	f7ff fd02 	bl	80015bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bba:	490d      	ldr	r1, [pc, #52]	; (8001bf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc0:	e002      	b.n	8001bc8 <LoopCopyDataInit>

08001bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc6:	3304      	adds	r3, #4

08001bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bcc:	d3f9      	bcc.n	8001bc2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bd0:	4c0a      	ldr	r4, [pc, #40]	; (8001bfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd4:	e001      	b.n	8001bda <LoopFillZerobss>

08001bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd8:	3204      	adds	r2, #4

08001bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bdc:	d3fb      	bcc.n	8001bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bde:	f008 fe81 	bl	800a8e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001be2:	f7ff f9af 	bl	8000f44 <main>
  bx  lr
 8001be6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001be8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001bec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bf0:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001bf4:	0800b96c 	.word	0x0800b96c
  ldr r2, =_sbss
 8001bf8:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001bfc:	240004ec 	.word	0x240004ec

08001c00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC3_IRQHandler>
	...

08001c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0a:	2003      	movs	r0, #3
 8001c0c:	f000 f968 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c10:	f003 ffc6 	bl	8005ba0 <HAL_RCC_GetSysClockFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <HAL_Init+0x68>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	4913      	ldr	r1, [pc, #76]	; (8001c70 <HAL_Init+0x6c>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <HAL_Init+0x68>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <HAL_Init+0x6c>)
 8001c38:	5cd3      	ldrb	r3, [r2, r3]
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <HAL_Init+0x70>)
 8001c46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c48:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <HAL_Init+0x74>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c4e:	2007      	movs	r0, #7
 8001c50:	f000 f814 	bl	8001c7c <HAL_InitTick>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e002      	b.n	8001c64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c5e:	f7ff fb73 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	58024400 	.word	0x58024400
 8001c70:	0800b884 	.word	0x0800b884
 8001c74:	24000004 	.word	0x24000004
 8001c78:	24000000 	.word	0x24000000

08001c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c84:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_InitTick+0x60>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e021      	b.n	8001cd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <HAL_InitTick+0x64>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_InitTick+0x60>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f94d 	bl	8001f46 <HAL_SYSTICK_Config>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00e      	b.n	8001cd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b0f      	cmp	r3, #15
 8001cba:	d80a      	bhi.n	8001cd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f000 f917 	bl	8001ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc8:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <HAL_InitTick+0x68>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	2400000c 	.word	0x2400000c
 8001ce0:	24000000 	.word	0x24000000
 8001ce4:	24000008 	.word	0x24000008

08001ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_IncTick+0x20>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_IncTick+0x24>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <HAL_IncTick+0x24>)
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	2400000c 	.word	0x2400000c
 8001d0c:	240004d8 	.word	0x240004d8

08001d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_GetTick+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	240004d8 	.word	0x240004d8

08001d28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <HAL_GetREVID+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0c1b      	lsrs	r3, r3, #16
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	5c001000 	.word	0x5c001000

08001d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <__NVIC_SetPriorityGrouping+0x40>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <__NVIC_SetPriorityGrouping+0x40>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00
 8001d84:	05fa0000 	.word	0x05fa0000

08001d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 0307 	and.w	r3, r3, #7
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	db0b      	blt.n	8001dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	4907      	ldr	r1, [pc, #28]	; (8001ddc <__NVIC_EnableIRQ+0x38>)
 8001dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100

08001de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	; (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	; (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
         );
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	; 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eac:	d301      	bcc.n	8001eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00f      	b.n	8001ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <SysTick_Config+0x40>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eba:	210f      	movs	r1, #15
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f7ff ff8e 	bl	8001de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <SysTick_Config+0x40>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <SysTick_Config+0x40>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff29 	bl	8001d40 <__NVIC_SetPriorityGrouping>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f04:	f7ff ff40 	bl	8001d88 <__NVIC_GetPriorityGrouping>
 8001f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f7ff ff90 	bl	8001e34 <NVIC_EncodePriority>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff5f 	bl	8001de0 <__NVIC_SetPriority>
}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff33 	bl	8001da4 <__NVIC_EnableIRQ>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ffa4 	bl	8001e9c <SysTick_Config>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff fed2 	bl	8001d10 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e316      	b.n	80025a6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a66      	ldr	r2, [pc, #408]	; (8002118 <HAL_DMA_Init+0x1b8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d04a      	beq.n	8002018 <HAL_DMA_Init+0xb8>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a65      	ldr	r2, [pc, #404]	; (800211c <HAL_DMA_Init+0x1bc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d045      	beq.n	8002018 <HAL_DMA_Init+0xb8>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a63      	ldr	r2, [pc, #396]	; (8002120 <HAL_DMA_Init+0x1c0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d040      	beq.n	8002018 <HAL_DMA_Init+0xb8>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a62      	ldr	r2, [pc, #392]	; (8002124 <HAL_DMA_Init+0x1c4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d03b      	beq.n	8002018 <HAL_DMA_Init+0xb8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a60      	ldr	r2, [pc, #384]	; (8002128 <HAL_DMA_Init+0x1c8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d036      	beq.n	8002018 <HAL_DMA_Init+0xb8>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a5f      	ldr	r2, [pc, #380]	; (800212c <HAL_DMA_Init+0x1cc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d031      	beq.n	8002018 <HAL_DMA_Init+0xb8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a5d      	ldr	r2, [pc, #372]	; (8002130 <HAL_DMA_Init+0x1d0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d02c      	beq.n	8002018 <HAL_DMA_Init+0xb8>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a5c      	ldr	r2, [pc, #368]	; (8002134 <HAL_DMA_Init+0x1d4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d027      	beq.n	8002018 <HAL_DMA_Init+0xb8>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a5a      	ldr	r2, [pc, #360]	; (8002138 <HAL_DMA_Init+0x1d8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d022      	beq.n	8002018 <HAL_DMA_Init+0xb8>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a59      	ldr	r2, [pc, #356]	; (800213c <HAL_DMA_Init+0x1dc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d01d      	beq.n	8002018 <HAL_DMA_Init+0xb8>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a57      	ldr	r2, [pc, #348]	; (8002140 <HAL_DMA_Init+0x1e0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d018      	beq.n	8002018 <HAL_DMA_Init+0xb8>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a56      	ldr	r2, [pc, #344]	; (8002144 <HAL_DMA_Init+0x1e4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d013      	beq.n	8002018 <HAL_DMA_Init+0xb8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a54      	ldr	r2, [pc, #336]	; (8002148 <HAL_DMA_Init+0x1e8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00e      	beq.n	8002018 <HAL_DMA_Init+0xb8>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a53      	ldr	r2, [pc, #332]	; (800214c <HAL_DMA_Init+0x1ec>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d009      	beq.n	8002018 <HAL_DMA_Init+0xb8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a51      	ldr	r2, [pc, #324]	; (8002150 <HAL_DMA_Init+0x1f0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d004      	beq.n	8002018 <HAL_DMA_Init+0xb8>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a50      	ldr	r2, [pc, #320]	; (8002154 <HAL_DMA_Init+0x1f4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_DMA_Init+0xbc>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <HAL_DMA_Init+0xbe>
 800201c:	2300      	movs	r3, #0
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 813b 	beq.w	800229a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a37      	ldr	r2, [pc, #220]	; (8002118 <HAL_DMA_Init+0x1b8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d04a      	beq.n	80020d4 <HAL_DMA_Init+0x174>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a36      	ldr	r2, [pc, #216]	; (800211c <HAL_DMA_Init+0x1bc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d045      	beq.n	80020d4 <HAL_DMA_Init+0x174>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a34      	ldr	r2, [pc, #208]	; (8002120 <HAL_DMA_Init+0x1c0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d040      	beq.n	80020d4 <HAL_DMA_Init+0x174>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a33      	ldr	r2, [pc, #204]	; (8002124 <HAL_DMA_Init+0x1c4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d03b      	beq.n	80020d4 <HAL_DMA_Init+0x174>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a31      	ldr	r2, [pc, #196]	; (8002128 <HAL_DMA_Init+0x1c8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d036      	beq.n	80020d4 <HAL_DMA_Init+0x174>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a30      	ldr	r2, [pc, #192]	; (800212c <HAL_DMA_Init+0x1cc>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d031      	beq.n	80020d4 <HAL_DMA_Init+0x174>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a2e      	ldr	r2, [pc, #184]	; (8002130 <HAL_DMA_Init+0x1d0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d02c      	beq.n	80020d4 <HAL_DMA_Init+0x174>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a2d      	ldr	r2, [pc, #180]	; (8002134 <HAL_DMA_Init+0x1d4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d027      	beq.n	80020d4 <HAL_DMA_Init+0x174>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a2b      	ldr	r2, [pc, #172]	; (8002138 <HAL_DMA_Init+0x1d8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d022      	beq.n	80020d4 <HAL_DMA_Init+0x174>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a2a      	ldr	r2, [pc, #168]	; (800213c <HAL_DMA_Init+0x1dc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d01d      	beq.n	80020d4 <HAL_DMA_Init+0x174>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a28      	ldr	r2, [pc, #160]	; (8002140 <HAL_DMA_Init+0x1e0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d018      	beq.n	80020d4 <HAL_DMA_Init+0x174>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a27      	ldr	r2, [pc, #156]	; (8002144 <HAL_DMA_Init+0x1e4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d013      	beq.n	80020d4 <HAL_DMA_Init+0x174>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a25      	ldr	r2, [pc, #148]	; (8002148 <HAL_DMA_Init+0x1e8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00e      	beq.n	80020d4 <HAL_DMA_Init+0x174>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a24      	ldr	r2, [pc, #144]	; (800214c <HAL_DMA_Init+0x1ec>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d009      	beq.n	80020d4 <HAL_DMA_Init+0x174>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a22      	ldr	r2, [pc, #136]	; (8002150 <HAL_DMA_Init+0x1f0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d004      	beq.n	80020d4 <HAL_DMA_Init+0x174>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a21      	ldr	r2, [pc, #132]	; (8002154 <HAL_DMA_Init+0x1f4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d108      	bne.n	80020e6 <HAL_DMA_Init+0x186>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e007      	b.n	80020f6 <HAL_DMA_Init+0x196>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0201 	bic.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020f6:	e02f      	b.n	8002158 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020f8:	f7ff fe0a 	bl	8001d10 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b05      	cmp	r3, #5
 8002104:	d928      	bls.n	8002158 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2220      	movs	r2, #32
 800210a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2203      	movs	r2, #3
 8002110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e246      	b.n	80025a6 <HAL_DMA_Init+0x646>
 8002118:	40020010 	.word	0x40020010
 800211c:	40020028 	.word	0x40020028
 8002120:	40020040 	.word	0x40020040
 8002124:	40020058 	.word	0x40020058
 8002128:	40020070 	.word	0x40020070
 800212c:	40020088 	.word	0x40020088
 8002130:	400200a0 	.word	0x400200a0
 8002134:	400200b8 	.word	0x400200b8
 8002138:	40020410 	.word	0x40020410
 800213c:	40020428 	.word	0x40020428
 8002140:	40020440 	.word	0x40020440
 8002144:	40020458 	.word	0x40020458
 8002148:	40020470 	.word	0x40020470
 800214c:	40020488 	.word	0x40020488
 8002150:	400204a0 	.word	0x400204a0
 8002154:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1c8      	bne.n	80020f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4b83      	ldr	r3, [pc, #524]	; (8002380 <HAL_DMA_Init+0x420>)
 8002172:	4013      	ands	r3, r2
 8002174:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800217e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800218a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002196:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d107      	bne.n	80021bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	4313      	orrs	r3, r2
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80021bc:	4b71      	ldr	r3, [pc, #452]	; (8002384 <HAL_DMA_Init+0x424>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b71      	ldr	r3, [pc, #452]	; (8002388 <HAL_DMA_Init+0x428>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021c8:	d328      	bcc.n	800221c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b28      	cmp	r3, #40	; 0x28
 80021d0:	d903      	bls.n	80021da <HAL_DMA_Init+0x27a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b2e      	cmp	r3, #46	; 0x2e
 80021d8:	d917      	bls.n	800220a <HAL_DMA_Init+0x2aa>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b3e      	cmp	r3, #62	; 0x3e
 80021e0:	d903      	bls.n	80021ea <HAL_DMA_Init+0x28a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b42      	cmp	r3, #66	; 0x42
 80021e8:	d90f      	bls.n	800220a <HAL_DMA_Init+0x2aa>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b46      	cmp	r3, #70	; 0x46
 80021f0:	d903      	bls.n	80021fa <HAL_DMA_Init+0x29a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b48      	cmp	r3, #72	; 0x48
 80021f8:	d907      	bls.n	800220a <HAL_DMA_Init+0x2aa>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b4e      	cmp	r3, #78	; 0x4e
 8002200:	d905      	bls.n	800220e <HAL_DMA_Init+0x2ae>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b52      	cmp	r3, #82	; 0x52
 8002208:	d801      	bhi.n	800220e <HAL_DMA_Init+0x2ae>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_DMA_Init+0x2b0>
 800220e:	2300      	movs	r3, #0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800221a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f023 0307 	bic.w	r3, r3, #7
 8002232:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	2b04      	cmp	r3, #4
 8002244:	d117      	bne.n	8002276 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00e      	beq.n	8002276 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f001 fdcf 	bl	8003dfc <DMA_CheckFifoParam>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2240      	movs	r2, #64	; 0x40
 8002268:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e197      	b.n	80025a6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f001 fd0a 	bl	8003c98 <DMA_CalcBaseAndBitshift>
 8002284:	4603      	mov	r3, r0
 8002286:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	223f      	movs	r2, #63	; 0x3f
 8002292:	409a      	lsls	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	e0cd      	b.n	8002436 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a3b      	ldr	r2, [pc, #236]	; (800238c <HAL_DMA_Init+0x42c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d022      	beq.n	80022ea <HAL_DMA_Init+0x38a>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a39      	ldr	r2, [pc, #228]	; (8002390 <HAL_DMA_Init+0x430>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d01d      	beq.n	80022ea <HAL_DMA_Init+0x38a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a38      	ldr	r2, [pc, #224]	; (8002394 <HAL_DMA_Init+0x434>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d018      	beq.n	80022ea <HAL_DMA_Init+0x38a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a36      	ldr	r2, [pc, #216]	; (8002398 <HAL_DMA_Init+0x438>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_DMA_Init+0x38a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a35      	ldr	r2, [pc, #212]	; (800239c <HAL_DMA_Init+0x43c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d00e      	beq.n	80022ea <HAL_DMA_Init+0x38a>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a33      	ldr	r2, [pc, #204]	; (80023a0 <HAL_DMA_Init+0x440>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d009      	beq.n	80022ea <HAL_DMA_Init+0x38a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a32      	ldr	r2, [pc, #200]	; (80023a4 <HAL_DMA_Init+0x444>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d004      	beq.n	80022ea <HAL_DMA_Init+0x38a>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a30      	ldr	r2, [pc, #192]	; (80023a8 <HAL_DMA_Init+0x448>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_DMA_Init+0x38e>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_DMA_Init+0x390>
 80022ee:	2300      	movs	r3, #0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8097 	beq.w	8002424 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a24      	ldr	r2, [pc, #144]	; (800238c <HAL_DMA_Init+0x42c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d021      	beq.n	8002344 <HAL_DMA_Init+0x3e4>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a22      	ldr	r2, [pc, #136]	; (8002390 <HAL_DMA_Init+0x430>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01c      	beq.n	8002344 <HAL_DMA_Init+0x3e4>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a21      	ldr	r2, [pc, #132]	; (8002394 <HAL_DMA_Init+0x434>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d017      	beq.n	8002344 <HAL_DMA_Init+0x3e4>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1f      	ldr	r2, [pc, #124]	; (8002398 <HAL_DMA_Init+0x438>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d012      	beq.n	8002344 <HAL_DMA_Init+0x3e4>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a1e      	ldr	r2, [pc, #120]	; (800239c <HAL_DMA_Init+0x43c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00d      	beq.n	8002344 <HAL_DMA_Init+0x3e4>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <HAL_DMA_Init+0x440>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d008      	beq.n	8002344 <HAL_DMA_Init+0x3e4>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <HAL_DMA_Init+0x444>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d003      	beq.n	8002344 <HAL_DMA_Init+0x3e4>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <HAL_DMA_Init+0x448>)
 8002342:	4293      	cmp	r3, r2
 8002344:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2202      	movs	r2, #2
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_DMA_Init+0x44c>)
 8002362:	4013      	ands	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b40      	cmp	r3, #64	; 0x40
 800236c:	d020      	beq.n	80023b0 <HAL_DMA_Init+0x450>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b80      	cmp	r3, #128	; 0x80
 8002374:	d102      	bne.n	800237c <HAL_DMA_Init+0x41c>
 8002376:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800237a:	e01a      	b.n	80023b2 <HAL_DMA_Init+0x452>
 800237c:	2300      	movs	r3, #0
 800237e:	e018      	b.n	80023b2 <HAL_DMA_Init+0x452>
 8002380:	fe10803f 	.word	0xfe10803f
 8002384:	5c001000 	.word	0x5c001000
 8002388:	ffff0000 	.word	0xffff0000
 800238c:	58025408 	.word	0x58025408
 8002390:	5802541c 	.word	0x5802541c
 8002394:	58025430 	.word	0x58025430
 8002398:	58025444 	.word	0x58025444
 800239c:	58025458 	.word	0x58025458
 80023a0:	5802546c 	.word	0x5802546c
 80023a4:	58025480 	.word	0x58025480
 80023a8:	58025494 	.word	0x58025494
 80023ac:	fffe000f 	.word	0xfffe000f
 80023b0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68d2      	ldr	r2, [r2, #12]
 80023b6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80023c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80023c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80023d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023e0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b6e      	ldr	r3, [pc, #440]	; (80025b0 <HAL_DMA_Init+0x650>)
 80023f8:	4413      	add	r3, r2
 80023fa:	4a6e      	ldr	r2, [pc, #440]	; (80025b4 <HAL_DMA_Init+0x654>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	009a      	lsls	r2, r3, #2
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f001 fc45 	bl	8003c98 <DMA_CalcBaseAndBitshift>
 800240e:	4603      	mov	r3, r0
 8002410:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	2201      	movs	r2, #1
 800241c:	409a      	lsls	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	e008      	b.n	8002436 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2240      	movs	r2, #64	; 0x40
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2203      	movs	r2, #3
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e0b7      	b.n	80025a6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a5f      	ldr	r2, [pc, #380]	; (80025b8 <HAL_DMA_Init+0x658>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d072      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a5d      	ldr	r2, [pc, #372]	; (80025bc <HAL_DMA_Init+0x65c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d06d      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a5c      	ldr	r2, [pc, #368]	; (80025c0 <HAL_DMA_Init+0x660>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d068      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a5a      	ldr	r2, [pc, #360]	; (80025c4 <HAL_DMA_Init+0x664>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d063      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a59      	ldr	r2, [pc, #356]	; (80025c8 <HAL_DMA_Init+0x668>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d05e      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a57      	ldr	r2, [pc, #348]	; (80025cc <HAL_DMA_Init+0x66c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d059      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a56      	ldr	r2, [pc, #344]	; (80025d0 <HAL_DMA_Init+0x670>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d054      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a54      	ldr	r2, [pc, #336]	; (80025d4 <HAL_DMA_Init+0x674>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d04f      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a53      	ldr	r2, [pc, #332]	; (80025d8 <HAL_DMA_Init+0x678>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d04a      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a51      	ldr	r2, [pc, #324]	; (80025dc <HAL_DMA_Init+0x67c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d045      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a50      	ldr	r2, [pc, #320]	; (80025e0 <HAL_DMA_Init+0x680>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d040      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a4e      	ldr	r2, [pc, #312]	; (80025e4 <HAL_DMA_Init+0x684>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d03b      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a4d      	ldr	r2, [pc, #308]	; (80025e8 <HAL_DMA_Init+0x688>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d036      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a4b      	ldr	r2, [pc, #300]	; (80025ec <HAL_DMA_Init+0x68c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d031      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a4a      	ldr	r2, [pc, #296]	; (80025f0 <HAL_DMA_Init+0x690>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d02c      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a48      	ldr	r2, [pc, #288]	; (80025f4 <HAL_DMA_Init+0x694>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d027      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a47      	ldr	r2, [pc, #284]	; (80025f8 <HAL_DMA_Init+0x698>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d022      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a45      	ldr	r2, [pc, #276]	; (80025fc <HAL_DMA_Init+0x69c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01d      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a44      	ldr	r2, [pc, #272]	; (8002600 <HAL_DMA_Init+0x6a0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d018      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a42      	ldr	r2, [pc, #264]	; (8002604 <HAL_DMA_Init+0x6a4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d013      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a41      	ldr	r2, [pc, #260]	; (8002608 <HAL_DMA_Init+0x6a8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00e      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a3f      	ldr	r2, [pc, #252]	; (800260c <HAL_DMA_Init+0x6ac>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a3e      	ldr	r2, [pc, #248]	; (8002610 <HAL_DMA_Init+0x6b0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d004      	beq.n	8002526 <HAL_DMA_Init+0x5c6>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a3c      	ldr	r2, [pc, #240]	; (8002614 <HAL_DMA_Init+0x6b4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d101      	bne.n	800252a <HAL_DMA_Init+0x5ca>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_DMA_Init+0x5cc>
 800252a:	2300      	movs	r3, #0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d032      	beq.n	8002596 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f001 fcdf 	bl	8003ef4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b80      	cmp	r3, #128	; 0x80
 800253c:	d102      	bne.n	8002544 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002558:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d010      	beq.n	8002584 <HAL_DMA_Init+0x624>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b08      	cmp	r3, #8
 8002568:	d80c      	bhi.n	8002584 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f001 fd5c 	bl	8004028 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	e008      	b.n	8002596 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	a7fdabf8 	.word	0xa7fdabf8
 80025b4:	cccccccd 	.word	0xcccccccd
 80025b8:	40020010 	.word	0x40020010
 80025bc:	40020028 	.word	0x40020028
 80025c0:	40020040 	.word	0x40020040
 80025c4:	40020058 	.word	0x40020058
 80025c8:	40020070 	.word	0x40020070
 80025cc:	40020088 	.word	0x40020088
 80025d0:	400200a0 	.word	0x400200a0
 80025d4:	400200b8 	.word	0x400200b8
 80025d8:	40020410 	.word	0x40020410
 80025dc:	40020428 	.word	0x40020428
 80025e0:	40020440 	.word	0x40020440
 80025e4:	40020458 	.word	0x40020458
 80025e8:	40020470 	.word	0x40020470
 80025ec:	40020488 	.word	0x40020488
 80025f0:	400204a0 	.word	0x400204a0
 80025f4:	400204b8 	.word	0x400204b8
 80025f8:	58025408 	.word	0x58025408
 80025fc:	5802541c 	.word	0x5802541c
 8002600:	58025430 	.word	0x58025430
 8002604:	58025444 	.word	0x58025444
 8002608:	58025458 	.word	0x58025458
 800260c:	5802546c 	.word	0x5802546c
 8002610:	58025480 	.word	0x58025480
 8002614:	58025494 	.word	0x58025494

08002618 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e226      	b.n	8002a82 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_DMA_Start_IT+0x2a>
 800263e:	2302      	movs	r3, #2
 8002640:	e21f      	b.n	8002a82 <HAL_DMA_Start_IT+0x46a>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	f040 820a 	bne.w	8002a6c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a68      	ldr	r2, [pc, #416]	; (800280c <HAL_DMA_Start_IT+0x1f4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d04a      	beq.n	8002706 <HAL_DMA_Start_IT+0xee>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a66      	ldr	r2, [pc, #408]	; (8002810 <HAL_DMA_Start_IT+0x1f8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d045      	beq.n	8002706 <HAL_DMA_Start_IT+0xee>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a65      	ldr	r2, [pc, #404]	; (8002814 <HAL_DMA_Start_IT+0x1fc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d040      	beq.n	8002706 <HAL_DMA_Start_IT+0xee>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a63      	ldr	r2, [pc, #396]	; (8002818 <HAL_DMA_Start_IT+0x200>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d03b      	beq.n	8002706 <HAL_DMA_Start_IT+0xee>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a62      	ldr	r2, [pc, #392]	; (800281c <HAL_DMA_Start_IT+0x204>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d036      	beq.n	8002706 <HAL_DMA_Start_IT+0xee>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a60      	ldr	r2, [pc, #384]	; (8002820 <HAL_DMA_Start_IT+0x208>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d031      	beq.n	8002706 <HAL_DMA_Start_IT+0xee>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a5f      	ldr	r2, [pc, #380]	; (8002824 <HAL_DMA_Start_IT+0x20c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d02c      	beq.n	8002706 <HAL_DMA_Start_IT+0xee>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a5d      	ldr	r2, [pc, #372]	; (8002828 <HAL_DMA_Start_IT+0x210>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d027      	beq.n	8002706 <HAL_DMA_Start_IT+0xee>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a5c      	ldr	r2, [pc, #368]	; (800282c <HAL_DMA_Start_IT+0x214>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d022      	beq.n	8002706 <HAL_DMA_Start_IT+0xee>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a5a      	ldr	r2, [pc, #360]	; (8002830 <HAL_DMA_Start_IT+0x218>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01d      	beq.n	8002706 <HAL_DMA_Start_IT+0xee>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a59      	ldr	r2, [pc, #356]	; (8002834 <HAL_DMA_Start_IT+0x21c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d018      	beq.n	8002706 <HAL_DMA_Start_IT+0xee>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a57      	ldr	r2, [pc, #348]	; (8002838 <HAL_DMA_Start_IT+0x220>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d013      	beq.n	8002706 <HAL_DMA_Start_IT+0xee>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a56      	ldr	r2, [pc, #344]	; (800283c <HAL_DMA_Start_IT+0x224>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00e      	beq.n	8002706 <HAL_DMA_Start_IT+0xee>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a54      	ldr	r2, [pc, #336]	; (8002840 <HAL_DMA_Start_IT+0x228>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d009      	beq.n	8002706 <HAL_DMA_Start_IT+0xee>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a53      	ldr	r2, [pc, #332]	; (8002844 <HAL_DMA_Start_IT+0x22c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d004      	beq.n	8002706 <HAL_DMA_Start_IT+0xee>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a51      	ldr	r2, [pc, #324]	; (8002848 <HAL_DMA_Start_IT+0x230>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d108      	bne.n	8002718 <HAL_DMA_Start_IT+0x100>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e007      	b.n	8002728 <HAL_DMA_Start_IT+0x110>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f001 f906 	bl	8003940 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a34      	ldr	r2, [pc, #208]	; (800280c <HAL_DMA_Start_IT+0x1f4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d04a      	beq.n	80027d4 <HAL_DMA_Start_IT+0x1bc>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a33      	ldr	r2, [pc, #204]	; (8002810 <HAL_DMA_Start_IT+0x1f8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d045      	beq.n	80027d4 <HAL_DMA_Start_IT+0x1bc>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a31      	ldr	r2, [pc, #196]	; (8002814 <HAL_DMA_Start_IT+0x1fc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d040      	beq.n	80027d4 <HAL_DMA_Start_IT+0x1bc>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a30      	ldr	r2, [pc, #192]	; (8002818 <HAL_DMA_Start_IT+0x200>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d03b      	beq.n	80027d4 <HAL_DMA_Start_IT+0x1bc>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2e      	ldr	r2, [pc, #184]	; (800281c <HAL_DMA_Start_IT+0x204>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d036      	beq.n	80027d4 <HAL_DMA_Start_IT+0x1bc>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a2d      	ldr	r2, [pc, #180]	; (8002820 <HAL_DMA_Start_IT+0x208>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d031      	beq.n	80027d4 <HAL_DMA_Start_IT+0x1bc>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a2b      	ldr	r2, [pc, #172]	; (8002824 <HAL_DMA_Start_IT+0x20c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d02c      	beq.n	80027d4 <HAL_DMA_Start_IT+0x1bc>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2a      	ldr	r2, [pc, #168]	; (8002828 <HAL_DMA_Start_IT+0x210>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d027      	beq.n	80027d4 <HAL_DMA_Start_IT+0x1bc>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a28      	ldr	r2, [pc, #160]	; (800282c <HAL_DMA_Start_IT+0x214>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d022      	beq.n	80027d4 <HAL_DMA_Start_IT+0x1bc>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a27      	ldr	r2, [pc, #156]	; (8002830 <HAL_DMA_Start_IT+0x218>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d01d      	beq.n	80027d4 <HAL_DMA_Start_IT+0x1bc>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a25      	ldr	r2, [pc, #148]	; (8002834 <HAL_DMA_Start_IT+0x21c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d018      	beq.n	80027d4 <HAL_DMA_Start_IT+0x1bc>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a24      	ldr	r2, [pc, #144]	; (8002838 <HAL_DMA_Start_IT+0x220>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d013      	beq.n	80027d4 <HAL_DMA_Start_IT+0x1bc>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a22      	ldr	r2, [pc, #136]	; (800283c <HAL_DMA_Start_IT+0x224>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00e      	beq.n	80027d4 <HAL_DMA_Start_IT+0x1bc>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a21      	ldr	r2, [pc, #132]	; (8002840 <HAL_DMA_Start_IT+0x228>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d009      	beq.n	80027d4 <HAL_DMA_Start_IT+0x1bc>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1f      	ldr	r2, [pc, #124]	; (8002844 <HAL_DMA_Start_IT+0x22c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d004      	beq.n	80027d4 <HAL_DMA_Start_IT+0x1bc>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1e      	ldr	r2, [pc, #120]	; (8002848 <HAL_DMA_Start_IT+0x230>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d101      	bne.n	80027d8 <HAL_DMA_Start_IT+0x1c0>
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <HAL_DMA_Start_IT+0x1c2>
 80027d8:	2300      	movs	r3, #0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d036      	beq.n	800284c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 021e 	bic.w	r2, r3, #30
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0216 	orr.w	r2, r2, #22
 80027f0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d03e      	beq.n	8002878 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0208 	orr.w	r2, r2, #8
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e035      	b.n	8002878 <HAL_DMA_Start_IT+0x260>
 800280c:	40020010 	.word	0x40020010
 8002810:	40020028 	.word	0x40020028
 8002814:	40020040 	.word	0x40020040
 8002818:	40020058 	.word	0x40020058
 800281c:	40020070 	.word	0x40020070
 8002820:	40020088 	.word	0x40020088
 8002824:	400200a0 	.word	0x400200a0
 8002828:	400200b8 	.word	0x400200b8
 800282c:	40020410 	.word	0x40020410
 8002830:	40020428 	.word	0x40020428
 8002834:	40020440 	.word	0x40020440
 8002838:	40020458 	.word	0x40020458
 800283c:	40020470 	.word	0x40020470
 8002840:	40020488 	.word	0x40020488
 8002844:	400204a0 	.word	0x400204a0
 8002848:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 020e 	bic.w	r2, r3, #14
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 020a 	orr.w	r2, r2, #10
 800285e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0204 	orr.w	r2, r2, #4
 8002876:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a83      	ldr	r2, [pc, #524]	; (8002a8c <HAL_DMA_Start_IT+0x474>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d072      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a82      	ldr	r2, [pc, #520]	; (8002a90 <HAL_DMA_Start_IT+0x478>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d06d      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a80      	ldr	r2, [pc, #512]	; (8002a94 <HAL_DMA_Start_IT+0x47c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d068      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7f      	ldr	r2, [pc, #508]	; (8002a98 <HAL_DMA_Start_IT+0x480>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d063      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a7d      	ldr	r2, [pc, #500]	; (8002a9c <HAL_DMA_Start_IT+0x484>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d05e      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a7c      	ldr	r2, [pc, #496]	; (8002aa0 <HAL_DMA_Start_IT+0x488>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d059      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a7a      	ldr	r2, [pc, #488]	; (8002aa4 <HAL_DMA_Start_IT+0x48c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d054      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a79      	ldr	r2, [pc, #484]	; (8002aa8 <HAL_DMA_Start_IT+0x490>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d04f      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a77      	ldr	r2, [pc, #476]	; (8002aac <HAL_DMA_Start_IT+0x494>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d04a      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a76      	ldr	r2, [pc, #472]	; (8002ab0 <HAL_DMA_Start_IT+0x498>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d045      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a74      	ldr	r2, [pc, #464]	; (8002ab4 <HAL_DMA_Start_IT+0x49c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d040      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a73      	ldr	r2, [pc, #460]	; (8002ab8 <HAL_DMA_Start_IT+0x4a0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d03b      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a71      	ldr	r2, [pc, #452]	; (8002abc <HAL_DMA_Start_IT+0x4a4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d036      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a70      	ldr	r2, [pc, #448]	; (8002ac0 <HAL_DMA_Start_IT+0x4a8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d031      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a6e      	ldr	r2, [pc, #440]	; (8002ac4 <HAL_DMA_Start_IT+0x4ac>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d02c      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a6d      	ldr	r2, [pc, #436]	; (8002ac8 <HAL_DMA_Start_IT+0x4b0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d027      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a6b      	ldr	r2, [pc, #428]	; (8002acc <HAL_DMA_Start_IT+0x4b4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d022      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a6a      	ldr	r2, [pc, #424]	; (8002ad0 <HAL_DMA_Start_IT+0x4b8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d01d      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a68      	ldr	r2, [pc, #416]	; (8002ad4 <HAL_DMA_Start_IT+0x4bc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d018      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a67      	ldr	r2, [pc, #412]	; (8002ad8 <HAL_DMA_Start_IT+0x4c0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d013      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a65      	ldr	r2, [pc, #404]	; (8002adc <HAL_DMA_Start_IT+0x4c4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00e      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a64      	ldr	r2, [pc, #400]	; (8002ae0 <HAL_DMA_Start_IT+0x4c8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d009      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a62      	ldr	r2, [pc, #392]	; (8002ae4 <HAL_DMA_Start_IT+0x4cc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d004      	beq.n	8002968 <HAL_DMA_Start_IT+0x350>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a61      	ldr	r2, [pc, #388]	; (8002ae8 <HAL_DMA_Start_IT+0x4d0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d101      	bne.n	800296c <HAL_DMA_Start_IT+0x354>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <HAL_DMA_Start_IT+0x356>
 800296c:	2300      	movs	r3, #0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01a      	beq.n	80029a8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d007      	beq.n	8002990 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800298e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a37      	ldr	r2, [pc, #220]	; (8002a8c <HAL_DMA_Start_IT+0x474>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d04a      	beq.n	8002a48 <HAL_DMA_Start_IT+0x430>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a36      	ldr	r2, [pc, #216]	; (8002a90 <HAL_DMA_Start_IT+0x478>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d045      	beq.n	8002a48 <HAL_DMA_Start_IT+0x430>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a34      	ldr	r2, [pc, #208]	; (8002a94 <HAL_DMA_Start_IT+0x47c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d040      	beq.n	8002a48 <HAL_DMA_Start_IT+0x430>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a33      	ldr	r2, [pc, #204]	; (8002a98 <HAL_DMA_Start_IT+0x480>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d03b      	beq.n	8002a48 <HAL_DMA_Start_IT+0x430>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a31      	ldr	r2, [pc, #196]	; (8002a9c <HAL_DMA_Start_IT+0x484>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d036      	beq.n	8002a48 <HAL_DMA_Start_IT+0x430>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a30      	ldr	r2, [pc, #192]	; (8002aa0 <HAL_DMA_Start_IT+0x488>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d031      	beq.n	8002a48 <HAL_DMA_Start_IT+0x430>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a2e      	ldr	r2, [pc, #184]	; (8002aa4 <HAL_DMA_Start_IT+0x48c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d02c      	beq.n	8002a48 <HAL_DMA_Start_IT+0x430>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a2d      	ldr	r2, [pc, #180]	; (8002aa8 <HAL_DMA_Start_IT+0x490>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d027      	beq.n	8002a48 <HAL_DMA_Start_IT+0x430>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a2b      	ldr	r2, [pc, #172]	; (8002aac <HAL_DMA_Start_IT+0x494>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d022      	beq.n	8002a48 <HAL_DMA_Start_IT+0x430>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <HAL_DMA_Start_IT+0x498>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d01d      	beq.n	8002a48 <HAL_DMA_Start_IT+0x430>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a28      	ldr	r2, [pc, #160]	; (8002ab4 <HAL_DMA_Start_IT+0x49c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d018      	beq.n	8002a48 <HAL_DMA_Start_IT+0x430>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a27      	ldr	r2, [pc, #156]	; (8002ab8 <HAL_DMA_Start_IT+0x4a0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d013      	beq.n	8002a48 <HAL_DMA_Start_IT+0x430>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a25      	ldr	r2, [pc, #148]	; (8002abc <HAL_DMA_Start_IT+0x4a4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00e      	beq.n	8002a48 <HAL_DMA_Start_IT+0x430>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a24      	ldr	r2, [pc, #144]	; (8002ac0 <HAL_DMA_Start_IT+0x4a8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d009      	beq.n	8002a48 <HAL_DMA_Start_IT+0x430>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a22      	ldr	r2, [pc, #136]	; (8002ac4 <HAL_DMA_Start_IT+0x4ac>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d004      	beq.n	8002a48 <HAL_DMA_Start_IT+0x430>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a21      	ldr	r2, [pc, #132]	; (8002ac8 <HAL_DMA_Start_IT+0x4b0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d108      	bne.n	8002a5a <HAL_DMA_Start_IT+0x442>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	e012      	b.n	8002a80 <HAL_DMA_Start_IT+0x468>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e009      	b.n	8002a80 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40020010 	.word	0x40020010
 8002a90:	40020028 	.word	0x40020028
 8002a94:	40020040 	.word	0x40020040
 8002a98:	40020058 	.word	0x40020058
 8002a9c:	40020070 	.word	0x40020070
 8002aa0:	40020088 	.word	0x40020088
 8002aa4:	400200a0 	.word	0x400200a0
 8002aa8:	400200b8 	.word	0x400200b8
 8002aac:	40020410 	.word	0x40020410
 8002ab0:	40020428 	.word	0x40020428
 8002ab4:	40020440 	.word	0x40020440
 8002ab8:	40020458 	.word	0x40020458
 8002abc:	40020470 	.word	0x40020470
 8002ac0:	40020488 	.word	0x40020488
 8002ac4:	400204a0 	.word	0x400204a0
 8002ac8:	400204b8 	.word	0x400204b8
 8002acc:	58025408 	.word	0x58025408
 8002ad0:	5802541c 	.word	0x5802541c
 8002ad4:	58025430 	.word	0x58025430
 8002ad8:	58025444 	.word	0x58025444
 8002adc:	58025458 	.word	0x58025458
 8002ae0:	5802546c 	.word	0x5802546c
 8002ae4:	58025480 	.word	0x58025480
 8002ae8:	58025494 	.word	0x58025494

08002aec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002af8:	4b67      	ldr	r3, [pc, #412]	; (8002c98 <HAL_DMA_IRQHandler+0x1ac>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a67      	ldr	r2, [pc, #412]	; (8002c9c <HAL_DMA_IRQHandler+0x1b0>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0a9b      	lsrs	r3, r3, #10
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a5f      	ldr	r2, [pc, #380]	; (8002ca0 <HAL_DMA_IRQHandler+0x1b4>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d04a      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xd2>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a5d      	ldr	r2, [pc, #372]	; (8002ca4 <HAL_DMA_IRQHandler+0x1b8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d045      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xd2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a5c      	ldr	r2, [pc, #368]	; (8002ca8 <HAL_DMA_IRQHandler+0x1bc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d040      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xd2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a5a      	ldr	r2, [pc, #360]	; (8002cac <HAL_DMA_IRQHandler+0x1c0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d03b      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xd2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a59      	ldr	r2, [pc, #356]	; (8002cb0 <HAL_DMA_IRQHandler+0x1c4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d036      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xd2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a57      	ldr	r2, [pc, #348]	; (8002cb4 <HAL_DMA_IRQHandler+0x1c8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d031      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xd2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a56      	ldr	r2, [pc, #344]	; (8002cb8 <HAL_DMA_IRQHandler+0x1cc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d02c      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xd2>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a54      	ldr	r2, [pc, #336]	; (8002cbc <HAL_DMA_IRQHandler+0x1d0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d027      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xd2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a53      	ldr	r2, [pc, #332]	; (8002cc0 <HAL_DMA_IRQHandler+0x1d4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d022      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xd2>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a51      	ldr	r2, [pc, #324]	; (8002cc4 <HAL_DMA_IRQHandler+0x1d8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d01d      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xd2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a50      	ldr	r2, [pc, #320]	; (8002cc8 <HAL_DMA_IRQHandler+0x1dc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d018      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xd2>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a4e      	ldr	r2, [pc, #312]	; (8002ccc <HAL_DMA_IRQHandler+0x1e0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d013      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xd2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a4d      	ldr	r2, [pc, #308]	; (8002cd0 <HAL_DMA_IRQHandler+0x1e4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d00e      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xd2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a4b      	ldr	r2, [pc, #300]	; (8002cd4 <HAL_DMA_IRQHandler+0x1e8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d009      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xd2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a4a      	ldr	r2, [pc, #296]	; (8002cd8 <HAL_DMA_IRQHandler+0x1ec>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d004      	beq.n	8002bbe <HAL_DMA_IRQHandler+0xd2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a48      	ldr	r2, [pc, #288]	; (8002cdc <HAL_DMA_IRQHandler+0x1f0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d101      	bne.n	8002bc2 <HAL_DMA_IRQHandler+0xd6>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <HAL_DMA_IRQHandler+0xd8>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 842b 	beq.w	8003420 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 80a2 	beq.w	8002d24 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2e      	ldr	r2, [pc, #184]	; (8002ca0 <HAL_DMA_IRQHandler+0x1b4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d04a      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x194>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2d      	ldr	r2, [pc, #180]	; (8002ca4 <HAL_DMA_IRQHandler+0x1b8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d045      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x194>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <HAL_DMA_IRQHandler+0x1bc>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d040      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x194>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a2a      	ldr	r2, [pc, #168]	; (8002cac <HAL_DMA_IRQHandler+0x1c0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d03b      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x194>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a28      	ldr	r2, [pc, #160]	; (8002cb0 <HAL_DMA_IRQHandler+0x1c4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d036      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x194>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a27      	ldr	r2, [pc, #156]	; (8002cb4 <HAL_DMA_IRQHandler+0x1c8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d031      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x194>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a25      	ldr	r2, [pc, #148]	; (8002cb8 <HAL_DMA_IRQHandler+0x1cc>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d02c      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x194>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a24      	ldr	r2, [pc, #144]	; (8002cbc <HAL_DMA_IRQHandler+0x1d0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d027      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x194>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a22      	ldr	r2, [pc, #136]	; (8002cc0 <HAL_DMA_IRQHandler+0x1d4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d022      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x194>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a21      	ldr	r2, [pc, #132]	; (8002cc4 <HAL_DMA_IRQHandler+0x1d8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d01d      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x194>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <HAL_DMA_IRQHandler+0x1dc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d018      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x194>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1e      	ldr	r2, [pc, #120]	; (8002ccc <HAL_DMA_IRQHandler+0x1e0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d013      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x194>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <HAL_DMA_IRQHandler+0x1e4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00e      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x194>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1b      	ldr	r2, [pc, #108]	; (8002cd4 <HAL_DMA_IRQHandler+0x1e8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d009      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x194>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <HAL_DMA_IRQHandler+0x1ec>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d004      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x194>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a18      	ldr	r2, [pc, #96]	; (8002cdc <HAL_DMA_IRQHandler+0x1f0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d12f      	bne.n	8002ce0 <HAL_DMA_IRQHandler+0x1f4>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bf14      	ite	ne
 8002c8e:	2301      	movne	r3, #1
 8002c90:	2300      	moveq	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	e02e      	b.n	8002cf4 <HAL_DMA_IRQHandler+0x208>
 8002c96:	bf00      	nop
 8002c98:	24000000 	.word	0x24000000
 8002c9c:	1b4e81b5 	.word	0x1b4e81b5
 8002ca0:	40020010 	.word	0x40020010
 8002ca4:	40020028 	.word	0x40020028
 8002ca8:	40020040 	.word	0x40020040
 8002cac:	40020058 	.word	0x40020058
 8002cb0:	40020070 	.word	0x40020070
 8002cb4:	40020088 	.word	0x40020088
 8002cb8:	400200a0 	.word	0x400200a0
 8002cbc:	400200b8 	.word	0x400200b8
 8002cc0:	40020410 	.word	0x40020410
 8002cc4:	40020428 	.word	0x40020428
 8002cc8:	40020440 	.word	0x40020440
 8002ccc:	40020458 	.word	0x40020458
 8002cd0:	40020470 	.word	0x40020470
 8002cd4:	40020488 	.word	0x40020488
 8002cd8:	400204a0 	.word	0x400204a0
 8002cdc:	400204b8 	.word	0x400204b8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf14      	ite	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d015      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0204 	bic.w	r2, r2, #4
 8002d06:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	2208      	movs	r2, #8
 8002d12:	409a      	lsls	r2, r3
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1c:	f043 0201 	orr.w	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d06e      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a69      	ldr	r2, [pc, #420]	; (8002ee4 <HAL_DMA_IRQHandler+0x3f8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d04a      	beq.n	8002dda <HAL_DMA_IRQHandler+0x2ee>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a67      	ldr	r2, [pc, #412]	; (8002ee8 <HAL_DMA_IRQHandler+0x3fc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d045      	beq.n	8002dda <HAL_DMA_IRQHandler+0x2ee>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a66      	ldr	r2, [pc, #408]	; (8002eec <HAL_DMA_IRQHandler+0x400>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d040      	beq.n	8002dda <HAL_DMA_IRQHandler+0x2ee>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a64      	ldr	r2, [pc, #400]	; (8002ef0 <HAL_DMA_IRQHandler+0x404>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d03b      	beq.n	8002dda <HAL_DMA_IRQHandler+0x2ee>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a63      	ldr	r2, [pc, #396]	; (8002ef4 <HAL_DMA_IRQHandler+0x408>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d036      	beq.n	8002dda <HAL_DMA_IRQHandler+0x2ee>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a61      	ldr	r2, [pc, #388]	; (8002ef8 <HAL_DMA_IRQHandler+0x40c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d031      	beq.n	8002dda <HAL_DMA_IRQHandler+0x2ee>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a60      	ldr	r2, [pc, #384]	; (8002efc <HAL_DMA_IRQHandler+0x410>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d02c      	beq.n	8002dda <HAL_DMA_IRQHandler+0x2ee>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a5e      	ldr	r2, [pc, #376]	; (8002f00 <HAL_DMA_IRQHandler+0x414>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d027      	beq.n	8002dda <HAL_DMA_IRQHandler+0x2ee>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a5d      	ldr	r2, [pc, #372]	; (8002f04 <HAL_DMA_IRQHandler+0x418>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d022      	beq.n	8002dda <HAL_DMA_IRQHandler+0x2ee>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a5b      	ldr	r2, [pc, #364]	; (8002f08 <HAL_DMA_IRQHandler+0x41c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01d      	beq.n	8002dda <HAL_DMA_IRQHandler+0x2ee>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a5a      	ldr	r2, [pc, #360]	; (8002f0c <HAL_DMA_IRQHandler+0x420>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d018      	beq.n	8002dda <HAL_DMA_IRQHandler+0x2ee>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a58      	ldr	r2, [pc, #352]	; (8002f10 <HAL_DMA_IRQHandler+0x424>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_DMA_IRQHandler+0x2ee>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a57      	ldr	r2, [pc, #348]	; (8002f14 <HAL_DMA_IRQHandler+0x428>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00e      	beq.n	8002dda <HAL_DMA_IRQHandler+0x2ee>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a55      	ldr	r2, [pc, #340]	; (8002f18 <HAL_DMA_IRQHandler+0x42c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d009      	beq.n	8002dda <HAL_DMA_IRQHandler+0x2ee>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a54      	ldr	r2, [pc, #336]	; (8002f1c <HAL_DMA_IRQHandler+0x430>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d004      	beq.n	8002dda <HAL_DMA_IRQHandler+0x2ee>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a52      	ldr	r2, [pc, #328]	; (8002f20 <HAL_DMA_IRQHandler+0x434>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d10a      	bne.n	8002df0 <HAL_DMA_IRQHandler+0x304>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	e003      	b.n	8002df8 <HAL_DMA_IRQHandler+0x30c>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2300      	movs	r3, #0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00d      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	2201      	movs	r2, #1
 8002e06:	409a      	lsls	r2, r3
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	f043 0202 	orr.w	r2, r3, #2
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	2204      	movs	r2, #4
 8002e22:	409a      	lsls	r2, r3
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 808f 	beq.w	8002f4c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a2c      	ldr	r2, [pc, #176]	; (8002ee4 <HAL_DMA_IRQHandler+0x3f8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d04a      	beq.n	8002ece <HAL_DMA_IRQHandler+0x3e2>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ee8 <HAL_DMA_IRQHandler+0x3fc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d045      	beq.n	8002ece <HAL_DMA_IRQHandler+0x3e2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a29      	ldr	r2, [pc, #164]	; (8002eec <HAL_DMA_IRQHandler+0x400>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d040      	beq.n	8002ece <HAL_DMA_IRQHandler+0x3e2>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a27      	ldr	r2, [pc, #156]	; (8002ef0 <HAL_DMA_IRQHandler+0x404>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d03b      	beq.n	8002ece <HAL_DMA_IRQHandler+0x3e2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a26      	ldr	r2, [pc, #152]	; (8002ef4 <HAL_DMA_IRQHandler+0x408>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d036      	beq.n	8002ece <HAL_DMA_IRQHandler+0x3e2>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a24      	ldr	r2, [pc, #144]	; (8002ef8 <HAL_DMA_IRQHandler+0x40c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d031      	beq.n	8002ece <HAL_DMA_IRQHandler+0x3e2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a23      	ldr	r2, [pc, #140]	; (8002efc <HAL_DMA_IRQHandler+0x410>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d02c      	beq.n	8002ece <HAL_DMA_IRQHandler+0x3e2>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a21      	ldr	r2, [pc, #132]	; (8002f00 <HAL_DMA_IRQHandler+0x414>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d027      	beq.n	8002ece <HAL_DMA_IRQHandler+0x3e2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a20      	ldr	r2, [pc, #128]	; (8002f04 <HAL_DMA_IRQHandler+0x418>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d022      	beq.n	8002ece <HAL_DMA_IRQHandler+0x3e2>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1e      	ldr	r2, [pc, #120]	; (8002f08 <HAL_DMA_IRQHandler+0x41c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d01d      	beq.n	8002ece <HAL_DMA_IRQHandler+0x3e2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <HAL_DMA_IRQHandler+0x420>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d018      	beq.n	8002ece <HAL_DMA_IRQHandler+0x3e2>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1b      	ldr	r2, [pc, #108]	; (8002f10 <HAL_DMA_IRQHandler+0x424>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <HAL_DMA_IRQHandler+0x3e2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1a      	ldr	r2, [pc, #104]	; (8002f14 <HAL_DMA_IRQHandler+0x428>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00e      	beq.n	8002ece <HAL_DMA_IRQHandler+0x3e2>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <HAL_DMA_IRQHandler+0x42c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d009      	beq.n	8002ece <HAL_DMA_IRQHandler+0x3e2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a17      	ldr	r2, [pc, #92]	; (8002f1c <HAL_DMA_IRQHandler+0x430>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d004      	beq.n	8002ece <HAL_DMA_IRQHandler+0x3e2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a15      	ldr	r2, [pc, #84]	; (8002f20 <HAL_DMA_IRQHandler+0x434>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d12a      	bne.n	8002f24 <HAL_DMA_IRQHandler+0x438>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e023      	b.n	8002f2c <HAL_DMA_IRQHandler+0x440>
 8002ee4:	40020010 	.word	0x40020010
 8002ee8:	40020028 	.word	0x40020028
 8002eec:	40020040 	.word	0x40020040
 8002ef0:	40020058 	.word	0x40020058
 8002ef4:	40020070 	.word	0x40020070
 8002ef8:	40020088 	.word	0x40020088
 8002efc:	400200a0 	.word	0x400200a0
 8002f00:	400200b8 	.word	0x400200b8
 8002f04:	40020410 	.word	0x40020410
 8002f08:	40020428 	.word	0x40020428
 8002f0c:	40020440 	.word	0x40020440
 8002f10:	40020458 	.word	0x40020458
 8002f14:	40020470 	.word	0x40020470
 8002f18:	40020488 	.word	0x40020488
 8002f1c:	400204a0 	.word	0x400204a0
 8002f20:	400204b8 	.word	0x400204b8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00d      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f34:	f003 031f 	and.w	r3, r3, #31
 8002f38:	2204      	movs	r2, #4
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	f043 0204 	orr.w	r2, r3, #4
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2210      	movs	r2, #16
 8002f56:	409a      	lsls	r2, r3
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80a6 	beq.w	80030ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a85      	ldr	r2, [pc, #532]	; (800317c <HAL_DMA_IRQHandler+0x690>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d04a      	beq.n	8003002 <HAL_DMA_IRQHandler+0x516>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a83      	ldr	r2, [pc, #524]	; (8003180 <HAL_DMA_IRQHandler+0x694>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d045      	beq.n	8003002 <HAL_DMA_IRQHandler+0x516>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a82      	ldr	r2, [pc, #520]	; (8003184 <HAL_DMA_IRQHandler+0x698>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d040      	beq.n	8003002 <HAL_DMA_IRQHandler+0x516>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a80      	ldr	r2, [pc, #512]	; (8003188 <HAL_DMA_IRQHandler+0x69c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d03b      	beq.n	8003002 <HAL_DMA_IRQHandler+0x516>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a7f      	ldr	r2, [pc, #508]	; (800318c <HAL_DMA_IRQHandler+0x6a0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d036      	beq.n	8003002 <HAL_DMA_IRQHandler+0x516>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a7d      	ldr	r2, [pc, #500]	; (8003190 <HAL_DMA_IRQHandler+0x6a4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d031      	beq.n	8003002 <HAL_DMA_IRQHandler+0x516>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a7c      	ldr	r2, [pc, #496]	; (8003194 <HAL_DMA_IRQHandler+0x6a8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d02c      	beq.n	8003002 <HAL_DMA_IRQHandler+0x516>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a7a      	ldr	r2, [pc, #488]	; (8003198 <HAL_DMA_IRQHandler+0x6ac>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d027      	beq.n	8003002 <HAL_DMA_IRQHandler+0x516>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a79      	ldr	r2, [pc, #484]	; (800319c <HAL_DMA_IRQHandler+0x6b0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d022      	beq.n	8003002 <HAL_DMA_IRQHandler+0x516>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a77      	ldr	r2, [pc, #476]	; (80031a0 <HAL_DMA_IRQHandler+0x6b4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01d      	beq.n	8003002 <HAL_DMA_IRQHandler+0x516>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a76      	ldr	r2, [pc, #472]	; (80031a4 <HAL_DMA_IRQHandler+0x6b8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d018      	beq.n	8003002 <HAL_DMA_IRQHandler+0x516>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a74      	ldr	r2, [pc, #464]	; (80031a8 <HAL_DMA_IRQHandler+0x6bc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_DMA_IRQHandler+0x516>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a73      	ldr	r2, [pc, #460]	; (80031ac <HAL_DMA_IRQHandler+0x6c0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00e      	beq.n	8003002 <HAL_DMA_IRQHandler+0x516>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a71      	ldr	r2, [pc, #452]	; (80031b0 <HAL_DMA_IRQHandler+0x6c4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d009      	beq.n	8003002 <HAL_DMA_IRQHandler+0x516>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a70      	ldr	r2, [pc, #448]	; (80031b4 <HAL_DMA_IRQHandler+0x6c8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_DMA_IRQHandler+0x516>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a6e      	ldr	r2, [pc, #440]	; (80031b8 <HAL_DMA_IRQHandler+0x6cc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d10a      	bne.n	8003018 <HAL_DMA_IRQHandler+0x52c>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf14      	ite	ne
 8003010:	2301      	movne	r3, #1
 8003012:	2300      	moveq	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	e009      	b.n	800302c <HAL_DMA_IRQHandler+0x540>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf14      	ite	ne
 8003026:	2301      	movne	r3, #1
 8003028:	2300      	moveq	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d03e      	beq.n	80030ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	2210      	movs	r2, #16
 800303a:	409a      	lsls	r2, r3
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d018      	beq.n	8003080 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d108      	bne.n	800306e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d024      	beq.n	80030ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	4798      	blx	r3
 800306c:	e01f      	b.n	80030ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01b      	beq.n	80030ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
 800307e:	e016      	b.n	80030ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d107      	bne.n	800309e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0208 	bic.w	r2, r2, #8
 800309c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	2220      	movs	r2, #32
 80030b8:	409a      	lsls	r2, r3
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8110 	beq.w	80032e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a2c      	ldr	r2, [pc, #176]	; (800317c <HAL_DMA_IRQHandler+0x690>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d04a      	beq.n	8003164 <HAL_DMA_IRQHandler+0x678>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2b      	ldr	r2, [pc, #172]	; (8003180 <HAL_DMA_IRQHandler+0x694>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d045      	beq.n	8003164 <HAL_DMA_IRQHandler+0x678>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a29      	ldr	r2, [pc, #164]	; (8003184 <HAL_DMA_IRQHandler+0x698>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d040      	beq.n	8003164 <HAL_DMA_IRQHandler+0x678>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a28      	ldr	r2, [pc, #160]	; (8003188 <HAL_DMA_IRQHandler+0x69c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d03b      	beq.n	8003164 <HAL_DMA_IRQHandler+0x678>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a26      	ldr	r2, [pc, #152]	; (800318c <HAL_DMA_IRQHandler+0x6a0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d036      	beq.n	8003164 <HAL_DMA_IRQHandler+0x678>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a25      	ldr	r2, [pc, #148]	; (8003190 <HAL_DMA_IRQHandler+0x6a4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d031      	beq.n	8003164 <HAL_DMA_IRQHandler+0x678>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a23      	ldr	r2, [pc, #140]	; (8003194 <HAL_DMA_IRQHandler+0x6a8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d02c      	beq.n	8003164 <HAL_DMA_IRQHandler+0x678>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a22      	ldr	r2, [pc, #136]	; (8003198 <HAL_DMA_IRQHandler+0x6ac>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d027      	beq.n	8003164 <HAL_DMA_IRQHandler+0x678>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a20      	ldr	r2, [pc, #128]	; (800319c <HAL_DMA_IRQHandler+0x6b0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d022      	beq.n	8003164 <HAL_DMA_IRQHandler+0x678>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1f      	ldr	r2, [pc, #124]	; (80031a0 <HAL_DMA_IRQHandler+0x6b4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d01d      	beq.n	8003164 <HAL_DMA_IRQHandler+0x678>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1d      	ldr	r2, [pc, #116]	; (80031a4 <HAL_DMA_IRQHandler+0x6b8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d018      	beq.n	8003164 <HAL_DMA_IRQHandler+0x678>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1c      	ldr	r2, [pc, #112]	; (80031a8 <HAL_DMA_IRQHandler+0x6bc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <HAL_DMA_IRQHandler+0x678>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1a      	ldr	r2, [pc, #104]	; (80031ac <HAL_DMA_IRQHandler+0x6c0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00e      	beq.n	8003164 <HAL_DMA_IRQHandler+0x678>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a19      	ldr	r2, [pc, #100]	; (80031b0 <HAL_DMA_IRQHandler+0x6c4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d009      	beq.n	8003164 <HAL_DMA_IRQHandler+0x678>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <HAL_DMA_IRQHandler+0x6c8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_DMA_IRQHandler+0x678>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a16      	ldr	r2, [pc, #88]	; (80031b8 <HAL_DMA_IRQHandler+0x6cc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d12b      	bne.n	80031bc <HAL_DMA_IRQHandler+0x6d0>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b00      	cmp	r3, #0
 8003170:	bf14      	ite	ne
 8003172:	2301      	movne	r3, #1
 8003174:	2300      	moveq	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	e02a      	b.n	80031d0 <HAL_DMA_IRQHandler+0x6e4>
 800317a:	bf00      	nop
 800317c:	40020010 	.word	0x40020010
 8003180:	40020028 	.word	0x40020028
 8003184:	40020040 	.word	0x40020040
 8003188:	40020058 	.word	0x40020058
 800318c:	40020070 	.word	0x40020070
 8003190:	40020088 	.word	0x40020088
 8003194:	400200a0 	.word	0x400200a0
 8003198:	400200b8 	.word	0x400200b8
 800319c:	40020410 	.word	0x40020410
 80031a0:	40020428 	.word	0x40020428
 80031a4:	40020440 	.word	0x40020440
 80031a8:	40020458 	.word	0x40020458
 80031ac:	40020470 	.word	0x40020470
 80031b0:	40020488 	.word	0x40020488
 80031b4:	400204a0 	.word	0x400204a0
 80031b8:	400204b8 	.word	0x400204b8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 8087 	beq.w	80032e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	2220      	movs	r2, #32
 80031e0:	409a      	lsls	r2, r3
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d139      	bne.n	8003266 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0216 	bic.w	r2, r2, #22
 8003200:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003210:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d103      	bne.n	8003222 <HAL_DMA_IRQHandler+0x736>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321e:	2b00      	cmp	r3, #0
 8003220:	d007      	beq.n	8003232 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0208 	bic.w	r2, r2, #8
 8003230:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	223f      	movs	r2, #63	; 0x3f
 800323c:	409a      	lsls	r2, r3
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 834a 	beq.w	80038f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
          }
          return;
 8003264:	e344      	b.n	80038f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d018      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d108      	bne.n	8003294 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	2b00      	cmp	r3, #0
 8003288:	d02c      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
 8003292:	e027      	b.n	80032e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d023      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4798      	blx	r3
 80032a4:	e01e      	b.n	80032e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10f      	bne.n	80032d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0210 	bic.w	r2, r2, #16
 80032c2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8306 	beq.w	80038fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8088 	beq.w	800340c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2204      	movs	r2, #4
 8003300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a7a      	ldr	r2, [pc, #488]	; (80034f4 <HAL_DMA_IRQHandler+0xa08>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d04a      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x8b8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a79      	ldr	r2, [pc, #484]	; (80034f8 <HAL_DMA_IRQHandler+0xa0c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d045      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x8b8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a77      	ldr	r2, [pc, #476]	; (80034fc <HAL_DMA_IRQHandler+0xa10>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d040      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x8b8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a76      	ldr	r2, [pc, #472]	; (8003500 <HAL_DMA_IRQHandler+0xa14>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d03b      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x8b8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a74      	ldr	r2, [pc, #464]	; (8003504 <HAL_DMA_IRQHandler+0xa18>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d036      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x8b8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a73      	ldr	r2, [pc, #460]	; (8003508 <HAL_DMA_IRQHandler+0xa1c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d031      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x8b8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a71      	ldr	r2, [pc, #452]	; (800350c <HAL_DMA_IRQHandler+0xa20>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d02c      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x8b8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a70      	ldr	r2, [pc, #448]	; (8003510 <HAL_DMA_IRQHandler+0xa24>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d027      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x8b8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a6e      	ldr	r2, [pc, #440]	; (8003514 <HAL_DMA_IRQHandler+0xa28>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d022      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x8b8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a6d      	ldr	r2, [pc, #436]	; (8003518 <HAL_DMA_IRQHandler+0xa2c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d01d      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x8b8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a6b      	ldr	r2, [pc, #428]	; (800351c <HAL_DMA_IRQHandler+0xa30>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d018      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x8b8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a6a      	ldr	r2, [pc, #424]	; (8003520 <HAL_DMA_IRQHandler+0xa34>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d013      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x8b8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a68      	ldr	r2, [pc, #416]	; (8003524 <HAL_DMA_IRQHandler+0xa38>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00e      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x8b8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a67      	ldr	r2, [pc, #412]	; (8003528 <HAL_DMA_IRQHandler+0xa3c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x8b8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a65      	ldr	r2, [pc, #404]	; (800352c <HAL_DMA_IRQHandler+0xa40>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x8b8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a64      	ldr	r2, [pc, #400]	; (8003530 <HAL_DMA_IRQHandler+0xa44>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d108      	bne.n	80033b6 <HAL_DMA_IRQHandler+0x8ca>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e007      	b.n	80033c6 <HAL_DMA_IRQHandler+0x8da>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3301      	adds	r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d307      	bcc.n	80033e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f2      	bne.n	80033c6 <HAL_DMA_IRQHandler+0x8da>
 80033e0:	e000      	b.n	80033e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80033e2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2203      	movs	r2, #3
 80033f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80033fa:	e003      	b.n	8003404 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8272 	beq.w	80038fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	4798      	blx	r3
 800341e:	e26c      	b.n	80038fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a43      	ldr	r2, [pc, #268]	; (8003534 <HAL_DMA_IRQHandler+0xa48>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d022      	beq.n	8003470 <HAL_DMA_IRQHandler+0x984>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a42      	ldr	r2, [pc, #264]	; (8003538 <HAL_DMA_IRQHandler+0xa4c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d01d      	beq.n	8003470 <HAL_DMA_IRQHandler+0x984>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a40      	ldr	r2, [pc, #256]	; (800353c <HAL_DMA_IRQHandler+0xa50>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d018      	beq.n	8003470 <HAL_DMA_IRQHandler+0x984>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a3f      	ldr	r2, [pc, #252]	; (8003540 <HAL_DMA_IRQHandler+0xa54>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d013      	beq.n	8003470 <HAL_DMA_IRQHandler+0x984>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a3d      	ldr	r2, [pc, #244]	; (8003544 <HAL_DMA_IRQHandler+0xa58>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00e      	beq.n	8003470 <HAL_DMA_IRQHandler+0x984>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a3c      	ldr	r2, [pc, #240]	; (8003548 <HAL_DMA_IRQHandler+0xa5c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d009      	beq.n	8003470 <HAL_DMA_IRQHandler+0x984>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a3a      	ldr	r2, [pc, #232]	; (800354c <HAL_DMA_IRQHandler+0xa60>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_DMA_IRQHandler+0x984>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a39      	ldr	r2, [pc, #228]	; (8003550 <HAL_DMA_IRQHandler+0xa64>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d101      	bne.n	8003474 <HAL_DMA_IRQHandler+0x988>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <HAL_DMA_IRQHandler+0x98a>
 8003474:	2300      	movs	r3, #0
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 823f 	beq.w	80038fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	2204      	movs	r2, #4
 800348e:	409a      	lsls	r2, r3
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80cd 	beq.w	8003634 <HAL_DMA_IRQHandler+0xb48>
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80c7 	beq.w	8003634 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	2204      	movs	r2, #4
 80034b0:	409a      	lsls	r2, r3
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d049      	beq.n	8003554 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8210 	beq.w	80038f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034dc:	e20a      	b.n	80038f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8206 	beq.w	80038f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034f0:	e200      	b.n	80038f4 <HAL_DMA_IRQHandler+0xe08>
 80034f2:	bf00      	nop
 80034f4:	40020010 	.word	0x40020010
 80034f8:	40020028 	.word	0x40020028
 80034fc:	40020040 	.word	0x40020040
 8003500:	40020058 	.word	0x40020058
 8003504:	40020070 	.word	0x40020070
 8003508:	40020088 	.word	0x40020088
 800350c:	400200a0 	.word	0x400200a0
 8003510:	400200b8 	.word	0x400200b8
 8003514:	40020410 	.word	0x40020410
 8003518:	40020428 	.word	0x40020428
 800351c:	40020440 	.word	0x40020440
 8003520:	40020458 	.word	0x40020458
 8003524:	40020470 	.word	0x40020470
 8003528:	40020488 	.word	0x40020488
 800352c:	400204a0 	.word	0x400204a0
 8003530:	400204b8 	.word	0x400204b8
 8003534:	58025408 	.word	0x58025408
 8003538:	5802541c 	.word	0x5802541c
 800353c:	58025430 	.word	0x58025430
 8003540:	58025444 	.word	0x58025444
 8003544:	58025458 	.word	0x58025458
 8003548:	5802546c 	.word	0x5802546c
 800354c:	58025480 	.word	0x58025480
 8003550:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b00      	cmp	r3, #0
 800355c:	d160      	bne.n	8003620 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a7f      	ldr	r2, [pc, #508]	; (8003760 <HAL_DMA_IRQHandler+0xc74>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d04a      	beq.n	80035fe <HAL_DMA_IRQHandler+0xb12>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a7d      	ldr	r2, [pc, #500]	; (8003764 <HAL_DMA_IRQHandler+0xc78>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d045      	beq.n	80035fe <HAL_DMA_IRQHandler+0xb12>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a7c      	ldr	r2, [pc, #496]	; (8003768 <HAL_DMA_IRQHandler+0xc7c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d040      	beq.n	80035fe <HAL_DMA_IRQHandler+0xb12>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a7a      	ldr	r2, [pc, #488]	; (800376c <HAL_DMA_IRQHandler+0xc80>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d03b      	beq.n	80035fe <HAL_DMA_IRQHandler+0xb12>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a79      	ldr	r2, [pc, #484]	; (8003770 <HAL_DMA_IRQHandler+0xc84>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d036      	beq.n	80035fe <HAL_DMA_IRQHandler+0xb12>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a77      	ldr	r2, [pc, #476]	; (8003774 <HAL_DMA_IRQHandler+0xc88>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d031      	beq.n	80035fe <HAL_DMA_IRQHandler+0xb12>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a76      	ldr	r2, [pc, #472]	; (8003778 <HAL_DMA_IRQHandler+0xc8c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d02c      	beq.n	80035fe <HAL_DMA_IRQHandler+0xb12>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a74      	ldr	r2, [pc, #464]	; (800377c <HAL_DMA_IRQHandler+0xc90>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d027      	beq.n	80035fe <HAL_DMA_IRQHandler+0xb12>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a73      	ldr	r2, [pc, #460]	; (8003780 <HAL_DMA_IRQHandler+0xc94>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d022      	beq.n	80035fe <HAL_DMA_IRQHandler+0xb12>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a71      	ldr	r2, [pc, #452]	; (8003784 <HAL_DMA_IRQHandler+0xc98>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d01d      	beq.n	80035fe <HAL_DMA_IRQHandler+0xb12>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a70      	ldr	r2, [pc, #448]	; (8003788 <HAL_DMA_IRQHandler+0xc9c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d018      	beq.n	80035fe <HAL_DMA_IRQHandler+0xb12>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a6e      	ldr	r2, [pc, #440]	; (800378c <HAL_DMA_IRQHandler+0xca0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <HAL_DMA_IRQHandler+0xb12>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a6d      	ldr	r2, [pc, #436]	; (8003790 <HAL_DMA_IRQHandler+0xca4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00e      	beq.n	80035fe <HAL_DMA_IRQHandler+0xb12>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a6b      	ldr	r2, [pc, #428]	; (8003794 <HAL_DMA_IRQHandler+0xca8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d009      	beq.n	80035fe <HAL_DMA_IRQHandler+0xb12>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a6a      	ldr	r2, [pc, #424]	; (8003798 <HAL_DMA_IRQHandler+0xcac>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d004      	beq.n	80035fe <HAL_DMA_IRQHandler+0xb12>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a68      	ldr	r2, [pc, #416]	; (800379c <HAL_DMA_IRQHandler+0xcb0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d108      	bne.n	8003610 <HAL_DMA_IRQHandler+0xb24>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0208 	bic.w	r2, r2, #8
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e007      	b.n	8003620 <HAL_DMA_IRQHandler+0xb34>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0204 	bic.w	r2, r2, #4
 800361e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8165 	beq.w	80038f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003632:	e15f      	b.n	80038f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2202      	movs	r2, #2
 800363e:	409a      	lsls	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80c5 	beq.w	80037d4 <HAL_DMA_IRQHandler+0xce8>
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 80bf 	beq.w	80037d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	2202      	movs	r2, #2
 8003660:	409a      	lsls	r2, r3
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d018      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 813a 	beq.w	80038f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800368c:	e134      	b.n	80038f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8130 	beq.w	80038f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036a0:	e12a      	b.n	80038f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f040 8089 	bne.w	80037c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a2b      	ldr	r2, [pc, #172]	; (8003760 <HAL_DMA_IRQHandler+0xc74>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d04a      	beq.n	800374e <HAL_DMA_IRQHandler+0xc62>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a29      	ldr	r2, [pc, #164]	; (8003764 <HAL_DMA_IRQHandler+0xc78>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d045      	beq.n	800374e <HAL_DMA_IRQHandler+0xc62>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a28      	ldr	r2, [pc, #160]	; (8003768 <HAL_DMA_IRQHandler+0xc7c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d040      	beq.n	800374e <HAL_DMA_IRQHandler+0xc62>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a26      	ldr	r2, [pc, #152]	; (800376c <HAL_DMA_IRQHandler+0xc80>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d03b      	beq.n	800374e <HAL_DMA_IRQHandler+0xc62>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a25      	ldr	r2, [pc, #148]	; (8003770 <HAL_DMA_IRQHandler+0xc84>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d036      	beq.n	800374e <HAL_DMA_IRQHandler+0xc62>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a23      	ldr	r2, [pc, #140]	; (8003774 <HAL_DMA_IRQHandler+0xc88>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d031      	beq.n	800374e <HAL_DMA_IRQHandler+0xc62>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a22      	ldr	r2, [pc, #136]	; (8003778 <HAL_DMA_IRQHandler+0xc8c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d02c      	beq.n	800374e <HAL_DMA_IRQHandler+0xc62>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a20      	ldr	r2, [pc, #128]	; (800377c <HAL_DMA_IRQHandler+0xc90>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d027      	beq.n	800374e <HAL_DMA_IRQHandler+0xc62>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <HAL_DMA_IRQHandler+0xc94>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d022      	beq.n	800374e <HAL_DMA_IRQHandler+0xc62>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1d      	ldr	r2, [pc, #116]	; (8003784 <HAL_DMA_IRQHandler+0xc98>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d01d      	beq.n	800374e <HAL_DMA_IRQHandler+0xc62>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1c      	ldr	r2, [pc, #112]	; (8003788 <HAL_DMA_IRQHandler+0xc9c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d018      	beq.n	800374e <HAL_DMA_IRQHandler+0xc62>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1a      	ldr	r2, [pc, #104]	; (800378c <HAL_DMA_IRQHandler+0xca0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <HAL_DMA_IRQHandler+0xc62>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a19      	ldr	r2, [pc, #100]	; (8003790 <HAL_DMA_IRQHandler+0xca4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00e      	beq.n	800374e <HAL_DMA_IRQHandler+0xc62>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a17      	ldr	r2, [pc, #92]	; (8003794 <HAL_DMA_IRQHandler+0xca8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d009      	beq.n	800374e <HAL_DMA_IRQHandler+0xc62>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a16      	ldr	r2, [pc, #88]	; (8003798 <HAL_DMA_IRQHandler+0xcac>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d004      	beq.n	800374e <HAL_DMA_IRQHandler+0xc62>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a14      	ldr	r2, [pc, #80]	; (800379c <HAL_DMA_IRQHandler+0xcb0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d128      	bne.n	80037a0 <HAL_DMA_IRQHandler+0xcb4>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0214 	bic.w	r2, r2, #20
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e027      	b.n	80037b0 <HAL_DMA_IRQHandler+0xcc4>
 8003760:	40020010 	.word	0x40020010
 8003764:	40020028 	.word	0x40020028
 8003768:	40020040 	.word	0x40020040
 800376c:	40020058 	.word	0x40020058
 8003770:	40020070 	.word	0x40020070
 8003774:	40020088 	.word	0x40020088
 8003778:	400200a0 	.word	0x400200a0
 800377c:	400200b8 	.word	0x400200b8
 8003780:	40020410 	.word	0x40020410
 8003784:	40020428 	.word	0x40020428
 8003788:	40020440 	.word	0x40020440
 800378c:	40020458 	.word	0x40020458
 8003790:	40020470 	.word	0x40020470
 8003794:	40020488 	.word	0x40020488
 8003798:	400204a0 	.word	0x400204a0
 800379c:	400204b8 	.word	0x400204b8
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 020a 	bic.w	r2, r2, #10
 80037ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8097 	beq.w	80038f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037d2:	e091      	b.n	80038f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	2208      	movs	r2, #8
 80037de:	409a      	lsls	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8088 	beq.w	80038fa <HAL_DMA_IRQHandler+0xe0e>
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8082 	beq.w	80038fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a41      	ldr	r2, [pc, #260]	; (8003900 <HAL_DMA_IRQHandler+0xe14>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d04a      	beq.n	8003896 <HAL_DMA_IRQHandler+0xdaa>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a3f      	ldr	r2, [pc, #252]	; (8003904 <HAL_DMA_IRQHandler+0xe18>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d045      	beq.n	8003896 <HAL_DMA_IRQHandler+0xdaa>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a3e      	ldr	r2, [pc, #248]	; (8003908 <HAL_DMA_IRQHandler+0xe1c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d040      	beq.n	8003896 <HAL_DMA_IRQHandler+0xdaa>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a3c      	ldr	r2, [pc, #240]	; (800390c <HAL_DMA_IRQHandler+0xe20>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d03b      	beq.n	8003896 <HAL_DMA_IRQHandler+0xdaa>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a3b      	ldr	r2, [pc, #236]	; (8003910 <HAL_DMA_IRQHandler+0xe24>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d036      	beq.n	8003896 <HAL_DMA_IRQHandler+0xdaa>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a39      	ldr	r2, [pc, #228]	; (8003914 <HAL_DMA_IRQHandler+0xe28>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d031      	beq.n	8003896 <HAL_DMA_IRQHandler+0xdaa>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a38      	ldr	r2, [pc, #224]	; (8003918 <HAL_DMA_IRQHandler+0xe2c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d02c      	beq.n	8003896 <HAL_DMA_IRQHandler+0xdaa>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a36      	ldr	r2, [pc, #216]	; (800391c <HAL_DMA_IRQHandler+0xe30>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d027      	beq.n	8003896 <HAL_DMA_IRQHandler+0xdaa>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a35      	ldr	r2, [pc, #212]	; (8003920 <HAL_DMA_IRQHandler+0xe34>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d022      	beq.n	8003896 <HAL_DMA_IRQHandler+0xdaa>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a33      	ldr	r2, [pc, #204]	; (8003924 <HAL_DMA_IRQHandler+0xe38>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01d      	beq.n	8003896 <HAL_DMA_IRQHandler+0xdaa>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a32      	ldr	r2, [pc, #200]	; (8003928 <HAL_DMA_IRQHandler+0xe3c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d018      	beq.n	8003896 <HAL_DMA_IRQHandler+0xdaa>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a30      	ldr	r2, [pc, #192]	; (800392c <HAL_DMA_IRQHandler+0xe40>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_DMA_IRQHandler+0xdaa>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a2f      	ldr	r2, [pc, #188]	; (8003930 <HAL_DMA_IRQHandler+0xe44>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00e      	beq.n	8003896 <HAL_DMA_IRQHandler+0xdaa>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2d      	ldr	r2, [pc, #180]	; (8003934 <HAL_DMA_IRQHandler+0xe48>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d009      	beq.n	8003896 <HAL_DMA_IRQHandler+0xdaa>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a2c      	ldr	r2, [pc, #176]	; (8003938 <HAL_DMA_IRQHandler+0xe4c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d004      	beq.n	8003896 <HAL_DMA_IRQHandler+0xdaa>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2a      	ldr	r2, [pc, #168]	; (800393c <HAL_DMA_IRQHandler+0xe50>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d108      	bne.n	80038a8 <HAL_DMA_IRQHandler+0xdbc>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 021c 	bic.w	r2, r2, #28
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e007      	b.n	80038b8 <HAL_DMA_IRQHandler+0xdcc>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 020e 	bic.w	r2, r2, #14
 80038b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	2201      	movs	r2, #1
 80038c2:	409a      	lsls	r2, r3
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	4798      	blx	r3
 80038ee:	e004      	b.n	80038fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80038f0:	bf00      	nop
 80038f2:	e002      	b.n	80038fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038f4:	bf00      	nop
 80038f6:	e000      	b.n	80038fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80038fa:	3728      	adds	r7, #40	; 0x28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40020010 	.word	0x40020010
 8003904:	40020028 	.word	0x40020028
 8003908:	40020040 	.word	0x40020040
 800390c:	40020058 	.word	0x40020058
 8003910:	40020070 	.word	0x40020070
 8003914:	40020088 	.word	0x40020088
 8003918:	400200a0 	.word	0x400200a0
 800391c:	400200b8 	.word	0x400200b8
 8003920:	40020410 	.word	0x40020410
 8003924:	40020428 	.word	0x40020428
 8003928:	40020440 	.word	0x40020440
 800392c:	40020458 	.word	0x40020458
 8003930:	40020470 	.word	0x40020470
 8003934:	40020488 	.word	0x40020488
 8003938:	400204a0 	.word	0x400204a0
 800393c:	400204b8 	.word	0x400204b8

08003940 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003952:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a7f      	ldr	r2, [pc, #508]	; (8003b5c <DMA_SetConfig+0x21c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d072      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a7d      	ldr	r2, [pc, #500]	; (8003b60 <DMA_SetConfig+0x220>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d06d      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a7c      	ldr	r2, [pc, #496]	; (8003b64 <DMA_SetConfig+0x224>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d068      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a7a      	ldr	r2, [pc, #488]	; (8003b68 <DMA_SetConfig+0x228>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d063      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a79      	ldr	r2, [pc, #484]	; (8003b6c <DMA_SetConfig+0x22c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d05e      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a77      	ldr	r2, [pc, #476]	; (8003b70 <DMA_SetConfig+0x230>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d059      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a76      	ldr	r2, [pc, #472]	; (8003b74 <DMA_SetConfig+0x234>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d054      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a74      	ldr	r2, [pc, #464]	; (8003b78 <DMA_SetConfig+0x238>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d04f      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a73      	ldr	r2, [pc, #460]	; (8003b7c <DMA_SetConfig+0x23c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d04a      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a71      	ldr	r2, [pc, #452]	; (8003b80 <DMA_SetConfig+0x240>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d045      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a70      	ldr	r2, [pc, #448]	; (8003b84 <DMA_SetConfig+0x244>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d040      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a6e      	ldr	r2, [pc, #440]	; (8003b88 <DMA_SetConfig+0x248>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d03b      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a6d      	ldr	r2, [pc, #436]	; (8003b8c <DMA_SetConfig+0x24c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d036      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a6b      	ldr	r2, [pc, #428]	; (8003b90 <DMA_SetConfig+0x250>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d031      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a6a      	ldr	r2, [pc, #424]	; (8003b94 <DMA_SetConfig+0x254>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d02c      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a68      	ldr	r2, [pc, #416]	; (8003b98 <DMA_SetConfig+0x258>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d027      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a67      	ldr	r2, [pc, #412]	; (8003b9c <DMA_SetConfig+0x25c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d022      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a65      	ldr	r2, [pc, #404]	; (8003ba0 <DMA_SetConfig+0x260>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d01d      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a64      	ldr	r2, [pc, #400]	; (8003ba4 <DMA_SetConfig+0x264>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d018      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a62      	ldr	r2, [pc, #392]	; (8003ba8 <DMA_SetConfig+0x268>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a61      	ldr	r2, [pc, #388]	; (8003bac <DMA_SetConfig+0x26c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00e      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a5f      	ldr	r2, [pc, #380]	; (8003bb0 <DMA_SetConfig+0x270>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d009      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a5e      	ldr	r2, [pc, #376]	; (8003bb4 <DMA_SetConfig+0x274>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d004      	beq.n	8003a4a <DMA_SetConfig+0x10a>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a5c      	ldr	r2, [pc, #368]	; (8003bb8 <DMA_SetConfig+0x278>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <DMA_SetConfig+0x10e>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <DMA_SetConfig+0x110>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00d      	beq.n	8003a70 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a5c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d004      	beq.n	8003a70 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a6e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a39      	ldr	r2, [pc, #228]	; (8003b5c <DMA_SetConfig+0x21c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d04a      	beq.n	8003b10 <DMA_SetConfig+0x1d0>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a38      	ldr	r2, [pc, #224]	; (8003b60 <DMA_SetConfig+0x220>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d045      	beq.n	8003b10 <DMA_SetConfig+0x1d0>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a36      	ldr	r2, [pc, #216]	; (8003b64 <DMA_SetConfig+0x224>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d040      	beq.n	8003b10 <DMA_SetConfig+0x1d0>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a35      	ldr	r2, [pc, #212]	; (8003b68 <DMA_SetConfig+0x228>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d03b      	beq.n	8003b10 <DMA_SetConfig+0x1d0>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a33      	ldr	r2, [pc, #204]	; (8003b6c <DMA_SetConfig+0x22c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d036      	beq.n	8003b10 <DMA_SetConfig+0x1d0>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a32      	ldr	r2, [pc, #200]	; (8003b70 <DMA_SetConfig+0x230>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d031      	beq.n	8003b10 <DMA_SetConfig+0x1d0>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a30      	ldr	r2, [pc, #192]	; (8003b74 <DMA_SetConfig+0x234>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d02c      	beq.n	8003b10 <DMA_SetConfig+0x1d0>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a2f      	ldr	r2, [pc, #188]	; (8003b78 <DMA_SetConfig+0x238>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d027      	beq.n	8003b10 <DMA_SetConfig+0x1d0>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2d      	ldr	r2, [pc, #180]	; (8003b7c <DMA_SetConfig+0x23c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d022      	beq.n	8003b10 <DMA_SetConfig+0x1d0>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2c      	ldr	r2, [pc, #176]	; (8003b80 <DMA_SetConfig+0x240>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d01d      	beq.n	8003b10 <DMA_SetConfig+0x1d0>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2a      	ldr	r2, [pc, #168]	; (8003b84 <DMA_SetConfig+0x244>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d018      	beq.n	8003b10 <DMA_SetConfig+0x1d0>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a29      	ldr	r2, [pc, #164]	; (8003b88 <DMA_SetConfig+0x248>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d013      	beq.n	8003b10 <DMA_SetConfig+0x1d0>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a27      	ldr	r2, [pc, #156]	; (8003b8c <DMA_SetConfig+0x24c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00e      	beq.n	8003b10 <DMA_SetConfig+0x1d0>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a26      	ldr	r2, [pc, #152]	; (8003b90 <DMA_SetConfig+0x250>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d009      	beq.n	8003b10 <DMA_SetConfig+0x1d0>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a24      	ldr	r2, [pc, #144]	; (8003b94 <DMA_SetConfig+0x254>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d004      	beq.n	8003b10 <DMA_SetConfig+0x1d0>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a23      	ldr	r2, [pc, #140]	; (8003b98 <DMA_SetConfig+0x258>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d101      	bne.n	8003b14 <DMA_SetConfig+0x1d4>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <DMA_SetConfig+0x1d6>
 8003b14:	2300      	movs	r3, #0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d059      	beq.n	8003bce <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	f003 031f 	and.w	r3, r3, #31
 8003b22:	223f      	movs	r2, #63	; 0x3f
 8003b24:	409a      	lsls	r2, r3
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b38:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b40      	cmp	r3, #64	; 0x40
 8003b48:	d138      	bne.n	8003bbc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b5a:	e086      	b.n	8003c6a <DMA_SetConfig+0x32a>
 8003b5c:	40020010 	.word	0x40020010
 8003b60:	40020028 	.word	0x40020028
 8003b64:	40020040 	.word	0x40020040
 8003b68:	40020058 	.word	0x40020058
 8003b6c:	40020070 	.word	0x40020070
 8003b70:	40020088 	.word	0x40020088
 8003b74:	400200a0 	.word	0x400200a0
 8003b78:	400200b8 	.word	0x400200b8
 8003b7c:	40020410 	.word	0x40020410
 8003b80:	40020428 	.word	0x40020428
 8003b84:	40020440 	.word	0x40020440
 8003b88:	40020458 	.word	0x40020458
 8003b8c:	40020470 	.word	0x40020470
 8003b90:	40020488 	.word	0x40020488
 8003b94:	400204a0 	.word	0x400204a0
 8003b98:	400204b8 	.word	0x400204b8
 8003b9c:	58025408 	.word	0x58025408
 8003ba0:	5802541c 	.word	0x5802541c
 8003ba4:	58025430 	.word	0x58025430
 8003ba8:	58025444 	.word	0x58025444
 8003bac:	58025458 	.word	0x58025458
 8003bb0:	5802546c 	.word	0x5802546c
 8003bb4:	58025480 	.word	0x58025480
 8003bb8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	60da      	str	r2, [r3, #12]
}
 8003bcc:	e04d      	b.n	8003c6a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <DMA_SetConfig+0x338>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d022      	beq.n	8003c1e <DMA_SetConfig+0x2de>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a27      	ldr	r2, [pc, #156]	; (8003c7c <DMA_SetConfig+0x33c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d01d      	beq.n	8003c1e <DMA_SetConfig+0x2de>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a26      	ldr	r2, [pc, #152]	; (8003c80 <DMA_SetConfig+0x340>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d018      	beq.n	8003c1e <DMA_SetConfig+0x2de>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a24      	ldr	r2, [pc, #144]	; (8003c84 <DMA_SetConfig+0x344>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <DMA_SetConfig+0x2de>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a23      	ldr	r2, [pc, #140]	; (8003c88 <DMA_SetConfig+0x348>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00e      	beq.n	8003c1e <DMA_SetConfig+0x2de>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a21      	ldr	r2, [pc, #132]	; (8003c8c <DMA_SetConfig+0x34c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d009      	beq.n	8003c1e <DMA_SetConfig+0x2de>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a20      	ldr	r2, [pc, #128]	; (8003c90 <DMA_SetConfig+0x350>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d004      	beq.n	8003c1e <DMA_SetConfig+0x2de>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1e      	ldr	r2, [pc, #120]	; (8003c94 <DMA_SetConfig+0x354>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d101      	bne.n	8003c22 <DMA_SetConfig+0x2e2>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <DMA_SetConfig+0x2e4>
 8003c22:	2300      	movs	r3, #0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d020      	beq.n	8003c6a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	2201      	movs	r2, #1
 8003c32:	409a      	lsls	r2, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d108      	bne.n	8003c5a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	60da      	str	r2, [r3, #12]
}
 8003c58:	e007      	b.n	8003c6a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	60da      	str	r2, [r3, #12]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	58025408 	.word	0x58025408
 8003c7c:	5802541c 	.word	0x5802541c
 8003c80:	58025430 	.word	0x58025430
 8003c84:	58025444 	.word	0x58025444
 8003c88:	58025458 	.word	0x58025458
 8003c8c:	5802546c 	.word	0x5802546c
 8003c90:	58025480 	.word	0x58025480
 8003c94:	58025494 	.word	0x58025494

08003c98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a42      	ldr	r2, [pc, #264]	; (8003db0 <DMA_CalcBaseAndBitshift+0x118>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d04a      	beq.n	8003d40 <DMA_CalcBaseAndBitshift+0xa8>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a41      	ldr	r2, [pc, #260]	; (8003db4 <DMA_CalcBaseAndBitshift+0x11c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d045      	beq.n	8003d40 <DMA_CalcBaseAndBitshift+0xa8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a3f      	ldr	r2, [pc, #252]	; (8003db8 <DMA_CalcBaseAndBitshift+0x120>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d040      	beq.n	8003d40 <DMA_CalcBaseAndBitshift+0xa8>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a3e      	ldr	r2, [pc, #248]	; (8003dbc <DMA_CalcBaseAndBitshift+0x124>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d03b      	beq.n	8003d40 <DMA_CalcBaseAndBitshift+0xa8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a3c      	ldr	r2, [pc, #240]	; (8003dc0 <DMA_CalcBaseAndBitshift+0x128>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d036      	beq.n	8003d40 <DMA_CalcBaseAndBitshift+0xa8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a3b      	ldr	r2, [pc, #236]	; (8003dc4 <DMA_CalcBaseAndBitshift+0x12c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d031      	beq.n	8003d40 <DMA_CalcBaseAndBitshift+0xa8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a39      	ldr	r2, [pc, #228]	; (8003dc8 <DMA_CalcBaseAndBitshift+0x130>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d02c      	beq.n	8003d40 <DMA_CalcBaseAndBitshift+0xa8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a38      	ldr	r2, [pc, #224]	; (8003dcc <DMA_CalcBaseAndBitshift+0x134>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d027      	beq.n	8003d40 <DMA_CalcBaseAndBitshift+0xa8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a36      	ldr	r2, [pc, #216]	; (8003dd0 <DMA_CalcBaseAndBitshift+0x138>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d022      	beq.n	8003d40 <DMA_CalcBaseAndBitshift+0xa8>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a35      	ldr	r2, [pc, #212]	; (8003dd4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d01d      	beq.n	8003d40 <DMA_CalcBaseAndBitshift+0xa8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a33      	ldr	r2, [pc, #204]	; (8003dd8 <DMA_CalcBaseAndBitshift+0x140>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d018      	beq.n	8003d40 <DMA_CalcBaseAndBitshift+0xa8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a32      	ldr	r2, [pc, #200]	; (8003ddc <DMA_CalcBaseAndBitshift+0x144>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d013      	beq.n	8003d40 <DMA_CalcBaseAndBitshift+0xa8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a30      	ldr	r2, [pc, #192]	; (8003de0 <DMA_CalcBaseAndBitshift+0x148>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00e      	beq.n	8003d40 <DMA_CalcBaseAndBitshift+0xa8>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a2f      	ldr	r2, [pc, #188]	; (8003de4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d009      	beq.n	8003d40 <DMA_CalcBaseAndBitshift+0xa8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a2d      	ldr	r2, [pc, #180]	; (8003de8 <DMA_CalcBaseAndBitshift+0x150>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d004      	beq.n	8003d40 <DMA_CalcBaseAndBitshift+0xa8>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2c      	ldr	r2, [pc, #176]	; (8003dec <DMA_CalcBaseAndBitshift+0x154>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d101      	bne.n	8003d44 <DMA_CalcBaseAndBitshift+0xac>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <DMA_CalcBaseAndBitshift+0xae>
 8003d44:	2300      	movs	r3, #0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d024      	beq.n	8003d94 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	3b10      	subs	r3, #16
 8003d52:	4a27      	ldr	r2, [pc, #156]	; (8003df0 <DMA_CalcBaseAndBitshift+0x158>)
 8003d54:	fba2 2303 	umull	r2, r3, r2, r3
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	4a24      	ldr	r2, [pc, #144]	; (8003df4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003d64:	5cd3      	ldrb	r3, [r2, r3]
 8003d66:	461a      	mov	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d908      	bls.n	8003d84 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	4b1f      	ldr	r3, [pc, #124]	; (8003df8 <DMA_CalcBaseAndBitshift+0x160>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	1d1a      	adds	r2, r3, #4
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	659a      	str	r2, [r3, #88]	; 0x58
 8003d82:	e00d      	b.n	8003da0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <DMA_CalcBaseAndBitshift+0x160>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6593      	str	r3, [r2, #88]	; 0x58
 8003d92:	e005      	b.n	8003da0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	40020010 	.word	0x40020010
 8003db4:	40020028 	.word	0x40020028
 8003db8:	40020040 	.word	0x40020040
 8003dbc:	40020058 	.word	0x40020058
 8003dc0:	40020070 	.word	0x40020070
 8003dc4:	40020088 	.word	0x40020088
 8003dc8:	400200a0 	.word	0x400200a0
 8003dcc:	400200b8 	.word	0x400200b8
 8003dd0:	40020410 	.word	0x40020410
 8003dd4:	40020428 	.word	0x40020428
 8003dd8:	40020440 	.word	0x40020440
 8003ddc:	40020458 	.word	0x40020458
 8003de0:	40020470 	.word	0x40020470
 8003de4:	40020488 	.word	0x40020488
 8003de8:	400204a0 	.word	0x400204a0
 8003dec:	400204b8 	.word	0x400204b8
 8003df0:	aaaaaaab 	.word	0xaaaaaaab
 8003df4:	0800b894 	.word	0x0800b894
 8003df8:	fffffc00 	.word	0xfffffc00

08003dfc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d120      	bne.n	8003e52 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d858      	bhi.n	8003eca <DMA_CheckFifoParam+0xce>
 8003e18:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <DMA_CheckFifoParam+0x24>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e31 	.word	0x08003e31
 8003e24:	08003e43 	.word	0x08003e43
 8003e28:	08003e31 	.word	0x08003e31
 8003e2c:	08003ecb 	.word	0x08003ecb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d048      	beq.n	8003ece <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e40:	e045      	b.n	8003ece <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e4a:	d142      	bne.n	8003ed2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e50:	e03f      	b.n	8003ed2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5a:	d123      	bne.n	8003ea4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d838      	bhi.n	8003ed6 <DMA_CheckFifoParam+0xda>
 8003e64:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <DMA_CheckFifoParam+0x70>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003e7d 	.word	0x08003e7d
 8003e70:	08003e83 	.word	0x08003e83
 8003e74:	08003e7d 	.word	0x08003e7d
 8003e78:	08003e95 	.word	0x08003e95
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
        break;
 8003e80:	e030      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d025      	beq.n	8003eda <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e92:	e022      	b.n	8003eda <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e9c:	d11f      	bne.n	8003ede <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ea2:	e01c      	b.n	8003ede <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d902      	bls.n	8003eb2 <DMA_CheckFifoParam+0xb6>
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d003      	beq.n	8003eb8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003eb0:	e018      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
        break;
 8003eb6:	e015      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00e      	beq.n	8003ee2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
    break;
 8003ec8:	e00b      	b.n	8003ee2 <DMA_CheckFifoParam+0xe6>
        break;
 8003eca:	bf00      	nop
 8003ecc:	e00a      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
        break;
 8003ece:	bf00      	nop
 8003ed0:	e008      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
        break;
 8003ed2:	bf00      	nop
 8003ed4:	e006      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
        break;
 8003ed6:	bf00      	nop
 8003ed8:	e004      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
        break;
 8003eda:	bf00      	nop
 8003edc:	e002      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
        break;
 8003ede:	bf00      	nop
 8003ee0:	e000      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
    break;
 8003ee2:	bf00      	nop
    }
  }

  return status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop

08003ef4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a38      	ldr	r2, [pc, #224]	; (8003fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d022      	beq.n	8003f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a36      	ldr	r2, [pc, #216]	; (8003fec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01d      	beq.n	8003f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a35      	ldr	r2, [pc, #212]	; (8003ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d018      	beq.n	8003f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a33      	ldr	r2, [pc, #204]	; (8003ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a32      	ldr	r2, [pc, #200]	; (8003ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a30      	ldr	r2, [pc, #192]	; (8003ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2f      	ldr	r2, [pc, #188]	; (8004000 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2d      	ldr	r2, [pc, #180]	; (8004004 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d101      	bne.n	8003f56 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003f56:	2300      	movs	r3, #0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01a      	beq.n	8003f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	3b08      	subs	r3, #8
 8003f64:	4a28      	ldr	r2, [pc, #160]	; (8004008 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	091b      	lsrs	r3, r3, #4
 8003f6c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4b26      	ldr	r3, [pc, #152]	; (800400c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	461a      	mov	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a24      	ldr	r2, [pc, #144]	; (8004010 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003f80:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f003 031f 	and.w	r3, r3, #31
 8003f88:	2201      	movs	r2, #1
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003f90:	e024      	b.n	8003fdc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	3b10      	subs	r3, #16
 8003f9a:	4a1e      	ldr	r2, [pc, #120]	; (8004014 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4a1c      	ldr	r2, [pc, #112]	; (8004018 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d806      	bhi.n	8003fba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4a1b      	ldr	r2, [pc, #108]	; (800401c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d902      	bls.n	8003fba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4b18      	ldr	r3, [pc, #96]	; (8004020 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a16      	ldr	r2, [pc, #88]	; (8004024 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003fcc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fdc:	bf00      	nop
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	58025408 	.word	0x58025408
 8003fec:	5802541c 	.word	0x5802541c
 8003ff0:	58025430 	.word	0x58025430
 8003ff4:	58025444 	.word	0x58025444
 8003ff8:	58025458 	.word	0x58025458
 8003ffc:	5802546c 	.word	0x5802546c
 8004000:	58025480 	.word	0x58025480
 8004004:	58025494 	.word	0x58025494
 8004008:	cccccccd 	.word	0xcccccccd
 800400c:	16009600 	.word	0x16009600
 8004010:	58025880 	.word	0x58025880
 8004014:	aaaaaaab 	.word	0xaaaaaaab
 8004018:	400204b8 	.word	0x400204b8
 800401c:	4002040f 	.word	0x4002040f
 8004020:	10008200 	.word	0x10008200
 8004024:	40020880 	.word	0x40020880

08004028 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d04a      	beq.n	80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b08      	cmp	r3, #8
 8004042:	d847      	bhi.n	80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a25      	ldr	r2, [pc, #148]	; (80040e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d022      	beq.n	8004094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a24      	ldr	r2, [pc, #144]	; (80040e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d01d      	beq.n	8004094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d018      	beq.n	8004094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a21      	ldr	r2, [pc, #132]	; (80040ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1f      	ldr	r2, [pc, #124]	; (80040f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00e      	beq.n	8004094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1e      	ldr	r2, [pc, #120]	; (80040f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d009      	beq.n	8004094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1b      	ldr	r2, [pc, #108]	; (80040fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d101      	bne.n	8004098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004094:	2301      	movs	r3, #1
 8004096:	e000      	b.n	800409a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004098:	2300      	movs	r3, #0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4b17      	ldr	r3, [pc, #92]	; (8004100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	461a      	mov	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a15      	ldr	r2, [pc, #84]	; (8004104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80040b0:	671a      	str	r2, [r3, #112]	; 0x70
 80040b2:	e009      	b.n	80040c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4b14      	ldr	r3, [pc, #80]	; (8004108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	461a      	mov	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a11      	ldr	r2, [pc, #68]	; (800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80040c6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	2201      	movs	r2, #1
 80040ce:	409a      	lsls	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	58025408 	.word	0x58025408
 80040e4:	5802541c 	.word	0x5802541c
 80040e8:	58025430 	.word	0x58025430
 80040ec:	58025444 	.word	0x58025444
 80040f0:	58025458 	.word	0x58025458
 80040f4:	5802546c 	.word	0x5802546c
 80040f8:	58025480 	.word	0x58025480
 80040fc:	58025494 	.word	0x58025494
 8004100:	1600963f 	.word	0x1600963f
 8004104:	58025940 	.word	0x58025940
 8004108:	1000823f 	.word	0x1000823f
 800410c:	40020940 	.word	0x40020940

08004110 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	7a1b      	ldrb	r3, [r3, #8]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d155      	bne.n	80041d6 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a4b      	ldr	r2, [pc, #300]	; (800425c <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d049      	beq.n	80041c8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a49      	ldr	r2, [pc, #292]	; (8004260 <HAL_DMAEx_ConfigMuxSync+0x150>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d044      	beq.n	80041c8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a48      	ldr	r2, [pc, #288]	; (8004264 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d03f      	beq.n	80041c8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a46      	ldr	r2, [pc, #280]	; (8004268 <HAL_DMAEx_ConfigMuxSync+0x158>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d03a      	beq.n	80041c8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a45      	ldr	r2, [pc, #276]	; (800426c <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d035      	beq.n	80041c8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a43      	ldr	r2, [pc, #268]	; (8004270 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d030      	beq.n	80041c8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a42      	ldr	r2, [pc, #264]	; (8004274 <HAL_DMAEx_ConfigMuxSync+0x164>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d02b      	beq.n	80041c8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a40      	ldr	r2, [pc, #256]	; (8004278 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d026      	beq.n	80041c8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a3f      	ldr	r2, [pc, #252]	; (800427c <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d021      	beq.n	80041c8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a3d      	ldr	r2, [pc, #244]	; (8004280 <HAL_DMAEx_ConfigMuxSync+0x170>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d01c      	beq.n	80041c8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a3c      	ldr	r2, [pc, #240]	; (8004284 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d017      	beq.n	80041c8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a3a      	ldr	r2, [pc, #232]	; (8004288 <HAL_DMAEx_ConfigMuxSync+0x178>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d012      	beq.n	80041c8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a39      	ldr	r2, [pc, #228]	; (800428c <HAL_DMAEx_ConfigMuxSync+0x17c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00d      	beq.n	80041c8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a37      	ldr	r2, [pc, #220]	; (8004290 <HAL_DMAEx_ConfigMuxSync+0x180>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d008      	beq.n	80041c8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a36      	ldr	r2, [pc, #216]	; (8004294 <HAL_DMAEx_ConfigMuxSync+0x184>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d003      	beq.n	80041c8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a34      	ldr	r2, [pc, #208]	; (8004298 <HAL_DMAEx_ConfigMuxSync+0x188>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d131      	bne.n	8004246 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_DMAEx_ConfigMuxSync+0xe0>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e02f      	b.n	8004250 <HAL_DMAEx_ConfigMuxSync+0x140>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004202:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8004206:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	b2d9      	uxtb	r1, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	061a      	lsls	r2, r3, #24
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	3b01      	subs	r3, #1
 800421a:	04db      	lsls	r3, r3, #19
 800421c:	431a      	orrs	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	431a      	orrs	r2, r3
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	7a1b      	ldrb	r3, [r3, #8]
 8004226:	041b      	lsls	r3, r3, #16
 8004228:	431a      	orrs	r2, r3
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	7a5b      	ldrb	r3, [r3, #9]
 800422e:	025b      	lsls	r3, r3, #9
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004236:	430a      	orrs	r2, r1
 8004238:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e004      	b.n	8004250 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800424c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
  }
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	40020010 	.word	0x40020010
 8004260:	40020028 	.word	0x40020028
 8004264:	40020040 	.word	0x40020040
 8004268:	40020058 	.word	0x40020058
 800426c:	40020070 	.word	0x40020070
 8004270:	40020088 	.word	0x40020088
 8004274:	400200a0 	.word	0x400200a0
 8004278:	400200b8 	.word	0x400200b8
 800427c:	40020410 	.word	0x40020410
 8004280:	40020428 	.word	0x40020428
 8004284:	40020440 	.word	0x40020440
 8004288:	40020458 	.word	0x40020458
 800428c:	40020470 	.word	0x40020470
 8004290:	40020488 	.word	0x40020488
 8004294:	400204a0 	.word	0x400204a0
 8004298:	400204b8 	.word	0x400204b8

0800429c <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01a      	beq.n	80042ea <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d022      	beq.n	8004338 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d01a      	beq.n	8004338 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800430c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004310:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800431a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004320:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	4798      	blx	r3
      }
    }
  }
}
 8004338:	bf00      	nop
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004340:	b480      	push	{r7}
 8004342:	b089      	sub	sp, #36	; 0x24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800434e:	4b89      	ldr	r3, [pc, #548]	; (8004574 <HAL_GPIO_Init+0x234>)
 8004350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004352:	e194      	b.n	800467e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	2101      	movs	r1, #1
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	fa01 f303 	lsl.w	r3, r1, r3
 8004360:	4013      	ands	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 8186 	beq.w	8004678 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	2b01      	cmp	r3, #1
 8004376:	d005      	beq.n	8004384 <HAL_GPIO_Init+0x44>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d130      	bne.n	80043e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	2203      	movs	r2, #3
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043ba:	2201      	movs	r2, #1
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4013      	ands	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f003 0201 	and.w	r2, r3, #1
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4313      	orrs	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d017      	beq.n	8004422 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	2203      	movs	r2, #3
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4013      	ands	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4313      	orrs	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d123      	bne.n	8004476 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	08da      	lsrs	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3208      	adds	r2, #8
 8004436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800443a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	220f      	movs	r2, #15
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	43db      	mvns	r3, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4013      	ands	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4313      	orrs	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	08da      	lsrs	r2, r3, #3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3208      	adds	r2, #8
 8004470:	69b9      	ldr	r1, [r7, #24]
 8004472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	2203      	movs	r2, #3
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	43db      	mvns	r3, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4013      	ands	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f003 0203 	and.w	r2, r3, #3
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 80e0 	beq.w	8004678 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b8:	4b2f      	ldr	r3, [pc, #188]	; (8004578 <HAL_GPIO_Init+0x238>)
 80044ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044be:	4a2e      	ldr	r2, [pc, #184]	; (8004578 <HAL_GPIO_Init+0x238>)
 80044c0:	f043 0302 	orr.w	r3, r3, #2
 80044c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80044c8:	4b2b      	ldr	r3, [pc, #172]	; (8004578 <HAL_GPIO_Init+0x238>)
 80044ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044d6:	4a29      	ldr	r2, [pc, #164]	; (800457c <HAL_GPIO_Init+0x23c>)
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	089b      	lsrs	r3, r3, #2
 80044dc:	3302      	adds	r3, #2
 80044de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	220f      	movs	r2, #15
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43db      	mvns	r3, r3
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	4013      	ands	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a20      	ldr	r2, [pc, #128]	; (8004580 <HAL_GPIO_Init+0x240>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d052      	beq.n	80045a8 <HAL_GPIO_Init+0x268>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a1f      	ldr	r2, [pc, #124]	; (8004584 <HAL_GPIO_Init+0x244>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d031      	beq.n	800456e <HAL_GPIO_Init+0x22e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a1e      	ldr	r2, [pc, #120]	; (8004588 <HAL_GPIO_Init+0x248>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d02b      	beq.n	800456a <HAL_GPIO_Init+0x22a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a1d      	ldr	r2, [pc, #116]	; (800458c <HAL_GPIO_Init+0x24c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d025      	beq.n	8004566 <HAL_GPIO_Init+0x226>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a1c      	ldr	r2, [pc, #112]	; (8004590 <HAL_GPIO_Init+0x250>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01f      	beq.n	8004562 <HAL_GPIO_Init+0x222>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a1b      	ldr	r2, [pc, #108]	; (8004594 <HAL_GPIO_Init+0x254>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d019      	beq.n	800455e <HAL_GPIO_Init+0x21e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a1a      	ldr	r2, [pc, #104]	; (8004598 <HAL_GPIO_Init+0x258>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <HAL_GPIO_Init+0x21a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a19      	ldr	r2, [pc, #100]	; (800459c <HAL_GPIO_Init+0x25c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00d      	beq.n	8004556 <HAL_GPIO_Init+0x216>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <HAL_GPIO_Init+0x260>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <HAL_GPIO_Init+0x212>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a17      	ldr	r2, [pc, #92]	; (80045a4 <HAL_GPIO_Init+0x264>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d101      	bne.n	800454e <HAL_GPIO_Init+0x20e>
 800454a:	2309      	movs	r3, #9
 800454c:	e02d      	b.n	80045aa <HAL_GPIO_Init+0x26a>
 800454e:	230a      	movs	r3, #10
 8004550:	e02b      	b.n	80045aa <HAL_GPIO_Init+0x26a>
 8004552:	2308      	movs	r3, #8
 8004554:	e029      	b.n	80045aa <HAL_GPIO_Init+0x26a>
 8004556:	2307      	movs	r3, #7
 8004558:	e027      	b.n	80045aa <HAL_GPIO_Init+0x26a>
 800455a:	2306      	movs	r3, #6
 800455c:	e025      	b.n	80045aa <HAL_GPIO_Init+0x26a>
 800455e:	2305      	movs	r3, #5
 8004560:	e023      	b.n	80045aa <HAL_GPIO_Init+0x26a>
 8004562:	2304      	movs	r3, #4
 8004564:	e021      	b.n	80045aa <HAL_GPIO_Init+0x26a>
 8004566:	2303      	movs	r3, #3
 8004568:	e01f      	b.n	80045aa <HAL_GPIO_Init+0x26a>
 800456a:	2302      	movs	r3, #2
 800456c:	e01d      	b.n	80045aa <HAL_GPIO_Init+0x26a>
 800456e:	2301      	movs	r3, #1
 8004570:	e01b      	b.n	80045aa <HAL_GPIO_Init+0x26a>
 8004572:	bf00      	nop
 8004574:	58000080 	.word	0x58000080
 8004578:	58024400 	.word	0x58024400
 800457c:	58000400 	.word	0x58000400
 8004580:	58020000 	.word	0x58020000
 8004584:	58020400 	.word	0x58020400
 8004588:	58020800 	.word	0x58020800
 800458c:	58020c00 	.word	0x58020c00
 8004590:	58021000 	.word	0x58021000
 8004594:	58021400 	.word	0x58021400
 8004598:	58021800 	.word	0x58021800
 800459c:	58021c00 	.word	0x58021c00
 80045a0:	58022000 	.word	0x58022000
 80045a4:	58022400 	.word	0x58022400
 80045a8:	2300      	movs	r3, #0
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	f002 0203 	and.w	r2, r2, #3
 80045b0:	0092      	lsls	r2, r2, #2
 80045b2:	4093      	lsls	r3, r2
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045ba:	4938      	ldr	r1, [pc, #224]	; (800469c <HAL_GPIO_Init+0x35c>)
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	089b      	lsrs	r3, r3, #2
 80045c0:	3302      	adds	r3, #2
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	43db      	mvns	r3, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4013      	ands	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80045ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80045f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	43db      	mvns	r3, r3
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	4013      	ands	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800461c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	43db      	mvns	r3, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	43db      	mvns	r3, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4013      	ands	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	3301      	adds	r3, #1
 800467c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	f47f ae63 	bne.w	8004354 <HAL_GPIO_Init+0x14>
  }
}
 800468e:	bf00      	nop
 8004690:	bf00      	nop
 8004692:	3724      	adds	r7, #36	; 0x24
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	58000400 	.word	0x58000400

080046a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	460b      	mov	r3, r1
 80046aa:	807b      	strh	r3, [r7, #2]
 80046ac:	4613      	mov	r3, r2
 80046ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046b0:	787b      	ldrb	r3, [r7, #1]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046b6:	887a      	ldrh	r2, [r7, #2]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80046bc:	e003      	b.n	80046c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80046be:	887b      	ldrh	r3, [r7, #2]
 80046c0:	041a      	lsls	r2, r3, #16
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	619a      	str	r2, [r3, #24]
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e10b      	b.n	80048fe <HAL_I2S_Init+0x22a>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fc f92c 	bl	8000958 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d107      	bne.n	8004726 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2200      	movs	r2, #0
 800472c:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b04      	cmp	r3, #4
 8004734:	d008      	beq.n	8004748 <HAL_I2S_Init+0x74>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b06      	cmp	r3, #6
 800473c:	d004      	beq.n	8004748 <HAL_I2S_Init+0x74>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b0a      	cmp	r3, #10
 8004744:	f040 8085 	bne.w	8004852 <HAL_I2S_Init+0x17e>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	2b02      	cmp	r3, #2
 800474e:	d058      	beq.n	8004802 <HAL_I2S_Init+0x12e>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8004758:	2302      	movs	r3, #2
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	e001      	b.n	8004762 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 800475e:	2301      	movs	r3, #1
 8004760:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b30      	cmp	r3, #48	; 0x30
 8004768:	d003      	beq.n	8004772 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800476e:	2bb0      	cmp	r3, #176	; 0xb0
 8004770:	d102      	bne.n	8004778 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8004772:	2301      	movs	r3, #1
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	e001      	b.n	800477c <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800477c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004780:	f002 fb2a 	bl	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004784:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800478e:	d113      	bne.n	80047b8 <HAL_I2S_Init+0xe4>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8004790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	fa22 f303 	lsr.w	r3, r2, r3
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	fbb2 f2f3 	udiv	r2, r2, r3
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	461a      	mov	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b2:	3305      	adds	r3, #5
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	e014      	b.n	80047e2 <HAL_I2S_Init+0x10e>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80047b8:	2220      	movs	r2, #32
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	fb02 f303 	mul.w	r3, r2, r3
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	461a      	mov	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	fbb2 f3f3 	udiv	r3, r2, r3
 80047de:	3305      	adds	r3, #5
 80047e0:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	4a48      	ldr	r2, [pc, #288]	; (8004908 <HAL_I2S_Init+0x234>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	08db      	lsrs	r3, r3, #3
 80047ec:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	085b      	lsrs	r3, r3, #1
 80047fe:	61fb      	str	r3, [r7, #28]
 8004800:	e003      	b.n	800480a <HAL_I2S_Init+0x136>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8004802:	2302      	movs	r3, #2
 8004804:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8004806:	2300      	movs	r3, #0
 8004808:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d102      	bne.n	8004816 <HAL_I2S_Init+0x142>
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d002      	beq.n	800481c <HAL_I2S_Init+0x148>
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	2bff      	cmp	r3, #255	; 0xff
 800481a:	d907      	bls.n	800482c <HAL_I2S_Init+0x158>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004820:	f043 0210 	orr.w	r2, r3, #16
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e068      	b.n	80048fe <HAL_I2S_Init+0x22a>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_I2S_Init+0x162>
    {
      i2sodd = 1UL;
 8004832:	2301      	movs	r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800483c:	4b33      	ldr	r3, [pc, #204]	; (800490c <HAL_I2S_Init+0x238>)
 800483e:	4013      	ands	r3, r2
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	0411      	lsls	r1, r2, #16
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	0612      	lsls	r2, r2, #24
 8004848:	4311      	orrs	r1, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	430b      	orrs	r3, r1
 8004850:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004858:	4b2d      	ldr	r3, [pc, #180]	; (8004910 <HAL_I2S_Init+0x23c>)
 800485a:	4013      	ands	r3, r2
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6851      	ldr	r1, [r2, #4]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6892      	ldr	r2, [r2, #8]
 8004864:	4311      	orrs	r1, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	68d2      	ldr	r2, [r2, #12]
 800486a:	4311      	orrs	r1, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6992      	ldr	r2, [r2, #24]
 8004870:	4311      	orrs	r1, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6a12      	ldr	r2, [r2, #32]
 8004876:	4311      	orrs	r1, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800487c:	4311      	orrs	r1, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6912      	ldr	r2, [r2, #16]
 8004882:	430a      	orrs	r2, r1
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f640 72f8 	movw	r2, #4088	; 0xff8
 8004898:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80048a8:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d007      	beq.n	80048d8 <HAL_I2S_Init+0x204>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b06      	cmp	r3, #6
 80048ce:	d003      	beq.n	80048d8 <HAL_I2S_Init+0x204>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b0a      	cmp	r3, #10
 80048d6:	d10a      	bne.n	80048ee <HAL_I2S_Init+0x21a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	cccccccd 	.word	0xcccccccd
 800490c:	fe00ffff 	.word	0xfe00ffff
 8004910:	fdff9040 	.word	0xfdff9040

08004914 <HAL_I2S_Receive_DMA>:
//  __HAL_UNLOCK(hi2s);
//  return errorcode;
//}

HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2sa, uint16_t *pDataa,I2S_HandleTypeDef *hi2sb, uint16_t *pDatab,I2S_HandleTypeDef *hi2sc, uint16_t *pDatac, uint16_t Size)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	75fb      	strb	r3, [r7, #23]

  if (((pDataa == NULL) || (Size == 0UL))&&((pDatab == NULL) || (Size == 0UL))&&((pDatac == NULL) || (Size == 0UL)))
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_I2S_Receive_DMA+0x1e>
 800492c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10d      	bne.n	800494e <HAL_I2S_Receive_DMA+0x3a>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_I2S_Receive_DMA+0x2a>
 8004938:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800493a:	2b00      	cmp	r3, #0
 800493c:	d107      	bne.n	800494e <HAL_I2S_Receive_DMA+0x3a>
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_I2S_Receive_DMA+0x36>
 8004944:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_I2S_Receive_DMA+0x3a>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e18e      	b.n	8004c6c <HAL_I2S_Receive_DMA+0x358>
  }

  if (((pDataa == NULL) || (Size == 0UL))&&((pDatab == NULL) || (Size == 0UL))&&((pDatac == NULL) || (Size == 0UL)))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_I2S_Receive_DMA+0x46>
 8004954:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10d      	bne.n	8004976 <HAL_I2S_Receive_DMA+0x62>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_I2S_Receive_DMA+0x52>
 8004960:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004962:	2b00      	cmp	r3, #0
 8004964:	d107      	bne.n	8004976 <HAL_I2S_Receive_DMA+0x62>
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <HAL_I2S_Receive_DMA+0x5e>
 800496c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_I2S_Receive_DMA+0x62>
  {
    return HAL_BUSY;
 8004972:	2302      	movs	r3, #2
 8004974:	e17a      	b.n	8004c6c <HAL_I2S_Receive_DMA+0x358>
  }

  /* Process Locked */
  __HAL_LOCK(hi2sa);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_I2S_Receive_DMA+0x72>
 8004982:	2302      	movs	r3, #2
 8004984:	e172      	b.n	8004c6c <HAL_I2S_Receive_DMA+0x358>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  __HAL_LOCK(hi2sb);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_I2S_Receive_DMA+0x8a>
 800499a:	2302      	movs	r3, #2
 800499c:	e166      	b.n	8004c6c <HAL_I2S_Receive_DMA+0x358>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  __HAL_LOCK(hi2sc);
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_I2S_Receive_DMA+0xa2>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e15a      	b.n	8004c6c <HAL_I2S_Receive_DMA+0x358>
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2sa->State       = HAL_I2S_STATE_BUSY_RX;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2204      	movs	r2, #4
 80049c2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2sa->ErrorCode   = HAL_I2S_ERROR_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	651a      	str	r2, [r3, #80]	; 0x50
  hi2sa->pRxBuffPtr  = pDataa;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2sa->RxXferSize  = Size;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80049d6:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2sa->RxXferCount = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80049dc:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2sb->State       = HAL_I2S_STATE_BUSY_RX;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2204      	movs	r2, #4
 80049e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2sb->ErrorCode   = HAL_I2S_ERROR_NONE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	651a      	str	r2, [r3, #80]	; 0x50
  hi2sb->pRxBuffPtr  = pDatab;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2sb->RxXferSize  = Size;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80049f6:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2sb->RxXferCount = Size;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80049fc:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2sc->State       = HAL_I2S_STATE_BUSY_RX;
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	2204      	movs	r2, #4
 8004a02:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2sc->ErrorCode   = HAL_I2S_ERROR_NONE;
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	651a      	str	r2, [r3, #80]	; 0x50
  hi2sc->pRxBuffPtr  = pDatac;
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a10:	635a      	str	r2, [r3, #52]	; 0x34
  hi2sc->RxXferSize  = Size;
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004a16:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2sc->RxXferCount = Size;
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004a1c:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Init field not used in handle to zero */
  hi2sa->pTxBuffPtr  = NULL;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2sa->TxXferSize  = (uint16_t)0UL;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2sa->TxXferCount = (uint16_t)0UL;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2sb->pTxBuffPtr  = NULL;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2sb->TxXferSize  = (uint16_t)0UL;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2sb->TxXferCount = (uint16_t)0UL;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2sc->pTxBuffPtr  = NULL;
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	2200      	movs	r2, #0
 8004a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2sc->TxXferSize  = (uint16_t)0UL;
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2sc->TxXferCount = (uint16_t)0UL;
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	2200      	movs	r2, #0
 8004a52:	865a      	strh	r2, [r3, #50]	; 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2sa->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a58:	4a86      	ldr	r2, [pc, #536]	; (8004c74 <HAL_I2S_Receive_DMA+0x360>)
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2sb->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a60:	4a84      	ldr	r2, [pc, #528]	; (8004c74 <HAL_I2S_Receive_DMA+0x360>)
 8004a62:	641a      	str	r2, [r3, #64]	; 0x40
  hi2sc->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a68:	4a82      	ldr	r2, [pc, #520]	; (8004c74 <HAL_I2S_Receive_DMA+0x360>)
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2sa->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a70:	4a81      	ldr	r2, [pc, #516]	; (8004c78 <HAL_I2S_Receive_DMA+0x364>)
 8004a72:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2sb->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a78:	4a7f      	ldr	r2, [pc, #508]	; (8004c78 <HAL_I2S_Receive_DMA+0x364>)
 8004a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2sc->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a80:	4a7d      	ldr	r2, [pc, #500]	; (8004c78 <HAL_I2S_Receive_DMA+0x364>)
 8004a82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2sa->hdmarx->XferErrorCallback = I2S_DMAError;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a88:	4a7c      	ldr	r2, [pc, #496]	; (8004c7c <HAL_I2S_Receive_DMA+0x368>)
 8004a8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hi2sb->hdmarx->XferErrorCallback = I2S_DMAError;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a90:	4a7a      	ldr	r2, [pc, #488]	; (8004c7c <HAL_I2S_Receive_DMA+0x368>)
 8004a92:	64da      	str	r2, [r3, #76]	; 0x4c
  hi2sc->hdmarx->XferErrorCallback = I2S_DMAError;
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a98:	4a78      	ldr	r2, [pc, #480]	; (8004c7c <HAL_I2S_Receive_DMA+0x368>)
 8004a9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2sa->hdmarx, (uint32_t)&hi2sa->Instance->RXDR, (uint32_t)hi2sa->pRxBuffPtr,
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3330      	adds	r3, #48	; 0x30
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aac:	461a      	mov	r2, r3
                                 hi2sa->RxXferCount))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004ab2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2sa->hdmarx, (uint32_t)&hi2sa->Instance->RXDR, (uint32_t)hi2sa->pRxBuffPtr,
 8004ab4:	f7fd fdb0 	bl	8002618 <HAL_DMA_Start_IT>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d011      	beq.n	8004ae2 <HAL_I2S_Receive_DMA+0x1ce>
  {
    /* Update I2S error code */
    SET_BIT(hi2sa->ErrorCode, HAL_I2S_ERROR_DMA);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac2:	f043 0208 	orr.w	r2, r3, #8
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	651a      	str	r2, [r3, #80]	; 0x50
    hi2sa->State = HAL_I2S_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2sa);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e0c4      	b.n	8004c6c <HAL_I2S_Receive_DMA+0x358>
  }

  if (HAL_OK != HAL_DMA_Start_IT(hi2sb->hdmarx, (uint32_t)&hi2sb->Instance->RXDR, (uint32_t)hi2sb->pRxBuffPtr,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3330      	adds	r3, #48	; 0x30
 8004aec:	4619      	mov	r1, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af2:	461a      	mov	r2, r3
                                 hi2sb->RxXferCount))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004af8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2sb->hdmarx, (uint32_t)&hi2sb->Instance->RXDR, (uint32_t)hi2sb->pRxBuffPtr,
 8004afa:	f7fd fd8d 	bl	8002618 <HAL_DMA_Start_IT>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d011      	beq.n	8004b28 <HAL_I2S_Receive_DMA+0x214>
  {
    /* Update I2S error code */
    SET_BIT(hi2sb->ErrorCode, HAL_I2S_ERROR_DMA);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b08:	f043 0208 	orr.w	r2, r3, #8
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	651a      	str	r2, [r3, #80]	; 0x50
    hi2sb->State = HAL_I2S_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2sb);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0a1      	b.n	8004c6c <HAL_I2S_Receive_DMA+0x358>
  }

  if (HAL_OK != HAL_DMA_Start_IT(hi2sc->hdmarx, (uint32_t)&hi2sc->Instance->RXDR, (uint32_t)hi2sc->pRxBuffPtr,
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3330      	adds	r3, #48	; 0x30
 8004b32:	4619      	mov	r1, r3
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b38:	461a      	mov	r2, r3
                                 hi2sc->RxXferCount))
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004b3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2sc->hdmarx, (uint32_t)&hi2sc->Instance->RXDR, (uint32_t)hi2sc->pRxBuffPtr,
 8004b40:	f7fd fd6a 	bl	8002618 <HAL_DMA_Start_IT>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d011      	beq.n	8004b6e <HAL_I2S_Receive_DMA+0x25a>
  {
    /* Update I2S error code */
    SET_BIT(hi2sc->ErrorCode, HAL_I2S_ERROR_DMA);
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4e:	f043 0208 	orr.w	r2, r3, #8
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	651a      	str	r2, [r3, #80]	; 0x50
    hi2sc->State = HAL_I2S_STATE_READY;
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2sc);
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e07e      	b.n	8004c6c <HAL_I2S_Receive_DMA+0x358>
  }

  /* Check if the I2S Rx request is already enabled */
  if ((HAL_IS_BIT_CLR(hi2sa->Instance->CFG1, SPI_CFG1_RXDMAEN))&&(HAL_IS_BIT_CLR(hi2sb->Instance->CFG1, SPI_CFG1_RXDMAEN))&&(HAL_IS_BIT_CLR(hi2sc->Instance->CFG1, SPI_CFG1_RXDMAEN)))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d125      	bne.n	8004bc8 <HAL_I2S_Receive_DMA+0x2b4>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d11e      	bne.n	8004bc8 <HAL_I2S_Receive_DMA+0x2b4>
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d117      	bne.n	8004bc8 <HAL_I2S_Receive_DMA+0x2b4>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2sa->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ba6:	609a      	str	r2, [r3, #8]
    SET_BIT(hi2sb->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bb6:	609a      	str	r2, [r3, #8]
    SET_BIT(hi2sc->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bc6:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if ((HAL_IS_BIT_CLR(hi2sa->Instance->CR1, SPI_CR1_SPE))&&(HAL_IS_BIT_CLR(hi2sb->Instance->CR1, SPI_CR1_SPE))&&(HAL_IS_BIT_CLR(hi2sc->Instance->CR1, SPI_CR1_SPE)))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d125      	bne.n	8004c22 <HAL_I2S_Receive_DMA+0x30e>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d11e      	bne.n	8004c22 <HAL_I2S_Receive_DMA+0x30e>
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d117      	bne.n	8004c22 <HAL_I2S_Receive_DMA+0x30e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2sa);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0201 	orr.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
    __HAL_I2S_ENABLE(hi2sb);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0201 	orr.w	r2, r2, #1
 8004c10:	601a      	str	r2, [r3, #0]
    __HAL_I2S_ENABLE(hi2sc);
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0201 	orr.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2sa->Instance->CR1, SPI_CR1_CSTART);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c30:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2sb->Instance->CR1, SPI_CR1_CSTART);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c40:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2sc->Instance->CR1, SPI_CR1_CSTART);
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c50:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2sa);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  __HAL_UNLOCK(hi2sb);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  __HAL_UNLOCK(hi2sc);
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8004c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	08004edb 	.word	0x08004edb
 8004c78:	08004e99 	.word	0x08004e99
 8004c7c:	08004ef7 	.word	0x08004ef7

08004c80 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t i2sier   = hi2s->Instance->IER;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	617b      	str	r3, [r7, #20]
  uint32_t i2ssr    = hi2s->Instance->SR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	613b      	str	r3, [r7, #16]
  uint32_t trigger  = i2sier & i2ssr;
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d12f      	bne.n	8004d0c <HAL_I2S_IRQHandler+0x8c>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_OVR))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d008      	beq.n	8004cc8 <HAL_I2S_IRQHandler+0x48>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d103      	bne.n	8004cc8 <HAL_I2S_IRQHandler+0x48>
    {
      hi2s->RxISR(hi2s);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4798      	blx	r3
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d01c      	beq.n	8004d0c <HAL_I2S_IRQHandler+0x8c>
    {
      /* Disable RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXP | I2S_IT_ERR));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6919      	ldr	r1, [r3, #16]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	4b62      	ldr	r3, [pc, #392]	; (8004e68 <HAL_I2S_IRQHandler+0x1e8>)
 8004cde:	400b      	ands	r3, r1
 8004ce0:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699a      	ldr	r2, [r3, #24]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf0:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfe:	f043 0202 	orr.w	r2, r3, #2
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f8bc 	bl	8004e84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d12f      	bne.n	8004d78 <HAL_I2S_IRQHandler+0xf8>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_UDR))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_I2S_IRQHandler+0xb4>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d103      	bne.n	8004d34 <HAL_I2S_IRQHandler+0xb4>
    {
      hi2s->TxISR(hi2s);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d01c      	beq.n	8004d78 <HAL_I2S_IRQHandler+0xf8>
    {
      /* Disable TXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_ERR));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 72b1 	bic.w	r2, r2, #354	; 0x162
 8004d4c:	611a      	str	r2, [r3, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0220 	orr.w	r2, r2, #32
 8004d5c:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6a:	f043 0204 	orr.w	r2, r3, #4
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f886 	bl	8004e84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b05      	cmp	r3, #5
 8004d82:	d16c      	bne.n	8004e5e <HAL_I2S_IRQHandler+0x1de>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_DXP))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d007      	beq.n	8004d9e <HAL_I2S_IRQHandler+0x11e>
    {
      hi2s->TxISR(hi2s);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	4798      	blx	r3
      hi2s->RxISR(hi2s);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	4798      	blx	r3
    }
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <HAL_I2S_IRQHandler+0x13a>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <HAL_I2S_IRQHandler+0x13a>
    {
      hi2s->RxISR(hi2s);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	4798      	blx	r3
    }
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_I2S_IRQHandler+0x156>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d103      	bne.n	8004dd6 <HAL_I2S_IRQHandler+0x156>
    {
      hi2s->TxISR(hi2s);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01c      	beq.n	8004e1a <HAL_I2S_IRQHandler+0x19a>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6919      	ldr	r1, [r3, #16]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4b20      	ldr	r3, [pc, #128]	; (8004e6c <HAL_I2S_IRQHandler+0x1ec>)
 8004dec:	400b      	ands	r3, r1
 8004dee:	6113      	str	r3, [r2, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0220 	orr.w	r2, r2, #32
 8004dfe:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0c:	f043 0204 	orr.w	r2, r3, #4
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f835 	bl	8004e84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01c      	beq.n	8004e5e <HAL_I2S_IRQHandler+0x1de>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6919      	ldr	r1, [r3, #16]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <HAL_I2S_IRQHandler+0x1ec>)
 8004e30:	400b      	ands	r3, r1
 8004e32:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e42:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e50:	f043 0202 	orr.w	r2, r3, #2
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f813 	bl	8004e84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e5e:	bf00      	nop
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	fffffe9e 	.word	0xfffffe9e
 8004e6c:	fffffe9c 	.word	0xfffffe9c

08004e70 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10e      	bne.n	8004ecc <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ebc:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	875a      	strh	r2, [r3, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7fb ff99 	bl	8000e04 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004ed2:	bf00      	nop
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f7ff ffc1 	bl	8004e70 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004f12:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2c:	f043 0208 	orr.w	r2, r3, #8
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7ff ffa5 	bl	8004e84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004f3a:	bf00      	nop
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f4c:	4b19      	ldr	r3, [pc, #100]	; (8004fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d00a      	beq.n	8004f6e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f58:	4b16      	ldr	r3, [pc, #88]	; (8004fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d001      	beq.n	8004f6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e01f      	b.n	8004faa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e01d      	b.n	8004faa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f6e:	4b11      	ldr	r3, [pc, #68]	; (8004fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f023 0207 	bic.w	r2, r3, #7
 8004f76:	490f      	ldr	r1, [pc, #60]	; (8004fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f7e:	f7fc fec7 	bl	8001d10 <HAL_GetTick>
 8004f82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f84:	e009      	b.n	8004f9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f86:	f7fc fec3 	bl	8001d10 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f94:	d901      	bls.n	8004f9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e007      	b.n	8004faa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f9a:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa6:	d1ee      	bne.n	8004f86 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	58024800 	.word	0x58024800

08004fb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08c      	sub	sp, #48	; 0x30
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d102      	bne.n	8004fcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	f000 bc1d 	b.w	8005806 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8087 	beq.w	80050e8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fda:	4b99      	ldr	r3, [pc, #612]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fe4:	4b96      	ldr	r3, [pc, #600]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	2b10      	cmp	r3, #16
 8004fee:	d007      	beq.n	8005000 <HAL_RCC_OscConfig+0x48>
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	2b18      	cmp	r3, #24
 8004ff4:	d110      	bne.n	8005018 <HAL_RCC_OscConfig+0x60>
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	f003 0303 	and.w	r3, r3, #3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d10b      	bne.n	8005018 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005000:	4b8f      	ldr	r3, [pc, #572]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d06c      	beq.n	80050e6 <HAL_RCC_OscConfig+0x12e>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d168      	bne.n	80050e6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e3f6      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005020:	d106      	bne.n	8005030 <HAL_RCC_OscConfig+0x78>
 8005022:	4b87      	ldr	r3, [pc, #540]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a86      	ldr	r2, [pc, #536]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	e02e      	b.n	800508e <HAL_RCC_OscConfig+0xd6>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10c      	bne.n	8005052 <HAL_RCC_OscConfig+0x9a>
 8005038:	4b81      	ldr	r3, [pc, #516]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a80      	ldr	r2, [pc, #512]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 800503e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	4b7e      	ldr	r3, [pc, #504]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a7d      	ldr	r2, [pc, #500]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 800504a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	e01d      	b.n	800508e <HAL_RCC_OscConfig+0xd6>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800505a:	d10c      	bne.n	8005076 <HAL_RCC_OscConfig+0xbe>
 800505c:	4b78      	ldr	r3, [pc, #480]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a77      	ldr	r2, [pc, #476]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005062:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	4b75      	ldr	r3, [pc, #468]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a74      	ldr	r2, [pc, #464]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 800506e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	e00b      	b.n	800508e <HAL_RCC_OscConfig+0xd6>
 8005076:	4b72      	ldr	r3, [pc, #456]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a71      	ldr	r2, [pc, #452]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 800507c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	4b6f      	ldr	r3, [pc, #444]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a6e      	ldr	r2, [pc, #440]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800508c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d013      	beq.n	80050be <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005096:	f7fc fe3b 	bl	8001d10 <HAL_GetTick>
 800509a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800509e:	f7fc fe37 	bl	8001d10 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b64      	cmp	r3, #100	; 0x64
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e3aa      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050b0:	4b63      	ldr	r3, [pc, #396]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0f0      	beq.n	800509e <HAL_RCC_OscConfig+0xe6>
 80050bc:	e014      	b.n	80050e8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050be:	f7fc fe27 	bl	8001d10 <HAL_GetTick>
 80050c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050c6:	f7fc fe23 	bl	8001d10 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b64      	cmp	r3, #100	; 0x64
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e396      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050d8:	4b59      	ldr	r3, [pc, #356]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1f0      	bne.n	80050c6 <HAL_RCC_OscConfig+0x10e>
 80050e4:	e000      	b.n	80050e8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 80cb 	beq.w	800528c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050f6:	4b52      	ldr	r3, [pc, #328]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050fe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005100:	4b4f      	ldr	r3, [pc, #316]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d007      	beq.n	800511c <HAL_RCC_OscConfig+0x164>
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	2b18      	cmp	r3, #24
 8005110:	d156      	bne.n	80051c0 <HAL_RCC_OscConfig+0x208>
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	f003 0303 	and.w	r3, r3, #3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d151      	bne.n	80051c0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800511c:	4b48      	ldr	r3, [pc, #288]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <HAL_RCC_OscConfig+0x17c>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e368      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005134:	4b42      	ldr	r3, [pc, #264]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f023 0219 	bic.w	r2, r3, #25
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	493f      	ldr	r1, [pc, #252]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005142:	4313      	orrs	r3, r2
 8005144:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005146:	f7fc fde3 	bl	8001d10 <HAL_GetTick>
 800514a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800514e:	f7fc fddf 	bl	8001d10 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e352      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005160:	4b37      	ldr	r3, [pc, #220]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0f0      	beq.n	800514e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516c:	f7fc fddc 	bl	8001d28 <HAL_GetREVID>
 8005170:	4603      	mov	r3, r0
 8005172:	f241 0203 	movw	r2, #4099	; 0x1003
 8005176:	4293      	cmp	r3, r2
 8005178:	d817      	bhi.n	80051aa <HAL_RCC_OscConfig+0x1f2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b40      	cmp	r3, #64	; 0x40
 8005180:	d108      	bne.n	8005194 <HAL_RCC_OscConfig+0x1dc>
 8005182:	4b2f      	ldr	r3, [pc, #188]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800518a:	4a2d      	ldr	r2, [pc, #180]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 800518c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005190:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005192:	e07b      	b.n	800528c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005194:	4b2a      	ldr	r3, [pc, #168]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	031b      	lsls	r3, r3, #12
 80051a2:	4927      	ldr	r1, [pc, #156]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051a8:	e070      	b.n	800528c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051aa:	4b25      	ldr	r3, [pc, #148]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	061b      	lsls	r3, r3, #24
 80051b8:	4921      	ldr	r1, [pc, #132]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051be:	e065      	b.n	800528c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d048      	beq.n	800525a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051c8:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f023 0219 	bic.w	r2, r3, #25
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	491a      	ldr	r1, [pc, #104]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051da:	f7fc fd99 	bl	8001d10 <HAL_GetTick>
 80051de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051e2:	f7fc fd95 	bl	8001d10 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e308      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051f4:	4b12      	ldr	r3, [pc, #72]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005200:	f7fc fd92 	bl	8001d28 <HAL_GetREVID>
 8005204:	4603      	mov	r3, r0
 8005206:	f241 0203 	movw	r2, #4099	; 0x1003
 800520a:	4293      	cmp	r3, r2
 800520c:	d81a      	bhi.n	8005244 <HAL_RCC_OscConfig+0x28c>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b40      	cmp	r3, #64	; 0x40
 8005214:	d108      	bne.n	8005228 <HAL_RCC_OscConfig+0x270>
 8005216:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800521e:	4a08      	ldr	r2, [pc, #32]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005224:	6053      	str	r3, [r2, #4]
 8005226:	e031      	b.n	800528c <HAL_RCC_OscConfig+0x2d4>
 8005228:	4b05      	ldr	r3, [pc, #20]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	031b      	lsls	r3, r3, #12
 8005236:	4902      	ldr	r1, [pc, #8]	; (8005240 <HAL_RCC_OscConfig+0x288>)
 8005238:	4313      	orrs	r3, r2
 800523a:	604b      	str	r3, [r1, #4]
 800523c:	e026      	b.n	800528c <HAL_RCC_OscConfig+0x2d4>
 800523e:	bf00      	nop
 8005240:	58024400 	.word	0x58024400
 8005244:	4b9a      	ldr	r3, [pc, #616]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	061b      	lsls	r3, r3, #24
 8005252:	4997      	ldr	r1, [pc, #604]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 8005254:	4313      	orrs	r3, r2
 8005256:	604b      	str	r3, [r1, #4]
 8005258:	e018      	b.n	800528c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800525a:	4b95      	ldr	r3, [pc, #596]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a94      	ldr	r2, [pc, #592]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 8005260:	f023 0301 	bic.w	r3, r3, #1
 8005264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005266:	f7fc fd53 	bl	8001d10 <HAL_GetTick>
 800526a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800526e:	f7fc fd4f 	bl	8001d10 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e2c2      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005280:	4b8b      	ldr	r3, [pc, #556]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f0      	bne.n	800526e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80a9 	beq.w	80053ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800529a:	4b85      	ldr	r3, [pc, #532]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052a4:	4b82      	ldr	r3, [pc, #520]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 80052a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d007      	beq.n	80052c0 <HAL_RCC_OscConfig+0x308>
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	2b18      	cmp	r3, #24
 80052b4:	d13a      	bne.n	800532c <HAL_RCC_OscConfig+0x374>
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d135      	bne.n	800532c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052c0:	4b7b      	ldr	r3, [pc, #492]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_RCC_OscConfig+0x320>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	2b80      	cmp	r3, #128	; 0x80
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e296      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052d8:	f7fc fd26 	bl	8001d28 <HAL_GetREVID>
 80052dc:	4603      	mov	r3, r0
 80052de:	f241 0203 	movw	r2, #4099	; 0x1003
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d817      	bhi.n	8005316 <HAL_RCC_OscConfig+0x35e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	2b20      	cmp	r3, #32
 80052ec:	d108      	bne.n	8005300 <HAL_RCC_OscConfig+0x348>
 80052ee:	4b70      	ldr	r3, [pc, #448]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80052f6:	4a6e      	ldr	r2, [pc, #440]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 80052f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052fe:	e075      	b.n	80053ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005300:	4b6b      	ldr	r3, [pc, #428]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	069b      	lsls	r3, r3, #26
 800530e:	4968      	ldr	r1, [pc, #416]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 8005310:	4313      	orrs	r3, r2
 8005312:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005314:	e06a      	b.n	80053ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005316:	4b66      	ldr	r3, [pc, #408]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	061b      	lsls	r3, r3, #24
 8005324:	4962      	ldr	r1, [pc, #392]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 8005326:	4313      	orrs	r3, r2
 8005328:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800532a:	e05f      	b.n	80053ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d042      	beq.n	80053ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005334:	4b5e      	ldr	r3, [pc, #376]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a5d      	ldr	r2, [pc, #372]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 800533a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005340:	f7fc fce6 	bl	8001d10 <HAL_GetTick>
 8005344:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005348:	f7fc fce2 	bl	8001d10 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e255      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800535a:	4b55      	ldr	r3, [pc, #340]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0f0      	beq.n	8005348 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005366:	f7fc fcdf 	bl	8001d28 <HAL_GetREVID>
 800536a:	4603      	mov	r3, r0
 800536c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005370:	4293      	cmp	r3, r2
 8005372:	d817      	bhi.n	80053a4 <HAL_RCC_OscConfig+0x3ec>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	2b20      	cmp	r3, #32
 800537a:	d108      	bne.n	800538e <HAL_RCC_OscConfig+0x3d6>
 800537c:	4b4c      	ldr	r3, [pc, #304]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005384:	4a4a      	ldr	r2, [pc, #296]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 8005386:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800538a:	6053      	str	r3, [r2, #4]
 800538c:	e02e      	b.n	80053ec <HAL_RCC_OscConfig+0x434>
 800538e:	4b48      	ldr	r3, [pc, #288]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	069b      	lsls	r3, r3, #26
 800539c:	4944      	ldr	r1, [pc, #272]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	604b      	str	r3, [r1, #4]
 80053a2:	e023      	b.n	80053ec <HAL_RCC_OscConfig+0x434>
 80053a4:	4b42      	ldr	r3, [pc, #264]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	061b      	lsls	r3, r3, #24
 80053b2:	493f      	ldr	r1, [pc, #252]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60cb      	str	r3, [r1, #12]
 80053b8:	e018      	b.n	80053ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80053ba:	4b3d      	ldr	r3, [pc, #244]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a3c      	ldr	r2, [pc, #240]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 80053c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c6:	f7fc fca3 	bl	8001d10 <HAL_GetTick>
 80053ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80053ce:	f7fc fc9f 	bl	8001d10 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e212      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80053e0:	4b33      	ldr	r3, [pc, #204]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1f0      	bne.n	80053ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d036      	beq.n	8005466 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d019      	beq.n	8005434 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005400:	4b2b      	ldr	r3, [pc, #172]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 8005402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005404:	4a2a      	ldr	r2, [pc, #168]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 8005406:	f043 0301 	orr.w	r3, r3, #1
 800540a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540c:	f7fc fc80 	bl	8001d10 <HAL_GetTick>
 8005410:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005414:	f7fc fc7c 	bl	8001d10 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e1ef      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005426:	4b22      	ldr	r3, [pc, #136]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 8005428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0x45c>
 8005432:	e018      	b.n	8005466 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005434:	4b1e      	ldr	r3, [pc, #120]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 8005436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005438:	4a1d      	ldr	r2, [pc, #116]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 800543a:	f023 0301 	bic.w	r3, r3, #1
 800543e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005440:	f7fc fc66 	bl	8001d10 <HAL_GetTick>
 8005444:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005448:	f7fc fc62 	bl	8001d10 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e1d5      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800545a:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 800545c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0320 	and.w	r3, r3, #32
 800546e:	2b00      	cmp	r3, #0
 8005470:	d039      	beq.n	80054e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01c      	beq.n	80054b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800547a:	4b0d      	ldr	r3, [pc, #52]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a0c      	ldr	r2, [pc, #48]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 8005480:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005484:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005486:	f7fc fc43 	bl	8001d10 <HAL_GetTick>
 800548a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800548e:	f7fc fc3f 	bl	8001d10 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e1b2      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054a0:	4b03      	ldr	r3, [pc, #12]	; (80054b0 <HAL_RCC_OscConfig+0x4f8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCC_OscConfig+0x4d6>
 80054ac:	e01b      	b.n	80054e6 <HAL_RCC_OscConfig+0x52e>
 80054ae:	bf00      	nop
 80054b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054b4:	4b9b      	ldr	r3, [pc, #620]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a9a      	ldr	r2, [pc, #616]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80054ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054c0:	f7fc fc26 	bl	8001d10 <HAL_GetTick>
 80054c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80054c8:	f7fc fc22 	bl	8001d10 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e195      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054da:	4b92      	ldr	r3, [pc, #584]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f0      	bne.n	80054c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 8081 	beq.w	80055f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054f4:	4b8c      	ldr	r3, [pc, #560]	; (8005728 <HAL_RCC_OscConfig+0x770>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a8b      	ldr	r2, [pc, #556]	; (8005728 <HAL_RCC_OscConfig+0x770>)
 80054fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005500:	f7fc fc06 	bl	8001d10 <HAL_GetTick>
 8005504:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005508:	f7fc fc02 	bl	8001d10 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b64      	cmp	r3, #100	; 0x64
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e175      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800551a:	4b83      	ldr	r3, [pc, #524]	; (8005728 <HAL_RCC_OscConfig+0x770>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0f0      	beq.n	8005508 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d106      	bne.n	800553c <HAL_RCC_OscConfig+0x584>
 800552e:	4b7d      	ldr	r3, [pc, #500]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005532:	4a7c      	ldr	r2, [pc, #496]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	6713      	str	r3, [r2, #112]	; 0x70
 800553a:	e02d      	b.n	8005598 <HAL_RCC_OscConfig+0x5e0>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10c      	bne.n	800555e <HAL_RCC_OscConfig+0x5a6>
 8005544:	4b77      	ldr	r3, [pc, #476]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005548:	4a76      	ldr	r2, [pc, #472]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	6713      	str	r3, [r2, #112]	; 0x70
 8005550:	4b74      	ldr	r3, [pc, #464]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005554:	4a73      	ldr	r2, [pc, #460]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005556:	f023 0304 	bic.w	r3, r3, #4
 800555a:	6713      	str	r3, [r2, #112]	; 0x70
 800555c:	e01c      	b.n	8005598 <HAL_RCC_OscConfig+0x5e0>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	2b05      	cmp	r3, #5
 8005564:	d10c      	bne.n	8005580 <HAL_RCC_OscConfig+0x5c8>
 8005566:	4b6f      	ldr	r3, [pc, #444]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	4a6e      	ldr	r2, [pc, #440]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 800556c:	f043 0304 	orr.w	r3, r3, #4
 8005570:	6713      	str	r3, [r2, #112]	; 0x70
 8005572:	4b6c      	ldr	r3, [pc, #432]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	4a6b      	ldr	r2, [pc, #428]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	6713      	str	r3, [r2, #112]	; 0x70
 800557e:	e00b      	b.n	8005598 <HAL_RCC_OscConfig+0x5e0>
 8005580:	4b68      	ldr	r3, [pc, #416]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005584:	4a67      	ldr	r2, [pc, #412]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005586:	f023 0301 	bic.w	r3, r3, #1
 800558a:	6713      	str	r3, [r2, #112]	; 0x70
 800558c:	4b65      	ldr	r3, [pc, #404]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 800558e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005590:	4a64      	ldr	r2, [pc, #400]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005592:	f023 0304 	bic.w	r3, r3, #4
 8005596:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d015      	beq.n	80055cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a0:	f7fc fbb6 	bl	8001d10 <HAL_GetTick>
 80055a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055a6:	e00a      	b.n	80055be <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a8:	f7fc fbb2 	bl	8001d10 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e123      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055be:	4b59      	ldr	r3, [pc, #356]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80055c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0ee      	beq.n	80055a8 <HAL_RCC_OscConfig+0x5f0>
 80055ca:	e014      	b.n	80055f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055cc:	f7fc fba0 	bl	8001d10 <HAL_GetTick>
 80055d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055d2:	e00a      	b.n	80055ea <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055d4:	f7fc fb9c 	bl	8001d10 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e10d      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055ea:	4b4e      	ldr	r3, [pc, #312]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1ee      	bne.n	80055d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 8102 	beq.w	8005804 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005600:	4b48      	ldr	r3, [pc, #288]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005608:	2b18      	cmp	r3, #24
 800560a:	f000 80bd 	beq.w	8005788 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	2b02      	cmp	r3, #2
 8005614:	f040 809e 	bne.w	8005754 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005618:	4b42      	ldr	r3, [pc, #264]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a41      	ldr	r2, [pc, #260]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 800561e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005624:	f7fc fb74 	bl	8001d10 <HAL_GetTick>
 8005628:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800562c:	f7fc fb70 	bl	8001d10 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e0e3      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800563e:	4b39      	ldr	r3, [pc, #228]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f0      	bne.n	800562c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800564a:	4b36      	ldr	r3, [pc, #216]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 800564c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800564e:	4b37      	ldr	r3, [pc, #220]	; (800572c <HAL_RCC_OscConfig+0x774>)
 8005650:	4013      	ands	r3, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800565a:	0112      	lsls	r2, r2, #4
 800565c:	430a      	orrs	r2, r1
 800565e:	4931      	ldr	r1, [pc, #196]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005660:	4313      	orrs	r3, r2
 8005662:	628b      	str	r3, [r1, #40]	; 0x28
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	3b01      	subs	r3, #1
 800566a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005672:	3b01      	subs	r3, #1
 8005674:	025b      	lsls	r3, r3, #9
 8005676:	b29b      	uxth	r3, r3
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	3b01      	subs	r3, #1
 8005680:	041b      	lsls	r3, r3, #16
 8005682:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568c:	3b01      	subs	r3, #1
 800568e:	061b      	lsls	r3, r3, #24
 8005690:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005694:	4923      	ldr	r1, [pc, #140]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005696:	4313      	orrs	r3, r2
 8005698:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800569a:	4b22      	ldr	r3, [pc, #136]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 800569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569e:	4a21      	ldr	r2, [pc, #132]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80056a0:	f023 0301 	bic.w	r3, r3, #1
 80056a4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056a6:	4b1f      	ldr	r3, [pc, #124]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80056a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056aa:	4b21      	ldr	r3, [pc, #132]	; (8005730 <HAL_RCC_OscConfig+0x778>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80056b2:	00d2      	lsls	r2, r2, #3
 80056b4:	491b      	ldr	r1, [pc, #108]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80056ba:	4b1a      	ldr	r3, [pc, #104]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	f023 020c 	bic.w	r2, r3, #12
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	4917      	ldr	r1, [pc, #92]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80056cc:	4b15      	ldr	r3, [pc, #84]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80056ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d0:	f023 0202 	bic.w	r2, r3, #2
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d8:	4912      	ldr	r1, [pc, #72]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056de:	4b11      	ldr	r3, [pc, #68]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	4a10      	ldr	r2, [pc, #64]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80056e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ea:	4b0e      	ldr	r3, [pc, #56]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	4a0d      	ldr	r2, [pc, #52]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80056f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80056f6:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	4a0a      	ldr	r2, [pc, #40]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 80056fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005700:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005702:	4b08      	ldr	r3, [pc, #32]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	4a07      	ldr	r2, [pc, #28]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005708:	f043 0301 	orr.w	r3, r3, #1
 800570c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800570e:	4b05      	ldr	r3, [pc, #20]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a04      	ldr	r2, [pc, #16]	; (8005724 <HAL_RCC_OscConfig+0x76c>)
 8005714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571a:	f7fc faf9 	bl	8001d10 <HAL_GetTick>
 800571e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005720:	e011      	b.n	8005746 <HAL_RCC_OscConfig+0x78e>
 8005722:	bf00      	nop
 8005724:	58024400 	.word	0x58024400
 8005728:	58024800 	.word	0x58024800
 800572c:	fffffc0c 	.word	0xfffffc0c
 8005730:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005734:	f7fc faec 	bl	8001d10 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e05f      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005746:	4b32      	ldr	r3, [pc, #200]	; (8005810 <HAL_RCC_OscConfig+0x858>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0f0      	beq.n	8005734 <HAL_RCC_OscConfig+0x77c>
 8005752:	e057      	b.n	8005804 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005754:	4b2e      	ldr	r3, [pc, #184]	; (8005810 <HAL_RCC_OscConfig+0x858>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a2d      	ldr	r2, [pc, #180]	; (8005810 <HAL_RCC_OscConfig+0x858>)
 800575a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800575e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005760:	f7fc fad6 	bl	8001d10 <HAL_GetTick>
 8005764:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005768:	f7fc fad2 	bl	8001d10 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e045      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800577a:	4b25      	ldr	r3, [pc, #148]	; (8005810 <HAL_RCC_OscConfig+0x858>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f0      	bne.n	8005768 <HAL_RCC_OscConfig+0x7b0>
 8005786:	e03d      	b.n	8005804 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005788:	4b21      	ldr	r3, [pc, #132]	; (8005810 <HAL_RCC_OscConfig+0x858>)
 800578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800578e:	4b20      	ldr	r3, [pc, #128]	; (8005810 <HAL_RCC_OscConfig+0x858>)
 8005790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005792:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	2b01      	cmp	r3, #1
 800579a:	d031      	beq.n	8005800 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f003 0203 	and.w	r2, r3, #3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d12a      	bne.n	8005800 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	091b      	lsrs	r3, r3, #4
 80057ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d122      	bne.n	8005800 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d11a      	bne.n	8005800 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	0a5b      	lsrs	r3, r3, #9
 80057ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057d8:	429a      	cmp	r2, r3
 80057da:	d111      	bne.n	8005800 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	0c1b      	lsrs	r3, r3, #16
 80057e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d108      	bne.n	8005800 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	0e1b      	lsrs	r3, r3, #24
 80057f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d001      	beq.n	8005804 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3730      	adds	r7, #48	; 0x30
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	58024400 	.word	0x58024400

08005814 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e19c      	b.n	8005b62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005828:	4b8a      	ldr	r3, [pc, #552]	; (8005a54 <HAL_RCC_ClockConfig+0x240>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d910      	bls.n	8005858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005836:	4b87      	ldr	r3, [pc, #540]	; (8005a54 <HAL_RCC_ClockConfig+0x240>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f023 020f 	bic.w	r2, r3, #15
 800583e:	4985      	ldr	r1, [pc, #532]	; (8005a54 <HAL_RCC_ClockConfig+0x240>)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	4313      	orrs	r3, r2
 8005844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005846:	4b83      	ldr	r3, [pc, #524]	; (8005a54 <HAL_RCC_ClockConfig+0x240>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	429a      	cmp	r2, r3
 8005852:	d001      	beq.n	8005858 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e184      	b.n	8005b62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d010      	beq.n	8005886 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	4b7b      	ldr	r3, [pc, #492]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005870:	429a      	cmp	r2, r3
 8005872:	d908      	bls.n	8005886 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005874:	4b78      	ldr	r3, [pc, #480]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	4975      	ldr	r1, [pc, #468]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 8005882:	4313      	orrs	r3, r2
 8005884:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d010      	beq.n	80058b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695a      	ldr	r2, [r3, #20]
 8005896:	4b70      	ldr	r3, [pc, #448]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800589e:	429a      	cmp	r2, r3
 80058a0:	d908      	bls.n	80058b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058a2:	4b6d      	ldr	r3, [pc, #436]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	496a      	ldr	r1, [pc, #424]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d010      	beq.n	80058e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699a      	ldr	r2, [r3, #24]
 80058c4:	4b64      	ldr	r3, [pc, #400]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d908      	bls.n	80058e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80058d0:	4b61      	ldr	r3, [pc, #388]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	495e      	ldr	r1, [pc, #376]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d010      	beq.n	8005910 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	69da      	ldr	r2, [r3, #28]
 80058f2:	4b59      	ldr	r3, [pc, #356]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d908      	bls.n	8005910 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80058fe:	4b56      	ldr	r3, [pc, #344]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	4953      	ldr	r1, [pc, #332]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 800590c:	4313      	orrs	r3, r2
 800590e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d010      	beq.n	800593e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68da      	ldr	r2, [r3, #12]
 8005920:	4b4d      	ldr	r3, [pc, #308]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	429a      	cmp	r2, r3
 800592a:	d908      	bls.n	800593e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800592c:	4b4a      	ldr	r3, [pc, #296]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	f023 020f 	bic.w	r2, r3, #15
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	4947      	ldr	r1, [pc, #284]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 800593a:	4313      	orrs	r3, r2
 800593c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d055      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800594a:	4b43      	ldr	r3, [pc, #268]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	4940      	ldr	r1, [pc, #256]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 8005958:	4313      	orrs	r3, r2
 800595a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	2b02      	cmp	r3, #2
 8005962:	d107      	bne.n	8005974 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005964:	4b3c      	ldr	r3, [pc, #240]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d121      	bne.n	80059b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e0f6      	b.n	8005b62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	2b03      	cmp	r3, #3
 800597a:	d107      	bne.n	800598c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800597c:	4b36      	ldr	r3, [pc, #216]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d115      	bne.n	80059b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e0ea      	b.n	8005b62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d107      	bne.n	80059a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005994:	4b30      	ldr	r3, [pc, #192]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599c:	2b00      	cmp	r3, #0
 800599e:	d109      	bne.n	80059b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e0de      	b.n	8005b62 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059a4:	4b2c      	ldr	r3, [pc, #176]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e0d6      	b.n	8005b62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059b4:	4b28      	ldr	r3, [pc, #160]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f023 0207 	bic.w	r2, r3, #7
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	4925      	ldr	r1, [pc, #148]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c6:	f7fc f9a3 	bl	8001d10 <HAL_GetTick>
 80059ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059cc:	e00a      	b.n	80059e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ce:	f7fc f99f 	bl	8001d10 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059dc:	4293      	cmp	r3, r2
 80059de:	d901      	bls.n	80059e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e0be      	b.n	8005b62 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e4:	4b1c      	ldr	r3, [pc, #112]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d1eb      	bne.n	80059ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d010      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	4b14      	ldr	r3, [pc, #80]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d208      	bcs.n	8005a24 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a12:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f023 020f 	bic.w	r2, r3, #15
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	490e      	ldr	r1, [pc, #56]	; (8005a58 <HAL_RCC_ClockConfig+0x244>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <HAL_RCC_ClockConfig+0x240>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d214      	bcs.n	8005a5c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a32:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <HAL_RCC_ClockConfig+0x240>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f023 020f 	bic.w	r2, r3, #15
 8005a3a:	4906      	ldr	r1, [pc, #24]	; (8005a54 <HAL_RCC_ClockConfig+0x240>)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a42:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <HAL_RCC_ClockConfig+0x240>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d005      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e086      	b.n	8005b62 <HAL_RCC_ClockConfig+0x34e>
 8005a54:	52002000 	.word	0x52002000
 8005a58:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d010      	beq.n	8005a8a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	4b3f      	ldr	r3, [pc, #252]	; (8005b6c <HAL_RCC_ClockConfig+0x358>)
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d208      	bcs.n	8005a8a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a78:	4b3c      	ldr	r3, [pc, #240]	; (8005b6c <HAL_RCC_ClockConfig+0x358>)
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	4939      	ldr	r1, [pc, #228]	; (8005b6c <HAL_RCC_ClockConfig+0x358>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d010      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	695a      	ldr	r2, [r3, #20]
 8005a9a:	4b34      	ldr	r3, [pc, #208]	; (8005b6c <HAL_RCC_ClockConfig+0x358>)
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d208      	bcs.n	8005ab8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005aa6:	4b31      	ldr	r3, [pc, #196]	; (8005b6c <HAL_RCC_ClockConfig+0x358>)
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	492e      	ldr	r1, [pc, #184]	; (8005b6c <HAL_RCC_ClockConfig+0x358>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d010      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699a      	ldr	r2, [r3, #24]
 8005ac8:	4b28      	ldr	r3, [pc, #160]	; (8005b6c <HAL_RCC_ClockConfig+0x358>)
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d208      	bcs.n	8005ae6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ad4:	4b25      	ldr	r3, [pc, #148]	; (8005b6c <HAL_RCC_ClockConfig+0x358>)
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	4922      	ldr	r1, [pc, #136]	; (8005b6c <HAL_RCC_ClockConfig+0x358>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d010      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69da      	ldr	r2, [r3, #28]
 8005af6:	4b1d      	ldr	r3, [pc, #116]	; (8005b6c <HAL_RCC_ClockConfig+0x358>)
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d208      	bcs.n	8005b14 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b02:	4b1a      	ldr	r3, [pc, #104]	; (8005b6c <HAL_RCC_ClockConfig+0x358>)
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	4917      	ldr	r1, [pc, #92]	; (8005b6c <HAL_RCC_ClockConfig+0x358>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b14:	f000 f844 	bl	8005ba0 <HAL_RCC_GetSysClockFreq>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <HAL_RCC_ClockConfig+0x358>)
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	0a1b      	lsrs	r3, r3, #8
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	4912      	ldr	r1, [pc, #72]	; (8005b70 <HAL_RCC_ClockConfig+0x35c>)
 8005b26:	5ccb      	ldrb	r3, [r1, r3]
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b32:	4b0e      	ldr	r3, [pc, #56]	; (8005b6c <HAL_RCC_ClockConfig+0x358>)
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	4a0d      	ldr	r2, [pc, #52]	; (8005b70 <HAL_RCC_ClockConfig+0x35c>)
 8005b3c:	5cd3      	ldrb	r3, [r2, r3]
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
 8005b48:	4a0a      	ldr	r2, [pc, #40]	; (8005b74 <HAL_RCC_ClockConfig+0x360>)
 8005b4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b4c:	4a0a      	ldr	r2, [pc, #40]	; (8005b78 <HAL_RCC_ClockConfig+0x364>)
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005b52:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <HAL_RCC_ClockConfig+0x368>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fc f890 	bl	8001c7c <HAL_InitTick>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	58024400 	.word	0x58024400
 8005b70:	0800b884 	.word	0x0800b884
 8005b74:	24000004 	.word	0x24000004
 8005b78:	24000000 	.word	0x24000000
 8005b7c:	24000008 	.word	0x24000008

08005b80 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8005b84:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <HAL_RCC_EnableCSS+0x1c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a04      	ldr	r2, [pc, #16]	; (8005b9c <HAL_RCC_EnableCSS+0x1c>)
 8005b8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b8e:	6013      	str	r3, [r2, #0]
}
 8005b90:	bf00      	nop
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	58024400 	.word	0x58024400

08005ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b089      	sub	sp, #36	; 0x24
 8005ba4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ba6:	4bb3      	ldr	r3, [pc, #716]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bae:	2b18      	cmp	r3, #24
 8005bb0:	f200 8155 	bhi.w	8005e5e <HAL_RCC_GetSysClockFreq+0x2be>
 8005bb4:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <HAL_RCC_GetSysClockFreq+0x1c>)
 8005bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bba:	bf00      	nop
 8005bbc:	08005c21 	.word	0x08005c21
 8005bc0:	08005e5f 	.word	0x08005e5f
 8005bc4:	08005e5f 	.word	0x08005e5f
 8005bc8:	08005e5f 	.word	0x08005e5f
 8005bcc:	08005e5f 	.word	0x08005e5f
 8005bd0:	08005e5f 	.word	0x08005e5f
 8005bd4:	08005e5f 	.word	0x08005e5f
 8005bd8:	08005e5f 	.word	0x08005e5f
 8005bdc:	08005c47 	.word	0x08005c47
 8005be0:	08005e5f 	.word	0x08005e5f
 8005be4:	08005e5f 	.word	0x08005e5f
 8005be8:	08005e5f 	.word	0x08005e5f
 8005bec:	08005e5f 	.word	0x08005e5f
 8005bf0:	08005e5f 	.word	0x08005e5f
 8005bf4:	08005e5f 	.word	0x08005e5f
 8005bf8:	08005e5f 	.word	0x08005e5f
 8005bfc:	08005c4d 	.word	0x08005c4d
 8005c00:	08005e5f 	.word	0x08005e5f
 8005c04:	08005e5f 	.word	0x08005e5f
 8005c08:	08005e5f 	.word	0x08005e5f
 8005c0c:	08005e5f 	.word	0x08005e5f
 8005c10:	08005e5f 	.word	0x08005e5f
 8005c14:	08005e5f 	.word	0x08005e5f
 8005c18:	08005e5f 	.word	0x08005e5f
 8005c1c:	08005c53 	.word	0x08005c53
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c20:	4b94      	ldr	r3, [pc, #592]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d009      	beq.n	8005c40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c2c:	4b91      	ldr	r3, [pc, #580]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	08db      	lsrs	r3, r3, #3
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	4a90      	ldr	r2, [pc, #576]	; (8005e78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c38:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005c3e:	e111      	b.n	8005e64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c40:	4b8d      	ldr	r3, [pc, #564]	; (8005e78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c42:	61bb      	str	r3, [r7, #24]
    break;
 8005c44:	e10e      	b.n	8005e64 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005c46:	4b8d      	ldr	r3, [pc, #564]	; (8005e7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c48:	61bb      	str	r3, [r7, #24]
    break;
 8005c4a:	e10b      	b.n	8005e64 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005c4c:	4b8c      	ldr	r3, [pc, #560]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005c4e:	61bb      	str	r3, [r7, #24]
    break;
 8005c50:	e108      	b.n	8005e64 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c52:	4b88      	ldr	r3, [pc, #544]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005c5c:	4b85      	ldr	r3, [pc, #532]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c60:	091b      	lsrs	r3, r3, #4
 8005c62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c66:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c68:	4b82      	ldr	r3, [pc, #520]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005c72:	4b80      	ldr	r3, [pc, #512]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c76:	08db      	lsrs	r3, r3, #3
 8005c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 80e1 	beq.w	8005e58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	f000 8083 	beq.w	8005da4 <HAL_RCC_GetSysClockFreq+0x204>
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	f200 80a1 	bhi.w	8005de8 <HAL_RCC_GetSysClockFreq+0x248>
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x114>
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d056      	beq.n	8005d60 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005cb2:	e099      	b.n	8005de8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cb4:	4b6f      	ldr	r3, [pc, #444]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d02d      	beq.n	8005d1c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cc0:	4b6c      	ldr	r3, [pc, #432]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	08db      	lsrs	r3, r3, #3
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	4a6b      	ldr	r2, [pc, #428]	; (8005e78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	ee07 3a90 	vmov	s15, r3
 8005cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cea:	4b62      	ldr	r3, [pc, #392]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cfe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005d1a:	e087      	b.n	8005e2c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d26:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005e88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2e:	4b51      	ldr	r3, [pc, #324]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d42:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d5e:	e065      	b.n	8005e2c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005e8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d72:	4b40      	ldr	r3, [pc, #256]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d86:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005da2:	e043      	b.n	8005e2c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005e90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db6:	4b2f      	ldr	r3, [pc, #188]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005de6:	e021      	b.n	8005e2c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005e8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dfa:	4b1e      	ldr	r3, [pc, #120]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e02:	ee07 3a90 	vmov	s15, r3
 8005e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e0e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e2a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005e2c:	4b11      	ldr	r3, [pc, #68]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	0a5b      	lsrs	r3, r3, #9
 8005e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e36:	3301      	adds	r3, #1
 8005e38:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	ee07 3a90 	vmov	s15, r3
 8005e40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e44:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e50:	ee17 3a90 	vmov	r3, s15
 8005e54:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005e56:	e005      	b.n	8005e64 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	61bb      	str	r3, [r7, #24]
    break;
 8005e5c:	e002      	b.n	8005e64 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005e5e:	4b07      	ldr	r3, [pc, #28]	; (8005e7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e60:	61bb      	str	r3, [r7, #24]
    break;
 8005e62:	bf00      	nop
  }

  return sysclockfreq;
 8005e64:	69bb      	ldr	r3, [r7, #24]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3724      	adds	r7, #36	; 0x24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	58024400 	.word	0x58024400
 8005e78:	03d09000 	.word	0x03d09000
 8005e7c:	003d0900 	.word	0x003d0900
 8005e80:	017d7840 	.word	0x017d7840
 8005e84:	46000000 	.word	0x46000000
 8005e88:	4c742400 	.word	0x4c742400
 8005e8c:	4a742400 	.word	0x4a742400
 8005e90:	4bbebc20 	.word	0x4bbebc20

08005e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005e9a:	f7ff fe81 	bl	8005ba0 <HAL_RCC_GetSysClockFreq>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	4b10      	ldr	r3, [pc, #64]	; (8005ee4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	0a1b      	lsrs	r3, r3, #8
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	490f      	ldr	r1, [pc, #60]	; (8005ee8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005eac:	5ccb      	ldrb	r3, [r1, r3]
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	4a09      	ldr	r2, [pc, #36]	; (8005ee8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ec2:	5cd3      	ldrb	r3, [r2, r3]
 8005ec4:	f003 031f 	and.w	r3, r3, #31
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	fa22 f303 	lsr.w	r3, r2, r3
 8005ece:	4a07      	ldr	r2, [pc, #28]	; (8005eec <HAL_RCC_GetHCLKFreq+0x58>)
 8005ed0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ed2:	4a07      	ldr	r2, [pc, #28]	; (8005ef0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ed8:	4b04      	ldr	r3, [pc, #16]	; (8005eec <HAL_RCC_GetHCLKFreq+0x58>)
 8005eda:	681b      	ldr	r3, [r3, #0]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	58024400 	.word	0x58024400
 8005ee8:	0800b884 	.word	0x0800b884
 8005eec:	24000004 	.word	0x24000004
 8005ef0:	24000000 	.word	0x24000000

08005ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005ef8:	f7ff ffcc 	bl	8005e94 <HAL_RCC_GetHCLKFreq>
 8005efc:	4602      	mov	r2, r0
 8005efe:	4b06      	ldr	r3, [pc, #24]	; (8005f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	091b      	lsrs	r3, r3, #4
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	4904      	ldr	r1, [pc, #16]	; (8005f1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f0a:	5ccb      	ldrb	r3, [r1, r3]
 8005f0c:	f003 031f 	and.w	r3, r3, #31
 8005f10:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	58024400 	.word	0x58024400
 8005f1c:	0800b884 	.word	0x0800b884

08005f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005f24:	f7ff ffb6 	bl	8005e94 <HAL_RCC_GetHCLKFreq>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	0a1b      	lsrs	r3, r3, #8
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	4904      	ldr	r1, [pc, #16]	; (8005f48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f36:	5ccb      	ldrb	r3, [r1, r3]
 8005f38:	f003 031f 	and.w	r3, r3, #31
 8005f3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	58024400 	.word	0x58024400
 8005f48:	0800b884 	.word	0x0800b884

08005f4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f54:	2300      	movs	r3, #0
 8005f56:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f58:	2300      	movs	r3, #0
 8005f5a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d03f      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f70:	d02a      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005f72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f76:	d824      	bhi.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f7c:	d018      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f82:	d81e      	bhi.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005f88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f8c:	d007      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005f8e:	e018      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f90:	4ba3      	ldr	r3, [pc, #652]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	4aa2      	ldr	r2, [pc, #648]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005f9c:	e015      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	2102      	movs	r1, #2
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f001 fff9 	bl	8007f9c <RCCEx_PLL2_Config>
 8005faa:	4603      	mov	r3, r0
 8005fac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005fae:	e00c      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3324      	adds	r3, #36	; 0x24
 8005fb4:	2102      	movs	r1, #2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f002 f8a2 	bl	8008100 <RCCEx_PLL3_Config>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005fc0:	e003      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8005fc6:	e000      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005fd0:	4b93      	ldr	r3, [pc, #588]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fdc:	4990      	ldr	r1, [pc, #576]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	650b      	str	r3, [r1, #80]	; 0x50
 8005fe2:	e001      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
 8005fe6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d03d      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d826      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005ffc:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006002:	bf00      	nop
 8006004:	08006019 	.word	0x08006019
 8006008:	08006027 	.word	0x08006027
 800600c:	08006039 	.word	0x08006039
 8006010:	08006051 	.word	0x08006051
 8006014:	08006051 	.word	0x08006051
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006018:	4b81      	ldr	r3, [pc, #516]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	4a80      	ldr	r2, [pc, #512]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800601e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006022:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006024:	e015      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3304      	adds	r3, #4
 800602a:	2100      	movs	r1, #0
 800602c:	4618      	mov	r0, r3
 800602e:	f001 ffb5 	bl	8007f9c <RCCEx_PLL2_Config>
 8006032:	4603      	mov	r3, r0
 8006034:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006036:	e00c      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3324      	adds	r3, #36	; 0x24
 800603c:	2100      	movs	r1, #0
 800603e:	4618      	mov	r0, r3
 8006040:	f002 f85e 	bl	8008100 <RCCEx_PLL3_Config>
 8006044:	4603      	mov	r3, r0
 8006046:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006048:	e003      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	75fb      	strb	r3, [r7, #23]
      break;
 800604e:	e000      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006052:	7dfb      	ldrb	r3, [r7, #23]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d109      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006058:	4b71      	ldr	r3, [pc, #452]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800605a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800605c:	f023 0207 	bic.w	r2, r3, #7
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006064:	496e      	ldr	r1, [pc, #440]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006066:	4313      	orrs	r3, r2
 8006068:	650b      	str	r3, [r1, #80]	; 0x50
 800606a:	e001      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
 800606e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006078:	2b00      	cmp	r3, #0
 800607a:	d042      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006084:	d02b      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800608a:	d825      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800608c:	2bc0      	cmp	r3, #192	; 0xc0
 800608e:	d028      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006090:	2bc0      	cmp	r3, #192	; 0xc0
 8006092:	d821      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006094:	2b80      	cmp	r3, #128	; 0x80
 8006096:	d016      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006098:	2b80      	cmp	r3, #128	; 0x80
 800609a:	d81d      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80060a0:	2b40      	cmp	r3, #64	; 0x40
 80060a2:	d007      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80060a4:	e018      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060a6:	4b5e      	ldr	r3, [pc, #376]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060aa:	4a5d      	ldr	r2, [pc, #372]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80060b2:	e017      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3304      	adds	r3, #4
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f001 ff6e 	bl	8007f9c <RCCEx_PLL2_Config>
 80060c0:	4603      	mov	r3, r0
 80060c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80060c4:	e00e      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3324      	adds	r3, #36	; 0x24
 80060ca:	2100      	movs	r1, #0
 80060cc:	4618      	mov	r0, r3
 80060ce:	f002 f817 	bl	8008100 <RCCEx_PLL3_Config>
 80060d2:	4603      	mov	r3, r0
 80060d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80060d6:	e005      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	75fb      	strb	r3, [r7, #23]
      break;
 80060dc:	e002      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80060de:	bf00      	nop
 80060e0:	e000      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80060e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060e4:	7dfb      	ldrb	r3, [r7, #23]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d109      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80060ea:	4b4d      	ldr	r3, [pc, #308]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ee:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f6:	494a      	ldr	r1, [pc, #296]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	650b      	str	r3, [r1, #80]	; 0x50
 80060fc:	e001      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fe:	7dfb      	ldrb	r3, [r7, #23]
 8006100:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800610a:	2b00      	cmp	r3, #0
 800610c:	d049      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006114:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006118:	d030      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800611a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800611e:	d82a      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006120:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006124:	d02c      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006126:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800612a:	d824      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800612c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006130:	d018      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006136:	d81e      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800613c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006140:	d007      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006142:	e018      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006144:	4b36      	ldr	r3, [pc, #216]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	4a35      	ldr	r2, [pc, #212]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800614a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800614e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006150:	e017      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3304      	adds	r3, #4
 8006156:	2100      	movs	r1, #0
 8006158:	4618      	mov	r0, r3
 800615a:	f001 ff1f 	bl	8007f9c <RCCEx_PLL2_Config>
 800615e:	4603      	mov	r3, r0
 8006160:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006162:	e00e      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3324      	adds	r3, #36	; 0x24
 8006168:	2100      	movs	r1, #0
 800616a:	4618      	mov	r0, r3
 800616c:	f001 ffc8 	bl	8008100 <RCCEx_PLL3_Config>
 8006170:	4603      	mov	r3, r0
 8006172:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006174:	e005      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	75fb      	strb	r3, [r7, #23]
      break;
 800617a:	e002      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800617c:	bf00      	nop
 800617e:	e000      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10a      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006188:	4b25      	ldr	r3, [pc, #148]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800618a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800618c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006196:	4922      	ldr	r1, [pc, #136]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006198:	4313      	orrs	r3, r2
 800619a:	658b      	str	r3, [r1, #88]	; 0x58
 800619c:	e001      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619e:	7dfb      	ldrb	r3, [r7, #23]
 80061a0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d04b      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061b8:	d030      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80061ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061be:	d82a      	bhi.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80061c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061c4:	d02e      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80061c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061ca:	d824      	bhi.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80061cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061d0:	d018      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80061d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061d6:	d81e      	bhi.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80061dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061e0:	d007      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80061e2:	e018      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e4:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	4a0d      	ldr	r2, [pc, #52]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061f0:	e019      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3304      	adds	r3, #4
 80061f6:	2100      	movs	r1, #0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f001 fecf 	bl	8007f9c <RCCEx_PLL2_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006202:	e010      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3324      	adds	r3, #36	; 0x24
 8006208:	2100      	movs	r1, #0
 800620a:	4618      	mov	r0, r3
 800620c:	f001 ff78 	bl	8008100 <RCCEx_PLL3_Config>
 8006210:	4603      	mov	r3, r0
 8006212:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006214:	e007      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	75fb      	strb	r3, [r7, #23]
      break;
 800621a:	e004      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800621c:	bf00      	nop
 800621e:	e002      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006220:	58024400 	.word	0x58024400
      break;
 8006224:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006226:	7dfb      	ldrb	r3, [r7, #23]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10a      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800622c:	4b99      	ldr	r3, [pc, #612]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800622e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006230:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800623a:	4996      	ldr	r1, [pc, #600]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800623c:	4313      	orrs	r3, r2
 800623e:	658b      	str	r3, [r1, #88]	; 0x58
 8006240:	e001      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006242:	7dfb      	ldrb	r3, [r7, #23]
 8006244:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d032      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006256:	2b30      	cmp	r3, #48	; 0x30
 8006258:	d01c      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800625a:	2b30      	cmp	r3, #48	; 0x30
 800625c:	d817      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800625e:	2b20      	cmp	r3, #32
 8006260:	d00c      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006262:	2b20      	cmp	r3, #32
 8006264:	d813      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006266:	2b00      	cmp	r3, #0
 8006268:	d016      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800626a:	2b10      	cmp	r3, #16
 800626c:	d10f      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800626e:	4b89      	ldr	r3, [pc, #548]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	4a88      	ldr	r2, [pc, #544]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006278:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800627a:	e00e      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3304      	adds	r3, #4
 8006280:	2102      	movs	r1, #2
 8006282:	4618      	mov	r0, r3
 8006284:	f001 fe8a 	bl	8007f9c <RCCEx_PLL2_Config>
 8006288:	4603      	mov	r3, r0
 800628a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800628c:	e005      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	75fb      	strb	r3, [r7, #23]
      break;
 8006292:	e002      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006294:	bf00      	nop
 8006296:	e000      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d109      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80062a0:	4b7c      	ldr	r3, [pc, #496]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ac:	4979      	ldr	r1, [pc, #484]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80062b2:	e001      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
 80062b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d047      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062cc:	d030      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80062ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062d2:	d82a      	bhi.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80062d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062d8:	d02c      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80062da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062de:	d824      	bhi.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80062e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e4:	d018      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80062e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ea:	d81e      	bhi.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80062f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f4:	d007      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80062f6:	e018      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062f8:	4b66      	ldr	r3, [pc, #408]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	4a65      	ldr	r2, [pc, #404]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006302:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006304:	e017      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3304      	adds	r3, #4
 800630a:	2100      	movs	r1, #0
 800630c:	4618      	mov	r0, r3
 800630e:	f001 fe45 	bl	8007f9c <RCCEx_PLL2_Config>
 8006312:	4603      	mov	r3, r0
 8006314:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006316:	e00e      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3324      	adds	r3, #36	; 0x24
 800631c:	2100      	movs	r1, #0
 800631e:	4618      	mov	r0, r3
 8006320:	f001 feee 	bl	8008100 <RCCEx_PLL3_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006328:	e005      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	75fb      	strb	r3, [r7, #23]
      break;
 800632e:	e002      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006330:	bf00      	nop
 8006332:	e000      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006336:	7dfb      	ldrb	r3, [r7, #23]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d109      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800633c:	4b55      	ldr	r3, [pc, #340]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800633e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006340:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006348:	4952      	ldr	r1, [pc, #328]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800634a:	4313      	orrs	r3, r2
 800634c:	650b      	str	r3, [r1, #80]	; 0x50
 800634e:	e001      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
 8006352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d049      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006368:	d02e      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800636a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800636e:	d828      	bhi.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006370:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006374:	d02a      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006376:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800637a:	d822      	bhi.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800637c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006380:	d026      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006382:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006386:	d81c      	bhi.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800638c:	d010      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800638e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006392:	d816      	bhi.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01d      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800639c:	d111      	bne.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3304      	adds	r3, #4
 80063a2:	2101      	movs	r1, #1
 80063a4:	4618      	mov	r0, r3
 80063a6:	f001 fdf9 	bl	8007f9c <RCCEx_PLL2_Config>
 80063aa:	4603      	mov	r3, r0
 80063ac:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80063ae:	e012      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3324      	adds	r3, #36	; 0x24
 80063b4:	2101      	movs	r1, #1
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 fea2 	bl	8008100 <RCCEx_PLL3_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80063c0:	e009      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	75fb      	strb	r3, [r7, #23]
      break;
 80063c6:	e006      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80063c8:	bf00      	nop
 80063ca:	e004      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80063cc:	bf00      	nop
 80063ce:	e002      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80063d0:	bf00      	nop
 80063d2:	e000      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80063d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d109      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80063dc:	4b2d      	ldr	r3, [pc, #180]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e8:	492a      	ldr	r1, [pc, #168]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	650b      	str	r3, [r1, #80]	; 0x50
 80063ee:	e001      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
 80063f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d04d      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006406:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800640a:	d02e      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800640c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006410:	d828      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006416:	d02a      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800641c:	d822      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800641e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006422:	d026      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006424:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006428:	d81c      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800642a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800642e:	d010      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006434:	d816      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01d      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800643a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800643e:	d111      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3304      	adds	r3, #4
 8006444:	2101      	movs	r1, #1
 8006446:	4618      	mov	r0, r3
 8006448:	f001 fda8 	bl	8007f9c <RCCEx_PLL2_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006450:	e012      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3324      	adds	r3, #36	; 0x24
 8006456:	2101      	movs	r1, #1
 8006458:	4618      	mov	r0, r3
 800645a:	f001 fe51 	bl	8008100 <RCCEx_PLL3_Config>
 800645e:	4603      	mov	r3, r0
 8006460:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006462:	e009      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	75fb      	strb	r3, [r7, #23]
      break;
 8006468:	e006      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800646a:	bf00      	nop
 800646c:	e004      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800646e:	bf00      	nop
 8006470:	e002      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006472:	bf00      	nop
 8006474:	e000      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006478:	7dfb      	ldrb	r3, [r7, #23]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10c      	bne.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800647e:	4b05      	ldr	r3, [pc, #20]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006482:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800648c:	4901      	ldr	r1, [pc, #4]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800648e:	4313      	orrs	r3, r2
 8006490:	658b      	str	r3, [r1, #88]	; 0x58
 8006492:	e003      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006494:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006498:	7dfb      	ldrb	r3, [r7, #23]
 800649a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d02f      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064b0:	d00e      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80064b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064b6:	d814      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d015      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80064bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064c0:	d10f      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c2:	4baf      	ldr	r3, [pc, #700]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c6:	4aae      	ldr	r2, [pc, #696]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80064ce:	e00c      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3304      	adds	r3, #4
 80064d4:	2101      	movs	r1, #1
 80064d6:	4618      	mov	r0, r3
 80064d8:	f001 fd60 	bl	8007f9c <RCCEx_PLL2_Config>
 80064dc:	4603      	mov	r3, r0
 80064de:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80064e0:	e003      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	75fb      	strb	r3, [r7, #23]
      break;
 80064e6:	e000      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80064e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d109      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80064f0:	4ba3      	ldr	r3, [pc, #652]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064fc:	49a0      	ldr	r1, [pc, #640]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	650b      	str	r3, [r1, #80]	; 0x50
 8006502:	e001      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d032      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006518:	2b03      	cmp	r3, #3
 800651a:	d81b      	bhi.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800651c:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800651e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006522:	bf00      	nop
 8006524:	0800655b 	.word	0x0800655b
 8006528:	08006535 	.word	0x08006535
 800652c:	08006543 	.word	0x08006543
 8006530:	0800655b 	.word	0x0800655b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006534:	4b92      	ldr	r3, [pc, #584]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	4a91      	ldr	r2, [pc, #580]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800653a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800653e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006540:	e00c      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3304      	adds	r3, #4
 8006546:	2102      	movs	r1, #2
 8006548:	4618      	mov	r0, r3
 800654a:	f001 fd27 	bl	8007f9c <RCCEx_PLL2_Config>
 800654e:	4603      	mov	r3, r0
 8006550:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006552:	e003      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	75fb      	strb	r3, [r7, #23]
      break;
 8006558:	e000      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800655a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d109      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006562:	4b87      	ldr	r3, [pc, #540]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006566:	f023 0203 	bic.w	r2, r3, #3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656e:	4984      	ldr	r1, [pc, #528]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006570:	4313      	orrs	r3, r2
 8006572:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006574:	e001      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006576:	7dfb      	ldrb	r3, [r7, #23]
 8006578:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 8086 	beq.w	8006694 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006588:	4b7e      	ldr	r3, [pc, #504]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a7d      	ldr	r2, [pc, #500]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800658e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006592:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006594:	f7fb fbbc 	bl	8001d10 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800659a:	e009      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800659c:	f7fb fbb8 	bl	8001d10 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b64      	cmp	r3, #100	; 0x64
 80065a8:	d902      	bls.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	75fb      	strb	r3, [r7, #23]
        break;
 80065ae:	e005      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065b0:	4b74      	ldr	r3, [pc, #464]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0ef      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d166      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80065c2:	4b6f      	ldr	r3, [pc, #444]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065cc:	4053      	eors	r3, r2
 80065ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d013      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065d6:	4b6a      	ldr	r3, [pc, #424]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065de:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065e0:	4b67      	ldr	r3, [pc, #412]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e4:	4a66      	ldr	r2, [pc, #408]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065ec:	4b64      	ldr	r3, [pc, #400]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f0:	4a63      	ldr	r2, [pc, #396]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80065f8:	4a61      	ldr	r2, [pc, #388]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006608:	d115      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660a:	f7fb fb81 	bl	8001d10 <HAL_GetTick>
 800660e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006610:	e00b      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006612:	f7fb fb7d 	bl	8001d10 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006620:	4293      	cmp	r3, r2
 8006622:	d902      	bls.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	75fb      	strb	r3, [r7, #23]
            break;
 8006628:	e005      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800662a:	4b55      	ldr	r3, [pc, #340]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800662c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0ed      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006636:	7dfb      	ldrb	r3, [r7, #23]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d126      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800664a:	d10d      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800664c:	4b4c      	ldr	r3, [pc, #304]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800665a:	0919      	lsrs	r1, r3, #4
 800665c:	4b4a      	ldr	r3, [pc, #296]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800665e:	400b      	ands	r3, r1
 8006660:	4947      	ldr	r1, [pc, #284]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006662:	4313      	orrs	r3, r2
 8006664:	610b      	str	r3, [r1, #16]
 8006666:	e005      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006668:	4b45      	ldr	r3, [pc, #276]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	4a44      	ldr	r2, [pc, #272]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800666e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006672:	6113      	str	r3, [r2, #16]
 8006674:	4b42      	ldr	r3, [pc, #264]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006676:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800667e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006682:	493f      	ldr	r1, [pc, #252]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006684:	4313      	orrs	r3, r2
 8006686:	670b      	str	r3, [r1, #112]	; 0x70
 8006688:	e004      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	75bb      	strb	r3, [r7, #22]
 800668e:	e001      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006690:	7dfb      	ldrb	r3, [r7, #23]
 8006692:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 8085 	beq.w	80067ac <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066a6:	2b28      	cmp	r3, #40	; 0x28
 80066a8:	d866      	bhi.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	0800678d 	.word	0x0800678d
 80066b4:	08006779 	.word	0x08006779
 80066b8:	08006779 	.word	0x08006779
 80066bc:	08006779 	.word	0x08006779
 80066c0:	08006779 	.word	0x08006779
 80066c4:	08006779 	.word	0x08006779
 80066c8:	08006779 	.word	0x08006779
 80066cc:	08006779 	.word	0x08006779
 80066d0:	08006755 	.word	0x08006755
 80066d4:	08006779 	.word	0x08006779
 80066d8:	08006779 	.word	0x08006779
 80066dc:	08006779 	.word	0x08006779
 80066e0:	08006779 	.word	0x08006779
 80066e4:	08006779 	.word	0x08006779
 80066e8:	08006779 	.word	0x08006779
 80066ec:	08006779 	.word	0x08006779
 80066f0:	08006767 	.word	0x08006767
 80066f4:	08006779 	.word	0x08006779
 80066f8:	08006779 	.word	0x08006779
 80066fc:	08006779 	.word	0x08006779
 8006700:	08006779 	.word	0x08006779
 8006704:	08006779 	.word	0x08006779
 8006708:	08006779 	.word	0x08006779
 800670c:	08006779 	.word	0x08006779
 8006710:	0800678d 	.word	0x0800678d
 8006714:	08006779 	.word	0x08006779
 8006718:	08006779 	.word	0x08006779
 800671c:	08006779 	.word	0x08006779
 8006720:	08006779 	.word	0x08006779
 8006724:	08006779 	.word	0x08006779
 8006728:	08006779 	.word	0x08006779
 800672c:	08006779 	.word	0x08006779
 8006730:	0800678d 	.word	0x0800678d
 8006734:	08006779 	.word	0x08006779
 8006738:	08006779 	.word	0x08006779
 800673c:	08006779 	.word	0x08006779
 8006740:	08006779 	.word	0x08006779
 8006744:	08006779 	.word	0x08006779
 8006748:	08006779 	.word	0x08006779
 800674c:	08006779 	.word	0x08006779
 8006750:	0800678d 	.word	0x0800678d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3304      	adds	r3, #4
 8006758:	2101      	movs	r1, #1
 800675a:	4618      	mov	r0, r3
 800675c:	f001 fc1e 	bl	8007f9c <RCCEx_PLL2_Config>
 8006760:	4603      	mov	r3, r0
 8006762:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006764:	e013      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3324      	adds	r3, #36	; 0x24
 800676a:	2101      	movs	r1, #1
 800676c:	4618      	mov	r0, r3
 800676e:	f001 fcc7 	bl	8008100 <RCCEx_PLL3_Config>
 8006772:	4603      	mov	r3, r0
 8006774:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006776:	e00a      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	75fb      	strb	r3, [r7, #23]
      break;
 800677c:	e007      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800677e:	bf00      	nop
 8006780:	58024400 	.word	0x58024400
 8006784:	58024800 	.word	0x58024800
 8006788:	00ffffcf 	.word	0x00ffffcf
      break;
 800678c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d109      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006794:	4b96      	ldr	r3, [pc, #600]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006798:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067a0:	4993      	ldr	r1, [pc, #588]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	654b      	str	r3, [r1, #84]	; 0x54
 80067a6:	e001      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a8:	7dfb      	ldrb	r3, [r7, #23]
 80067aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d038      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067bc:	2b05      	cmp	r3, #5
 80067be:	d821      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80067c0:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	0800680b 	.word	0x0800680b
 80067cc:	080067e1 	.word	0x080067e1
 80067d0:	080067f3 	.word	0x080067f3
 80067d4:	0800680b 	.word	0x0800680b
 80067d8:	0800680b 	.word	0x0800680b
 80067dc:	0800680b 	.word	0x0800680b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3304      	adds	r3, #4
 80067e4:	2101      	movs	r1, #1
 80067e6:	4618      	mov	r0, r3
 80067e8:	f001 fbd8 	bl	8007f9c <RCCEx_PLL2_Config>
 80067ec:	4603      	mov	r3, r0
 80067ee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80067f0:	e00c      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	3324      	adds	r3, #36	; 0x24
 80067f6:	2101      	movs	r1, #1
 80067f8:	4618      	mov	r0, r3
 80067fa:	f001 fc81 	bl	8008100 <RCCEx_PLL3_Config>
 80067fe:	4603      	mov	r3, r0
 8006800:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006802:	e003      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	75fb      	strb	r3, [r7, #23]
      break;
 8006808:	e000      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800680a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800680c:	7dfb      	ldrb	r3, [r7, #23]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d109      	bne.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006812:	4b77      	ldr	r3, [pc, #476]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006816:	f023 0207 	bic.w	r2, r3, #7
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800681e:	4974      	ldr	r1, [pc, #464]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006820:	4313      	orrs	r3, r2
 8006822:	654b      	str	r3, [r1, #84]	; 0x54
 8006824:	e001      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006826:	7dfb      	ldrb	r3, [r7, #23]
 8006828:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	2b00      	cmp	r3, #0
 8006834:	d03a      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683c:	2b05      	cmp	r3, #5
 800683e:	d821      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006840:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006846:	bf00      	nop
 8006848:	0800688b 	.word	0x0800688b
 800684c:	08006861 	.word	0x08006861
 8006850:	08006873 	.word	0x08006873
 8006854:	0800688b 	.word	0x0800688b
 8006858:	0800688b 	.word	0x0800688b
 800685c:	0800688b 	.word	0x0800688b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3304      	adds	r3, #4
 8006864:	2101      	movs	r1, #1
 8006866:	4618      	mov	r0, r3
 8006868:	f001 fb98 	bl	8007f9c <RCCEx_PLL2_Config>
 800686c:	4603      	mov	r3, r0
 800686e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006870:	e00c      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3324      	adds	r3, #36	; 0x24
 8006876:	2101      	movs	r1, #1
 8006878:	4618      	mov	r0, r3
 800687a:	f001 fc41 	bl	8008100 <RCCEx_PLL3_Config>
 800687e:	4603      	mov	r3, r0
 8006880:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006882:	e003      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	75fb      	strb	r3, [r7, #23]
      break;
 8006888:	e000      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800688a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800688c:	7dfb      	ldrb	r3, [r7, #23]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10a      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006892:	4b57      	ldr	r3, [pc, #348]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006896:	f023 0207 	bic.w	r2, r3, #7
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a0:	4953      	ldr	r1, [pc, #332]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	658b      	str	r3, [r1, #88]	; 0x58
 80068a6:	e001      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
 80068aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0320 	and.w	r3, r3, #32
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d04b      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068c2:	d02e      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80068c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068c8:	d828      	bhi.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80068ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ce:	d02a      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80068d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d4:	d822      	bhi.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80068d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068da:	d026      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80068dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068e0:	d81c      	bhi.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80068e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068e6:	d010      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80068e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ec:	d816      	bhi.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d01d      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80068f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068f6:	d111      	bne.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3304      	adds	r3, #4
 80068fc:	2100      	movs	r1, #0
 80068fe:	4618      	mov	r0, r3
 8006900:	f001 fb4c 	bl	8007f9c <RCCEx_PLL2_Config>
 8006904:	4603      	mov	r3, r0
 8006906:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006908:	e012      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	3324      	adds	r3, #36	; 0x24
 800690e:	2102      	movs	r1, #2
 8006910:	4618      	mov	r0, r3
 8006912:	f001 fbf5 	bl	8008100 <RCCEx_PLL3_Config>
 8006916:	4603      	mov	r3, r0
 8006918:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800691a:	e009      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	75fb      	strb	r3, [r7, #23]
      break;
 8006920:	e006      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006922:	bf00      	nop
 8006924:	e004      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006926:	bf00      	nop
 8006928:	e002      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800692a:	bf00      	nop
 800692c:	e000      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800692e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006930:	7dfb      	ldrb	r3, [r7, #23]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10a      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006936:	4b2e      	ldr	r3, [pc, #184]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006944:	492a      	ldr	r1, [pc, #168]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006946:	4313      	orrs	r3, r2
 8006948:	654b      	str	r3, [r1, #84]	; 0x54
 800694a:	e001      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d04d      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006962:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006966:	d02e      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006968:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800696c:	d828      	bhi.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800696e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006972:	d02a      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006978:	d822      	bhi.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800697a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800697e:	d026      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006980:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006984:	d81c      	bhi.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698a:	d010      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800698c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006990:	d816      	bhi.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006992:	2b00      	cmp	r3, #0
 8006994:	d01d      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800699a:	d111      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3304      	adds	r3, #4
 80069a0:	2100      	movs	r1, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f001 fafa 	bl	8007f9c <RCCEx_PLL2_Config>
 80069a8:	4603      	mov	r3, r0
 80069aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80069ac:	e012      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	3324      	adds	r3, #36	; 0x24
 80069b2:	2102      	movs	r1, #2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f001 fba3 	bl	8008100 <RCCEx_PLL3_Config>
 80069ba:	4603      	mov	r3, r0
 80069bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80069be:	e009      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	75fb      	strb	r3, [r7, #23]
      break;
 80069c4:	e006      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80069c6:	bf00      	nop
 80069c8:	e004      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80069ca:	bf00      	nop
 80069cc:	e002      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80069ce:	bf00      	nop
 80069d0:	e000      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80069d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069d4:	7dfb      	ldrb	r3, [r7, #23]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10c      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069da:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80069dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069de:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069e8:	4901      	ldr	r1, [pc, #4]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	658b      	str	r3, [r1, #88]	; 0x58
 80069ee:	e003      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80069f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d04b      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a0a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a0e:	d02e      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006a10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a14:	d828      	bhi.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a1a:	d02a      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a20:	d822      	bhi.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006a22:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a26:	d026      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006a28:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a2c:	d81c      	bhi.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006a2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a32:	d010      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a38:	d816      	bhi.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d01d      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a42:	d111      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3304      	adds	r3, #4
 8006a48:	2100      	movs	r1, #0
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f001 faa6 	bl	8007f9c <RCCEx_PLL2_Config>
 8006a50:	4603      	mov	r3, r0
 8006a52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006a54:	e012      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3324      	adds	r3, #36	; 0x24
 8006a5a:	2102      	movs	r1, #2
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f001 fb4f 	bl	8008100 <RCCEx_PLL3_Config>
 8006a62:	4603      	mov	r3, r0
 8006a64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006a66:	e009      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a6c:	e006      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006a6e:	bf00      	nop
 8006a70:	e004      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006a72:	bf00      	nop
 8006a74:	e002      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006a76:	bf00      	nop
 8006a78:	e000      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10a      	bne.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a82:	4b9d      	ldr	r3, [pc, #628]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a90:	4999      	ldr	r1, [pc, #612]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	658b      	str	r3, [r1, #88]	; 0x58
 8006a96:	e001      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
 8006a9a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0308 	and.w	r3, r3, #8
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01a      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab2:	d10a      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3324      	adds	r3, #36	; 0x24
 8006ab8:	2102      	movs	r1, #2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f001 fb20 	bl	8008100 <RCCEx_PLL3_Config>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006aca:	4b8b      	ldr	r3, [pc, #556]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ace:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad8:	4987      	ldr	r1, [pc, #540]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0310 	and.w	r3, r3, #16
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d01a      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006af4:	d10a      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3324      	adds	r3, #36	; 0x24
 8006afa:	2102      	movs	r1, #2
 8006afc:	4618      	mov	r0, r3
 8006afe:	f001 faff 	bl	8008100 <RCCEx_PLL3_Config>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b0c:	4b7a      	ldr	r3, [pc, #488]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b1a:	4977      	ldr	r1, [pc, #476]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d034      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b36:	d01d      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006b38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b3c:	d817      	bhi.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b46:	d009      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006b48:	e011      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	2100      	movs	r1, #0
 8006b50:	4618      	mov	r0, r3
 8006b52:	f001 fa23 	bl	8007f9c <RCCEx_PLL2_Config>
 8006b56:	4603      	mov	r3, r0
 8006b58:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006b5a:	e00c      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3324      	adds	r3, #36	; 0x24
 8006b60:	2102      	movs	r1, #2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f001 facc 	bl	8008100 <RCCEx_PLL3_Config>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006b6c:	e003      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	75fb      	strb	r3, [r7, #23]
      break;
 8006b72:	e000      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b76:	7dfb      	ldrb	r3, [r7, #23]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10a      	bne.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b7c:	4b5e      	ldr	r3, [pc, #376]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b8a:	495b      	ldr	r1, [pc, #364]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	658b      	str	r3, [r1, #88]	; 0x58
 8006b90:	e001      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d033      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ba8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bac:	d01c      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006bae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bb2:	d816      	bhi.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006bb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bb8:	d003      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006bba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bbe:	d007      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006bc0:	e00f      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc2:	4b4d      	ldr	r3, [pc, #308]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc6:	4a4c      	ldr	r2, [pc, #304]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006bce:	e00c      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3324      	adds	r3, #36	; 0x24
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f001 fa92 	bl	8008100 <RCCEx_PLL3_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006be0:	e003      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	75fb      	strb	r3, [r7, #23]
      break;
 8006be6:	e000      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006be8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10a      	bne.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bf0:	4b41      	ldr	r3, [pc, #260]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bfe:	493e      	ldr	r1, [pc, #248]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	654b      	str	r3, [r1, #84]	; 0x54
 8006c04:	e001      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
 8006c08:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d029      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c22:	d007      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006c24:	e00f      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c26:	4b34      	ldr	r3, [pc, #208]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2a:	4a33      	ldr	r2, [pc, #204]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c32:	e00b      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3304      	adds	r3, #4
 8006c38:	2102      	movs	r1, #2
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f001 f9ae 	bl	8007f9c <RCCEx_PLL2_Config>
 8006c40:	4603      	mov	r3, r0
 8006c42:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c44:	e002      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	75fb      	strb	r3, [r7, #23]
      break;
 8006c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d109      	bne.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c52:	4b29      	ldr	r3, [pc, #164]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5e:	4926      	ldr	r1, [pc, #152]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c64:	e001      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c66:	7dfb      	ldrb	r3, [r7, #23]
 8006c68:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	3324      	adds	r3, #36	; 0x24
 8006c7a:	2102      	movs	r1, #2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f001 fa3f 	bl	8008100 <RCCEx_PLL3_Config>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d001      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d033      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca0:	d017      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca6:	d811      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cac:	d013      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb2:	d80b      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d010      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cbc:	d106      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cbe:	4b0e      	ldr	r3, [pc, #56]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc2:	4a0d      	ldr	r2, [pc, #52]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006cca:	e007      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	75fb      	strb	r3, [r7, #23]
      break;
 8006cd0:	e004      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006cd2:	bf00      	nop
 8006cd4:	e002      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006cd6:	bf00      	nop
 8006cd8:	e000      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006cda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10c      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ce2:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cee:	4902      	ldr	r1, [pc, #8]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	654b      	str	r3, [r1, #84]	; 0x54
 8006cf4:	e004      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006cf6:	bf00      	nop
 8006cf8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d008      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d0c:	4b31      	ldr	r3, [pc, #196]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d18:	492e      	ldr	r1, [pc, #184]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d009      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d2a:	4b2a      	ldr	r3, [pc, #168]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d38:	4926      	ldr	r1, [pc, #152]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d008      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d4a:	4b22      	ldr	r3, [pc, #136]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d56:	491f      	ldr	r1, [pc, #124]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00d      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d68:	4b1a      	ldr	r3, [pc, #104]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	4a19      	ldr	r2, [pc, #100]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d72:	6113      	str	r3, [r2, #16]
 8006d74:	4b17      	ldr	r3, [pc, #92]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006d7e:	4915      	ldr	r1, [pc, #84]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	da08      	bge.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d8c:	4b11      	ldr	r3, [pc, #68]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d98:	490e      	ldr	r1, [pc, #56]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d009      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006daa:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db8:	4906      	ldr	r1, [pc, #24]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006dbe:	7dbb      	ldrb	r3, [r7, #22]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e000      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	58024400 	.word	0x58024400

08006dd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b090      	sub	sp, #64	; 0x40
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de6:	f040 8095 	bne.w	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006dea:	4b97      	ldr	r3, [pc, #604]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dee:	f003 0307 	and.w	r3, r3, #7
 8006df2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	f200 8088 	bhi.w	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006dfc:	a201      	add	r2, pc, #4	; (adr r2, 8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e02:	bf00      	nop
 8006e04:	08006e19 	.word	0x08006e19
 8006e08:	08006e41 	.word	0x08006e41
 8006e0c:	08006e69 	.word	0x08006e69
 8006e10:	08006f05 	.word	0x08006f05
 8006e14:	08006e91 	.word	0x08006e91
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e18:	4b8b      	ldr	r3, [pc, #556]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e24:	d108      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 ff64 	bl	8007cf8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e34:	f000 bc94 	b.w	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e3c:	f000 bc90 	b.w	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e40:	4b81      	ldr	r3, [pc, #516]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e4c:	d108      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e4e:	f107 0318 	add.w	r3, r7, #24
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fca8 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e5c:	f000 bc80 	b.w	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006e60:	2300      	movs	r3, #0
 8006e62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e64:	f000 bc7c 	b.w	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e68:	4b77      	ldr	r3, [pc, #476]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e74:	d108      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e76:	f107 030c 	add.w	r3, r7, #12
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 fde8 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e84:	f000 bc6c 	b.w	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e8c:	f000 bc68 	b.w	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e90:	4b6d      	ldr	r3, [pc, #436]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e98:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e9a:	4b6b      	ldr	r3, [pc, #428]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0304 	and.w	r3, r3, #4
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d10c      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d109      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006eac:	4b66      	ldr	r3, [pc, #408]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	08db      	lsrs	r3, r3, #3
 8006eb2:	f003 0303 	and.w	r3, r3, #3
 8006eb6:	4a65      	ldr	r2, [pc, #404]	; (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ebe:	e01f      	b.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ec0:	4b61      	ldr	r3, [pc, #388]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ecc:	d106      	bne.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ed4:	d102      	bne.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006ed6:	4b5e      	ldr	r3, [pc, #376]	; (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eda:	e011      	b.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006edc:	4b5a      	ldr	r3, [pc, #360]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee8:	d106      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ef0:	d102      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006ef2:	4b58      	ldr	r3, [pc, #352]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ef6:	e003      	b.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006efc:	f000 bc30 	b.w	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006f00:	f000 bc2e 	b.w	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f04:	4b54      	ldr	r3, [pc, #336]	; (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006f06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f08:	f000 bc2a 	b.w	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f10:	f000 bc26 	b.w	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f1a:	f040 809f 	bne.w	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006f1e:	4b4a      	ldr	r3, [pc, #296]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f22:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006f26:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f2e:	d04d      	beq.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f36:	f200 8084 	bhi.w	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	2bc0      	cmp	r3, #192	; 0xc0
 8006f3e:	d07d      	beq.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	2bc0      	cmp	r3, #192	; 0xc0
 8006f44:	d87d      	bhi.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	2b80      	cmp	r3, #128	; 0x80
 8006f4a:	d02d      	beq.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	2b80      	cmp	r3, #128	; 0x80
 8006f50:	d877      	bhi.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	2b40      	cmp	r3, #64	; 0x40
 8006f5c:	d012      	beq.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006f5e:	e070      	b.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f60:	4b39      	ldr	r3, [pc, #228]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f6c:	d107      	bne.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fec0 	bl	8007cf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f7c:	e3f0      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f82:	e3ed      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f84:	4b30      	ldr	r3, [pc, #192]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f90:	d107      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f92:	f107 0318 	add.w	r3, r7, #24
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fc06 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fa0:	e3de      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fa6:	e3db      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fa8:	4b27      	ldr	r3, [pc, #156]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fb4:	d107      	bne.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fb6:	f107 030c 	add.w	r3, r7, #12
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 fd48 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fc4:	e3cc      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fca:	e3c9      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006fcc:	4b1e      	ldr	r3, [pc, #120]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fd4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fd6:	4b1c      	ldr	r3, [pc, #112]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d10c      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d109      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fe8:	4b17      	ldr	r3, [pc, #92]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	08db      	lsrs	r3, r3, #3
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	4a16      	ldr	r2, [pc, #88]	; (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ffa:	e01e      	b.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ffc:	4b12      	ldr	r3, [pc, #72]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007008:	d106      	bne.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800700a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007010:	d102      	bne.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007012:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007016:	e010      	b.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007018:	4b0b      	ldr	r3, [pc, #44]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007024:	d106      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800702c:	d102      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800702e:	4b09      	ldr	r3, [pc, #36]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007032:	e002      	b.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007034:	2300      	movs	r3, #0
 8007036:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007038:	e392      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800703a:	e391      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800703c:	4b06      	ldr	r3, [pc, #24]	; (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800703e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007040:	e38e      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007046:	e38b      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007048:	58024400 	.word	0x58024400
 800704c:	03d09000 	.word	0x03d09000
 8007050:	003d0900 	.word	0x003d0900
 8007054:	017d7840 	.word	0x017d7840
 8007058:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007062:	f040 809c 	bne.w	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007066:	4b9d      	ldr	r3, [pc, #628]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800706e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007076:	d054      	beq.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800707e:	f200 808b 	bhi.w	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007088:	f000 8083 	beq.w	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007092:	f200 8081 	bhi.w	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800709c:	d02f      	beq.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070a4:	d878      	bhi.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d004      	beq.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070b2:	d012      	beq.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80070b4:	e070      	b.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070b6:	4b89      	ldr	r3, [pc, #548]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070c2:	d107      	bne.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 fe15 	bl	8007cf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070d2:	e345      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070d8:	e342      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070da:	4b80      	ldr	r3, [pc, #512]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070e6:	d107      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070e8:	f107 0318 	add.w	r3, r7, #24
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 fb5b 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070f6:	e333      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070fc:	e330      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070fe:	4b77      	ldr	r3, [pc, #476]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800710a:	d107      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800710c:	f107 030c 	add.w	r3, r7, #12
 8007110:	4618      	mov	r0, r3
 8007112:	f000 fc9d 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800711a:	e321      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007120:	e31e      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007122:	4b6e      	ldr	r3, [pc, #440]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800712a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800712c:	4b6b      	ldr	r3, [pc, #428]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0304 	and.w	r3, r3, #4
 8007134:	2b04      	cmp	r3, #4
 8007136:	d10c      	bne.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8007138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713a:	2b00      	cmp	r3, #0
 800713c:	d109      	bne.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800713e:	4b67      	ldr	r3, [pc, #412]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	08db      	lsrs	r3, r3, #3
 8007144:	f003 0303 	and.w	r3, r3, #3
 8007148:	4a65      	ldr	r2, [pc, #404]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800714a:	fa22 f303 	lsr.w	r3, r2, r3
 800714e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007150:	e01e      	b.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007152:	4b62      	ldr	r3, [pc, #392]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800715e:	d106      	bne.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007166:	d102      	bne.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007168:	4b5e      	ldr	r3, [pc, #376]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800716a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800716c:	e010      	b.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800716e:	4b5b      	ldr	r3, [pc, #364]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007176:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800717a:	d106      	bne.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800717c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800717e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007182:	d102      	bne.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007184:	4b58      	ldr	r3, [pc, #352]	; (80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007188:	e002      	b.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800718e:	e2e7      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007190:	e2e6      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007192:	4b56      	ldr	r3, [pc, #344]	; (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007196:	e2e3      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007198:	2300      	movs	r3, #0
 800719a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800719c:	e2e0      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071a4:	f040 80a7 	bne.w	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80071a8:	4b4c      	ldr	r3, [pc, #304]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80071aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ac:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80071b0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071b8:	d055      	beq.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80071ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071c0:	f200 8096 	bhi.w	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071ca:	f000 8084 	beq.w	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071d4:	f200 808c 	bhi.w	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071de:	d030      	beq.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071e6:	f200 8083 	bhi.w	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d004      	beq.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80071f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071f6:	d012      	beq.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80071f8:	e07a      	b.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071fa:	4b38      	ldr	r3, [pc, #224]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007206:	d107      	bne.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fd73 	bl	8007cf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007216:	e2a3      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007218:	2300      	movs	r3, #0
 800721a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800721c:	e2a0      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800721e:	4b2f      	ldr	r3, [pc, #188]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800722a:	d107      	bne.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800722c:	f107 0318 	add.w	r3, r7, #24
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fab9 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800723a:	e291      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800723c:	2300      	movs	r3, #0
 800723e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007240:	e28e      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007242:	4b26      	ldr	r3, [pc, #152]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800724a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800724e:	d107      	bne.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007250:	f107 030c 	add.w	r3, r7, #12
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fbfb 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800725e:	e27f      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007264:	e27c      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007266:	4b1d      	ldr	r3, [pc, #116]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800726e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007270:	4b1a      	ldr	r3, [pc, #104]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b04      	cmp	r3, #4
 800727a:	d10c      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800727c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800727e:	2b00      	cmp	r3, #0
 8007280:	d109      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007282:	4b16      	ldr	r3, [pc, #88]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	08db      	lsrs	r3, r3, #3
 8007288:	f003 0303 	and.w	r3, r3, #3
 800728c:	4a14      	ldr	r2, [pc, #80]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800728e:	fa22 f303 	lsr.w	r3, r2, r3
 8007292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007294:	e01e      	b.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007296:	4b11      	ldr	r3, [pc, #68]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072a2:	d106      	bne.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80072a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072aa:	d102      	bne.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80072ac:	4b0d      	ldr	r3, [pc, #52]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80072ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072b0:	e010      	b.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072b2:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072be:	d106      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80072c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072c6:	d102      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80072c8:	4b07      	ldr	r3, [pc, #28]	; (80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80072ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072cc:	e002      	b.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80072d2:	e245      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80072d4:	e244      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80072d6:	4b05      	ldr	r3, [pc, #20]	; (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80072d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072da:	e241      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80072dc:	58024400 	.word	0x58024400
 80072e0:	03d09000 	.word	0x03d09000
 80072e4:	003d0900 	.word	0x003d0900
 80072e8:	017d7840 	.word	0x017d7840
 80072ec:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f4:	e234      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fc:	f040 809c 	bne.w	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007300:	4b9b      	ldr	r3, [pc, #620]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007304:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007308:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007310:	d054      	beq.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8007312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007318:	f200 808b 	bhi.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007322:	f000 8083 	beq.w	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8007326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007328:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800732c:	f200 8081 	bhi.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007336:	d02f      	beq.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8007338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800733e:	d878      	bhi.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	2b00      	cmp	r3, #0
 8007344:	d004      	beq.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8007346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734c:	d012      	beq.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800734e:	e070      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007350:	4b87      	ldr	r3, [pc, #540]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007358:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800735c:	d107      	bne.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800735e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007362:	4618      	mov	r0, r3
 8007364:	f000 fcc8 	bl	8007cf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800736c:	e1f8      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800736e:	2300      	movs	r3, #0
 8007370:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007372:	e1f5      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007374:	4b7e      	ldr	r3, [pc, #504]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800737c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007380:	d107      	bne.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007382:	f107 0318 	add.w	r3, r7, #24
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fa0e 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007390:	e1e6      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007392:	2300      	movs	r3, #0
 8007394:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007396:	e1e3      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007398:	4b75      	ldr	r3, [pc, #468]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073a4:	d107      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073a6:	f107 030c 	add.w	r3, r7, #12
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fb50 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073b4:	e1d4      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ba:	e1d1      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80073bc:	4b6c      	ldr	r3, [pc, #432]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80073be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073c4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073c6:	4b6a      	ldr	r3, [pc, #424]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0304 	and.w	r3, r3, #4
 80073ce:	2b04      	cmp	r3, #4
 80073d0:	d10c      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80073d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d109      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073d8:	4b65      	ldr	r3, [pc, #404]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	08db      	lsrs	r3, r3, #3
 80073de:	f003 0303 	and.w	r3, r3, #3
 80073e2:	4a64      	ldr	r2, [pc, #400]	; (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80073e4:	fa22 f303 	lsr.w	r3, r2, r3
 80073e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073ea:	e01e      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073ec:	4b60      	ldr	r3, [pc, #384]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f8:	d106      	bne.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80073fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007400:	d102      	bne.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007402:	4b5d      	ldr	r3, [pc, #372]	; (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007406:	e010      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007408:	4b59      	ldr	r3, [pc, #356]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007414:	d106      	bne.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800741c:	d102      	bne.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800741e:	4b57      	ldr	r3, [pc, #348]	; (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8007420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007422:	e002      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007428:	e19a      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800742a:	e199      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800742c:	4b54      	ldr	r3, [pc, #336]	; (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800742e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007430:	e196      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007436:	e193      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800743e:	d173      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007440:	4b4b      	ldr	r3, [pc, #300]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007448:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007450:	d02f      	beq.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8007452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007458:	d863      	bhi.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800745a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745c:	2b00      	cmp	r3, #0
 800745e:	d004      	beq.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007466:	d012      	beq.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8007468:	e05b      	b.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800746a:	4b41      	ldr	r3, [pc, #260]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007476:	d107      	bne.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007478:	f107 0318 	add.w	r3, r7, #24
 800747c:	4618      	mov	r0, r3
 800747e:	f000 f993 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007486:	e16b      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007488:	2300      	movs	r3, #0
 800748a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800748c:	e168      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800748e:	4b38      	ldr	r3, [pc, #224]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800749a:	d107      	bne.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800749c:	f107 030c 	add.w	r3, r7, #12
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 fad5 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80074aa:	e159      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074b0:	e156      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80074b2:	4b2f      	ldr	r3, [pc, #188]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80074b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074ba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074bc:	4b2c      	ldr	r3, [pc, #176]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0304 	and.w	r3, r3, #4
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	d10c      	bne.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80074c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d109      	bne.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074ce:	4b28      	ldr	r3, [pc, #160]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	08db      	lsrs	r3, r3, #3
 80074d4:	f003 0303 	and.w	r3, r3, #3
 80074d8:	4a26      	ldr	r2, [pc, #152]	; (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80074da:	fa22 f303 	lsr.w	r3, r2, r3
 80074de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074e0:	e01e      	b.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074e2:	4b23      	ldr	r3, [pc, #140]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ee:	d106      	bne.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80074f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074f6:	d102      	bne.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80074f8:	4b1f      	ldr	r3, [pc, #124]	; (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80074fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074fc:	e010      	b.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074fe:	4b1c      	ldr	r3, [pc, #112]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800750a:	d106      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800750c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007512:	d102      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007514:	4b19      	ldr	r3, [pc, #100]	; (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8007516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007518:	e002      	b.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800751e:	e11f      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007520:	e11e      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007526:	e11b      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800752e:	d13e      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007530:	4b0f      	ldr	r3, [pc, #60]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007538:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800753a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753c:	2b00      	cmp	r3, #0
 800753e:	d004      	beq.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8007540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007546:	d01d      	beq.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007548:	e02e      	b.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800754a:	4b09      	ldr	r3, [pc, #36]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007556:	d107      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800755c:	4618      	mov	r0, r3
 800755e:	f000 fbcb 	bl	8007cf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007566:	e0fb      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007568:	2300      	movs	r3, #0
 800756a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800756c:	e0f8      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800756e:	bf00      	nop
 8007570:	58024400 	.word	0x58024400
 8007574:	03d09000 	.word	0x03d09000
 8007578:	003d0900 	.word	0x003d0900
 800757c:	017d7840 	.word	0x017d7840
 8007580:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007584:	4b79      	ldr	r3, [pc, #484]	; (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800758c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007590:	d107      	bne.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007592:	f107 0318 	add.w	r3, r7, #24
 8007596:	4618      	mov	r0, r3
 8007598:	f000 f906 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80075a0:	e0de      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075a6:	e0db      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075ac:	e0d8      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075b4:	f040 8085 	bne.w	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80075b8:	4b6c      	ldr	r3, [pc, #432]	; (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80075ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075bc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80075c0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075c8:	d06b      	beq.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075d0:	d874      	bhi.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80075d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d8:	d056      	beq.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80075da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e0:	d86c      	bhi.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80075e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075e8:	d03b      	beq.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80075ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075f0:	d864      	bhi.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f8:	d021      	beq.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007600:	d85c      	bhi.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007604:	2b00      	cmp	r3, #0
 8007606:	d004      	beq.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800760e:	d004      	beq.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8007610:	e054      	b.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007612:	f000 f8b3 	bl	800777c <HAL_RCCEx_GetD3PCLK1Freq>
 8007616:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007618:	e0a2      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800761a:	4b54      	ldr	r3, [pc, #336]	; (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007626:	d107      	bne.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007628:	f107 0318 	add.w	r3, r7, #24
 800762c:	4618      	mov	r0, r3
 800762e:	f000 f8bb 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007636:	e093      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800763c:	e090      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800763e:	4b4b      	ldr	r3, [pc, #300]	; (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800764a:	d107      	bne.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800764c:	f107 030c 	add.w	r3, r7, #12
 8007650:	4618      	mov	r0, r3
 8007652:	f000 f9fd 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800765a:	e081      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800765c:	2300      	movs	r3, #0
 800765e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007660:	e07e      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007662:	4b42      	ldr	r3, [pc, #264]	; (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0304 	and.w	r3, r3, #4
 800766a:	2b04      	cmp	r3, #4
 800766c:	d109      	bne.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800766e:	4b3f      	ldr	r3, [pc, #252]	; (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	08db      	lsrs	r3, r3, #3
 8007674:	f003 0303 	and.w	r3, r3, #3
 8007678:	4a3d      	ldr	r2, [pc, #244]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800767a:	fa22 f303 	lsr.w	r3, r2, r3
 800767e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007680:	e06e      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007686:	e06b      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007688:	4b38      	ldr	r3, [pc, #224]	; (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007694:	d102      	bne.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8007696:	4b37      	ldr	r3, [pc, #220]	; (8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007698:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800769a:	e061      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076a0:	e05e      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80076a2:	4b32      	ldr	r3, [pc, #200]	; (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076ae:	d102      	bne.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 80076b0:	4b31      	ldr	r3, [pc, #196]	; (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80076b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80076b4:	e054      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ba:	e051      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076c0:	e04e      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076c8:	d148      	bne.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80076ca:	4b28      	ldr	r3, [pc, #160]	; (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80076cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076d2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80076d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076da:	d02a      	beq.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076e2:	d838      	bhi.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 80076e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d004      	beq.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076f0:	d00d      	beq.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80076f2:	e030      	b.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80076f4:	4b1d      	ldr	r3, [pc, #116]	; (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007700:	d102      	bne.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8007702:	4b1d      	ldr	r3, [pc, #116]	; (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007704:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007706:	e02b      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800770c:	e028      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800770e:	4b17      	ldr	r3, [pc, #92]	; (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007716:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800771a:	d107      	bne.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800771c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fae9 	bl	8007cf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800772a:	e019      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007730:	e016      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007732:	4b0e      	ldr	r3, [pc, #56]	; (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800773a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800773e:	d107      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007740:	f107 0318 	add.w	r3, r7, #24
 8007744:	4618      	mov	r0, r3
 8007746:	f000 f82f 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800774e:	e007      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007750:	2300      	movs	r3, #0
 8007752:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007754:	e004      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800775a:	e001      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800775c:	2300      	movs	r3, #0
 800775e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007762:	4618      	mov	r0, r3
 8007764:	3740      	adds	r7, #64	; 0x40
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	58024400 	.word	0x58024400
 8007770:	03d09000 	.word	0x03d09000
 8007774:	003d0900 	.word	0x003d0900
 8007778:	017d7840 	.word	0x017d7840

0800777c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007780:	f7fe fb88 	bl	8005e94 <HAL_RCC_GetHCLKFreq>
 8007784:	4602      	mov	r2, r0
 8007786:	4b06      	ldr	r3, [pc, #24]	; (80077a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	091b      	lsrs	r3, r3, #4
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	4904      	ldr	r1, [pc, #16]	; (80077a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007792:	5ccb      	ldrb	r3, [r1, r3]
 8007794:	f003 031f 	and.w	r3, r3, #31
 8007798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800779c:	4618      	mov	r0, r3
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	58024400 	.word	0x58024400
 80077a4:	0800b884 	.word	0x0800b884

080077a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b089      	sub	sp, #36	; 0x24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077b0:	4ba1      	ldr	r3, [pc, #644]	; (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	f003 0303 	and.w	r3, r3, #3
 80077b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80077ba:	4b9f      	ldr	r3, [pc, #636]	; (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077be:	0b1b      	lsrs	r3, r3, #12
 80077c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80077c6:	4b9c      	ldr	r3, [pc, #624]	; (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ca:	091b      	lsrs	r3, r3, #4
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80077d2:	4b99      	ldr	r3, [pc, #612]	; (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d6:	08db      	lsrs	r3, r3, #3
 80077d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	fb02 f303 	mul.w	r3, r2, r3
 80077e2:	ee07 3a90 	vmov	s15, r3
 80077e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 8111 	beq.w	8007a18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	f000 8083 	beq.w	8007904 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b02      	cmp	r3, #2
 8007802:	f200 80a1 	bhi.w	8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d056      	beq.n	80078c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007812:	e099      	b.n	8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007814:	4b88      	ldr	r3, [pc, #544]	; (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0320 	and.w	r3, r3, #32
 800781c:	2b00      	cmp	r3, #0
 800781e:	d02d      	beq.n	800787c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007820:	4b85      	ldr	r3, [pc, #532]	; (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	08db      	lsrs	r3, r3, #3
 8007826:	f003 0303 	and.w	r3, r3, #3
 800782a:	4a84      	ldr	r2, [pc, #528]	; (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800782c:	fa22 f303 	lsr.w	r3, r2, r3
 8007830:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	ee07 3a90 	vmov	s15, r3
 8007838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784a:	4b7b      	ldr	r3, [pc, #492]	; (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007852:	ee07 3a90 	vmov	s15, r3
 8007856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785a:	ed97 6a03 	vldr	s12, [r7, #12]
 800785e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800786e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007876:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800787a:	e087      	b.n	800798c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	ee07 3a90 	vmov	s15, r3
 8007882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007886:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800788a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800788e:	4b6a      	ldr	r3, [pc, #424]	; (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007896:	ee07 3a90 	vmov	s15, r3
 800789a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800789e:	ed97 6a03 	vldr	s12, [r7, #12]
 80078a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078be:	e065      	b.n	800798c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	ee07 3a90 	vmov	s15, r3
 80078c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d2:	4b59      	ldr	r3, [pc, #356]	; (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007902:	e043      	b.n	800798c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007916:	4b48      	ldr	r3, [pc, #288]	; (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007926:	ed97 6a03 	vldr	s12, [r7, #12]
 800792a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800792e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800793a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800793e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007942:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007946:	e021      	b.n	800798c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007952:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795a:	4b37      	ldr	r3, [pc, #220]	; (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796a:	ed97 6a03 	vldr	s12, [r7, #12]
 800796e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800797e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007986:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800798a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800798c:	4b2a      	ldr	r3, [pc, #168]	; (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	0a5b      	lsrs	r3, r3, #9
 8007992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007996:	ee07 3a90 	vmov	s15, r3
 800799a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80079aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079b2:	ee17 2a90 	vmov	r2, s15
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80079ba:	4b1f      	ldr	r3, [pc, #124]	; (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	0c1b      	lsrs	r3, r3, #16
 80079c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c4:	ee07 3a90 	vmov	s15, r3
 80079c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80079d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e0:	ee17 2a90 	vmov	r2, s15
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80079e8:	4b13      	ldr	r3, [pc, #76]	; (8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	0e1b      	lsrs	r3, r3, #24
 80079ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f2:	ee07 3a90 	vmov	s15, r3
 80079f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a0e:	ee17 2a90 	vmov	r2, s15
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a16:	e008      	b.n	8007a2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	609a      	str	r2, [r3, #8]
}
 8007a2a:	bf00      	nop
 8007a2c:	3724      	adds	r7, #36	; 0x24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	58024400 	.word	0x58024400
 8007a3c:	03d09000 	.word	0x03d09000
 8007a40:	46000000 	.word	0x46000000
 8007a44:	4c742400 	.word	0x4c742400
 8007a48:	4a742400 	.word	0x4a742400
 8007a4c:	4bbebc20 	.word	0x4bbebc20

08007a50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b089      	sub	sp, #36	; 0x24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a58:	4ba1      	ldr	r3, [pc, #644]	; (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5c:	f003 0303 	and.w	r3, r3, #3
 8007a60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007a62:	4b9f      	ldr	r3, [pc, #636]	; (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a66:	0d1b      	lsrs	r3, r3, #20
 8007a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a6e:	4b9c      	ldr	r3, [pc, #624]	; (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	0a1b      	lsrs	r3, r3, #8
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007a7a:	4b99      	ldr	r3, [pc, #612]	; (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a7e:	08db      	lsrs	r3, r3, #3
 8007a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	fb02 f303 	mul.w	r3, r2, r3
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8111 	beq.w	8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	f000 8083 	beq.w	8007bac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	f200 80a1 	bhi.w	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d056      	beq.n	8007b68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007aba:	e099      	b.n	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007abc:	4b88      	ldr	r3, [pc, #544]	; (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0320 	and.w	r3, r3, #32
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d02d      	beq.n	8007b24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ac8:	4b85      	ldr	r3, [pc, #532]	; (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	08db      	lsrs	r3, r3, #3
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	4a84      	ldr	r2, [pc, #528]	; (8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	ee07 3a90 	vmov	s15, r3
 8007ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af2:	4b7b      	ldr	r3, [pc, #492]	; (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b22:	e087      	b.n	8007c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007cec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b36:	4b6a      	ldr	r3, [pc, #424]	; (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b66:	e065      	b.n	8007c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b7a:	4b59      	ldr	r3, [pc, #356]	; (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007baa:	e043      	b.n	8007c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bbe:	4b48      	ldr	r3, [pc, #288]	; (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bee:	e021      	b.n	8007c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c02:	4b37      	ldr	r3, [pc, #220]	; (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c0a:	ee07 3a90 	vmov	s15, r3
 8007c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007c34:	4b2a      	ldr	r3, [pc, #168]	; (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c38:	0a5b      	lsrs	r3, r3, #9
 8007c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c5a:	ee17 2a90 	vmov	r2, s15
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007c62:	4b1f      	ldr	r3, [pc, #124]	; (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	0c1b      	lsrs	r3, r3, #16
 8007c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c6c:	ee07 3a90 	vmov	s15, r3
 8007c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c88:	ee17 2a90 	vmov	r2, s15
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007c90:	4b13      	ldr	r3, [pc, #76]	; (8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c94:	0e1b      	lsrs	r3, r3, #24
 8007c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cb6:	ee17 2a90 	vmov	r2, s15
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	609a      	str	r2, [r3, #8]
}
 8007cd2:	bf00      	nop
 8007cd4:	3724      	adds	r7, #36	; 0x24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	58024400 	.word	0x58024400
 8007ce4:	03d09000 	.word	0x03d09000
 8007ce8:	46000000 	.word	0x46000000
 8007cec:	4c742400 	.word	0x4c742400
 8007cf0:	4a742400 	.word	0x4a742400
 8007cf4:	4bbebc20 	.word	0x4bbebc20

08007cf8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b089      	sub	sp, #36	; 0x24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d00:	4ba0      	ldr	r3, [pc, #640]	; (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d04:	f003 0303 	and.w	r3, r3, #3
 8007d08:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007d0a:	4b9e      	ldr	r3, [pc, #632]	; (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0e:	091b      	lsrs	r3, r3, #4
 8007d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d14:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007d16:	4b9b      	ldr	r3, [pc, #620]	; (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007d20:	4b98      	ldr	r3, [pc, #608]	; (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d24:	08db      	lsrs	r3, r3, #3
 8007d26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	fb02 f303 	mul.w	r3, r2, r3
 8007d30:	ee07 3a90 	vmov	s15, r3
 8007d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d38:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 8111 	beq.w	8007f66 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	f000 8083 	beq.w	8007e52 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	f200 80a1 	bhi.w	8007e96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d003      	beq.n	8007d62 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d056      	beq.n	8007e0e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007d60:	e099      	b.n	8007e96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d62:	4b88      	ldr	r3, [pc, #544]	; (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0320 	and.w	r3, r3, #32
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d02d      	beq.n	8007dca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d6e:	4b85      	ldr	r3, [pc, #532]	; (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	08db      	lsrs	r3, r3, #3
 8007d74:	f003 0303 	and.w	r3, r3, #3
 8007d78:	4a83      	ldr	r2, [pc, #524]	; (8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	ee07 3a90 	vmov	s15, r3
 8007d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	ee07 3a90 	vmov	s15, r3
 8007d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d98:	4b7a      	ldr	r3, [pc, #488]	; (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da0:	ee07 3a90 	vmov	s15, r3
 8007da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007da8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dac:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007f8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007db0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007db4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007db8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dc4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007dc8:	e087      	b.n	8007eda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	ee07 3a90 	vmov	s15, r3
 8007dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007f90 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007dd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ddc:	4b69      	ldr	r3, [pc, #420]	; (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007de4:	ee07 3a90 	vmov	s15, r3
 8007de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dec:	ed97 6a03 	vldr	s12, [r7, #12]
 8007df0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007f8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007df4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007df8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e0c:	e065      	b.n	8007eda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	ee07 3a90 	vmov	s15, r3
 8007e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e18:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e20:	4b58      	ldr	r3, [pc, #352]	; (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e28:	ee07 3a90 	vmov	s15, r3
 8007e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e30:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e34:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007f8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e50:	e043      	b.n	8007eda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	ee07 3a90 	vmov	s15, r3
 8007e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007f98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e64:	4b47      	ldr	r3, [pc, #284]	; (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e6c:	ee07 3a90 	vmov	s15, r3
 8007e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e74:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e78:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007f8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e94:	e021      	b.n	8007eda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	ee07 3a90 	vmov	s15, r3
 8007e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007f90 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea8:	4b36      	ldr	r3, [pc, #216]	; (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb0:	ee07 3a90 	vmov	s15, r3
 8007eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ebc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007f8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ed8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007eda:	4b2a      	ldr	r3, [pc, #168]	; (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ede:	0a5b      	lsrs	r3, r3, #9
 8007ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ee4:	ee07 3a90 	vmov	s15, r3
 8007ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ef0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ef4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f00:	ee17 2a90 	vmov	r2, s15
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007f08:	4b1e      	ldr	r3, [pc, #120]	; (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0c:	0c1b      	lsrs	r3, r3, #16
 8007f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f12:	ee07 3a90 	vmov	s15, r3
 8007f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f22:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f2e:	ee17 2a90 	vmov	r2, s15
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007f36:	4b13      	ldr	r3, [pc, #76]	; (8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3a:	0e1b      	lsrs	r3, r3, #24
 8007f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f40:	ee07 3a90 	vmov	s15, r3
 8007f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f50:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f5c:	ee17 2a90 	vmov	r2, s15
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007f64:	e008      	b.n	8007f78 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	609a      	str	r2, [r3, #8]
}
 8007f78:	bf00      	nop
 8007f7a:	3724      	adds	r7, #36	; 0x24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	58024400 	.word	0x58024400
 8007f88:	03d09000 	.word	0x03d09000
 8007f8c:	46000000 	.word	0x46000000
 8007f90:	4c742400 	.word	0x4c742400
 8007f94:	4a742400 	.word	0x4a742400
 8007f98:	4bbebc20 	.word	0x4bbebc20

08007f9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007faa:	4b53      	ldr	r3, [pc, #332]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d101      	bne.n	8007fba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e099      	b.n	80080ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007fba:	4b4f      	ldr	r3, [pc, #316]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a4e      	ldr	r2, [pc, #312]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007fc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fc6:	f7f9 fea3 	bl	8001d10 <HAL_GetTick>
 8007fca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fcc:	e008      	b.n	8007fe0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007fce:	f7f9 fe9f 	bl	8001d10 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d901      	bls.n	8007fe0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e086      	b.n	80080ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fe0:	4b45      	ldr	r3, [pc, #276]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1f0      	bne.n	8007fce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007fec:	4b42      	ldr	r3, [pc, #264]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	031b      	lsls	r3, r3, #12
 8007ffa:	493f      	ldr	r1, [pc, #252]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	628b      	str	r3, [r1, #40]	; 0x28
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	3b01      	subs	r3, #1
 8008006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	3b01      	subs	r3, #1
 8008010:	025b      	lsls	r3, r3, #9
 8008012:	b29b      	uxth	r3, r3
 8008014:	431a      	orrs	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	3b01      	subs	r3, #1
 800801c:	041b      	lsls	r3, r3, #16
 800801e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	3b01      	subs	r3, #1
 800802a:	061b      	lsls	r3, r3, #24
 800802c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008030:	4931      	ldr	r1, [pc, #196]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008032:	4313      	orrs	r3, r2
 8008034:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008036:	4b30      	ldr	r3, [pc, #192]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	492d      	ldr	r1, [pc, #180]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008044:	4313      	orrs	r3, r2
 8008046:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008048:	4b2b      	ldr	r3, [pc, #172]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 800804a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804c:	f023 0220 	bic.w	r2, r3, #32
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	4928      	ldr	r1, [pc, #160]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008056:	4313      	orrs	r3, r2
 8008058:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800805a:	4b27      	ldr	r3, [pc, #156]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 800805c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805e:	4a26      	ldr	r2, [pc, #152]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008060:	f023 0310 	bic.w	r3, r3, #16
 8008064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008066:	4b24      	ldr	r3, [pc, #144]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008068:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800806a:	4b24      	ldr	r3, [pc, #144]	; (80080fc <RCCEx_PLL2_Config+0x160>)
 800806c:	4013      	ands	r3, r2
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	69d2      	ldr	r2, [r2, #28]
 8008072:	00d2      	lsls	r2, r2, #3
 8008074:	4920      	ldr	r1, [pc, #128]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008076:	4313      	orrs	r3, r2
 8008078:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800807a:	4b1f      	ldr	r3, [pc, #124]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 800807c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807e:	4a1e      	ldr	r2, [pc, #120]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008080:	f043 0310 	orr.w	r3, r3, #16
 8008084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d106      	bne.n	800809a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800808c:	4b1a      	ldr	r3, [pc, #104]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 800808e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008090:	4a19      	ldr	r2, [pc, #100]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008098:	e00f      	b.n	80080ba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d106      	bne.n	80080ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080a0:	4b15      	ldr	r3, [pc, #84]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a4:	4a14      	ldr	r2, [pc, #80]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080ac:	e005      	b.n	80080ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80080ae:	4b12      	ldr	r3, [pc, #72]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b2:	4a11      	ldr	r2, [pc, #68]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80080ba:	4b0f      	ldr	r3, [pc, #60]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a0e      	ldr	r2, [pc, #56]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080c6:	f7f9 fe23 	bl	8001d10 <HAL_GetTick>
 80080ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080cc:	e008      	b.n	80080e0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80080ce:	f7f9 fe1f 	bl	8001d10 <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d901      	bls.n	80080e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e006      	b.n	80080ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080e0:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d0f0      	beq.n	80080ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	58024400 	.word	0x58024400
 80080fc:	ffff0007 	.word	0xffff0007

08008100 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800810e:	4b53      	ldr	r3, [pc, #332]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 8008110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008112:	f003 0303 	and.w	r3, r3, #3
 8008116:	2b03      	cmp	r3, #3
 8008118:	d101      	bne.n	800811e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e099      	b.n	8008252 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800811e:	4b4f      	ldr	r3, [pc, #316]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a4e      	ldr	r2, [pc, #312]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 8008124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800812a:	f7f9 fdf1 	bl	8001d10 <HAL_GetTick>
 800812e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008130:	e008      	b.n	8008144 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008132:	f7f9 fded 	bl	8001d10 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d901      	bls.n	8008144 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e086      	b.n	8008252 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008144:	4b45      	ldr	r3, [pc, #276]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1f0      	bne.n	8008132 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008150:	4b42      	ldr	r3, [pc, #264]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 8008152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008154:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	051b      	lsls	r3, r3, #20
 800815e:	493f      	ldr	r1, [pc, #252]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 8008160:	4313      	orrs	r3, r2
 8008162:	628b      	str	r3, [r1, #40]	; 0x28
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	3b01      	subs	r3, #1
 800816a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	3b01      	subs	r3, #1
 8008174:	025b      	lsls	r3, r3, #9
 8008176:	b29b      	uxth	r3, r3
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	3b01      	subs	r3, #1
 8008180:	041b      	lsls	r3, r3, #16
 8008182:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008186:	431a      	orrs	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	3b01      	subs	r3, #1
 800818e:	061b      	lsls	r3, r3, #24
 8008190:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008194:	4931      	ldr	r1, [pc, #196]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 8008196:	4313      	orrs	r3, r2
 8008198:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800819a:	4b30      	ldr	r3, [pc, #192]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 800819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	492d      	ldr	r1, [pc, #180]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80081ac:	4b2b      	ldr	r3, [pc, #172]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	4928      	ldr	r1, [pc, #160]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80081be:	4b27      	ldr	r3, [pc, #156]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 80081c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c2:	4a26      	ldr	r2, [pc, #152]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 80081c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081ca:	4b24      	ldr	r3, [pc, #144]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 80081cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ce:	4b24      	ldr	r3, [pc, #144]	; (8008260 <RCCEx_PLL3_Config+0x160>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	69d2      	ldr	r2, [r2, #28]
 80081d6:	00d2      	lsls	r2, r2, #3
 80081d8:	4920      	ldr	r1, [pc, #128]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80081de:	4b1f      	ldr	r3, [pc, #124]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 80081e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e2:	4a1e      	ldr	r2, [pc, #120]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 80081e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d106      	bne.n	80081fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80081f0:	4b1a      	ldr	r3, [pc, #104]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	4a19      	ldr	r2, [pc, #100]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 80081f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80081fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081fc:	e00f      	b.n	800821e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d106      	bne.n	8008212 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008204:	4b15      	ldr	r3, [pc, #84]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	4a14      	ldr	r2, [pc, #80]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 800820a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800820e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008210:	e005      	b.n	800821e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008212:	4b12      	ldr	r3, [pc, #72]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 8008214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008216:	4a11      	ldr	r2, [pc, #68]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 8008218:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800821c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800821e:	4b0f      	ldr	r3, [pc, #60]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a0e      	ldr	r2, [pc, #56]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 8008224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800822a:	f7f9 fd71 	bl	8001d10 <HAL_GetTick>
 800822e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008230:	e008      	b.n	8008244 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008232:	f7f9 fd6d 	bl	8001d10 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d901      	bls.n	8008244 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e006      	b.n	8008252 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008244:	4b05      	ldr	r3, [pc, #20]	; (800825c <RCCEx_PLL3_Config+0x15c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d0f0      	beq.n	8008232 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	58024400 	.word	0x58024400
 8008260:	ffff0007 	.word	0xffff0007

08008264 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e0f1      	b.n	800845a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a78      	ldr	r2, [pc, #480]	; (8008464 <HAL_SPI_Init+0x200>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d00f      	beq.n	80082a6 <HAL_SPI_Init+0x42>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a77      	ldr	r2, [pc, #476]	; (8008468 <HAL_SPI_Init+0x204>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d00a      	beq.n	80082a6 <HAL_SPI_Init+0x42>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a75      	ldr	r2, [pc, #468]	; (800846c <HAL_SPI_Init+0x208>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d005      	beq.n	80082a6 <HAL_SPI_Init+0x42>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	2b0f      	cmp	r3, #15
 80082a0:	d901      	bls.n	80082a6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e0d9      	b.n	800845a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f8e2 	bl	8008470 <SPI_GetPacketSize>
 80082ac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a6c      	ldr	r2, [pc, #432]	; (8008464 <HAL_SPI_Init+0x200>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d00c      	beq.n	80082d2 <HAL_SPI_Init+0x6e>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a6a      	ldr	r2, [pc, #424]	; (8008468 <HAL_SPI_Init+0x204>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d007      	beq.n	80082d2 <HAL_SPI_Init+0x6e>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a69      	ldr	r2, [pc, #420]	; (800846c <HAL_SPI_Init+0x208>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d002      	beq.n	80082d2 <HAL_SPI_Init+0x6e>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2b08      	cmp	r3, #8
 80082d0:	d811      	bhi.n	80082f6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80082d6:	4a63      	ldr	r2, [pc, #396]	; (8008464 <HAL_SPI_Init+0x200>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d009      	beq.n	80082f0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a61      	ldr	r2, [pc, #388]	; (8008468 <HAL_SPI_Init+0x204>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d004      	beq.n	80082f0 <HAL_SPI_Init+0x8c>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a60      	ldr	r2, [pc, #384]	; (800846c <HAL_SPI_Init+0x208>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d104      	bne.n	80082fa <HAL_SPI_Init+0x96>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b10      	cmp	r3, #16
 80082f4:	d901      	bls.n	80082fa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e0af      	b.n	800845a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d106      	bne.n	8008314 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7f8 ffb4 	bl	800127c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 0201 	bic.w	r2, r2, #1
 800832a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008336:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008340:	d119      	bne.n	8008376 <HAL_SPI_Init+0x112>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800834a:	d103      	bne.n	8008354 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008350:	2b00      	cmp	r3, #0
 8008352:	d008      	beq.n	8008366 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10c      	bne.n	8008376 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008360:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008364:	d107      	bne.n	8008376 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008374:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	69da      	ldr	r2, [r3, #28]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837e:	431a      	orrs	r2, r3
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	431a      	orrs	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008388:	ea42 0103 	orr.w	r1, r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68da      	ldr	r2, [r3, #12]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	431a      	orrs	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a6:	431a      	orrs	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	431a      	orrs	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	431a      	orrs	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	695b      	ldr	r3, [r3, #20]
 80083b8:	431a      	orrs	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	431a      	orrs	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	431a      	orrs	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	431a      	orrs	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083d6:	ea42 0103 	orr.w	r1, r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d113      	bne.n	8008416 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008400:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008414:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f022 0201 	bic.w	r2, r2, #1
 8008424:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00a      	beq.n	8008448 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	430a      	orrs	r2, r1
 8008446:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	40013000 	.word	0x40013000
 8008468:	40003800 	.word	0x40003800
 800846c:	40003c00 	.word	0x40003c00

08008470 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847c:	095b      	lsrs	r3, r3, #5
 800847e:	3301      	adds	r3, #1
 8008480:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	3301      	adds	r3, #1
 8008488:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	3307      	adds	r3, #7
 800848e:	08db      	lsrs	r3, r3, #3
 8008490:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	fb02 f303 	mul.w	r3, r2, r3
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e049      	b.n	800854c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d106      	bne.n	80084d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7f9 fa21 	bl	8001914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2202      	movs	r2, #2
 80084d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	3304      	adds	r3, #4
 80084e2:	4619      	mov	r1, r3
 80084e4:	4610      	mov	r0, r2
 80084e6:	f000 fbb1 	bl	8008c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d101      	bne.n	8008566 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e049      	b.n	80085fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d106      	bne.n	8008580 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f841 	bl	8008602 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2202      	movs	r2, #2
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	3304      	adds	r3, #4
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f000 fb5a 	bl	8008c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008602:	b480      	push	{r7}
 8008604:	b083      	sub	sp, #12
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800860a:	bf00      	nop
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
	...

08008618 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d109      	bne.n	800863c <HAL_TIM_PWM_Start+0x24>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b01      	cmp	r3, #1
 8008632:	bf14      	ite	ne
 8008634:	2301      	movne	r3, #1
 8008636:	2300      	moveq	r3, #0
 8008638:	b2db      	uxtb	r3, r3
 800863a:	e03c      	b.n	80086b6 <HAL_TIM_PWM_Start+0x9e>
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2b04      	cmp	r3, #4
 8008640:	d109      	bne.n	8008656 <HAL_TIM_PWM_Start+0x3e>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b01      	cmp	r3, #1
 800864c:	bf14      	ite	ne
 800864e:	2301      	movne	r3, #1
 8008650:	2300      	moveq	r3, #0
 8008652:	b2db      	uxtb	r3, r3
 8008654:	e02f      	b.n	80086b6 <HAL_TIM_PWM_Start+0x9e>
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	2b08      	cmp	r3, #8
 800865a:	d109      	bne.n	8008670 <HAL_TIM_PWM_Start+0x58>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b01      	cmp	r3, #1
 8008666:	bf14      	ite	ne
 8008668:	2301      	movne	r3, #1
 800866a:	2300      	moveq	r3, #0
 800866c:	b2db      	uxtb	r3, r3
 800866e:	e022      	b.n	80086b6 <HAL_TIM_PWM_Start+0x9e>
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2b0c      	cmp	r3, #12
 8008674:	d109      	bne.n	800868a <HAL_TIM_PWM_Start+0x72>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b01      	cmp	r3, #1
 8008680:	bf14      	ite	ne
 8008682:	2301      	movne	r3, #1
 8008684:	2300      	moveq	r3, #0
 8008686:	b2db      	uxtb	r3, r3
 8008688:	e015      	b.n	80086b6 <HAL_TIM_PWM_Start+0x9e>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b10      	cmp	r3, #16
 800868e:	d109      	bne.n	80086a4 <HAL_TIM_PWM_Start+0x8c>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b01      	cmp	r3, #1
 800869a:	bf14      	ite	ne
 800869c:	2301      	movne	r3, #1
 800869e:	2300      	moveq	r3, #0
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	e008      	b.n	80086b6 <HAL_TIM_PWM_Start+0x9e>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	bf14      	ite	ne
 80086b0:	2301      	movne	r3, #1
 80086b2:	2300      	moveq	r3, #0
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e0a1      	b.n	8008802 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d104      	bne.n	80086ce <HAL_TIM_PWM_Start+0xb6>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2202      	movs	r2, #2
 80086c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086cc:	e023      	b.n	8008716 <HAL_TIM_PWM_Start+0xfe>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	d104      	bne.n	80086de <HAL_TIM_PWM_Start+0xc6>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2202      	movs	r2, #2
 80086d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086dc:	e01b      	b.n	8008716 <HAL_TIM_PWM_Start+0xfe>
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d104      	bne.n	80086ee <HAL_TIM_PWM_Start+0xd6>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086ec:	e013      	b.n	8008716 <HAL_TIM_PWM_Start+0xfe>
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2b0c      	cmp	r3, #12
 80086f2:	d104      	bne.n	80086fe <HAL_TIM_PWM_Start+0xe6>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086fc:	e00b      	b.n	8008716 <HAL_TIM_PWM_Start+0xfe>
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	2b10      	cmp	r3, #16
 8008702:	d104      	bne.n	800870e <HAL_TIM_PWM_Start+0xf6>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2202      	movs	r2, #2
 8008708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800870c:	e003      	b.n	8008716 <HAL_TIM_PWM_Start+0xfe>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2202      	movs	r2, #2
 8008712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2201      	movs	r2, #1
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	4618      	mov	r0, r3
 8008720:	f000 fea2 	bl	8009468 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a38      	ldr	r2, [pc, #224]	; (800880c <HAL_TIM_PWM_Start+0x1f4>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d013      	beq.n	8008756 <HAL_TIM_PWM_Start+0x13e>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a37      	ldr	r2, [pc, #220]	; (8008810 <HAL_TIM_PWM_Start+0x1f8>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d00e      	beq.n	8008756 <HAL_TIM_PWM_Start+0x13e>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a35      	ldr	r2, [pc, #212]	; (8008814 <HAL_TIM_PWM_Start+0x1fc>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d009      	beq.n	8008756 <HAL_TIM_PWM_Start+0x13e>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a34      	ldr	r2, [pc, #208]	; (8008818 <HAL_TIM_PWM_Start+0x200>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d004      	beq.n	8008756 <HAL_TIM_PWM_Start+0x13e>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a32      	ldr	r2, [pc, #200]	; (800881c <HAL_TIM_PWM_Start+0x204>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d101      	bne.n	800875a <HAL_TIM_PWM_Start+0x142>
 8008756:	2301      	movs	r3, #1
 8008758:	e000      	b.n	800875c <HAL_TIM_PWM_Start+0x144>
 800875a:	2300      	movs	r3, #0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d007      	beq.n	8008770 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800876e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a25      	ldr	r2, [pc, #148]	; (800880c <HAL_TIM_PWM_Start+0x1f4>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d022      	beq.n	80087c0 <HAL_TIM_PWM_Start+0x1a8>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008782:	d01d      	beq.n	80087c0 <HAL_TIM_PWM_Start+0x1a8>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a25      	ldr	r2, [pc, #148]	; (8008820 <HAL_TIM_PWM_Start+0x208>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d018      	beq.n	80087c0 <HAL_TIM_PWM_Start+0x1a8>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a24      	ldr	r2, [pc, #144]	; (8008824 <HAL_TIM_PWM_Start+0x20c>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d013      	beq.n	80087c0 <HAL_TIM_PWM_Start+0x1a8>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a22      	ldr	r2, [pc, #136]	; (8008828 <HAL_TIM_PWM_Start+0x210>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d00e      	beq.n	80087c0 <HAL_TIM_PWM_Start+0x1a8>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a1a      	ldr	r2, [pc, #104]	; (8008810 <HAL_TIM_PWM_Start+0x1f8>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d009      	beq.n	80087c0 <HAL_TIM_PWM_Start+0x1a8>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a1e      	ldr	r2, [pc, #120]	; (800882c <HAL_TIM_PWM_Start+0x214>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d004      	beq.n	80087c0 <HAL_TIM_PWM_Start+0x1a8>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a16      	ldr	r2, [pc, #88]	; (8008814 <HAL_TIM_PWM_Start+0x1fc>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d115      	bne.n	80087ec <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689a      	ldr	r2, [r3, #8]
 80087c6:	4b1a      	ldr	r3, [pc, #104]	; (8008830 <HAL_TIM_PWM_Start+0x218>)
 80087c8:	4013      	ands	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b06      	cmp	r3, #6
 80087d0:	d015      	beq.n	80087fe <HAL_TIM_PWM_Start+0x1e6>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d8:	d011      	beq.n	80087fe <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f042 0201 	orr.w	r2, r2, #1
 80087e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ea:	e008      	b.n	80087fe <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f042 0201 	orr.w	r2, r2, #1
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	e000      	b.n	8008800 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	40010000 	.word	0x40010000
 8008810:	40010400 	.word	0x40010400
 8008814:	40014000 	.word	0x40014000
 8008818:	40014400 	.word	0x40014400
 800881c:	40014800 	.word	0x40014800
 8008820:	40000400 	.word	0x40000400
 8008824:	40000800 	.word	0x40000800
 8008828:	40000c00 	.word	0x40000c00
 800882c:	40001800 	.word	0x40001800
 8008830:	00010007 	.word	0x00010007

08008834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008840:	2300      	movs	r3, #0
 8008842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800884a:	2b01      	cmp	r3, #1
 800884c:	d101      	bne.n	8008852 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800884e:	2302      	movs	r3, #2
 8008850:	e0ff      	b.n	8008a52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b14      	cmp	r3, #20
 800885e:	f200 80f0 	bhi.w	8008a42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008862:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008868:	080088bd 	.word	0x080088bd
 800886c:	08008a43 	.word	0x08008a43
 8008870:	08008a43 	.word	0x08008a43
 8008874:	08008a43 	.word	0x08008a43
 8008878:	080088fd 	.word	0x080088fd
 800887c:	08008a43 	.word	0x08008a43
 8008880:	08008a43 	.word	0x08008a43
 8008884:	08008a43 	.word	0x08008a43
 8008888:	0800893f 	.word	0x0800893f
 800888c:	08008a43 	.word	0x08008a43
 8008890:	08008a43 	.word	0x08008a43
 8008894:	08008a43 	.word	0x08008a43
 8008898:	0800897f 	.word	0x0800897f
 800889c:	08008a43 	.word	0x08008a43
 80088a0:	08008a43 	.word	0x08008a43
 80088a4:	08008a43 	.word	0x08008a43
 80088a8:	080089c1 	.word	0x080089c1
 80088ac:	08008a43 	.word	0x08008a43
 80088b0:	08008a43 	.word	0x08008a43
 80088b4:	08008a43 	.word	0x08008a43
 80088b8:	08008a01 	.word	0x08008a01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68b9      	ldr	r1, [r7, #8]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fa5c 	bl	8008d80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	699a      	ldr	r2, [r3, #24]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f042 0208 	orr.w	r2, r2, #8
 80088d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	699a      	ldr	r2, [r3, #24]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0204 	bic.w	r2, r2, #4
 80088e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6999      	ldr	r1, [r3, #24]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	691a      	ldr	r2, [r3, #16]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	619a      	str	r2, [r3, #24]
      break;
 80088fa:	e0a5      	b.n	8008a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68b9      	ldr	r1, [r7, #8]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 facc 	bl	8008ea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	699a      	ldr	r2, [r3, #24]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	699a      	ldr	r2, [r3, #24]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6999      	ldr	r1, [r3, #24]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	021a      	lsls	r2, r3, #8
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	619a      	str	r2, [r3, #24]
      break;
 800893c:	e084      	b.n	8008a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68b9      	ldr	r1, [r7, #8]
 8008944:	4618      	mov	r0, r3
 8008946:	f000 fb35 	bl	8008fb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	69da      	ldr	r2, [r3, #28]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f042 0208 	orr.w	r2, r2, #8
 8008958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	69da      	ldr	r2, [r3, #28]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f022 0204 	bic.w	r2, r2, #4
 8008968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	69d9      	ldr	r1, [r3, #28]
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	691a      	ldr	r2, [r3, #16]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	61da      	str	r2, [r3, #28]
      break;
 800897c:	e064      	b.n	8008a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68b9      	ldr	r1, [r7, #8]
 8008984:	4618      	mov	r0, r3
 8008986:	f000 fb9d 	bl	80090c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	69da      	ldr	r2, [r3, #28]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69da      	ldr	r2, [r3, #28]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	69d9      	ldr	r1, [r3, #28]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	021a      	lsls	r2, r3, #8
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	61da      	str	r2, [r3, #28]
      break;
 80089be:	e043      	b.n	8008a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68b9      	ldr	r1, [r7, #8]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 fbe6 	bl	8009198 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f042 0208 	orr.w	r2, r2, #8
 80089da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f022 0204 	bic.w	r2, r2, #4
 80089ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	691a      	ldr	r2, [r3, #16]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80089fe:	e023      	b.n	8008a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68b9      	ldr	r1, [r7, #8]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 fc2a 	bl	8009260 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	021a      	lsls	r2, r3, #8
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a40:	e002      	b.n	8008a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	75fb      	strb	r3, [r7, #23]
      break;
 8008a46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop

08008a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d101      	bne.n	8008a78 <HAL_TIM_ConfigClockSource+0x1c>
 8008a74:	2302      	movs	r3, #2
 8008a76:	e0dc      	b.n	8008c32 <HAL_TIM_ConfigClockSource+0x1d6>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	4b6a      	ldr	r3, [pc, #424]	; (8008c3c <HAL_TIM_ConfigClockSource+0x1e0>)
 8008a94:	4013      	ands	r3, r2
 8008a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a64      	ldr	r2, [pc, #400]	; (8008c40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	f000 80a9 	beq.w	8008c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ab4:	4a62      	ldr	r2, [pc, #392]	; (8008c40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	f200 80ae 	bhi.w	8008c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008abc:	4a61      	ldr	r2, [pc, #388]	; (8008c44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	f000 80a1 	beq.w	8008c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ac4:	4a5f      	ldr	r2, [pc, #380]	; (8008c44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	f200 80a6 	bhi.w	8008c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008acc:	4a5e      	ldr	r2, [pc, #376]	; (8008c48 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	f000 8099 	beq.w	8008c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ad4:	4a5c      	ldr	r2, [pc, #368]	; (8008c48 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	f200 809e 	bhi.w	8008c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008adc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008ae0:	f000 8091 	beq.w	8008c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ae4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008ae8:	f200 8096 	bhi.w	8008c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008aec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008af0:	f000 8089 	beq.w	8008c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8008af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008af8:	f200 808e 	bhi.w	8008c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b00:	d03e      	beq.n	8008b80 <HAL_TIM_ConfigClockSource+0x124>
 8008b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b06:	f200 8087 	bhi.w	8008c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b0e:	f000 8086 	beq.w	8008c1e <HAL_TIM_ConfigClockSource+0x1c2>
 8008b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b16:	d87f      	bhi.n	8008c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b18:	2b70      	cmp	r3, #112	; 0x70
 8008b1a:	d01a      	beq.n	8008b52 <HAL_TIM_ConfigClockSource+0xf6>
 8008b1c:	2b70      	cmp	r3, #112	; 0x70
 8008b1e:	d87b      	bhi.n	8008c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b20:	2b60      	cmp	r3, #96	; 0x60
 8008b22:	d050      	beq.n	8008bc6 <HAL_TIM_ConfigClockSource+0x16a>
 8008b24:	2b60      	cmp	r3, #96	; 0x60
 8008b26:	d877      	bhi.n	8008c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b28:	2b50      	cmp	r3, #80	; 0x50
 8008b2a:	d03c      	beq.n	8008ba6 <HAL_TIM_ConfigClockSource+0x14a>
 8008b2c:	2b50      	cmp	r3, #80	; 0x50
 8008b2e:	d873      	bhi.n	8008c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b30:	2b40      	cmp	r3, #64	; 0x40
 8008b32:	d058      	beq.n	8008be6 <HAL_TIM_ConfigClockSource+0x18a>
 8008b34:	2b40      	cmp	r3, #64	; 0x40
 8008b36:	d86f      	bhi.n	8008c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b38:	2b30      	cmp	r3, #48	; 0x30
 8008b3a:	d064      	beq.n	8008c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b3c:	2b30      	cmp	r3, #48	; 0x30
 8008b3e:	d86b      	bhi.n	8008c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b40:	2b20      	cmp	r3, #32
 8008b42:	d060      	beq.n	8008c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b44:	2b20      	cmp	r3, #32
 8008b46:	d867      	bhi.n	8008c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d05c      	beq.n	8008c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b4c:	2b10      	cmp	r3, #16
 8008b4e:	d05a      	beq.n	8008c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b50:	e062      	b.n	8008c18 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6818      	ldr	r0, [r3, #0]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	6899      	ldr	r1, [r3, #8]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f000 fc61 	bl	8009428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	609a      	str	r2, [r3, #8]
      break;
 8008b7e:	e04f      	b.n	8008c20 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6818      	ldr	r0, [r3, #0]
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	6899      	ldr	r1, [r3, #8]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f000 fc4a 	bl	8009428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689a      	ldr	r2, [r3, #8]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ba2:	609a      	str	r2, [r3, #8]
      break;
 8008ba4:	e03c      	b.n	8008c20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6818      	ldr	r0, [r3, #0]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	6859      	ldr	r1, [r3, #4]
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f000 fbba 	bl	800932c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2150      	movs	r1, #80	; 0x50
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 fc14 	bl	80093ec <TIM_ITRx_SetConfig>
      break;
 8008bc4:	e02c      	b.n	8008c20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	6859      	ldr	r1, [r3, #4]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	f000 fbd9 	bl	800938a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2160      	movs	r1, #96	; 0x60
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 fc04 	bl	80093ec <TIM_ITRx_SetConfig>
      break;
 8008be4:	e01c      	b.n	8008c20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6818      	ldr	r0, [r3, #0]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	6859      	ldr	r1, [r3, #4]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	f000 fb9a 	bl	800932c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2140      	movs	r1, #64	; 0x40
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 fbf4 	bl	80093ec <TIM_ITRx_SetConfig>
      break;
 8008c04:	e00c      	b.n	8008c20 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4619      	mov	r1, r3
 8008c10:	4610      	mov	r0, r2
 8008c12:	f000 fbeb 	bl	80093ec <TIM_ITRx_SetConfig>
      break;
 8008c16:	e003      	b.n	8008c20 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c1c:	e000      	b.n	8008c20 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008c1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	ffceff88 	.word	0xffceff88
 8008c40:	00100040 	.word	0x00100040
 8008c44:	00100030 	.word	0x00100030
 8008c48:	00100020 	.word	0x00100020

08008c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a40      	ldr	r2, [pc, #256]	; (8008d60 <TIM_Base_SetConfig+0x114>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d013      	beq.n	8008c8c <TIM_Base_SetConfig+0x40>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c6a:	d00f      	beq.n	8008c8c <TIM_Base_SetConfig+0x40>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a3d      	ldr	r2, [pc, #244]	; (8008d64 <TIM_Base_SetConfig+0x118>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d00b      	beq.n	8008c8c <TIM_Base_SetConfig+0x40>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a3c      	ldr	r2, [pc, #240]	; (8008d68 <TIM_Base_SetConfig+0x11c>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d007      	beq.n	8008c8c <TIM_Base_SetConfig+0x40>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a3b      	ldr	r2, [pc, #236]	; (8008d6c <TIM_Base_SetConfig+0x120>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d003      	beq.n	8008c8c <TIM_Base_SetConfig+0x40>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a3a      	ldr	r2, [pc, #232]	; (8008d70 <TIM_Base_SetConfig+0x124>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d108      	bne.n	8008c9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a2f      	ldr	r2, [pc, #188]	; (8008d60 <TIM_Base_SetConfig+0x114>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d01f      	beq.n	8008ce6 <TIM_Base_SetConfig+0x9a>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cac:	d01b      	beq.n	8008ce6 <TIM_Base_SetConfig+0x9a>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a2c      	ldr	r2, [pc, #176]	; (8008d64 <TIM_Base_SetConfig+0x118>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d017      	beq.n	8008ce6 <TIM_Base_SetConfig+0x9a>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a2b      	ldr	r2, [pc, #172]	; (8008d68 <TIM_Base_SetConfig+0x11c>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d013      	beq.n	8008ce6 <TIM_Base_SetConfig+0x9a>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a2a      	ldr	r2, [pc, #168]	; (8008d6c <TIM_Base_SetConfig+0x120>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d00f      	beq.n	8008ce6 <TIM_Base_SetConfig+0x9a>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a29      	ldr	r2, [pc, #164]	; (8008d70 <TIM_Base_SetConfig+0x124>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d00b      	beq.n	8008ce6 <TIM_Base_SetConfig+0x9a>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a28      	ldr	r2, [pc, #160]	; (8008d74 <TIM_Base_SetConfig+0x128>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d007      	beq.n	8008ce6 <TIM_Base_SetConfig+0x9a>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a27      	ldr	r2, [pc, #156]	; (8008d78 <TIM_Base_SetConfig+0x12c>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d003      	beq.n	8008ce6 <TIM_Base_SetConfig+0x9a>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a26      	ldr	r2, [pc, #152]	; (8008d7c <TIM_Base_SetConfig+0x130>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d108      	bne.n	8008cf8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	689a      	ldr	r2, [r3, #8]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a10      	ldr	r2, [pc, #64]	; (8008d60 <TIM_Base_SetConfig+0x114>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d00f      	beq.n	8008d44 <TIM_Base_SetConfig+0xf8>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a12      	ldr	r2, [pc, #72]	; (8008d70 <TIM_Base_SetConfig+0x124>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d00b      	beq.n	8008d44 <TIM_Base_SetConfig+0xf8>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a11      	ldr	r2, [pc, #68]	; (8008d74 <TIM_Base_SetConfig+0x128>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d007      	beq.n	8008d44 <TIM_Base_SetConfig+0xf8>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a10      	ldr	r2, [pc, #64]	; (8008d78 <TIM_Base_SetConfig+0x12c>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d003      	beq.n	8008d44 <TIM_Base_SetConfig+0xf8>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a0f      	ldr	r2, [pc, #60]	; (8008d7c <TIM_Base_SetConfig+0x130>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d103      	bne.n	8008d4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	691a      	ldr	r2, [r3, #16]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	615a      	str	r2, [r3, #20]
}
 8008d52:	bf00      	nop
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	40010000 	.word	0x40010000
 8008d64:	40000400 	.word	0x40000400
 8008d68:	40000800 	.word	0x40000800
 8008d6c:	40000c00 	.word	0x40000c00
 8008d70:	40010400 	.word	0x40010400
 8008d74:	40014000 	.word	0x40014000
 8008d78:	40014400 	.word	0x40014400
 8008d7c:	40014800 	.word	0x40014800

08008d80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b087      	sub	sp, #28
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	f023 0201 	bic.w	r2, r3, #1
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	4b37      	ldr	r3, [pc, #220]	; (8008e88 <TIM_OC1_SetConfig+0x108>)
 8008dac:	4013      	ands	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 0303 	bic.w	r3, r3, #3
 8008db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f023 0302 	bic.w	r3, r3, #2
 8008dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a2d      	ldr	r2, [pc, #180]	; (8008e8c <TIM_OC1_SetConfig+0x10c>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d00f      	beq.n	8008dfc <TIM_OC1_SetConfig+0x7c>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a2c      	ldr	r2, [pc, #176]	; (8008e90 <TIM_OC1_SetConfig+0x110>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d00b      	beq.n	8008dfc <TIM_OC1_SetConfig+0x7c>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a2b      	ldr	r2, [pc, #172]	; (8008e94 <TIM_OC1_SetConfig+0x114>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d007      	beq.n	8008dfc <TIM_OC1_SetConfig+0x7c>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a2a      	ldr	r2, [pc, #168]	; (8008e98 <TIM_OC1_SetConfig+0x118>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d003      	beq.n	8008dfc <TIM_OC1_SetConfig+0x7c>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a29      	ldr	r2, [pc, #164]	; (8008e9c <TIM_OC1_SetConfig+0x11c>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d10c      	bne.n	8008e16 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f023 0308 	bic.w	r3, r3, #8
 8008e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	f023 0304 	bic.w	r3, r3, #4
 8008e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a1c      	ldr	r2, [pc, #112]	; (8008e8c <TIM_OC1_SetConfig+0x10c>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d00f      	beq.n	8008e3e <TIM_OC1_SetConfig+0xbe>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a1b      	ldr	r2, [pc, #108]	; (8008e90 <TIM_OC1_SetConfig+0x110>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d00b      	beq.n	8008e3e <TIM_OC1_SetConfig+0xbe>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a1a      	ldr	r2, [pc, #104]	; (8008e94 <TIM_OC1_SetConfig+0x114>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d007      	beq.n	8008e3e <TIM_OC1_SetConfig+0xbe>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a19      	ldr	r2, [pc, #100]	; (8008e98 <TIM_OC1_SetConfig+0x118>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d003      	beq.n	8008e3e <TIM_OC1_SetConfig+0xbe>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a18      	ldr	r2, [pc, #96]	; (8008e9c <TIM_OC1_SetConfig+0x11c>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d111      	bne.n	8008e62 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	693a      	ldr	r2, [r7, #16]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	621a      	str	r2, [r3, #32]
}
 8008e7c:	bf00      	nop
 8008e7e:	371c      	adds	r7, #28
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	fffeff8f 	.word	0xfffeff8f
 8008e8c:	40010000 	.word	0x40010000
 8008e90:	40010400 	.word	0x40010400
 8008e94:	40014000 	.word	0x40014000
 8008e98:	40014400 	.word	0x40014400
 8008e9c:	40014800 	.word	0x40014800

08008ea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a1b      	ldr	r3, [r3, #32]
 8008eae:	f023 0210 	bic.w	r2, r3, #16
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	4b34      	ldr	r3, [pc, #208]	; (8008f9c <TIM_OC2_SetConfig+0xfc>)
 8008ecc:	4013      	ands	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	021b      	lsls	r3, r3, #8
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f023 0320 	bic.w	r3, r3, #32
 8008eea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a29      	ldr	r2, [pc, #164]	; (8008fa0 <TIM_OC2_SetConfig+0x100>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d003      	beq.n	8008f08 <TIM_OC2_SetConfig+0x68>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a28      	ldr	r2, [pc, #160]	; (8008fa4 <TIM_OC2_SetConfig+0x104>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d10d      	bne.n	8008f24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	011b      	lsls	r3, r3, #4
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a1e      	ldr	r2, [pc, #120]	; (8008fa0 <TIM_OC2_SetConfig+0x100>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d00f      	beq.n	8008f4c <TIM_OC2_SetConfig+0xac>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a1d      	ldr	r2, [pc, #116]	; (8008fa4 <TIM_OC2_SetConfig+0x104>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00b      	beq.n	8008f4c <TIM_OC2_SetConfig+0xac>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a1c      	ldr	r2, [pc, #112]	; (8008fa8 <TIM_OC2_SetConfig+0x108>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d007      	beq.n	8008f4c <TIM_OC2_SetConfig+0xac>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a1b      	ldr	r2, [pc, #108]	; (8008fac <TIM_OC2_SetConfig+0x10c>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d003      	beq.n	8008f4c <TIM_OC2_SetConfig+0xac>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a1a      	ldr	r2, [pc, #104]	; (8008fb0 <TIM_OC2_SetConfig+0x110>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d113      	bne.n	8008f74 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	695b      	ldr	r3, [r3, #20]
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	697a      	ldr	r2, [r7, #20]
 8008f8c:	621a      	str	r2, [r3, #32]
}
 8008f8e:	bf00      	nop
 8008f90:	371c      	adds	r7, #28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	feff8fff 	.word	0xfeff8fff
 8008fa0:	40010000 	.word	0x40010000
 8008fa4:	40010400 	.word	0x40010400
 8008fa8:	40014000 	.word	0x40014000
 8008fac:	40014400 	.word	0x40014400
 8008fb0:	40014800 	.word	0x40014800

08008fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b087      	sub	sp, #28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a1b      	ldr	r3, [r3, #32]
 8008fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	4b33      	ldr	r3, [pc, #204]	; (80090ac <TIM_OC3_SetConfig+0xf8>)
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0303 	bic.w	r3, r3, #3
 8008fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	021b      	lsls	r3, r3, #8
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	4313      	orrs	r3, r2
 8009008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a28      	ldr	r2, [pc, #160]	; (80090b0 <TIM_OC3_SetConfig+0xfc>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d003      	beq.n	800901a <TIM_OC3_SetConfig+0x66>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a27      	ldr	r2, [pc, #156]	; (80090b4 <TIM_OC3_SetConfig+0x100>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d10d      	bne.n	8009036 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	021b      	lsls	r3, r3, #8
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	4313      	orrs	r3, r2
 800902c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a1d      	ldr	r2, [pc, #116]	; (80090b0 <TIM_OC3_SetConfig+0xfc>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d00f      	beq.n	800905e <TIM_OC3_SetConfig+0xaa>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a1c      	ldr	r2, [pc, #112]	; (80090b4 <TIM_OC3_SetConfig+0x100>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d00b      	beq.n	800905e <TIM_OC3_SetConfig+0xaa>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a1b      	ldr	r2, [pc, #108]	; (80090b8 <TIM_OC3_SetConfig+0x104>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d007      	beq.n	800905e <TIM_OC3_SetConfig+0xaa>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a1a      	ldr	r2, [pc, #104]	; (80090bc <TIM_OC3_SetConfig+0x108>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d003      	beq.n	800905e <TIM_OC3_SetConfig+0xaa>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a19      	ldr	r2, [pc, #100]	; (80090c0 <TIM_OC3_SetConfig+0x10c>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d113      	bne.n	8009086 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800906c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	011b      	lsls	r3, r3, #4
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	4313      	orrs	r3, r2
 8009078:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	011b      	lsls	r3, r3, #4
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	4313      	orrs	r3, r2
 8009084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	685a      	ldr	r2, [r3, #4]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	621a      	str	r2, [r3, #32]
}
 80090a0:	bf00      	nop
 80090a2:	371c      	adds	r7, #28
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	fffeff8f 	.word	0xfffeff8f
 80090b0:	40010000 	.word	0x40010000
 80090b4:	40010400 	.word	0x40010400
 80090b8:	40014000 	.word	0x40014000
 80090bc:	40014400 	.word	0x40014400
 80090c0:	40014800 	.word	0x40014800

080090c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b087      	sub	sp, #28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4b24      	ldr	r3, [pc, #144]	; (8009180 <TIM_OC4_SetConfig+0xbc>)
 80090f0:	4013      	ands	r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	021b      	lsls	r3, r3, #8
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	4313      	orrs	r3, r2
 8009106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800910e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	031b      	lsls	r3, r3, #12
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	4313      	orrs	r3, r2
 800911a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a19      	ldr	r2, [pc, #100]	; (8009184 <TIM_OC4_SetConfig+0xc0>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d00f      	beq.n	8009144 <TIM_OC4_SetConfig+0x80>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a18      	ldr	r2, [pc, #96]	; (8009188 <TIM_OC4_SetConfig+0xc4>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d00b      	beq.n	8009144 <TIM_OC4_SetConfig+0x80>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a17      	ldr	r2, [pc, #92]	; (800918c <TIM_OC4_SetConfig+0xc8>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d007      	beq.n	8009144 <TIM_OC4_SetConfig+0x80>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a16      	ldr	r2, [pc, #88]	; (8009190 <TIM_OC4_SetConfig+0xcc>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d003      	beq.n	8009144 <TIM_OC4_SetConfig+0x80>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a15      	ldr	r2, [pc, #84]	; (8009194 <TIM_OC4_SetConfig+0xd0>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d109      	bne.n	8009158 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800914a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	019b      	lsls	r3, r3, #6
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	4313      	orrs	r3, r2
 8009156:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	685a      	ldr	r2, [r3, #4]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	621a      	str	r2, [r3, #32]
}
 8009172:	bf00      	nop
 8009174:	371c      	adds	r7, #28
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	feff8fff 	.word	0xfeff8fff
 8009184:	40010000 	.word	0x40010000
 8009188:	40010400 	.word	0x40010400
 800918c:	40014000 	.word	0x40014000
 8009190:	40014400 	.word	0x40014400
 8009194:	40014800 	.word	0x40014800

08009198 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009198:	b480      	push	{r7}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	4b21      	ldr	r3, [pc, #132]	; (8009248 <TIM_OC5_SetConfig+0xb0>)
 80091c4:	4013      	ands	r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80091d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	041b      	lsls	r3, r3, #16
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a18      	ldr	r2, [pc, #96]	; (800924c <TIM_OC5_SetConfig+0xb4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d00f      	beq.n	800920e <TIM_OC5_SetConfig+0x76>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a17      	ldr	r2, [pc, #92]	; (8009250 <TIM_OC5_SetConfig+0xb8>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d00b      	beq.n	800920e <TIM_OC5_SetConfig+0x76>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a16      	ldr	r2, [pc, #88]	; (8009254 <TIM_OC5_SetConfig+0xbc>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d007      	beq.n	800920e <TIM_OC5_SetConfig+0x76>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a15      	ldr	r2, [pc, #84]	; (8009258 <TIM_OC5_SetConfig+0xc0>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d003      	beq.n	800920e <TIM_OC5_SetConfig+0x76>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a14      	ldr	r2, [pc, #80]	; (800925c <TIM_OC5_SetConfig+0xc4>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d109      	bne.n	8009222 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009214:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	021b      	lsls	r3, r3, #8
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	4313      	orrs	r3, r2
 8009220:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	697a      	ldr	r2, [r7, #20]
 8009226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	621a      	str	r2, [r3, #32]
}
 800923c:	bf00      	nop
 800923e:	371c      	adds	r7, #28
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	fffeff8f 	.word	0xfffeff8f
 800924c:	40010000 	.word	0x40010000
 8009250:	40010400 	.word	0x40010400
 8009254:	40014000 	.word	0x40014000
 8009258:	40014400 	.word	0x40014400
 800925c:	40014800 	.word	0x40014800

08009260 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009260:	b480      	push	{r7}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a1b      	ldr	r3, [r3, #32]
 800926e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	4b22      	ldr	r3, [pc, #136]	; (8009314 <TIM_OC6_SetConfig+0xb4>)
 800928c:	4013      	ands	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	021b      	lsls	r3, r3, #8
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	4313      	orrs	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	051b      	lsls	r3, r3, #20
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a19      	ldr	r2, [pc, #100]	; (8009318 <TIM_OC6_SetConfig+0xb8>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d00f      	beq.n	80092d8 <TIM_OC6_SetConfig+0x78>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a18      	ldr	r2, [pc, #96]	; (800931c <TIM_OC6_SetConfig+0xbc>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d00b      	beq.n	80092d8 <TIM_OC6_SetConfig+0x78>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a17      	ldr	r2, [pc, #92]	; (8009320 <TIM_OC6_SetConfig+0xc0>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d007      	beq.n	80092d8 <TIM_OC6_SetConfig+0x78>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a16      	ldr	r2, [pc, #88]	; (8009324 <TIM_OC6_SetConfig+0xc4>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d003      	beq.n	80092d8 <TIM_OC6_SetConfig+0x78>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a15      	ldr	r2, [pc, #84]	; (8009328 <TIM_OC6_SetConfig+0xc8>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d109      	bne.n	80092ec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	029b      	lsls	r3, r3, #10
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	621a      	str	r2, [r3, #32]
}
 8009306:	bf00      	nop
 8009308:	371c      	adds	r7, #28
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	feff8fff 	.word	0xfeff8fff
 8009318:	40010000 	.word	0x40010000
 800931c:	40010400 	.word	0x40010400
 8009320:	40014000 	.word	0x40014000
 8009324:	40014400 	.word	0x40014400
 8009328:	40014800 	.word	0x40014800

0800932c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800932c:	b480      	push	{r7}
 800932e:	b087      	sub	sp, #28
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6a1b      	ldr	r3, [r3, #32]
 800933c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	f023 0201 	bic.w	r2, r3, #1
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	4313      	orrs	r3, r2
 8009360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	f023 030a 	bic.w	r3, r3, #10
 8009368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	4313      	orrs	r3, r2
 8009370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	621a      	str	r2, [r3, #32]
}
 800937e:	bf00      	nop
 8009380:	371c      	adds	r7, #28
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr

0800938a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800938a:	b480      	push	{r7}
 800938c:	b087      	sub	sp, #28
 800938e:	af00      	add	r7, sp, #0
 8009390:	60f8      	str	r0, [r7, #12]
 8009392:	60b9      	str	r1, [r7, #8]
 8009394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	f023 0210 	bic.w	r2, r3, #16
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6a1b      	ldr	r3, [r3, #32]
 80093ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	031b      	lsls	r3, r3, #12
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	4313      	orrs	r3, r2
 80093be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	011b      	lsls	r3, r3, #4
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	697a      	ldr	r2, [r7, #20]
 80093d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	621a      	str	r2, [r3, #32]
}
 80093de:	bf00      	nop
 80093e0:	371c      	adds	r7, #28
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
	...

080093ec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	4b09      	ldr	r3, [pc, #36]	; (8009424 <TIM_ITRx_SetConfig+0x38>)
 8009400:	4013      	ands	r3, r2
 8009402:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	4313      	orrs	r3, r2
 800940a:	f043 0307 	orr.w	r3, r3, #7
 800940e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	609a      	str	r2, [r3, #8]
}
 8009416:	bf00      	nop
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	ffcfff8f 	.word	0xffcfff8f

08009428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
 8009434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	021a      	lsls	r2, r3, #8
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	431a      	orrs	r2, r3
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4313      	orrs	r3, r2
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	4313      	orrs	r3, r2
 8009454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	609a      	str	r2, [r3, #8]
}
 800945c:	bf00      	nop
 800945e:	371c      	adds	r7, #28
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009468:	b480      	push	{r7}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f003 031f 	and.w	r3, r3, #31
 800947a:	2201      	movs	r2, #1
 800947c:	fa02 f303 	lsl.w	r3, r2, r3
 8009480:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6a1a      	ldr	r2, [r3, #32]
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	43db      	mvns	r3, r3
 800948a:	401a      	ands	r2, r3
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6a1a      	ldr	r2, [r3, #32]
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	f003 031f 	and.w	r3, r3, #31
 800949a:	6879      	ldr	r1, [r7, #4]
 800949c:	fa01 f303 	lsl.w	r3, r1, r3
 80094a0:	431a      	orrs	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	621a      	str	r2, [r3, #32]
}
 80094a6:	bf00      	nop
 80094a8:	371c      	adds	r7, #28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
	...

080094b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d101      	bne.n	80094cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094c8:	2302      	movs	r3, #2
 80094ca:	e06d      	b.n	80095a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2202      	movs	r2, #2
 80094d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a30      	ldr	r2, [pc, #192]	; (80095b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d004      	beq.n	8009500 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a2f      	ldr	r2, [pc, #188]	; (80095b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d108      	bne.n	8009512 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009506:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	4313      	orrs	r3, r2
 8009510:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009518:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	4313      	orrs	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a20      	ldr	r2, [pc, #128]	; (80095b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d022      	beq.n	800957c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800953e:	d01d      	beq.n	800957c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a1d      	ldr	r2, [pc, #116]	; (80095bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d018      	beq.n	800957c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a1c      	ldr	r2, [pc, #112]	; (80095c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d013      	beq.n	800957c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a1a      	ldr	r2, [pc, #104]	; (80095c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d00e      	beq.n	800957c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a15      	ldr	r2, [pc, #84]	; (80095b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d009      	beq.n	800957c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a16      	ldr	r2, [pc, #88]	; (80095c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d004      	beq.n	800957c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a15      	ldr	r2, [pc, #84]	; (80095cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d10c      	bne.n	8009596 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009582:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	4313      	orrs	r3, r2
 800958c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr
 80095b4:	40010000 	.word	0x40010000
 80095b8:	40010400 	.word	0x40010400
 80095bc:	40000400 	.word	0x40000400
 80095c0:	40000800 	.word	0x40000800
 80095c4:	40000c00 	.word	0x40000c00
 80095c8:	40001800 	.word	0x40001800
 80095cc:	40014000 	.word	0x40014000

080095d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80095da:	2300      	movs	r3, #0
 80095dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d101      	bne.n	80095ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80095e8:	2302      	movs	r3, #2
 80095ea:	e065      	b.n	80096b8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	4313      	orrs	r3, r2
 8009600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	4313      	orrs	r3, r2
 800960e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	4313      	orrs	r3, r2
 800961c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4313      	orrs	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	4313      	orrs	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	695b      	ldr	r3, [r3, #20]
 8009644:	4313      	orrs	r3, r2
 8009646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009652:	4313      	orrs	r3, r2
 8009654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	041b      	lsls	r3, r3, #16
 8009662:	4313      	orrs	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a16      	ldr	r2, [pc, #88]	; (80096c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d004      	beq.n	800967a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a14      	ldr	r2, [pc, #80]	; (80096c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d115      	bne.n	80096a6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009684:	051b      	lsls	r3, r3, #20
 8009686:	4313      	orrs	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	4313      	orrs	r3, r2
 8009696:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	40010000 	.word	0x40010000
 80096c8:	40010400 	.word	0x40010400

080096cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e042      	b.n	8009764 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d106      	bne.n	80096f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7f8 f9f9 	bl	8001ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2224      	movs	r2, #36	; 0x24
 80096fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f022 0201 	bic.w	r2, r2, #1
 800970c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f8c2 	bl	8009898 <UART_SetConfig>
 8009714:	4603      	mov	r3, r0
 8009716:	2b01      	cmp	r3, #1
 8009718:	d101      	bne.n	800971e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e022      	b.n	8009764 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009722:	2b00      	cmp	r3, #0
 8009724:	d002      	beq.n	800972c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fe1e 	bl	800a368 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800973a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689a      	ldr	r2, [r3, #8]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800974a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f042 0201 	orr.w	r2, r2, #1
 800975a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fea5 	bl	800a4ac <UART_CheckIdleState>
 8009762:	4603      	mov	r3, r0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b08a      	sub	sp, #40	; 0x28
 8009770:	af02      	add	r7, sp, #8
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	603b      	str	r3, [r7, #0]
 8009778:	4613      	mov	r3, r2
 800977a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009782:	2b20      	cmp	r3, #32
 8009784:	f040 8083 	bne.w	800988e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d002      	beq.n	8009794 <HAL_UART_Transmit+0x28>
 800978e:	88fb      	ldrh	r3, [r7, #6]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e07b      	b.n	8009890 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d101      	bne.n	80097a6 <HAL_UART_Transmit+0x3a>
 80097a2:	2302      	movs	r3, #2
 80097a4:	e074      	b.n	8009890 <HAL_UART_Transmit+0x124>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2221      	movs	r2, #33	; 0x21
 80097ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097be:	f7f8 faa7 	bl	8001d10 <HAL_GetTick>
 80097c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	88fa      	ldrh	r2, [r7, #6]
 80097c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	88fa      	ldrh	r2, [r7, #6]
 80097d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097dc:	d108      	bne.n	80097f0 <HAL_UART_Transmit+0x84>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d104      	bne.n	80097f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80097e6:	2300      	movs	r3, #0
 80097e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	61bb      	str	r3, [r7, #24]
 80097ee:	e003      	b.n	80097f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097f4:	2300      	movs	r3, #0
 80097f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009800:	e02c      	b.n	800985c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2200      	movs	r2, #0
 800980a:	2180      	movs	r1, #128	; 0x80
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 fe98 	bl	800a542 <UART_WaitOnFlagUntilTimeout>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e039      	b.n	8009890 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10b      	bne.n	800983a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	881b      	ldrh	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009830:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	3302      	adds	r3, #2
 8009836:	61bb      	str	r3, [r7, #24]
 8009838:	e007      	b.n	800984a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	781a      	ldrb	r2, [r3, #0]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	3301      	adds	r3, #1
 8009848:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009850:	b29b      	uxth	r3, r3
 8009852:	3b01      	subs	r3, #1
 8009854:	b29a      	uxth	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009862:	b29b      	uxth	r3, r3
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1cc      	bne.n	8009802 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	2200      	movs	r2, #0
 8009870:	2140      	movs	r1, #64	; 0x40
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 fe65 	bl	800a542 <UART_WaitOnFlagUntilTimeout>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800987e:	2303      	movs	r3, #3
 8009880:	e006      	b.n	8009890 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2220      	movs	r2, #32
 8009886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	e000      	b.n	8009890 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800988e:	2302      	movs	r3, #2
  }
}
 8009890:	4618      	mov	r0, r3
 8009892:	3720      	adds	r7, #32
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800989c:	b092      	sub	sp, #72	; 0x48
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	431a      	orrs	r2, r3
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	431a      	orrs	r2, r3
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	4313      	orrs	r3, r2
 80098be:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	4bbe      	ldr	r3, [pc, #760]	; (8009bc0 <UART_SetConfig+0x328>)
 80098c8:	4013      	ands	r3, r2
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	6812      	ldr	r2, [r2, #0]
 80098ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80098d0:	430b      	orrs	r3, r1
 80098d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	68da      	ldr	r2, [r3, #12]
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4ab3      	ldr	r2, [pc, #716]	; (8009bc4 <UART_SetConfig+0x32c>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d004      	beq.n	8009904 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009900:	4313      	orrs	r3, r2
 8009902:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689a      	ldr	r2, [r3, #8]
 800990a:	4baf      	ldr	r3, [pc, #700]	; (8009bc8 <UART_SetConfig+0x330>)
 800990c:	4013      	ands	r3, r2
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	6812      	ldr	r2, [r2, #0]
 8009912:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009914:	430b      	orrs	r3, r1
 8009916:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991e:	f023 010f 	bic.w	r1, r3, #15
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	430a      	orrs	r2, r1
 800992c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4aa6      	ldr	r2, [pc, #664]	; (8009bcc <UART_SetConfig+0x334>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d177      	bne.n	8009a28 <UART_SetConfig+0x190>
 8009938:	4ba5      	ldr	r3, [pc, #660]	; (8009bd0 <UART_SetConfig+0x338>)
 800993a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009940:	2b28      	cmp	r3, #40	; 0x28
 8009942:	d86d      	bhi.n	8009a20 <UART_SetConfig+0x188>
 8009944:	a201      	add	r2, pc, #4	; (adr r2, 800994c <UART_SetConfig+0xb4>)
 8009946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994a:	bf00      	nop
 800994c:	080099f1 	.word	0x080099f1
 8009950:	08009a21 	.word	0x08009a21
 8009954:	08009a21 	.word	0x08009a21
 8009958:	08009a21 	.word	0x08009a21
 800995c:	08009a21 	.word	0x08009a21
 8009960:	08009a21 	.word	0x08009a21
 8009964:	08009a21 	.word	0x08009a21
 8009968:	08009a21 	.word	0x08009a21
 800996c:	080099f9 	.word	0x080099f9
 8009970:	08009a21 	.word	0x08009a21
 8009974:	08009a21 	.word	0x08009a21
 8009978:	08009a21 	.word	0x08009a21
 800997c:	08009a21 	.word	0x08009a21
 8009980:	08009a21 	.word	0x08009a21
 8009984:	08009a21 	.word	0x08009a21
 8009988:	08009a21 	.word	0x08009a21
 800998c:	08009a01 	.word	0x08009a01
 8009990:	08009a21 	.word	0x08009a21
 8009994:	08009a21 	.word	0x08009a21
 8009998:	08009a21 	.word	0x08009a21
 800999c:	08009a21 	.word	0x08009a21
 80099a0:	08009a21 	.word	0x08009a21
 80099a4:	08009a21 	.word	0x08009a21
 80099a8:	08009a21 	.word	0x08009a21
 80099ac:	08009a09 	.word	0x08009a09
 80099b0:	08009a21 	.word	0x08009a21
 80099b4:	08009a21 	.word	0x08009a21
 80099b8:	08009a21 	.word	0x08009a21
 80099bc:	08009a21 	.word	0x08009a21
 80099c0:	08009a21 	.word	0x08009a21
 80099c4:	08009a21 	.word	0x08009a21
 80099c8:	08009a21 	.word	0x08009a21
 80099cc:	08009a11 	.word	0x08009a11
 80099d0:	08009a21 	.word	0x08009a21
 80099d4:	08009a21 	.word	0x08009a21
 80099d8:	08009a21 	.word	0x08009a21
 80099dc:	08009a21 	.word	0x08009a21
 80099e0:	08009a21 	.word	0x08009a21
 80099e4:	08009a21 	.word	0x08009a21
 80099e8:	08009a21 	.word	0x08009a21
 80099ec:	08009a19 	.word	0x08009a19
 80099f0:	2301      	movs	r3, #1
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099f6:	e222      	b.n	8009e3e <UART_SetConfig+0x5a6>
 80099f8:	2304      	movs	r3, #4
 80099fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099fe:	e21e      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009a00:	2308      	movs	r3, #8
 8009a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a06:	e21a      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009a08:	2310      	movs	r3, #16
 8009a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a0e:	e216      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009a10:	2320      	movs	r3, #32
 8009a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a16:	e212      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009a18:	2340      	movs	r3, #64	; 0x40
 8009a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a1e:	e20e      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009a20:	2380      	movs	r3, #128	; 0x80
 8009a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a26:	e20a      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a69      	ldr	r2, [pc, #420]	; (8009bd4 <UART_SetConfig+0x33c>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d130      	bne.n	8009a94 <UART_SetConfig+0x1fc>
 8009a32:	4b67      	ldr	r3, [pc, #412]	; (8009bd0 <UART_SetConfig+0x338>)
 8009a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a36:	f003 0307 	and.w	r3, r3, #7
 8009a3a:	2b05      	cmp	r3, #5
 8009a3c:	d826      	bhi.n	8009a8c <UART_SetConfig+0x1f4>
 8009a3e:	a201      	add	r2, pc, #4	; (adr r2, 8009a44 <UART_SetConfig+0x1ac>)
 8009a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a44:	08009a5d 	.word	0x08009a5d
 8009a48:	08009a65 	.word	0x08009a65
 8009a4c:	08009a6d 	.word	0x08009a6d
 8009a50:	08009a75 	.word	0x08009a75
 8009a54:	08009a7d 	.word	0x08009a7d
 8009a58:	08009a85 	.word	0x08009a85
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a62:	e1ec      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009a64:	2304      	movs	r3, #4
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6a:	e1e8      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009a6c:	2308      	movs	r3, #8
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a72:	e1e4      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009a74:	2310      	movs	r3, #16
 8009a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7a:	e1e0      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009a7c:	2320      	movs	r3, #32
 8009a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a82:	e1dc      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009a84:	2340      	movs	r3, #64	; 0x40
 8009a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a8a:	e1d8      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009a8c:	2380      	movs	r3, #128	; 0x80
 8009a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a92:	e1d4      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a4f      	ldr	r2, [pc, #316]	; (8009bd8 <UART_SetConfig+0x340>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d130      	bne.n	8009b00 <UART_SetConfig+0x268>
 8009a9e:	4b4c      	ldr	r3, [pc, #304]	; (8009bd0 <UART_SetConfig+0x338>)
 8009aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aa2:	f003 0307 	and.w	r3, r3, #7
 8009aa6:	2b05      	cmp	r3, #5
 8009aa8:	d826      	bhi.n	8009af8 <UART_SetConfig+0x260>
 8009aaa:	a201      	add	r2, pc, #4	; (adr r2, 8009ab0 <UART_SetConfig+0x218>)
 8009aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab0:	08009ac9 	.word	0x08009ac9
 8009ab4:	08009ad1 	.word	0x08009ad1
 8009ab8:	08009ad9 	.word	0x08009ad9
 8009abc:	08009ae1 	.word	0x08009ae1
 8009ac0:	08009ae9 	.word	0x08009ae9
 8009ac4:	08009af1 	.word	0x08009af1
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ace:	e1b6      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009ad0:	2304      	movs	r3, #4
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad6:	e1b2      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009ad8:	2308      	movs	r3, #8
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ade:	e1ae      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009ae0:	2310      	movs	r3, #16
 8009ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae6:	e1aa      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009ae8:	2320      	movs	r3, #32
 8009aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aee:	e1a6      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009af0:	2340      	movs	r3, #64	; 0x40
 8009af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af6:	e1a2      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009af8:	2380      	movs	r3, #128	; 0x80
 8009afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afe:	e19e      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a35      	ldr	r2, [pc, #212]	; (8009bdc <UART_SetConfig+0x344>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d130      	bne.n	8009b6c <UART_SetConfig+0x2d4>
 8009b0a:	4b31      	ldr	r3, [pc, #196]	; (8009bd0 <UART_SetConfig+0x338>)
 8009b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b0e:	f003 0307 	and.w	r3, r3, #7
 8009b12:	2b05      	cmp	r3, #5
 8009b14:	d826      	bhi.n	8009b64 <UART_SetConfig+0x2cc>
 8009b16:	a201      	add	r2, pc, #4	; (adr r2, 8009b1c <UART_SetConfig+0x284>)
 8009b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1c:	08009b35 	.word	0x08009b35
 8009b20:	08009b3d 	.word	0x08009b3d
 8009b24:	08009b45 	.word	0x08009b45
 8009b28:	08009b4d 	.word	0x08009b4d
 8009b2c:	08009b55 	.word	0x08009b55
 8009b30:	08009b5d 	.word	0x08009b5d
 8009b34:	2300      	movs	r3, #0
 8009b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b3a:	e180      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009b3c:	2304      	movs	r3, #4
 8009b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b42:	e17c      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009b44:	2308      	movs	r3, #8
 8009b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b4a:	e178      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009b4c:	2310      	movs	r3, #16
 8009b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b52:	e174      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009b54:	2320      	movs	r3, #32
 8009b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5a:	e170      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009b5c:	2340      	movs	r3, #64	; 0x40
 8009b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b62:	e16c      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009b64:	2380      	movs	r3, #128	; 0x80
 8009b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6a:	e168      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a1b      	ldr	r2, [pc, #108]	; (8009be0 <UART_SetConfig+0x348>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d142      	bne.n	8009bfc <UART_SetConfig+0x364>
 8009b76:	4b16      	ldr	r3, [pc, #88]	; (8009bd0 <UART_SetConfig+0x338>)
 8009b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7a:	f003 0307 	and.w	r3, r3, #7
 8009b7e:	2b05      	cmp	r3, #5
 8009b80:	d838      	bhi.n	8009bf4 <UART_SetConfig+0x35c>
 8009b82:	a201      	add	r2, pc, #4	; (adr r2, 8009b88 <UART_SetConfig+0x2f0>)
 8009b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b88:	08009ba1 	.word	0x08009ba1
 8009b8c:	08009ba9 	.word	0x08009ba9
 8009b90:	08009bb1 	.word	0x08009bb1
 8009b94:	08009bb9 	.word	0x08009bb9
 8009b98:	08009be5 	.word	0x08009be5
 8009b9c:	08009bed 	.word	0x08009bed
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ba6:	e14a      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009ba8:	2304      	movs	r3, #4
 8009baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bae:	e146      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009bb0:	2308      	movs	r3, #8
 8009bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bb6:	e142      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009bb8:	2310      	movs	r3, #16
 8009bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bbe:	e13e      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009bc0:	cfff69f3 	.word	0xcfff69f3
 8009bc4:	58000c00 	.word	0x58000c00
 8009bc8:	11fff4ff 	.word	0x11fff4ff
 8009bcc:	40011000 	.word	0x40011000
 8009bd0:	58024400 	.word	0x58024400
 8009bd4:	40004400 	.word	0x40004400
 8009bd8:	40004800 	.word	0x40004800
 8009bdc:	40004c00 	.word	0x40004c00
 8009be0:	40005000 	.word	0x40005000
 8009be4:	2320      	movs	r3, #32
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bea:	e128      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009bec:	2340      	movs	r3, #64	; 0x40
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf2:	e124      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009bf4:	2380      	movs	r3, #128	; 0x80
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfa:	e120      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4acb      	ldr	r2, [pc, #812]	; (8009f30 <UART_SetConfig+0x698>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d176      	bne.n	8009cf4 <UART_SetConfig+0x45c>
 8009c06:	4bcb      	ldr	r3, [pc, #812]	; (8009f34 <UART_SetConfig+0x69c>)
 8009c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c0e:	2b28      	cmp	r3, #40	; 0x28
 8009c10:	d86c      	bhi.n	8009cec <UART_SetConfig+0x454>
 8009c12:	a201      	add	r2, pc, #4	; (adr r2, 8009c18 <UART_SetConfig+0x380>)
 8009c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c18:	08009cbd 	.word	0x08009cbd
 8009c1c:	08009ced 	.word	0x08009ced
 8009c20:	08009ced 	.word	0x08009ced
 8009c24:	08009ced 	.word	0x08009ced
 8009c28:	08009ced 	.word	0x08009ced
 8009c2c:	08009ced 	.word	0x08009ced
 8009c30:	08009ced 	.word	0x08009ced
 8009c34:	08009ced 	.word	0x08009ced
 8009c38:	08009cc5 	.word	0x08009cc5
 8009c3c:	08009ced 	.word	0x08009ced
 8009c40:	08009ced 	.word	0x08009ced
 8009c44:	08009ced 	.word	0x08009ced
 8009c48:	08009ced 	.word	0x08009ced
 8009c4c:	08009ced 	.word	0x08009ced
 8009c50:	08009ced 	.word	0x08009ced
 8009c54:	08009ced 	.word	0x08009ced
 8009c58:	08009ccd 	.word	0x08009ccd
 8009c5c:	08009ced 	.word	0x08009ced
 8009c60:	08009ced 	.word	0x08009ced
 8009c64:	08009ced 	.word	0x08009ced
 8009c68:	08009ced 	.word	0x08009ced
 8009c6c:	08009ced 	.word	0x08009ced
 8009c70:	08009ced 	.word	0x08009ced
 8009c74:	08009ced 	.word	0x08009ced
 8009c78:	08009cd5 	.word	0x08009cd5
 8009c7c:	08009ced 	.word	0x08009ced
 8009c80:	08009ced 	.word	0x08009ced
 8009c84:	08009ced 	.word	0x08009ced
 8009c88:	08009ced 	.word	0x08009ced
 8009c8c:	08009ced 	.word	0x08009ced
 8009c90:	08009ced 	.word	0x08009ced
 8009c94:	08009ced 	.word	0x08009ced
 8009c98:	08009cdd 	.word	0x08009cdd
 8009c9c:	08009ced 	.word	0x08009ced
 8009ca0:	08009ced 	.word	0x08009ced
 8009ca4:	08009ced 	.word	0x08009ced
 8009ca8:	08009ced 	.word	0x08009ced
 8009cac:	08009ced 	.word	0x08009ced
 8009cb0:	08009ced 	.word	0x08009ced
 8009cb4:	08009ced 	.word	0x08009ced
 8009cb8:	08009ce5 	.word	0x08009ce5
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cc2:	e0bc      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009cc4:	2304      	movs	r3, #4
 8009cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cca:	e0b8      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009ccc:	2308      	movs	r3, #8
 8009cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd2:	e0b4      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009cd4:	2310      	movs	r3, #16
 8009cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cda:	e0b0      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009cdc:	2320      	movs	r3, #32
 8009cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce2:	e0ac      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009ce4:	2340      	movs	r3, #64	; 0x40
 8009ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cea:	e0a8      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009cec:	2380      	movs	r3, #128	; 0x80
 8009cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf2:	e0a4      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a8f      	ldr	r2, [pc, #572]	; (8009f38 <UART_SetConfig+0x6a0>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d130      	bne.n	8009d60 <UART_SetConfig+0x4c8>
 8009cfe:	4b8d      	ldr	r3, [pc, #564]	; (8009f34 <UART_SetConfig+0x69c>)
 8009d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d02:	f003 0307 	and.w	r3, r3, #7
 8009d06:	2b05      	cmp	r3, #5
 8009d08:	d826      	bhi.n	8009d58 <UART_SetConfig+0x4c0>
 8009d0a:	a201      	add	r2, pc, #4	; (adr r2, 8009d10 <UART_SetConfig+0x478>)
 8009d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d10:	08009d29 	.word	0x08009d29
 8009d14:	08009d31 	.word	0x08009d31
 8009d18:	08009d39 	.word	0x08009d39
 8009d1c:	08009d41 	.word	0x08009d41
 8009d20:	08009d49 	.word	0x08009d49
 8009d24:	08009d51 	.word	0x08009d51
 8009d28:	2300      	movs	r3, #0
 8009d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d2e:	e086      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009d30:	2304      	movs	r3, #4
 8009d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d36:	e082      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009d38:	2308      	movs	r3, #8
 8009d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d3e:	e07e      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009d40:	2310      	movs	r3, #16
 8009d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d46:	e07a      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009d48:	2320      	movs	r3, #32
 8009d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d4e:	e076      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009d50:	2340      	movs	r3, #64	; 0x40
 8009d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d56:	e072      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009d58:	2380      	movs	r3, #128	; 0x80
 8009d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d5e:	e06e      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a75      	ldr	r2, [pc, #468]	; (8009f3c <UART_SetConfig+0x6a4>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d130      	bne.n	8009dcc <UART_SetConfig+0x534>
 8009d6a:	4b72      	ldr	r3, [pc, #456]	; (8009f34 <UART_SetConfig+0x69c>)
 8009d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6e:	f003 0307 	and.w	r3, r3, #7
 8009d72:	2b05      	cmp	r3, #5
 8009d74:	d826      	bhi.n	8009dc4 <UART_SetConfig+0x52c>
 8009d76:	a201      	add	r2, pc, #4	; (adr r2, 8009d7c <UART_SetConfig+0x4e4>)
 8009d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7c:	08009d95 	.word	0x08009d95
 8009d80:	08009d9d 	.word	0x08009d9d
 8009d84:	08009da5 	.word	0x08009da5
 8009d88:	08009dad 	.word	0x08009dad
 8009d8c:	08009db5 	.word	0x08009db5
 8009d90:	08009dbd 	.word	0x08009dbd
 8009d94:	2300      	movs	r3, #0
 8009d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d9a:	e050      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009da2:	e04c      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009da4:	2308      	movs	r3, #8
 8009da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009daa:	e048      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009dac:	2310      	movs	r3, #16
 8009dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009db2:	e044      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009db4:	2320      	movs	r3, #32
 8009db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dba:	e040      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009dbc:	2340      	movs	r3, #64	; 0x40
 8009dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dc2:	e03c      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009dc4:	2380      	movs	r3, #128	; 0x80
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dca:	e038      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a5b      	ldr	r2, [pc, #364]	; (8009f40 <UART_SetConfig+0x6a8>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d130      	bne.n	8009e38 <UART_SetConfig+0x5a0>
 8009dd6:	4b57      	ldr	r3, [pc, #348]	; (8009f34 <UART_SetConfig+0x69c>)
 8009dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dda:	f003 0307 	and.w	r3, r3, #7
 8009dde:	2b05      	cmp	r3, #5
 8009de0:	d826      	bhi.n	8009e30 <UART_SetConfig+0x598>
 8009de2:	a201      	add	r2, pc, #4	; (adr r2, 8009de8 <UART_SetConfig+0x550>)
 8009de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de8:	08009e01 	.word	0x08009e01
 8009dec:	08009e09 	.word	0x08009e09
 8009df0:	08009e11 	.word	0x08009e11
 8009df4:	08009e19 	.word	0x08009e19
 8009df8:	08009e21 	.word	0x08009e21
 8009dfc:	08009e29 	.word	0x08009e29
 8009e00:	2302      	movs	r3, #2
 8009e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e06:	e01a      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e0e:	e016      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009e10:	2308      	movs	r3, #8
 8009e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e16:	e012      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009e18:	2310      	movs	r3, #16
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e1e:	e00e      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009e20:	2320      	movs	r3, #32
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e26:	e00a      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009e28:	2340      	movs	r3, #64	; 0x40
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2e:	e006      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009e30:	2380      	movs	r3, #128	; 0x80
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e36:	e002      	b.n	8009e3e <UART_SetConfig+0x5a6>
 8009e38:	2380      	movs	r3, #128	; 0x80
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a3f      	ldr	r2, [pc, #252]	; (8009f40 <UART_SetConfig+0x6a8>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	f040 80f8 	bne.w	800a03a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009e4e:	2b20      	cmp	r3, #32
 8009e50:	dc46      	bgt.n	8009ee0 <UART_SetConfig+0x648>
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	f2c0 8082 	blt.w	8009f5c <UART_SetConfig+0x6c4>
 8009e58:	3b02      	subs	r3, #2
 8009e5a:	2b1e      	cmp	r3, #30
 8009e5c:	d87e      	bhi.n	8009f5c <UART_SetConfig+0x6c4>
 8009e5e:	a201      	add	r2, pc, #4	; (adr r2, 8009e64 <UART_SetConfig+0x5cc>)
 8009e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e64:	08009ee7 	.word	0x08009ee7
 8009e68:	08009f5d 	.word	0x08009f5d
 8009e6c:	08009eef 	.word	0x08009eef
 8009e70:	08009f5d 	.word	0x08009f5d
 8009e74:	08009f5d 	.word	0x08009f5d
 8009e78:	08009f5d 	.word	0x08009f5d
 8009e7c:	08009eff 	.word	0x08009eff
 8009e80:	08009f5d 	.word	0x08009f5d
 8009e84:	08009f5d 	.word	0x08009f5d
 8009e88:	08009f5d 	.word	0x08009f5d
 8009e8c:	08009f5d 	.word	0x08009f5d
 8009e90:	08009f5d 	.word	0x08009f5d
 8009e94:	08009f5d 	.word	0x08009f5d
 8009e98:	08009f5d 	.word	0x08009f5d
 8009e9c:	08009f0f 	.word	0x08009f0f
 8009ea0:	08009f5d 	.word	0x08009f5d
 8009ea4:	08009f5d 	.word	0x08009f5d
 8009ea8:	08009f5d 	.word	0x08009f5d
 8009eac:	08009f5d 	.word	0x08009f5d
 8009eb0:	08009f5d 	.word	0x08009f5d
 8009eb4:	08009f5d 	.word	0x08009f5d
 8009eb8:	08009f5d 	.word	0x08009f5d
 8009ebc:	08009f5d 	.word	0x08009f5d
 8009ec0:	08009f5d 	.word	0x08009f5d
 8009ec4:	08009f5d 	.word	0x08009f5d
 8009ec8:	08009f5d 	.word	0x08009f5d
 8009ecc:	08009f5d 	.word	0x08009f5d
 8009ed0:	08009f5d 	.word	0x08009f5d
 8009ed4:	08009f5d 	.word	0x08009f5d
 8009ed8:	08009f5d 	.word	0x08009f5d
 8009edc:	08009f4f 	.word	0x08009f4f
 8009ee0:	2b40      	cmp	r3, #64	; 0x40
 8009ee2:	d037      	beq.n	8009f54 <UART_SetConfig+0x6bc>
 8009ee4:	e03a      	b.n	8009f5c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009ee6:	f7fd fc49 	bl	800777c <HAL_RCCEx_GetD3PCLK1Freq>
 8009eea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009eec:	e03c      	b.n	8009f68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fd fc58 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009efc:	e034      	b.n	8009f68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009efe:	f107 0318 	add.w	r3, r7, #24
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fd fda4 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f0c:	e02c      	b.n	8009f68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f0e:	4b09      	ldr	r3, [pc, #36]	; (8009f34 <UART_SetConfig+0x69c>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f003 0320 	and.w	r3, r3, #32
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d016      	beq.n	8009f48 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f1a:	4b06      	ldr	r3, [pc, #24]	; (8009f34 <UART_SetConfig+0x69c>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	08db      	lsrs	r3, r3, #3
 8009f20:	f003 0303 	and.w	r3, r3, #3
 8009f24:	4a07      	ldr	r2, [pc, #28]	; (8009f44 <UART_SetConfig+0x6ac>)
 8009f26:	fa22 f303 	lsr.w	r3, r2, r3
 8009f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f2c:	e01c      	b.n	8009f68 <UART_SetConfig+0x6d0>
 8009f2e:	bf00      	nop
 8009f30:	40011400 	.word	0x40011400
 8009f34:	58024400 	.word	0x58024400
 8009f38:	40007800 	.word	0x40007800
 8009f3c:	40007c00 	.word	0x40007c00
 8009f40:	58000c00 	.word	0x58000c00
 8009f44:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009f48:	4b9d      	ldr	r3, [pc, #628]	; (800a1c0 <UART_SetConfig+0x928>)
 8009f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f4c:	e00c      	b.n	8009f68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f4e:	4b9d      	ldr	r3, [pc, #628]	; (800a1c4 <UART_SetConfig+0x92c>)
 8009f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f52:	e009      	b.n	8009f68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f5a:	e005      	b.n	8009f68 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009f66:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 81de 	beq.w	800a32c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	4a94      	ldr	r2, [pc, #592]	; (800a1c8 <UART_SetConfig+0x930>)
 8009f76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f82:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	005b      	lsls	r3, r3, #1
 8009f8c:	4413      	add	r3, r2
 8009f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d305      	bcc.n	8009fa0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d903      	bls.n	8009fa8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009fa6:	e1c1      	b.n	800a32c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009faa:	2200      	movs	r2, #0
 8009fac:	60bb      	str	r3, [r7, #8]
 8009fae:	60fa      	str	r2, [r7, #12]
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb4:	4a84      	ldr	r2, [pc, #528]	; (800a1c8 <UART_SetConfig+0x930>)
 8009fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	603b      	str	r3, [r7, #0]
 8009fc0:	607a      	str	r2, [r7, #4]
 8009fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009fca:	f7f6 f9d9 	bl	8000380 <__aeabi_uldivmod>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	4610      	mov	r0, r2
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	f04f 0200 	mov.w	r2, #0
 8009fda:	f04f 0300 	mov.w	r3, #0
 8009fde:	020b      	lsls	r3, r1, #8
 8009fe0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009fe4:	0202      	lsls	r2, r0, #8
 8009fe6:	6979      	ldr	r1, [r7, #20]
 8009fe8:	6849      	ldr	r1, [r1, #4]
 8009fea:	0849      	lsrs	r1, r1, #1
 8009fec:	2000      	movs	r0, #0
 8009fee:	460c      	mov	r4, r1
 8009ff0:	4605      	mov	r5, r0
 8009ff2:	eb12 0804 	adds.w	r8, r2, r4
 8009ff6:	eb43 0905 	adc.w	r9, r3, r5
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	469a      	mov	sl, r3
 800a002:	4693      	mov	fp, r2
 800a004:	4652      	mov	r2, sl
 800a006:	465b      	mov	r3, fp
 800a008:	4640      	mov	r0, r8
 800a00a:	4649      	mov	r1, r9
 800a00c:	f7f6 f9b8 	bl	8000380 <__aeabi_uldivmod>
 800a010:	4602      	mov	r2, r0
 800a012:	460b      	mov	r3, r1
 800a014:	4613      	mov	r3, r2
 800a016:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a01e:	d308      	bcc.n	800a032 <UART_SetConfig+0x79a>
 800a020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a026:	d204      	bcs.n	800a032 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a02e:	60da      	str	r2, [r3, #12]
 800a030:	e17c      	b.n	800a32c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a038:	e178      	b.n	800a32c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a042:	f040 80c5 	bne.w	800a1d0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a046:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a04a:	2b20      	cmp	r3, #32
 800a04c:	dc48      	bgt.n	800a0e0 <UART_SetConfig+0x848>
 800a04e:	2b00      	cmp	r3, #0
 800a050:	db7b      	blt.n	800a14a <UART_SetConfig+0x8b2>
 800a052:	2b20      	cmp	r3, #32
 800a054:	d879      	bhi.n	800a14a <UART_SetConfig+0x8b2>
 800a056:	a201      	add	r2, pc, #4	; (adr r2, 800a05c <UART_SetConfig+0x7c4>)
 800a058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05c:	0800a0e7 	.word	0x0800a0e7
 800a060:	0800a0ef 	.word	0x0800a0ef
 800a064:	0800a14b 	.word	0x0800a14b
 800a068:	0800a14b 	.word	0x0800a14b
 800a06c:	0800a0f7 	.word	0x0800a0f7
 800a070:	0800a14b 	.word	0x0800a14b
 800a074:	0800a14b 	.word	0x0800a14b
 800a078:	0800a14b 	.word	0x0800a14b
 800a07c:	0800a107 	.word	0x0800a107
 800a080:	0800a14b 	.word	0x0800a14b
 800a084:	0800a14b 	.word	0x0800a14b
 800a088:	0800a14b 	.word	0x0800a14b
 800a08c:	0800a14b 	.word	0x0800a14b
 800a090:	0800a14b 	.word	0x0800a14b
 800a094:	0800a14b 	.word	0x0800a14b
 800a098:	0800a14b 	.word	0x0800a14b
 800a09c:	0800a117 	.word	0x0800a117
 800a0a0:	0800a14b 	.word	0x0800a14b
 800a0a4:	0800a14b 	.word	0x0800a14b
 800a0a8:	0800a14b 	.word	0x0800a14b
 800a0ac:	0800a14b 	.word	0x0800a14b
 800a0b0:	0800a14b 	.word	0x0800a14b
 800a0b4:	0800a14b 	.word	0x0800a14b
 800a0b8:	0800a14b 	.word	0x0800a14b
 800a0bc:	0800a14b 	.word	0x0800a14b
 800a0c0:	0800a14b 	.word	0x0800a14b
 800a0c4:	0800a14b 	.word	0x0800a14b
 800a0c8:	0800a14b 	.word	0x0800a14b
 800a0cc:	0800a14b 	.word	0x0800a14b
 800a0d0:	0800a14b 	.word	0x0800a14b
 800a0d4:	0800a14b 	.word	0x0800a14b
 800a0d8:	0800a14b 	.word	0x0800a14b
 800a0dc:	0800a13d 	.word	0x0800a13d
 800a0e0:	2b40      	cmp	r3, #64	; 0x40
 800a0e2:	d02e      	beq.n	800a142 <UART_SetConfig+0x8aa>
 800a0e4:	e031      	b.n	800a14a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0e6:	f7fb ff05 	bl	8005ef4 <HAL_RCC_GetPCLK1Freq>
 800a0ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a0ec:	e033      	b.n	800a156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0ee:	f7fb ff17 	bl	8005f20 <HAL_RCC_GetPCLK2Freq>
 800a0f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a0f4:	e02f      	b.n	800a156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fd fb54 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a104:	e027      	b.n	800a156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a106:	f107 0318 	add.w	r3, r7, #24
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fd fca0 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a114:	e01f      	b.n	800a156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a116:	4b2d      	ldr	r3, [pc, #180]	; (800a1cc <UART_SetConfig+0x934>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 0320 	and.w	r3, r3, #32
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d009      	beq.n	800a136 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a122:	4b2a      	ldr	r3, [pc, #168]	; (800a1cc <UART_SetConfig+0x934>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	08db      	lsrs	r3, r3, #3
 800a128:	f003 0303 	and.w	r3, r3, #3
 800a12c:	4a24      	ldr	r2, [pc, #144]	; (800a1c0 <UART_SetConfig+0x928>)
 800a12e:	fa22 f303 	lsr.w	r3, r2, r3
 800a132:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a134:	e00f      	b.n	800a156 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a136:	4b22      	ldr	r3, [pc, #136]	; (800a1c0 <UART_SetConfig+0x928>)
 800a138:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a13a:	e00c      	b.n	800a156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a13c:	4b21      	ldr	r3, [pc, #132]	; (800a1c4 <UART_SetConfig+0x92c>)
 800a13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a140:	e009      	b.n	800a156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a148:	e005      	b.n	800a156 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a14a:	2300      	movs	r3, #0
 800a14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a154:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f000 80e7 	beq.w	800a32c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a162:	4a19      	ldr	r2, [pc, #100]	; (800a1c8 <UART_SetConfig+0x930>)
 800a164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a168:	461a      	mov	r2, r3
 800a16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a16c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a170:	005a      	lsls	r2, r3, #1
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	085b      	lsrs	r3, r3, #1
 800a178:	441a      	add	r2, r3
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a182:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a186:	2b0f      	cmp	r3, #15
 800a188:	d916      	bls.n	800a1b8 <UART_SetConfig+0x920>
 800a18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a190:	d212      	bcs.n	800a1b8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a194:	b29b      	uxth	r3, r3
 800a196:	f023 030f 	bic.w	r3, r3, #15
 800a19a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19e:	085b      	lsrs	r3, r3, #1
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	f003 0307 	and.w	r3, r3, #7
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a1b4:	60da      	str	r2, [r3, #12]
 800a1b6:	e0b9      	b.n	800a32c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a1be:	e0b5      	b.n	800a32c <UART_SetConfig+0xa94>
 800a1c0:	03d09000 	.word	0x03d09000
 800a1c4:	003d0900 	.word	0x003d0900
 800a1c8:	0800b89c 	.word	0x0800b89c
 800a1cc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a1d4:	2b20      	cmp	r3, #32
 800a1d6:	dc49      	bgt.n	800a26c <UART_SetConfig+0x9d4>
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	db7c      	blt.n	800a2d6 <UART_SetConfig+0xa3e>
 800a1dc:	2b20      	cmp	r3, #32
 800a1de:	d87a      	bhi.n	800a2d6 <UART_SetConfig+0xa3e>
 800a1e0:	a201      	add	r2, pc, #4	; (adr r2, 800a1e8 <UART_SetConfig+0x950>)
 800a1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e6:	bf00      	nop
 800a1e8:	0800a273 	.word	0x0800a273
 800a1ec:	0800a27b 	.word	0x0800a27b
 800a1f0:	0800a2d7 	.word	0x0800a2d7
 800a1f4:	0800a2d7 	.word	0x0800a2d7
 800a1f8:	0800a283 	.word	0x0800a283
 800a1fc:	0800a2d7 	.word	0x0800a2d7
 800a200:	0800a2d7 	.word	0x0800a2d7
 800a204:	0800a2d7 	.word	0x0800a2d7
 800a208:	0800a293 	.word	0x0800a293
 800a20c:	0800a2d7 	.word	0x0800a2d7
 800a210:	0800a2d7 	.word	0x0800a2d7
 800a214:	0800a2d7 	.word	0x0800a2d7
 800a218:	0800a2d7 	.word	0x0800a2d7
 800a21c:	0800a2d7 	.word	0x0800a2d7
 800a220:	0800a2d7 	.word	0x0800a2d7
 800a224:	0800a2d7 	.word	0x0800a2d7
 800a228:	0800a2a3 	.word	0x0800a2a3
 800a22c:	0800a2d7 	.word	0x0800a2d7
 800a230:	0800a2d7 	.word	0x0800a2d7
 800a234:	0800a2d7 	.word	0x0800a2d7
 800a238:	0800a2d7 	.word	0x0800a2d7
 800a23c:	0800a2d7 	.word	0x0800a2d7
 800a240:	0800a2d7 	.word	0x0800a2d7
 800a244:	0800a2d7 	.word	0x0800a2d7
 800a248:	0800a2d7 	.word	0x0800a2d7
 800a24c:	0800a2d7 	.word	0x0800a2d7
 800a250:	0800a2d7 	.word	0x0800a2d7
 800a254:	0800a2d7 	.word	0x0800a2d7
 800a258:	0800a2d7 	.word	0x0800a2d7
 800a25c:	0800a2d7 	.word	0x0800a2d7
 800a260:	0800a2d7 	.word	0x0800a2d7
 800a264:	0800a2d7 	.word	0x0800a2d7
 800a268:	0800a2c9 	.word	0x0800a2c9
 800a26c:	2b40      	cmp	r3, #64	; 0x40
 800a26e:	d02e      	beq.n	800a2ce <UART_SetConfig+0xa36>
 800a270:	e031      	b.n	800a2d6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a272:	f7fb fe3f 	bl	8005ef4 <HAL_RCC_GetPCLK1Freq>
 800a276:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a278:	e033      	b.n	800a2e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a27a:	f7fb fe51 	bl	8005f20 <HAL_RCC_GetPCLK2Freq>
 800a27e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a280:	e02f      	b.n	800a2e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a286:	4618      	mov	r0, r3
 800a288:	f7fd fa8e 	bl	80077a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a290:	e027      	b.n	800a2e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a292:	f107 0318 	add.w	r3, r7, #24
 800a296:	4618      	mov	r0, r3
 800a298:	f7fd fbda 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2a0:	e01f      	b.n	800a2e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2a2:	4b2d      	ldr	r3, [pc, #180]	; (800a358 <UART_SetConfig+0xac0>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 0320 	and.w	r3, r3, #32
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d009      	beq.n	800a2c2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2ae:	4b2a      	ldr	r3, [pc, #168]	; (800a358 <UART_SetConfig+0xac0>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	08db      	lsrs	r3, r3, #3
 800a2b4:	f003 0303 	and.w	r3, r3, #3
 800a2b8:	4a28      	ldr	r2, [pc, #160]	; (800a35c <UART_SetConfig+0xac4>)
 800a2ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2c0:	e00f      	b.n	800a2e2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a2c2:	4b26      	ldr	r3, [pc, #152]	; (800a35c <UART_SetConfig+0xac4>)
 800a2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2c6:	e00c      	b.n	800a2e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2c8:	4b25      	ldr	r3, [pc, #148]	; (800a360 <UART_SetConfig+0xac8>)
 800a2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2cc:	e009      	b.n	800a2e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2d4:	e005      	b.n	800a2e2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a2e0:	bf00      	nop
    }

    if (pclk != 0U)
 800a2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d021      	beq.n	800a32c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ec:	4a1d      	ldr	r2, [pc, #116]	; (800a364 <UART_SetConfig+0xacc>)
 800a2ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	085b      	lsrs	r3, r3, #1
 800a300:	441a      	add	r2, r3
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	fbb2 f3f3 	udiv	r3, r2, r3
 800a30a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30e:	2b0f      	cmp	r3, #15
 800a310:	d909      	bls.n	800a326 <UART_SetConfig+0xa8e>
 800a312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a318:	d205      	bcs.n	800a326 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	60da      	str	r2, [r3, #12]
 800a324:	e002      	b.n	800a32c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	2201      	movs	r2, #1
 800a330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	2201      	movs	r2, #1
 800a338:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	2200      	movs	r2, #0
 800a340:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	2200      	movs	r2, #0
 800a346:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a348:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3748      	adds	r7, #72	; 0x48
 800a350:	46bd      	mov	sp, r7
 800a352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a356:	bf00      	nop
 800a358:	58024400 	.word	0x58024400
 800a35c:	03d09000 	.word	0x03d09000
 800a360:	003d0900 	.word	0x003d0900
 800a364:	0800b89c 	.word	0x0800b89c

0800a368 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a374:	f003 0301 	and.w	r3, r3, #1
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00a      	beq.n	800a392 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a396:	f003 0302 	and.w	r3, r3, #2
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00a      	beq.n	800a3b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	430a      	orrs	r2, r1
 800a3b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b8:	f003 0304 	and.w	r3, r3, #4
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00a      	beq.n	800a3d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	430a      	orrs	r2, r1
 800a3d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3da:	f003 0308 	and.w	r3, r3, #8
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00a      	beq.n	800a3f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3fc:	f003 0310 	and.w	r3, r3, #16
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00a      	beq.n	800a41a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	430a      	orrs	r2, r1
 800a418:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41e:	f003 0320 	and.w	r3, r3, #32
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00a      	beq.n	800a43c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	430a      	orrs	r2, r1
 800a43a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a444:	2b00      	cmp	r3, #0
 800a446:	d01a      	beq.n	800a47e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	430a      	orrs	r2, r1
 800a45c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a466:	d10a      	bne.n	800a47e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	430a      	orrs	r2, r1
 800a47c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00a      	beq.n	800a4a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	430a      	orrs	r2, r1
 800a49e:	605a      	str	r2, [r3, #4]
  }
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af02      	add	r7, sp, #8
 800a4b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4bc:	f7f7 fc28 	bl	8001d10 <HAL_GetTick>
 800a4c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 0308 	and.w	r3, r3, #8
 800a4cc:	2b08      	cmp	r3, #8
 800a4ce:	d10e      	bne.n	800a4ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f82f 	bl	800a542 <UART_WaitOnFlagUntilTimeout>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	e025      	b.n	800a53a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 0304 	and.w	r3, r3, #4
 800a4f8:	2b04      	cmp	r3, #4
 800a4fa:	d10e      	bne.n	800a51a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f819 	bl	800a542 <UART_WaitOnFlagUntilTimeout>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e00f      	b.n	800a53a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2220      	movs	r2, #32
 800a51e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2220      	movs	r2, #32
 800a526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b09c      	sub	sp, #112	; 0x70
 800a546:	af00      	add	r7, sp, #0
 800a548:	60f8      	str	r0, [r7, #12]
 800a54a:	60b9      	str	r1, [r7, #8]
 800a54c:	603b      	str	r3, [r7, #0]
 800a54e:	4613      	mov	r3, r2
 800a550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a552:	e0a9      	b.n	800a6a8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55a:	f000 80a5 	beq.w	800a6a8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a55e:	f7f7 fbd7 	bl	8001d10 <HAL_GetTick>
 800a562:	4602      	mov	r2, r0
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d302      	bcc.n	800a574 <UART_WaitOnFlagUntilTimeout+0x32>
 800a56e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a570:	2b00      	cmp	r3, #0
 800a572:	d140      	bne.n	800a5f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a57c:	e853 3f00 	ldrex	r3, [r3]
 800a580:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a584:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a588:	667b      	str	r3, [r7, #100]	; 0x64
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	461a      	mov	r2, r3
 800a590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a592:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a594:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a596:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a598:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a59a:	e841 2300 	strex	r3, r2, [r1]
 800a59e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a5a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1e6      	bne.n	800a574 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	3308      	adds	r3, #8
 800a5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5b0:	e853 3f00 	ldrex	r3, [r3]
 800a5b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b8:	f023 0301 	bic.w	r3, r3, #1
 800a5bc:	663b      	str	r3, [r7, #96]	; 0x60
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	3308      	adds	r3, #8
 800a5c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a5c6:	64ba      	str	r2, [r7, #72]	; 0x48
 800a5c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5ce:	e841 2300 	strex	r3, r2, [r1]
 800a5d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a5d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1e5      	bne.n	800a5a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2220      	movs	r2, #32
 800a5de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	e069      	b.n	800a6ca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0304 	and.w	r3, r3, #4
 800a600:	2b00      	cmp	r3, #0
 800a602:	d051      	beq.n	800a6a8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a60e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a612:	d149      	bne.n	800a6a8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a61c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a626:	e853 3f00 	ldrex	r3, [r3]
 800a62a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a632:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	461a      	mov	r2, r3
 800a63a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a63c:	637b      	str	r3, [r7, #52]	; 0x34
 800a63e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a644:	e841 2300 	strex	r3, r2, [r1]
 800a648:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1e6      	bne.n	800a61e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	3308      	adds	r3, #8
 800a656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	e853 3f00 	ldrex	r3, [r3]
 800a65e:	613b      	str	r3, [r7, #16]
   return(result);
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	f023 0301 	bic.w	r3, r3, #1
 800a666:	66bb      	str	r3, [r7, #104]	; 0x68
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3308      	adds	r3, #8
 800a66e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a670:	623a      	str	r2, [r7, #32]
 800a672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a674:	69f9      	ldr	r1, [r7, #28]
 800a676:	6a3a      	ldr	r2, [r7, #32]
 800a678:	e841 2300 	strex	r3, r2, [r1]
 800a67c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1e5      	bne.n	800a650 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2220      	movs	r2, #32
 800a688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2220      	movs	r2, #32
 800a690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2220      	movs	r2, #32
 800a698:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e010      	b.n	800a6ca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	69da      	ldr	r2, [r3, #28]
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	68ba      	ldr	r2, [r7, #8]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	bf0c      	ite	eq
 800a6b8:	2301      	moveq	r3, #1
 800a6ba:	2300      	movne	r3, #0
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	461a      	mov	r2, r3
 800a6c0:	79fb      	ldrb	r3, [r7, #7]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	f43f af46 	beq.w	800a554 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3770      	adds	r7, #112	; 0x70
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	b085      	sub	sp, #20
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d101      	bne.n	800a6e8 <HAL_UARTEx_DisableFifoMode+0x16>
 800a6e4:	2302      	movs	r3, #2
 800a6e6:	e027      	b.n	800a738 <HAL_UARTEx_DisableFifoMode+0x66>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2224      	movs	r2, #36	; 0x24
 800a6f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f022 0201 	bic.w	r2, r2, #1
 800a70e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a716:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2220      	movs	r2, #32
 800a72a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3714      	adds	r7, #20
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a754:	2b01      	cmp	r3, #1
 800a756:	d101      	bne.n	800a75c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a758:	2302      	movs	r3, #2
 800a75a:	e02d      	b.n	800a7b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2224      	movs	r2, #36	; 0x24
 800a768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f022 0201 	bic.w	r2, r2, #1
 800a782:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	430a      	orrs	r2, r1
 800a796:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 f84f 	bl	800a83c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2220      	movs	r2, #32
 800a7aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d101      	bne.n	800a7d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	e02d      	b.n	800a834 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2224      	movs	r2, #36	; 0x24
 800a7e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f022 0201 	bic.w	r2, r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	430a      	orrs	r2, r1
 800a812:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f811 	bl	800a83c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2220      	movs	r2, #32
 800a826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d108      	bne.n	800a85e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a85c:	e031      	b.n	800a8c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a85e:	2310      	movs	r3, #16
 800a860:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a862:	2310      	movs	r3, #16
 800a864:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	0e5b      	lsrs	r3, r3, #25
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	f003 0307 	and.w	r3, r3, #7
 800a874:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	0f5b      	lsrs	r3, r3, #29
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	f003 0307 	and.w	r3, r3, #7
 800a884:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a886:	7bbb      	ldrb	r3, [r7, #14]
 800a888:	7b3a      	ldrb	r2, [r7, #12]
 800a88a:	4911      	ldr	r1, [pc, #68]	; (800a8d0 <UARTEx_SetNbDataToProcess+0x94>)
 800a88c:	5c8a      	ldrb	r2, [r1, r2]
 800a88e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a892:	7b3a      	ldrb	r2, [r7, #12]
 800a894:	490f      	ldr	r1, [pc, #60]	; (800a8d4 <UARTEx_SetNbDataToProcess+0x98>)
 800a896:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a898:	fb93 f3f2 	sdiv	r3, r3, r2
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
 800a8a6:	7b7a      	ldrb	r2, [r7, #13]
 800a8a8:	4909      	ldr	r1, [pc, #36]	; (800a8d0 <UARTEx_SetNbDataToProcess+0x94>)
 800a8aa:	5c8a      	ldrb	r2, [r1, r2]
 800a8ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a8b0:	7b7a      	ldrb	r2, [r7, #13]
 800a8b2:	4908      	ldr	r1, [pc, #32]	; (800a8d4 <UARTEx_SetNbDataToProcess+0x98>)
 800a8b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a8c2:	bf00      	nop
 800a8c4:	3714      	adds	r7, #20
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	0800b8b4 	.word	0x0800b8b4
 800a8d4:	0800b8bc 	.word	0x0800b8bc

0800a8d8 <__errno>:
 800a8d8:	4b01      	ldr	r3, [pc, #4]	; (800a8e0 <__errno+0x8>)
 800a8da:	6818      	ldr	r0, [r3, #0]
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	24000010 	.word	0x24000010

0800a8e4 <__libc_init_array>:
 800a8e4:	b570      	push	{r4, r5, r6, lr}
 800a8e6:	4d0d      	ldr	r5, [pc, #52]	; (800a91c <__libc_init_array+0x38>)
 800a8e8:	4c0d      	ldr	r4, [pc, #52]	; (800a920 <__libc_init_array+0x3c>)
 800a8ea:	1b64      	subs	r4, r4, r5
 800a8ec:	10a4      	asrs	r4, r4, #2
 800a8ee:	2600      	movs	r6, #0
 800a8f0:	42a6      	cmp	r6, r4
 800a8f2:	d109      	bne.n	800a908 <__libc_init_array+0x24>
 800a8f4:	4d0b      	ldr	r5, [pc, #44]	; (800a924 <__libc_init_array+0x40>)
 800a8f6:	4c0c      	ldr	r4, [pc, #48]	; (800a928 <__libc_init_array+0x44>)
 800a8f8:	f000 ffae 	bl	800b858 <_init>
 800a8fc:	1b64      	subs	r4, r4, r5
 800a8fe:	10a4      	asrs	r4, r4, #2
 800a900:	2600      	movs	r6, #0
 800a902:	42a6      	cmp	r6, r4
 800a904:	d105      	bne.n	800a912 <__libc_init_array+0x2e>
 800a906:	bd70      	pop	{r4, r5, r6, pc}
 800a908:	f855 3b04 	ldr.w	r3, [r5], #4
 800a90c:	4798      	blx	r3
 800a90e:	3601      	adds	r6, #1
 800a910:	e7ee      	b.n	800a8f0 <__libc_init_array+0xc>
 800a912:	f855 3b04 	ldr.w	r3, [r5], #4
 800a916:	4798      	blx	r3
 800a918:	3601      	adds	r6, #1
 800a91a:	e7f2      	b.n	800a902 <__libc_init_array+0x1e>
 800a91c:	0800b964 	.word	0x0800b964
 800a920:	0800b964 	.word	0x0800b964
 800a924:	0800b964 	.word	0x0800b964
 800a928:	0800b968 	.word	0x0800b968

0800a92c <memset>:
 800a92c:	4402      	add	r2, r0
 800a92e:	4603      	mov	r3, r0
 800a930:	4293      	cmp	r3, r2
 800a932:	d100      	bne.n	800a936 <memset+0xa>
 800a934:	4770      	bx	lr
 800a936:	f803 1b01 	strb.w	r1, [r3], #1
 800a93a:	e7f9      	b.n	800a930 <memset+0x4>

0800a93c <iprintf>:
 800a93c:	b40f      	push	{r0, r1, r2, r3}
 800a93e:	4b0a      	ldr	r3, [pc, #40]	; (800a968 <iprintf+0x2c>)
 800a940:	b513      	push	{r0, r1, r4, lr}
 800a942:	681c      	ldr	r4, [r3, #0]
 800a944:	b124      	cbz	r4, 800a950 <iprintf+0x14>
 800a946:	69a3      	ldr	r3, [r4, #24]
 800a948:	b913      	cbnz	r3, 800a950 <iprintf+0x14>
 800a94a:	4620      	mov	r0, r4
 800a94c:	f000 f866 	bl	800aa1c <__sinit>
 800a950:	ab05      	add	r3, sp, #20
 800a952:	9a04      	ldr	r2, [sp, #16]
 800a954:	68a1      	ldr	r1, [r4, #8]
 800a956:	9301      	str	r3, [sp, #4]
 800a958:	4620      	mov	r0, r4
 800a95a:	f000 f9bd 	bl	800acd8 <_vfiprintf_r>
 800a95e:	b002      	add	sp, #8
 800a960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a964:	b004      	add	sp, #16
 800a966:	4770      	bx	lr
 800a968:	24000010 	.word	0x24000010

0800a96c <std>:
 800a96c:	2300      	movs	r3, #0
 800a96e:	b510      	push	{r4, lr}
 800a970:	4604      	mov	r4, r0
 800a972:	e9c0 3300 	strd	r3, r3, [r0]
 800a976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a97a:	6083      	str	r3, [r0, #8]
 800a97c:	8181      	strh	r1, [r0, #12]
 800a97e:	6643      	str	r3, [r0, #100]	; 0x64
 800a980:	81c2      	strh	r2, [r0, #14]
 800a982:	6183      	str	r3, [r0, #24]
 800a984:	4619      	mov	r1, r3
 800a986:	2208      	movs	r2, #8
 800a988:	305c      	adds	r0, #92	; 0x5c
 800a98a:	f7ff ffcf 	bl	800a92c <memset>
 800a98e:	4b05      	ldr	r3, [pc, #20]	; (800a9a4 <std+0x38>)
 800a990:	6263      	str	r3, [r4, #36]	; 0x24
 800a992:	4b05      	ldr	r3, [pc, #20]	; (800a9a8 <std+0x3c>)
 800a994:	62a3      	str	r3, [r4, #40]	; 0x28
 800a996:	4b05      	ldr	r3, [pc, #20]	; (800a9ac <std+0x40>)
 800a998:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a99a:	4b05      	ldr	r3, [pc, #20]	; (800a9b0 <std+0x44>)
 800a99c:	6224      	str	r4, [r4, #32]
 800a99e:	6323      	str	r3, [r4, #48]	; 0x30
 800a9a0:	bd10      	pop	{r4, pc}
 800a9a2:	bf00      	nop
 800a9a4:	0800b281 	.word	0x0800b281
 800a9a8:	0800b2a3 	.word	0x0800b2a3
 800a9ac:	0800b2db 	.word	0x0800b2db
 800a9b0:	0800b2ff 	.word	0x0800b2ff

0800a9b4 <_cleanup_r>:
 800a9b4:	4901      	ldr	r1, [pc, #4]	; (800a9bc <_cleanup_r+0x8>)
 800a9b6:	f000 b8af 	b.w	800ab18 <_fwalk_reent>
 800a9ba:	bf00      	nop
 800a9bc:	0800b5d9 	.word	0x0800b5d9

0800a9c0 <__sfmoreglue>:
 800a9c0:	b570      	push	{r4, r5, r6, lr}
 800a9c2:	2268      	movs	r2, #104	; 0x68
 800a9c4:	1e4d      	subs	r5, r1, #1
 800a9c6:	4355      	muls	r5, r2
 800a9c8:	460e      	mov	r6, r1
 800a9ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9ce:	f000 f8e5 	bl	800ab9c <_malloc_r>
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	b140      	cbz	r0, 800a9e8 <__sfmoreglue+0x28>
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	e9c0 1600 	strd	r1, r6, [r0]
 800a9dc:	300c      	adds	r0, #12
 800a9de:	60a0      	str	r0, [r4, #8]
 800a9e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9e4:	f7ff ffa2 	bl	800a92c <memset>
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	bd70      	pop	{r4, r5, r6, pc}

0800a9ec <__sfp_lock_acquire>:
 800a9ec:	4801      	ldr	r0, [pc, #4]	; (800a9f4 <__sfp_lock_acquire+0x8>)
 800a9ee:	f000 b8b3 	b.w	800ab58 <__retarget_lock_acquire_recursive>
 800a9f2:	bf00      	nop
 800a9f4:	240004dd 	.word	0x240004dd

0800a9f8 <__sfp_lock_release>:
 800a9f8:	4801      	ldr	r0, [pc, #4]	; (800aa00 <__sfp_lock_release+0x8>)
 800a9fa:	f000 b8ae 	b.w	800ab5a <__retarget_lock_release_recursive>
 800a9fe:	bf00      	nop
 800aa00:	240004dd 	.word	0x240004dd

0800aa04 <__sinit_lock_acquire>:
 800aa04:	4801      	ldr	r0, [pc, #4]	; (800aa0c <__sinit_lock_acquire+0x8>)
 800aa06:	f000 b8a7 	b.w	800ab58 <__retarget_lock_acquire_recursive>
 800aa0a:	bf00      	nop
 800aa0c:	240004de 	.word	0x240004de

0800aa10 <__sinit_lock_release>:
 800aa10:	4801      	ldr	r0, [pc, #4]	; (800aa18 <__sinit_lock_release+0x8>)
 800aa12:	f000 b8a2 	b.w	800ab5a <__retarget_lock_release_recursive>
 800aa16:	bf00      	nop
 800aa18:	240004de 	.word	0x240004de

0800aa1c <__sinit>:
 800aa1c:	b510      	push	{r4, lr}
 800aa1e:	4604      	mov	r4, r0
 800aa20:	f7ff fff0 	bl	800aa04 <__sinit_lock_acquire>
 800aa24:	69a3      	ldr	r3, [r4, #24]
 800aa26:	b11b      	cbz	r3, 800aa30 <__sinit+0x14>
 800aa28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa2c:	f7ff bff0 	b.w	800aa10 <__sinit_lock_release>
 800aa30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa34:	6523      	str	r3, [r4, #80]	; 0x50
 800aa36:	4b13      	ldr	r3, [pc, #76]	; (800aa84 <__sinit+0x68>)
 800aa38:	4a13      	ldr	r2, [pc, #76]	; (800aa88 <__sinit+0x6c>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa3e:	42a3      	cmp	r3, r4
 800aa40:	bf04      	itt	eq
 800aa42:	2301      	moveq	r3, #1
 800aa44:	61a3      	streq	r3, [r4, #24]
 800aa46:	4620      	mov	r0, r4
 800aa48:	f000 f820 	bl	800aa8c <__sfp>
 800aa4c:	6060      	str	r0, [r4, #4]
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f000 f81c 	bl	800aa8c <__sfp>
 800aa54:	60a0      	str	r0, [r4, #8]
 800aa56:	4620      	mov	r0, r4
 800aa58:	f000 f818 	bl	800aa8c <__sfp>
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	60e0      	str	r0, [r4, #12]
 800aa60:	2104      	movs	r1, #4
 800aa62:	6860      	ldr	r0, [r4, #4]
 800aa64:	f7ff ff82 	bl	800a96c <std>
 800aa68:	68a0      	ldr	r0, [r4, #8]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	2109      	movs	r1, #9
 800aa6e:	f7ff ff7d 	bl	800a96c <std>
 800aa72:	68e0      	ldr	r0, [r4, #12]
 800aa74:	2202      	movs	r2, #2
 800aa76:	2112      	movs	r1, #18
 800aa78:	f7ff ff78 	bl	800a96c <std>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	61a3      	str	r3, [r4, #24]
 800aa80:	e7d2      	b.n	800aa28 <__sinit+0xc>
 800aa82:	bf00      	nop
 800aa84:	0800b8c4 	.word	0x0800b8c4
 800aa88:	0800a9b5 	.word	0x0800a9b5

0800aa8c <__sfp>:
 800aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8e:	4607      	mov	r7, r0
 800aa90:	f7ff ffac 	bl	800a9ec <__sfp_lock_acquire>
 800aa94:	4b1e      	ldr	r3, [pc, #120]	; (800ab10 <__sfp+0x84>)
 800aa96:	681e      	ldr	r6, [r3, #0]
 800aa98:	69b3      	ldr	r3, [r6, #24]
 800aa9a:	b913      	cbnz	r3, 800aaa2 <__sfp+0x16>
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f7ff ffbd 	bl	800aa1c <__sinit>
 800aaa2:	3648      	adds	r6, #72	; 0x48
 800aaa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aaa8:	3b01      	subs	r3, #1
 800aaaa:	d503      	bpl.n	800aab4 <__sfp+0x28>
 800aaac:	6833      	ldr	r3, [r6, #0]
 800aaae:	b30b      	cbz	r3, 800aaf4 <__sfp+0x68>
 800aab0:	6836      	ldr	r6, [r6, #0]
 800aab2:	e7f7      	b.n	800aaa4 <__sfp+0x18>
 800aab4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aab8:	b9d5      	cbnz	r5, 800aaf0 <__sfp+0x64>
 800aaba:	4b16      	ldr	r3, [pc, #88]	; (800ab14 <__sfp+0x88>)
 800aabc:	60e3      	str	r3, [r4, #12]
 800aabe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aac2:	6665      	str	r5, [r4, #100]	; 0x64
 800aac4:	f000 f847 	bl	800ab56 <__retarget_lock_init_recursive>
 800aac8:	f7ff ff96 	bl	800a9f8 <__sfp_lock_release>
 800aacc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aad0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aad4:	6025      	str	r5, [r4, #0]
 800aad6:	61a5      	str	r5, [r4, #24]
 800aad8:	2208      	movs	r2, #8
 800aada:	4629      	mov	r1, r5
 800aadc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aae0:	f7ff ff24 	bl	800a92c <memset>
 800aae4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aae8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aaec:	4620      	mov	r0, r4
 800aaee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaf0:	3468      	adds	r4, #104	; 0x68
 800aaf2:	e7d9      	b.n	800aaa8 <__sfp+0x1c>
 800aaf4:	2104      	movs	r1, #4
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	f7ff ff62 	bl	800a9c0 <__sfmoreglue>
 800aafc:	4604      	mov	r4, r0
 800aafe:	6030      	str	r0, [r6, #0]
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d1d5      	bne.n	800aab0 <__sfp+0x24>
 800ab04:	f7ff ff78 	bl	800a9f8 <__sfp_lock_release>
 800ab08:	230c      	movs	r3, #12
 800ab0a:	603b      	str	r3, [r7, #0]
 800ab0c:	e7ee      	b.n	800aaec <__sfp+0x60>
 800ab0e:	bf00      	nop
 800ab10:	0800b8c4 	.word	0x0800b8c4
 800ab14:	ffff0001 	.word	0xffff0001

0800ab18 <_fwalk_reent>:
 800ab18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab1c:	4606      	mov	r6, r0
 800ab1e:	4688      	mov	r8, r1
 800ab20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab24:	2700      	movs	r7, #0
 800ab26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab2a:	f1b9 0901 	subs.w	r9, r9, #1
 800ab2e:	d505      	bpl.n	800ab3c <_fwalk_reent+0x24>
 800ab30:	6824      	ldr	r4, [r4, #0]
 800ab32:	2c00      	cmp	r4, #0
 800ab34:	d1f7      	bne.n	800ab26 <_fwalk_reent+0xe>
 800ab36:	4638      	mov	r0, r7
 800ab38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab3c:	89ab      	ldrh	r3, [r5, #12]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d907      	bls.n	800ab52 <_fwalk_reent+0x3a>
 800ab42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab46:	3301      	adds	r3, #1
 800ab48:	d003      	beq.n	800ab52 <_fwalk_reent+0x3a>
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	47c0      	blx	r8
 800ab50:	4307      	orrs	r7, r0
 800ab52:	3568      	adds	r5, #104	; 0x68
 800ab54:	e7e9      	b.n	800ab2a <_fwalk_reent+0x12>

0800ab56 <__retarget_lock_init_recursive>:
 800ab56:	4770      	bx	lr

0800ab58 <__retarget_lock_acquire_recursive>:
 800ab58:	4770      	bx	lr

0800ab5a <__retarget_lock_release_recursive>:
 800ab5a:	4770      	bx	lr

0800ab5c <sbrk_aligned>:
 800ab5c:	b570      	push	{r4, r5, r6, lr}
 800ab5e:	4e0e      	ldr	r6, [pc, #56]	; (800ab98 <sbrk_aligned+0x3c>)
 800ab60:	460c      	mov	r4, r1
 800ab62:	6831      	ldr	r1, [r6, #0]
 800ab64:	4605      	mov	r5, r0
 800ab66:	b911      	cbnz	r1, 800ab6e <sbrk_aligned+0x12>
 800ab68:	f000 fb7a 	bl	800b260 <_sbrk_r>
 800ab6c:	6030      	str	r0, [r6, #0]
 800ab6e:	4621      	mov	r1, r4
 800ab70:	4628      	mov	r0, r5
 800ab72:	f000 fb75 	bl	800b260 <_sbrk_r>
 800ab76:	1c43      	adds	r3, r0, #1
 800ab78:	d00a      	beq.n	800ab90 <sbrk_aligned+0x34>
 800ab7a:	1cc4      	adds	r4, r0, #3
 800ab7c:	f024 0403 	bic.w	r4, r4, #3
 800ab80:	42a0      	cmp	r0, r4
 800ab82:	d007      	beq.n	800ab94 <sbrk_aligned+0x38>
 800ab84:	1a21      	subs	r1, r4, r0
 800ab86:	4628      	mov	r0, r5
 800ab88:	f000 fb6a 	bl	800b260 <_sbrk_r>
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	d101      	bne.n	800ab94 <sbrk_aligned+0x38>
 800ab90:	f04f 34ff 	mov.w	r4, #4294967295
 800ab94:	4620      	mov	r0, r4
 800ab96:	bd70      	pop	{r4, r5, r6, pc}
 800ab98:	240004e4 	.word	0x240004e4

0800ab9c <_malloc_r>:
 800ab9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba0:	1ccd      	adds	r5, r1, #3
 800aba2:	f025 0503 	bic.w	r5, r5, #3
 800aba6:	3508      	adds	r5, #8
 800aba8:	2d0c      	cmp	r5, #12
 800abaa:	bf38      	it	cc
 800abac:	250c      	movcc	r5, #12
 800abae:	2d00      	cmp	r5, #0
 800abb0:	4607      	mov	r7, r0
 800abb2:	db01      	blt.n	800abb8 <_malloc_r+0x1c>
 800abb4:	42a9      	cmp	r1, r5
 800abb6:	d905      	bls.n	800abc4 <_malloc_r+0x28>
 800abb8:	230c      	movs	r3, #12
 800abba:	603b      	str	r3, [r7, #0]
 800abbc:	2600      	movs	r6, #0
 800abbe:	4630      	mov	r0, r6
 800abc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc4:	4e2e      	ldr	r6, [pc, #184]	; (800ac80 <_malloc_r+0xe4>)
 800abc6:	f000 fdbb 	bl	800b740 <__malloc_lock>
 800abca:	6833      	ldr	r3, [r6, #0]
 800abcc:	461c      	mov	r4, r3
 800abce:	bb34      	cbnz	r4, 800ac1e <_malloc_r+0x82>
 800abd0:	4629      	mov	r1, r5
 800abd2:	4638      	mov	r0, r7
 800abd4:	f7ff ffc2 	bl	800ab5c <sbrk_aligned>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	4604      	mov	r4, r0
 800abdc:	d14d      	bne.n	800ac7a <_malloc_r+0xde>
 800abde:	6834      	ldr	r4, [r6, #0]
 800abe0:	4626      	mov	r6, r4
 800abe2:	2e00      	cmp	r6, #0
 800abe4:	d140      	bne.n	800ac68 <_malloc_r+0xcc>
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	4631      	mov	r1, r6
 800abea:	4638      	mov	r0, r7
 800abec:	eb04 0803 	add.w	r8, r4, r3
 800abf0:	f000 fb36 	bl	800b260 <_sbrk_r>
 800abf4:	4580      	cmp	r8, r0
 800abf6:	d13a      	bne.n	800ac6e <_malloc_r+0xd2>
 800abf8:	6821      	ldr	r1, [r4, #0]
 800abfa:	3503      	adds	r5, #3
 800abfc:	1a6d      	subs	r5, r5, r1
 800abfe:	f025 0503 	bic.w	r5, r5, #3
 800ac02:	3508      	adds	r5, #8
 800ac04:	2d0c      	cmp	r5, #12
 800ac06:	bf38      	it	cc
 800ac08:	250c      	movcc	r5, #12
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	4638      	mov	r0, r7
 800ac0e:	f7ff ffa5 	bl	800ab5c <sbrk_aligned>
 800ac12:	3001      	adds	r0, #1
 800ac14:	d02b      	beq.n	800ac6e <_malloc_r+0xd2>
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	442b      	add	r3, r5
 800ac1a:	6023      	str	r3, [r4, #0]
 800ac1c:	e00e      	b.n	800ac3c <_malloc_r+0xa0>
 800ac1e:	6822      	ldr	r2, [r4, #0]
 800ac20:	1b52      	subs	r2, r2, r5
 800ac22:	d41e      	bmi.n	800ac62 <_malloc_r+0xc6>
 800ac24:	2a0b      	cmp	r2, #11
 800ac26:	d916      	bls.n	800ac56 <_malloc_r+0xba>
 800ac28:	1961      	adds	r1, r4, r5
 800ac2a:	42a3      	cmp	r3, r4
 800ac2c:	6025      	str	r5, [r4, #0]
 800ac2e:	bf18      	it	ne
 800ac30:	6059      	strne	r1, [r3, #4]
 800ac32:	6863      	ldr	r3, [r4, #4]
 800ac34:	bf08      	it	eq
 800ac36:	6031      	streq	r1, [r6, #0]
 800ac38:	5162      	str	r2, [r4, r5]
 800ac3a:	604b      	str	r3, [r1, #4]
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	f104 060b 	add.w	r6, r4, #11
 800ac42:	f000 fd83 	bl	800b74c <__malloc_unlock>
 800ac46:	f026 0607 	bic.w	r6, r6, #7
 800ac4a:	1d23      	adds	r3, r4, #4
 800ac4c:	1af2      	subs	r2, r6, r3
 800ac4e:	d0b6      	beq.n	800abbe <_malloc_r+0x22>
 800ac50:	1b9b      	subs	r3, r3, r6
 800ac52:	50a3      	str	r3, [r4, r2]
 800ac54:	e7b3      	b.n	800abbe <_malloc_r+0x22>
 800ac56:	6862      	ldr	r2, [r4, #4]
 800ac58:	42a3      	cmp	r3, r4
 800ac5a:	bf0c      	ite	eq
 800ac5c:	6032      	streq	r2, [r6, #0]
 800ac5e:	605a      	strne	r2, [r3, #4]
 800ac60:	e7ec      	b.n	800ac3c <_malloc_r+0xa0>
 800ac62:	4623      	mov	r3, r4
 800ac64:	6864      	ldr	r4, [r4, #4]
 800ac66:	e7b2      	b.n	800abce <_malloc_r+0x32>
 800ac68:	4634      	mov	r4, r6
 800ac6a:	6876      	ldr	r6, [r6, #4]
 800ac6c:	e7b9      	b.n	800abe2 <_malloc_r+0x46>
 800ac6e:	230c      	movs	r3, #12
 800ac70:	603b      	str	r3, [r7, #0]
 800ac72:	4638      	mov	r0, r7
 800ac74:	f000 fd6a 	bl	800b74c <__malloc_unlock>
 800ac78:	e7a1      	b.n	800abbe <_malloc_r+0x22>
 800ac7a:	6025      	str	r5, [r4, #0]
 800ac7c:	e7de      	b.n	800ac3c <_malloc_r+0xa0>
 800ac7e:	bf00      	nop
 800ac80:	240004e0 	.word	0x240004e0

0800ac84 <__sfputc_r>:
 800ac84:	6893      	ldr	r3, [r2, #8]
 800ac86:	3b01      	subs	r3, #1
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	b410      	push	{r4}
 800ac8c:	6093      	str	r3, [r2, #8]
 800ac8e:	da08      	bge.n	800aca2 <__sfputc_r+0x1e>
 800ac90:	6994      	ldr	r4, [r2, #24]
 800ac92:	42a3      	cmp	r3, r4
 800ac94:	db01      	blt.n	800ac9a <__sfputc_r+0x16>
 800ac96:	290a      	cmp	r1, #10
 800ac98:	d103      	bne.n	800aca2 <__sfputc_r+0x1e>
 800ac9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac9e:	f000 bb33 	b.w	800b308 <__swbuf_r>
 800aca2:	6813      	ldr	r3, [r2, #0]
 800aca4:	1c58      	adds	r0, r3, #1
 800aca6:	6010      	str	r0, [r2, #0]
 800aca8:	7019      	strb	r1, [r3, #0]
 800acaa:	4608      	mov	r0, r1
 800acac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <__sfputs_r>:
 800acb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb4:	4606      	mov	r6, r0
 800acb6:	460f      	mov	r7, r1
 800acb8:	4614      	mov	r4, r2
 800acba:	18d5      	adds	r5, r2, r3
 800acbc:	42ac      	cmp	r4, r5
 800acbe:	d101      	bne.n	800acc4 <__sfputs_r+0x12>
 800acc0:	2000      	movs	r0, #0
 800acc2:	e007      	b.n	800acd4 <__sfputs_r+0x22>
 800acc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acc8:	463a      	mov	r2, r7
 800acca:	4630      	mov	r0, r6
 800accc:	f7ff ffda 	bl	800ac84 <__sfputc_r>
 800acd0:	1c43      	adds	r3, r0, #1
 800acd2:	d1f3      	bne.n	800acbc <__sfputs_r+0xa>
 800acd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acd8 <_vfiprintf_r>:
 800acd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acdc:	460d      	mov	r5, r1
 800acde:	b09d      	sub	sp, #116	; 0x74
 800ace0:	4614      	mov	r4, r2
 800ace2:	4698      	mov	r8, r3
 800ace4:	4606      	mov	r6, r0
 800ace6:	b118      	cbz	r0, 800acf0 <_vfiprintf_r+0x18>
 800ace8:	6983      	ldr	r3, [r0, #24]
 800acea:	b90b      	cbnz	r3, 800acf0 <_vfiprintf_r+0x18>
 800acec:	f7ff fe96 	bl	800aa1c <__sinit>
 800acf0:	4b89      	ldr	r3, [pc, #548]	; (800af18 <_vfiprintf_r+0x240>)
 800acf2:	429d      	cmp	r5, r3
 800acf4:	d11b      	bne.n	800ad2e <_vfiprintf_r+0x56>
 800acf6:	6875      	ldr	r5, [r6, #4]
 800acf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acfa:	07d9      	lsls	r1, r3, #31
 800acfc:	d405      	bmi.n	800ad0a <_vfiprintf_r+0x32>
 800acfe:	89ab      	ldrh	r3, [r5, #12]
 800ad00:	059a      	lsls	r2, r3, #22
 800ad02:	d402      	bmi.n	800ad0a <_vfiprintf_r+0x32>
 800ad04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad06:	f7ff ff27 	bl	800ab58 <__retarget_lock_acquire_recursive>
 800ad0a:	89ab      	ldrh	r3, [r5, #12]
 800ad0c:	071b      	lsls	r3, r3, #28
 800ad0e:	d501      	bpl.n	800ad14 <_vfiprintf_r+0x3c>
 800ad10:	692b      	ldr	r3, [r5, #16]
 800ad12:	b9eb      	cbnz	r3, 800ad50 <_vfiprintf_r+0x78>
 800ad14:	4629      	mov	r1, r5
 800ad16:	4630      	mov	r0, r6
 800ad18:	f000 fb5a 	bl	800b3d0 <__swsetup_r>
 800ad1c:	b1c0      	cbz	r0, 800ad50 <_vfiprintf_r+0x78>
 800ad1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad20:	07dc      	lsls	r4, r3, #31
 800ad22:	d50e      	bpl.n	800ad42 <_vfiprintf_r+0x6a>
 800ad24:	f04f 30ff 	mov.w	r0, #4294967295
 800ad28:	b01d      	add	sp, #116	; 0x74
 800ad2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad2e:	4b7b      	ldr	r3, [pc, #492]	; (800af1c <_vfiprintf_r+0x244>)
 800ad30:	429d      	cmp	r5, r3
 800ad32:	d101      	bne.n	800ad38 <_vfiprintf_r+0x60>
 800ad34:	68b5      	ldr	r5, [r6, #8]
 800ad36:	e7df      	b.n	800acf8 <_vfiprintf_r+0x20>
 800ad38:	4b79      	ldr	r3, [pc, #484]	; (800af20 <_vfiprintf_r+0x248>)
 800ad3a:	429d      	cmp	r5, r3
 800ad3c:	bf08      	it	eq
 800ad3e:	68f5      	ldreq	r5, [r6, #12]
 800ad40:	e7da      	b.n	800acf8 <_vfiprintf_r+0x20>
 800ad42:	89ab      	ldrh	r3, [r5, #12]
 800ad44:	0598      	lsls	r0, r3, #22
 800ad46:	d4ed      	bmi.n	800ad24 <_vfiprintf_r+0x4c>
 800ad48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad4a:	f7ff ff06 	bl	800ab5a <__retarget_lock_release_recursive>
 800ad4e:	e7e9      	b.n	800ad24 <_vfiprintf_r+0x4c>
 800ad50:	2300      	movs	r3, #0
 800ad52:	9309      	str	r3, [sp, #36]	; 0x24
 800ad54:	2320      	movs	r3, #32
 800ad56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad5e:	2330      	movs	r3, #48	; 0x30
 800ad60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af24 <_vfiprintf_r+0x24c>
 800ad64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad68:	f04f 0901 	mov.w	r9, #1
 800ad6c:	4623      	mov	r3, r4
 800ad6e:	469a      	mov	sl, r3
 800ad70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad74:	b10a      	cbz	r2, 800ad7a <_vfiprintf_r+0xa2>
 800ad76:	2a25      	cmp	r2, #37	; 0x25
 800ad78:	d1f9      	bne.n	800ad6e <_vfiprintf_r+0x96>
 800ad7a:	ebba 0b04 	subs.w	fp, sl, r4
 800ad7e:	d00b      	beq.n	800ad98 <_vfiprintf_r+0xc0>
 800ad80:	465b      	mov	r3, fp
 800ad82:	4622      	mov	r2, r4
 800ad84:	4629      	mov	r1, r5
 800ad86:	4630      	mov	r0, r6
 800ad88:	f7ff ff93 	bl	800acb2 <__sfputs_r>
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	f000 80aa 	beq.w	800aee6 <_vfiprintf_r+0x20e>
 800ad92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad94:	445a      	add	r2, fp
 800ad96:	9209      	str	r2, [sp, #36]	; 0x24
 800ad98:	f89a 3000 	ldrb.w	r3, [sl]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f000 80a2 	beq.w	800aee6 <_vfiprintf_r+0x20e>
 800ada2:	2300      	movs	r3, #0
 800ada4:	f04f 32ff 	mov.w	r2, #4294967295
 800ada8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adac:	f10a 0a01 	add.w	sl, sl, #1
 800adb0:	9304      	str	r3, [sp, #16]
 800adb2:	9307      	str	r3, [sp, #28]
 800adb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adb8:	931a      	str	r3, [sp, #104]	; 0x68
 800adba:	4654      	mov	r4, sl
 800adbc:	2205      	movs	r2, #5
 800adbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adc2:	4858      	ldr	r0, [pc, #352]	; (800af24 <_vfiprintf_r+0x24c>)
 800adc4:	f7f5 fa8c 	bl	80002e0 <memchr>
 800adc8:	9a04      	ldr	r2, [sp, #16]
 800adca:	b9d8      	cbnz	r0, 800ae04 <_vfiprintf_r+0x12c>
 800adcc:	06d1      	lsls	r1, r2, #27
 800adce:	bf44      	itt	mi
 800add0:	2320      	movmi	r3, #32
 800add2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800add6:	0713      	lsls	r3, r2, #28
 800add8:	bf44      	itt	mi
 800adda:	232b      	movmi	r3, #43	; 0x2b
 800addc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ade0:	f89a 3000 	ldrb.w	r3, [sl]
 800ade4:	2b2a      	cmp	r3, #42	; 0x2a
 800ade6:	d015      	beq.n	800ae14 <_vfiprintf_r+0x13c>
 800ade8:	9a07      	ldr	r2, [sp, #28]
 800adea:	4654      	mov	r4, sl
 800adec:	2000      	movs	r0, #0
 800adee:	f04f 0c0a 	mov.w	ip, #10
 800adf2:	4621      	mov	r1, r4
 800adf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adf8:	3b30      	subs	r3, #48	; 0x30
 800adfa:	2b09      	cmp	r3, #9
 800adfc:	d94e      	bls.n	800ae9c <_vfiprintf_r+0x1c4>
 800adfe:	b1b0      	cbz	r0, 800ae2e <_vfiprintf_r+0x156>
 800ae00:	9207      	str	r2, [sp, #28]
 800ae02:	e014      	b.n	800ae2e <_vfiprintf_r+0x156>
 800ae04:	eba0 0308 	sub.w	r3, r0, r8
 800ae08:	fa09 f303 	lsl.w	r3, r9, r3
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	9304      	str	r3, [sp, #16]
 800ae10:	46a2      	mov	sl, r4
 800ae12:	e7d2      	b.n	800adba <_vfiprintf_r+0xe2>
 800ae14:	9b03      	ldr	r3, [sp, #12]
 800ae16:	1d19      	adds	r1, r3, #4
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	9103      	str	r1, [sp, #12]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	bfbb      	ittet	lt
 800ae20:	425b      	neglt	r3, r3
 800ae22:	f042 0202 	orrlt.w	r2, r2, #2
 800ae26:	9307      	strge	r3, [sp, #28]
 800ae28:	9307      	strlt	r3, [sp, #28]
 800ae2a:	bfb8      	it	lt
 800ae2c:	9204      	strlt	r2, [sp, #16]
 800ae2e:	7823      	ldrb	r3, [r4, #0]
 800ae30:	2b2e      	cmp	r3, #46	; 0x2e
 800ae32:	d10c      	bne.n	800ae4e <_vfiprintf_r+0x176>
 800ae34:	7863      	ldrb	r3, [r4, #1]
 800ae36:	2b2a      	cmp	r3, #42	; 0x2a
 800ae38:	d135      	bne.n	800aea6 <_vfiprintf_r+0x1ce>
 800ae3a:	9b03      	ldr	r3, [sp, #12]
 800ae3c:	1d1a      	adds	r2, r3, #4
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	9203      	str	r2, [sp, #12]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	bfb8      	it	lt
 800ae46:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae4a:	3402      	adds	r4, #2
 800ae4c:	9305      	str	r3, [sp, #20]
 800ae4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af34 <_vfiprintf_r+0x25c>
 800ae52:	7821      	ldrb	r1, [r4, #0]
 800ae54:	2203      	movs	r2, #3
 800ae56:	4650      	mov	r0, sl
 800ae58:	f7f5 fa42 	bl	80002e0 <memchr>
 800ae5c:	b140      	cbz	r0, 800ae70 <_vfiprintf_r+0x198>
 800ae5e:	2340      	movs	r3, #64	; 0x40
 800ae60:	eba0 000a 	sub.w	r0, r0, sl
 800ae64:	fa03 f000 	lsl.w	r0, r3, r0
 800ae68:	9b04      	ldr	r3, [sp, #16]
 800ae6a:	4303      	orrs	r3, r0
 800ae6c:	3401      	adds	r4, #1
 800ae6e:	9304      	str	r3, [sp, #16]
 800ae70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae74:	482c      	ldr	r0, [pc, #176]	; (800af28 <_vfiprintf_r+0x250>)
 800ae76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae7a:	2206      	movs	r2, #6
 800ae7c:	f7f5 fa30 	bl	80002e0 <memchr>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d03f      	beq.n	800af04 <_vfiprintf_r+0x22c>
 800ae84:	4b29      	ldr	r3, [pc, #164]	; (800af2c <_vfiprintf_r+0x254>)
 800ae86:	bb1b      	cbnz	r3, 800aed0 <_vfiprintf_r+0x1f8>
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	3307      	adds	r3, #7
 800ae8c:	f023 0307 	bic.w	r3, r3, #7
 800ae90:	3308      	adds	r3, #8
 800ae92:	9303      	str	r3, [sp, #12]
 800ae94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae96:	443b      	add	r3, r7
 800ae98:	9309      	str	r3, [sp, #36]	; 0x24
 800ae9a:	e767      	b.n	800ad6c <_vfiprintf_r+0x94>
 800ae9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aea0:	460c      	mov	r4, r1
 800aea2:	2001      	movs	r0, #1
 800aea4:	e7a5      	b.n	800adf2 <_vfiprintf_r+0x11a>
 800aea6:	2300      	movs	r3, #0
 800aea8:	3401      	adds	r4, #1
 800aeaa:	9305      	str	r3, [sp, #20]
 800aeac:	4619      	mov	r1, r3
 800aeae:	f04f 0c0a 	mov.w	ip, #10
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeb8:	3a30      	subs	r2, #48	; 0x30
 800aeba:	2a09      	cmp	r2, #9
 800aebc:	d903      	bls.n	800aec6 <_vfiprintf_r+0x1ee>
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d0c5      	beq.n	800ae4e <_vfiprintf_r+0x176>
 800aec2:	9105      	str	r1, [sp, #20]
 800aec4:	e7c3      	b.n	800ae4e <_vfiprintf_r+0x176>
 800aec6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeca:	4604      	mov	r4, r0
 800aecc:	2301      	movs	r3, #1
 800aece:	e7f0      	b.n	800aeb2 <_vfiprintf_r+0x1da>
 800aed0:	ab03      	add	r3, sp, #12
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	462a      	mov	r2, r5
 800aed6:	4b16      	ldr	r3, [pc, #88]	; (800af30 <_vfiprintf_r+0x258>)
 800aed8:	a904      	add	r1, sp, #16
 800aeda:	4630      	mov	r0, r6
 800aedc:	f3af 8000 	nop.w
 800aee0:	4607      	mov	r7, r0
 800aee2:	1c78      	adds	r0, r7, #1
 800aee4:	d1d6      	bne.n	800ae94 <_vfiprintf_r+0x1bc>
 800aee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aee8:	07d9      	lsls	r1, r3, #31
 800aeea:	d405      	bmi.n	800aef8 <_vfiprintf_r+0x220>
 800aeec:	89ab      	ldrh	r3, [r5, #12]
 800aeee:	059a      	lsls	r2, r3, #22
 800aef0:	d402      	bmi.n	800aef8 <_vfiprintf_r+0x220>
 800aef2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aef4:	f7ff fe31 	bl	800ab5a <__retarget_lock_release_recursive>
 800aef8:	89ab      	ldrh	r3, [r5, #12]
 800aefa:	065b      	lsls	r3, r3, #25
 800aefc:	f53f af12 	bmi.w	800ad24 <_vfiprintf_r+0x4c>
 800af00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af02:	e711      	b.n	800ad28 <_vfiprintf_r+0x50>
 800af04:	ab03      	add	r3, sp, #12
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	462a      	mov	r2, r5
 800af0a:	4b09      	ldr	r3, [pc, #36]	; (800af30 <_vfiprintf_r+0x258>)
 800af0c:	a904      	add	r1, sp, #16
 800af0e:	4630      	mov	r0, r6
 800af10:	f000 f880 	bl	800b014 <_printf_i>
 800af14:	e7e4      	b.n	800aee0 <_vfiprintf_r+0x208>
 800af16:	bf00      	nop
 800af18:	0800b8e8 	.word	0x0800b8e8
 800af1c:	0800b908 	.word	0x0800b908
 800af20:	0800b8c8 	.word	0x0800b8c8
 800af24:	0800b928 	.word	0x0800b928
 800af28:	0800b932 	.word	0x0800b932
 800af2c:	00000000 	.word	0x00000000
 800af30:	0800acb3 	.word	0x0800acb3
 800af34:	0800b92e 	.word	0x0800b92e

0800af38 <_printf_common>:
 800af38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af3c:	4616      	mov	r6, r2
 800af3e:	4699      	mov	r9, r3
 800af40:	688a      	ldr	r2, [r1, #8]
 800af42:	690b      	ldr	r3, [r1, #16]
 800af44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af48:	4293      	cmp	r3, r2
 800af4a:	bfb8      	it	lt
 800af4c:	4613      	movlt	r3, r2
 800af4e:	6033      	str	r3, [r6, #0]
 800af50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af54:	4607      	mov	r7, r0
 800af56:	460c      	mov	r4, r1
 800af58:	b10a      	cbz	r2, 800af5e <_printf_common+0x26>
 800af5a:	3301      	adds	r3, #1
 800af5c:	6033      	str	r3, [r6, #0]
 800af5e:	6823      	ldr	r3, [r4, #0]
 800af60:	0699      	lsls	r1, r3, #26
 800af62:	bf42      	ittt	mi
 800af64:	6833      	ldrmi	r3, [r6, #0]
 800af66:	3302      	addmi	r3, #2
 800af68:	6033      	strmi	r3, [r6, #0]
 800af6a:	6825      	ldr	r5, [r4, #0]
 800af6c:	f015 0506 	ands.w	r5, r5, #6
 800af70:	d106      	bne.n	800af80 <_printf_common+0x48>
 800af72:	f104 0a19 	add.w	sl, r4, #25
 800af76:	68e3      	ldr	r3, [r4, #12]
 800af78:	6832      	ldr	r2, [r6, #0]
 800af7a:	1a9b      	subs	r3, r3, r2
 800af7c:	42ab      	cmp	r3, r5
 800af7e:	dc26      	bgt.n	800afce <_printf_common+0x96>
 800af80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af84:	1e13      	subs	r3, r2, #0
 800af86:	6822      	ldr	r2, [r4, #0]
 800af88:	bf18      	it	ne
 800af8a:	2301      	movne	r3, #1
 800af8c:	0692      	lsls	r2, r2, #26
 800af8e:	d42b      	bmi.n	800afe8 <_printf_common+0xb0>
 800af90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af94:	4649      	mov	r1, r9
 800af96:	4638      	mov	r0, r7
 800af98:	47c0      	blx	r8
 800af9a:	3001      	adds	r0, #1
 800af9c:	d01e      	beq.n	800afdc <_printf_common+0xa4>
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	68e5      	ldr	r5, [r4, #12]
 800afa2:	6832      	ldr	r2, [r6, #0]
 800afa4:	f003 0306 	and.w	r3, r3, #6
 800afa8:	2b04      	cmp	r3, #4
 800afaa:	bf08      	it	eq
 800afac:	1aad      	subeq	r5, r5, r2
 800afae:	68a3      	ldr	r3, [r4, #8]
 800afb0:	6922      	ldr	r2, [r4, #16]
 800afb2:	bf0c      	ite	eq
 800afb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afb8:	2500      	movne	r5, #0
 800afba:	4293      	cmp	r3, r2
 800afbc:	bfc4      	itt	gt
 800afbe:	1a9b      	subgt	r3, r3, r2
 800afc0:	18ed      	addgt	r5, r5, r3
 800afc2:	2600      	movs	r6, #0
 800afc4:	341a      	adds	r4, #26
 800afc6:	42b5      	cmp	r5, r6
 800afc8:	d11a      	bne.n	800b000 <_printf_common+0xc8>
 800afca:	2000      	movs	r0, #0
 800afcc:	e008      	b.n	800afe0 <_printf_common+0xa8>
 800afce:	2301      	movs	r3, #1
 800afd0:	4652      	mov	r2, sl
 800afd2:	4649      	mov	r1, r9
 800afd4:	4638      	mov	r0, r7
 800afd6:	47c0      	blx	r8
 800afd8:	3001      	adds	r0, #1
 800afda:	d103      	bne.n	800afe4 <_printf_common+0xac>
 800afdc:	f04f 30ff 	mov.w	r0, #4294967295
 800afe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe4:	3501      	adds	r5, #1
 800afe6:	e7c6      	b.n	800af76 <_printf_common+0x3e>
 800afe8:	18e1      	adds	r1, r4, r3
 800afea:	1c5a      	adds	r2, r3, #1
 800afec:	2030      	movs	r0, #48	; 0x30
 800afee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aff2:	4422      	add	r2, r4
 800aff4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aff8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800affc:	3302      	adds	r3, #2
 800affe:	e7c7      	b.n	800af90 <_printf_common+0x58>
 800b000:	2301      	movs	r3, #1
 800b002:	4622      	mov	r2, r4
 800b004:	4649      	mov	r1, r9
 800b006:	4638      	mov	r0, r7
 800b008:	47c0      	blx	r8
 800b00a:	3001      	adds	r0, #1
 800b00c:	d0e6      	beq.n	800afdc <_printf_common+0xa4>
 800b00e:	3601      	adds	r6, #1
 800b010:	e7d9      	b.n	800afc6 <_printf_common+0x8e>
	...

0800b014 <_printf_i>:
 800b014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b018:	7e0f      	ldrb	r7, [r1, #24]
 800b01a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b01c:	2f78      	cmp	r7, #120	; 0x78
 800b01e:	4691      	mov	r9, r2
 800b020:	4680      	mov	r8, r0
 800b022:	460c      	mov	r4, r1
 800b024:	469a      	mov	sl, r3
 800b026:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b02a:	d807      	bhi.n	800b03c <_printf_i+0x28>
 800b02c:	2f62      	cmp	r7, #98	; 0x62
 800b02e:	d80a      	bhi.n	800b046 <_printf_i+0x32>
 800b030:	2f00      	cmp	r7, #0
 800b032:	f000 80d8 	beq.w	800b1e6 <_printf_i+0x1d2>
 800b036:	2f58      	cmp	r7, #88	; 0x58
 800b038:	f000 80a3 	beq.w	800b182 <_printf_i+0x16e>
 800b03c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b040:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b044:	e03a      	b.n	800b0bc <_printf_i+0xa8>
 800b046:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b04a:	2b15      	cmp	r3, #21
 800b04c:	d8f6      	bhi.n	800b03c <_printf_i+0x28>
 800b04e:	a101      	add	r1, pc, #4	; (adr r1, 800b054 <_printf_i+0x40>)
 800b050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b054:	0800b0ad 	.word	0x0800b0ad
 800b058:	0800b0c1 	.word	0x0800b0c1
 800b05c:	0800b03d 	.word	0x0800b03d
 800b060:	0800b03d 	.word	0x0800b03d
 800b064:	0800b03d 	.word	0x0800b03d
 800b068:	0800b03d 	.word	0x0800b03d
 800b06c:	0800b0c1 	.word	0x0800b0c1
 800b070:	0800b03d 	.word	0x0800b03d
 800b074:	0800b03d 	.word	0x0800b03d
 800b078:	0800b03d 	.word	0x0800b03d
 800b07c:	0800b03d 	.word	0x0800b03d
 800b080:	0800b1cd 	.word	0x0800b1cd
 800b084:	0800b0f1 	.word	0x0800b0f1
 800b088:	0800b1af 	.word	0x0800b1af
 800b08c:	0800b03d 	.word	0x0800b03d
 800b090:	0800b03d 	.word	0x0800b03d
 800b094:	0800b1ef 	.word	0x0800b1ef
 800b098:	0800b03d 	.word	0x0800b03d
 800b09c:	0800b0f1 	.word	0x0800b0f1
 800b0a0:	0800b03d 	.word	0x0800b03d
 800b0a4:	0800b03d 	.word	0x0800b03d
 800b0a8:	0800b1b7 	.word	0x0800b1b7
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	1d1a      	adds	r2, r3, #4
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	602a      	str	r2, [r5, #0]
 800b0b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e0a3      	b.n	800b208 <_printf_i+0x1f4>
 800b0c0:	6820      	ldr	r0, [r4, #0]
 800b0c2:	6829      	ldr	r1, [r5, #0]
 800b0c4:	0606      	lsls	r6, r0, #24
 800b0c6:	f101 0304 	add.w	r3, r1, #4
 800b0ca:	d50a      	bpl.n	800b0e2 <_printf_i+0xce>
 800b0cc:	680e      	ldr	r6, [r1, #0]
 800b0ce:	602b      	str	r3, [r5, #0]
 800b0d0:	2e00      	cmp	r6, #0
 800b0d2:	da03      	bge.n	800b0dc <_printf_i+0xc8>
 800b0d4:	232d      	movs	r3, #45	; 0x2d
 800b0d6:	4276      	negs	r6, r6
 800b0d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0dc:	485e      	ldr	r0, [pc, #376]	; (800b258 <_printf_i+0x244>)
 800b0de:	230a      	movs	r3, #10
 800b0e0:	e019      	b.n	800b116 <_printf_i+0x102>
 800b0e2:	680e      	ldr	r6, [r1, #0]
 800b0e4:	602b      	str	r3, [r5, #0]
 800b0e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0ea:	bf18      	it	ne
 800b0ec:	b236      	sxthne	r6, r6
 800b0ee:	e7ef      	b.n	800b0d0 <_printf_i+0xbc>
 800b0f0:	682b      	ldr	r3, [r5, #0]
 800b0f2:	6820      	ldr	r0, [r4, #0]
 800b0f4:	1d19      	adds	r1, r3, #4
 800b0f6:	6029      	str	r1, [r5, #0]
 800b0f8:	0601      	lsls	r1, r0, #24
 800b0fa:	d501      	bpl.n	800b100 <_printf_i+0xec>
 800b0fc:	681e      	ldr	r6, [r3, #0]
 800b0fe:	e002      	b.n	800b106 <_printf_i+0xf2>
 800b100:	0646      	lsls	r6, r0, #25
 800b102:	d5fb      	bpl.n	800b0fc <_printf_i+0xe8>
 800b104:	881e      	ldrh	r6, [r3, #0]
 800b106:	4854      	ldr	r0, [pc, #336]	; (800b258 <_printf_i+0x244>)
 800b108:	2f6f      	cmp	r7, #111	; 0x6f
 800b10a:	bf0c      	ite	eq
 800b10c:	2308      	moveq	r3, #8
 800b10e:	230a      	movne	r3, #10
 800b110:	2100      	movs	r1, #0
 800b112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b116:	6865      	ldr	r5, [r4, #4]
 800b118:	60a5      	str	r5, [r4, #8]
 800b11a:	2d00      	cmp	r5, #0
 800b11c:	bfa2      	ittt	ge
 800b11e:	6821      	ldrge	r1, [r4, #0]
 800b120:	f021 0104 	bicge.w	r1, r1, #4
 800b124:	6021      	strge	r1, [r4, #0]
 800b126:	b90e      	cbnz	r6, 800b12c <_printf_i+0x118>
 800b128:	2d00      	cmp	r5, #0
 800b12a:	d04d      	beq.n	800b1c8 <_printf_i+0x1b4>
 800b12c:	4615      	mov	r5, r2
 800b12e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b132:	fb03 6711 	mls	r7, r3, r1, r6
 800b136:	5dc7      	ldrb	r7, [r0, r7]
 800b138:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b13c:	4637      	mov	r7, r6
 800b13e:	42bb      	cmp	r3, r7
 800b140:	460e      	mov	r6, r1
 800b142:	d9f4      	bls.n	800b12e <_printf_i+0x11a>
 800b144:	2b08      	cmp	r3, #8
 800b146:	d10b      	bne.n	800b160 <_printf_i+0x14c>
 800b148:	6823      	ldr	r3, [r4, #0]
 800b14a:	07de      	lsls	r6, r3, #31
 800b14c:	d508      	bpl.n	800b160 <_printf_i+0x14c>
 800b14e:	6923      	ldr	r3, [r4, #16]
 800b150:	6861      	ldr	r1, [r4, #4]
 800b152:	4299      	cmp	r1, r3
 800b154:	bfde      	ittt	le
 800b156:	2330      	movle	r3, #48	; 0x30
 800b158:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b15c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b160:	1b52      	subs	r2, r2, r5
 800b162:	6122      	str	r2, [r4, #16]
 800b164:	f8cd a000 	str.w	sl, [sp]
 800b168:	464b      	mov	r3, r9
 800b16a:	aa03      	add	r2, sp, #12
 800b16c:	4621      	mov	r1, r4
 800b16e:	4640      	mov	r0, r8
 800b170:	f7ff fee2 	bl	800af38 <_printf_common>
 800b174:	3001      	adds	r0, #1
 800b176:	d14c      	bne.n	800b212 <_printf_i+0x1fe>
 800b178:	f04f 30ff 	mov.w	r0, #4294967295
 800b17c:	b004      	add	sp, #16
 800b17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b182:	4835      	ldr	r0, [pc, #212]	; (800b258 <_printf_i+0x244>)
 800b184:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b188:	6829      	ldr	r1, [r5, #0]
 800b18a:	6823      	ldr	r3, [r4, #0]
 800b18c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b190:	6029      	str	r1, [r5, #0]
 800b192:	061d      	lsls	r5, r3, #24
 800b194:	d514      	bpl.n	800b1c0 <_printf_i+0x1ac>
 800b196:	07df      	lsls	r7, r3, #31
 800b198:	bf44      	itt	mi
 800b19a:	f043 0320 	orrmi.w	r3, r3, #32
 800b19e:	6023      	strmi	r3, [r4, #0]
 800b1a0:	b91e      	cbnz	r6, 800b1aa <_printf_i+0x196>
 800b1a2:	6823      	ldr	r3, [r4, #0]
 800b1a4:	f023 0320 	bic.w	r3, r3, #32
 800b1a8:	6023      	str	r3, [r4, #0]
 800b1aa:	2310      	movs	r3, #16
 800b1ac:	e7b0      	b.n	800b110 <_printf_i+0xfc>
 800b1ae:	6823      	ldr	r3, [r4, #0]
 800b1b0:	f043 0320 	orr.w	r3, r3, #32
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	2378      	movs	r3, #120	; 0x78
 800b1b8:	4828      	ldr	r0, [pc, #160]	; (800b25c <_printf_i+0x248>)
 800b1ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1be:	e7e3      	b.n	800b188 <_printf_i+0x174>
 800b1c0:	0659      	lsls	r1, r3, #25
 800b1c2:	bf48      	it	mi
 800b1c4:	b2b6      	uxthmi	r6, r6
 800b1c6:	e7e6      	b.n	800b196 <_printf_i+0x182>
 800b1c8:	4615      	mov	r5, r2
 800b1ca:	e7bb      	b.n	800b144 <_printf_i+0x130>
 800b1cc:	682b      	ldr	r3, [r5, #0]
 800b1ce:	6826      	ldr	r6, [r4, #0]
 800b1d0:	6961      	ldr	r1, [r4, #20]
 800b1d2:	1d18      	adds	r0, r3, #4
 800b1d4:	6028      	str	r0, [r5, #0]
 800b1d6:	0635      	lsls	r5, r6, #24
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	d501      	bpl.n	800b1e0 <_printf_i+0x1cc>
 800b1dc:	6019      	str	r1, [r3, #0]
 800b1de:	e002      	b.n	800b1e6 <_printf_i+0x1d2>
 800b1e0:	0670      	lsls	r0, r6, #25
 800b1e2:	d5fb      	bpl.n	800b1dc <_printf_i+0x1c8>
 800b1e4:	8019      	strh	r1, [r3, #0]
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	6123      	str	r3, [r4, #16]
 800b1ea:	4615      	mov	r5, r2
 800b1ec:	e7ba      	b.n	800b164 <_printf_i+0x150>
 800b1ee:	682b      	ldr	r3, [r5, #0]
 800b1f0:	1d1a      	adds	r2, r3, #4
 800b1f2:	602a      	str	r2, [r5, #0]
 800b1f4:	681d      	ldr	r5, [r3, #0]
 800b1f6:	6862      	ldr	r2, [r4, #4]
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f7f5 f870 	bl	80002e0 <memchr>
 800b200:	b108      	cbz	r0, 800b206 <_printf_i+0x1f2>
 800b202:	1b40      	subs	r0, r0, r5
 800b204:	6060      	str	r0, [r4, #4]
 800b206:	6863      	ldr	r3, [r4, #4]
 800b208:	6123      	str	r3, [r4, #16]
 800b20a:	2300      	movs	r3, #0
 800b20c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b210:	e7a8      	b.n	800b164 <_printf_i+0x150>
 800b212:	6923      	ldr	r3, [r4, #16]
 800b214:	462a      	mov	r2, r5
 800b216:	4649      	mov	r1, r9
 800b218:	4640      	mov	r0, r8
 800b21a:	47d0      	blx	sl
 800b21c:	3001      	adds	r0, #1
 800b21e:	d0ab      	beq.n	800b178 <_printf_i+0x164>
 800b220:	6823      	ldr	r3, [r4, #0]
 800b222:	079b      	lsls	r3, r3, #30
 800b224:	d413      	bmi.n	800b24e <_printf_i+0x23a>
 800b226:	68e0      	ldr	r0, [r4, #12]
 800b228:	9b03      	ldr	r3, [sp, #12]
 800b22a:	4298      	cmp	r0, r3
 800b22c:	bfb8      	it	lt
 800b22e:	4618      	movlt	r0, r3
 800b230:	e7a4      	b.n	800b17c <_printf_i+0x168>
 800b232:	2301      	movs	r3, #1
 800b234:	4632      	mov	r2, r6
 800b236:	4649      	mov	r1, r9
 800b238:	4640      	mov	r0, r8
 800b23a:	47d0      	blx	sl
 800b23c:	3001      	adds	r0, #1
 800b23e:	d09b      	beq.n	800b178 <_printf_i+0x164>
 800b240:	3501      	adds	r5, #1
 800b242:	68e3      	ldr	r3, [r4, #12]
 800b244:	9903      	ldr	r1, [sp, #12]
 800b246:	1a5b      	subs	r3, r3, r1
 800b248:	42ab      	cmp	r3, r5
 800b24a:	dcf2      	bgt.n	800b232 <_printf_i+0x21e>
 800b24c:	e7eb      	b.n	800b226 <_printf_i+0x212>
 800b24e:	2500      	movs	r5, #0
 800b250:	f104 0619 	add.w	r6, r4, #25
 800b254:	e7f5      	b.n	800b242 <_printf_i+0x22e>
 800b256:	bf00      	nop
 800b258:	0800b939 	.word	0x0800b939
 800b25c:	0800b94a 	.word	0x0800b94a

0800b260 <_sbrk_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	4d06      	ldr	r5, [pc, #24]	; (800b27c <_sbrk_r+0x1c>)
 800b264:	2300      	movs	r3, #0
 800b266:	4604      	mov	r4, r0
 800b268:	4608      	mov	r0, r1
 800b26a:	602b      	str	r3, [r5, #0]
 800b26c:	f7f6 f970 	bl	8001550 <_sbrk>
 800b270:	1c43      	adds	r3, r0, #1
 800b272:	d102      	bne.n	800b27a <_sbrk_r+0x1a>
 800b274:	682b      	ldr	r3, [r5, #0]
 800b276:	b103      	cbz	r3, 800b27a <_sbrk_r+0x1a>
 800b278:	6023      	str	r3, [r4, #0]
 800b27a:	bd38      	pop	{r3, r4, r5, pc}
 800b27c:	240004e8 	.word	0x240004e8

0800b280 <__sread>:
 800b280:	b510      	push	{r4, lr}
 800b282:	460c      	mov	r4, r1
 800b284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b288:	f000 fab2 	bl	800b7f0 <_read_r>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	bfab      	itete	ge
 800b290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b292:	89a3      	ldrhlt	r3, [r4, #12]
 800b294:	181b      	addge	r3, r3, r0
 800b296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b29a:	bfac      	ite	ge
 800b29c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b29e:	81a3      	strhlt	r3, [r4, #12]
 800b2a0:	bd10      	pop	{r4, pc}

0800b2a2 <__swrite>:
 800b2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a6:	461f      	mov	r7, r3
 800b2a8:	898b      	ldrh	r3, [r1, #12]
 800b2aa:	05db      	lsls	r3, r3, #23
 800b2ac:	4605      	mov	r5, r0
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	4616      	mov	r6, r2
 800b2b2:	d505      	bpl.n	800b2c0 <__swrite+0x1e>
 800b2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b8:	2302      	movs	r3, #2
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f000 f9c8 	bl	800b650 <_lseek_r>
 800b2c0:	89a3      	ldrh	r3, [r4, #12]
 800b2c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2ca:	81a3      	strh	r3, [r4, #12]
 800b2cc:	4632      	mov	r2, r6
 800b2ce:	463b      	mov	r3, r7
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d6:	f000 b869 	b.w	800b3ac <_write_r>

0800b2da <__sseek>:
 800b2da:	b510      	push	{r4, lr}
 800b2dc:	460c      	mov	r4, r1
 800b2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2e2:	f000 f9b5 	bl	800b650 <_lseek_r>
 800b2e6:	1c43      	adds	r3, r0, #1
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	bf15      	itete	ne
 800b2ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2f6:	81a3      	strheq	r3, [r4, #12]
 800b2f8:	bf18      	it	ne
 800b2fa:	81a3      	strhne	r3, [r4, #12]
 800b2fc:	bd10      	pop	{r4, pc}

0800b2fe <__sclose>:
 800b2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b302:	f000 b8d3 	b.w	800b4ac <_close_r>
	...

0800b308 <__swbuf_r>:
 800b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30a:	460e      	mov	r6, r1
 800b30c:	4614      	mov	r4, r2
 800b30e:	4605      	mov	r5, r0
 800b310:	b118      	cbz	r0, 800b31a <__swbuf_r+0x12>
 800b312:	6983      	ldr	r3, [r0, #24]
 800b314:	b90b      	cbnz	r3, 800b31a <__swbuf_r+0x12>
 800b316:	f7ff fb81 	bl	800aa1c <__sinit>
 800b31a:	4b21      	ldr	r3, [pc, #132]	; (800b3a0 <__swbuf_r+0x98>)
 800b31c:	429c      	cmp	r4, r3
 800b31e:	d12b      	bne.n	800b378 <__swbuf_r+0x70>
 800b320:	686c      	ldr	r4, [r5, #4]
 800b322:	69a3      	ldr	r3, [r4, #24]
 800b324:	60a3      	str	r3, [r4, #8]
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	071a      	lsls	r2, r3, #28
 800b32a:	d52f      	bpl.n	800b38c <__swbuf_r+0x84>
 800b32c:	6923      	ldr	r3, [r4, #16]
 800b32e:	b36b      	cbz	r3, 800b38c <__swbuf_r+0x84>
 800b330:	6923      	ldr	r3, [r4, #16]
 800b332:	6820      	ldr	r0, [r4, #0]
 800b334:	1ac0      	subs	r0, r0, r3
 800b336:	6963      	ldr	r3, [r4, #20]
 800b338:	b2f6      	uxtb	r6, r6
 800b33a:	4283      	cmp	r3, r0
 800b33c:	4637      	mov	r7, r6
 800b33e:	dc04      	bgt.n	800b34a <__swbuf_r+0x42>
 800b340:	4621      	mov	r1, r4
 800b342:	4628      	mov	r0, r5
 800b344:	f000 f948 	bl	800b5d8 <_fflush_r>
 800b348:	bb30      	cbnz	r0, 800b398 <__swbuf_r+0x90>
 800b34a:	68a3      	ldr	r3, [r4, #8]
 800b34c:	3b01      	subs	r3, #1
 800b34e:	60a3      	str	r3, [r4, #8]
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	1c5a      	adds	r2, r3, #1
 800b354:	6022      	str	r2, [r4, #0]
 800b356:	701e      	strb	r6, [r3, #0]
 800b358:	6963      	ldr	r3, [r4, #20]
 800b35a:	3001      	adds	r0, #1
 800b35c:	4283      	cmp	r3, r0
 800b35e:	d004      	beq.n	800b36a <__swbuf_r+0x62>
 800b360:	89a3      	ldrh	r3, [r4, #12]
 800b362:	07db      	lsls	r3, r3, #31
 800b364:	d506      	bpl.n	800b374 <__swbuf_r+0x6c>
 800b366:	2e0a      	cmp	r6, #10
 800b368:	d104      	bne.n	800b374 <__swbuf_r+0x6c>
 800b36a:	4621      	mov	r1, r4
 800b36c:	4628      	mov	r0, r5
 800b36e:	f000 f933 	bl	800b5d8 <_fflush_r>
 800b372:	b988      	cbnz	r0, 800b398 <__swbuf_r+0x90>
 800b374:	4638      	mov	r0, r7
 800b376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b378:	4b0a      	ldr	r3, [pc, #40]	; (800b3a4 <__swbuf_r+0x9c>)
 800b37a:	429c      	cmp	r4, r3
 800b37c:	d101      	bne.n	800b382 <__swbuf_r+0x7a>
 800b37e:	68ac      	ldr	r4, [r5, #8]
 800b380:	e7cf      	b.n	800b322 <__swbuf_r+0x1a>
 800b382:	4b09      	ldr	r3, [pc, #36]	; (800b3a8 <__swbuf_r+0xa0>)
 800b384:	429c      	cmp	r4, r3
 800b386:	bf08      	it	eq
 800b388:	68ec      	ldreq	r4, [r5, #12]
 800b38a:	e7ca      	b.n	800b322 <__swbuf_r+0x1a>
 800b38c:	4621      	mov	r1, r4
 800b38e:	4628      	mov	r0, r5
 800b390:	f000 f81e 	bl	800b3d0 <__swsetup_r>
 800b394:	2800      	cmp	r0, #0
 800b396:	d0cb      	beq.n	800b330 <__swbuf_r+0x28>
 800b398:	f04f 37ff 	mov.w	r7, #4294967295
 800b39c:	e7ea      	b.n	800b374 <__swbuf_r+0x6c>
 800b39e:	bf00      	nop
 800b3a0:	0800b8e8 	.word	0x0800b8e8
 800b3a4:	0800b908 	.word	0x0800b908
 800b3a8:	0800b8c8 	.word	0x0800b8c8

0800b3ac <_write_r>:
 800b3ac:	b538      	push	{r3, r4, r5, lr}
 800b3ae:	4d07      	ldr	r5, [pc, #28]	; (800b3cc <_write_r+0x20>)
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	4608      	mov	r0, r1
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	602a      	str	r2, [r5, #0]
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	f7f6 f877 	bl	80014ae <_write>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	d102      	bne.n	800b3ca <_write_r+0x1e>
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	b103      	cbz	r3, 800b3ca <_write_r+0x1e>
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}
 800b3cc:	240004e8 	.word	0x240004e8

0800b3d0 <__swsetup_r>:
 800b3d0:	4b32      	ldr	r3, [pc, #200]	; (800b49c <__swsetup_r+0xcc>)
 800b3d2:	b570      	push	{r4, r5, r6, lr}
 800b3d4:	681d      	ldr	r5, [r3, #0]
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	460c      	mov	r4, r1
 800b3da:	b125      	cbz	r5, 800b3e6 <__swsetup_r+0x16>
 800b3dc:	69ab      	ldr	r3, [r5, #24]
 800b3de:	b913      	cbnz	r3, 800b3e6 <__swsetup_r+0x16>
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	f7ff fb1b 	bl	800aa1c <__sinit>
 800b3e6:	4b2e      	ldr	r3, [pc, #184]	; (800b4a0 <__swsetup_r+0xd0>)
 800b3e8:	429c      	cmp	r4, r3
 800b3ea:	d10f      	bne.n	800b40c <__swsetup_r+0x3c>
 800b3ec:	686c      	ldr	r4, [r5, #4]
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3f4:	0719      	lsls	r1, r3, #28
 800b3f6:	d42c      	bmi.n	800b452 <__swsetup_r+0x82>
 800b3f8:	06dd      	lsls	r5, r3, #27
 800b3fa:	d411      	bmi.n	800b420 <__swsetup_r+0x50>
 800b3fc:	2309      	movs	r3, #9
 800b3fe:	6033      	str	r3, [r6, #0]
 800b400:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b404:	81a3      	strh	r3, [r4, #12]
 800b406:	f04f 30ff 	mov.w	r0, #4294967295
 800b40a:	e03e      	b.n	800b48a <__swsetup_r+0xba>
 800b40c:	4b25      	ldr	r3, [pc, #148]	; (800b4a4 <__swsetup_r+0xd4>)
 800b40e:	429c      	cmp	r4, r3
 800b410:	d101      	bne.n	800b416 <__swsetup_r+0x46>
 800b412:	68ac      	ldr	r4, [r5, #8]
 800b414:	e7eb      	b.n	800b3ee <__swsetup_r+0x1e>
 800b416:	4b24      	ldr	r3, [pc, #144]	; (800b4a8 <__swsetup_r+0xd8>)
 800b418:	429c      	cmp	r4, r3
 800b41a:	bf08      	it	eq
 800b41c:	68ec      	ldreq	r4, [r5, #12]
 800b41e:	e7e6      	b.n	800b3ee <__swsetup_r+0x1e>
 800b420:	0758      	lsls	r0, r3, #29
 800b422:	d512      	bpl.n	800b44a <__swsetup_r+0x7a>
 800b424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b426:	b141      	cbz	r1, 800b43a <__swsetup_r+0x6a>
 800b428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b42c:	4299      	cmp	r1, r3
 800b42e:	d002      	beq.n	800b436 <__swsetup_r+0x66>
 800b430:	4630      	mov	r0, r6
 800b432:	f000 f991 	bl	800b758 <_free_r>
 800b436:	2300      	movs	r3, #0
 800b438:	6363      	str	r3, [r4, #52]	; 0x34
 800b43a:	89a3      	ldrh	r3, [r4, #12]
 800b43c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b440:	81a3      	strh	r3, [r4, #12]
 800b442:	2300      	movs	r3, #0
 800b444:	6063      	str	r3, [r4, #4]
 800b446:	6923      	ldr	r3, [r4, #16]
 800b448:	6023      	str	r3, [r4, #0]
 800b44a:	89a3      	ldrh	r3, [r4, #12]
 800b44c:	f043 0308 	orr.w	r3, r3, #8
 800b450:	81a3      	strh	r3, [r4, #12]
 800b452:	6923      	ldr	r3, [r4, #16]
 800b454:	b94b      	cbnz	r3, 800b46a <__swsetup_r+0x9a>
 800b456:	89a3      	ldrh	r3, [r4, #12]
 800b458:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b45c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b460:	d003      	beq.n	800b46a <__swsetup_r+0x9a>
 800b462:	4621      	mov	r1, r4
 800b464:	4630      	mov	r0, r6
 800b466:	f000 f92b 	bl	800b6c0 <__smakebuf_r>
 800b46a:	89a0      	ldrh	r0, [r4, #12]
 800b46c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b470:	f010 0301 	ands.w	r3, r0, #1
 800b474:	d00a      	beq.n	800b48c <__swsetup_r+0xbc>
 800b476:	2300      	movs	r3, #0
 800b478:	60a3      	str	r3, [r4, #8]
 800b47a:	6963      	ldr	r3, [r4, #20]
 800b47c:	425b      	negs	r3, r3
 800b47e:	61a3      	str	r3, [r4, #24]
 800b480:	6923      	ldr	r3, [r4, #16]
 800b482:	b943      	cbnz	r3, 800b496 <__swsetup_r+0xc6>
 800b484:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b488:	d1ba      	bne.n	800b400 <__swsetup_r+0x30>
 800b48a:	bd70      	pop	{r4, r5, r6, pc}
 800b48c:	0781      	lsls	r1, r0, #30
 800b48e:	bf58      	it	pl
 800b490:	6963      	ldrpl	r3, [r4, #20]
 800b492:	60a3      	str	r3, [r4, #8]
 800b494:	e7f4      	b.n	800b480 <__swsetup_r+0xb0>
 800b496:	2000      	movs	r0, #0
 800b498:	e7f7      	b.n	800b48a <__swsetup_r+0xba>
 800b49a:	bf00      	nop
 800b49c:	24000010 	.word	0x24000010
 800b4a0:	0800b8e8 	.word	0x0800b8e8
 800b4a4:	0800b908 	.word	0x0800b908
 800b4a8:	0800b8c8 	.word	0x0800b8c8

0800b4ac <_close_r>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	4d06      	ldr	r5, [pc, #24]	; (800b4c8 <_close_r+0x1c>)
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	4608      	mov	r0, r1
 800b4b6:	602b      	str	r3, [r5, #0]
 800b4b8:	f7f6 f815 	bl	80014e6 <_close>
 800b4bc:	1c43      	adds	r3, r0, #1
 800b4be:	d102      	bne.n	800b4c6 <_close_r+0x1a>
 800b4c0:	682b      	ldr	r3, [r5, #0]
 800b4c2:	b103      	cbz	r3, 800b4c6 <_close_r+0x1a>
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	bd38      	pop	{r3, r4, r5, pc}
 800b4c8:	240004e8 	.word	0x240004e8

0800b4cc <__sflush_r>:
 800b4cc:	898a      	ldrh	r2, [r1, #12]
 800b4ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d2:	4605      	mov	r5, r0
 800b4d4:	0710      	lsls	r0, r2, #28
 800b4d6:	460c      	mov	r4, r1
 800b4d8:	d458      	bmi.n	800b58c <__sflush_r+0xc0>
 800b4da:	684b      	ldr	r3, [r1, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	dc05      	bgt.n	800b4ec <__sflush_r+0x20>
 800b4e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	dc02      	bgt.n	800b4ec <__sflush_r+0x20>
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4ee:	2e00      	cmp	r6, #0
 800b4f0:	d0f9      	beq.n	800b4e6 <__sflush_r+0x1a>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4f8:	682f      	ldr	r7, [r5, #0]
 800b4fa:	602b      	str	r3, [r5, #0]
 800b4fc:	d032      	beq.n	800b564 <__sflush_r+0x98>
 800b4fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b500:	89a3      	ldrh	r3, [r4, #12]
 800b502:	075a      	lsls	r2, r3, #29
 800b504:	d505      	bpl.n	800b512 <__sflush_r+0x46>
 800b506:	6863      	ldr	r3, [r4, #4]
 800b508:	1ac0      	subs	r0, r0, r3
 800b50a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b50c:	b10b      	cbz	r3, 800b512 <__sflush_r+0x46>
 800b50e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b510:	1ac0      	subs	r0, r0, r3
 800b512:	2300      	movs	r3, #0
 800b514:	4602      	mov	r2, r0
 800b516:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b518:	6a21      	ldr	r1, [r4, #32]
 800b51a:	4628      	mov	r0, r5
 800b51c:	47b0      	blx	r6
 800b51e:	1c43      	adds	r3, r0, #1
 800b520:	89a3      	ldrh	r3, [r4, #12]
 800b522:	d106      	bne.n	800b532 <__sflush_r+0x66>
 800b524:	6829      	ldr	r1, [r5, #0]
 800b526:	291d      	cmp	r1, #29
 800b528:	d82c      	bhi.n	800b584 <__sflush_r+0xb8>
 800b52a:	4a2a      	ldr	r2, [pc, #168]	; (800b5d4 <__sflush_r+0x108>)
 800b52c:	40ca      	lsrs	r2, r1
 800b52e:	07d6      	lsls	r6, r2, #31
 800b530:	d528      	bpl.n	800b584 <__sflush_r+0xb8>
 800b532:	2200      	movs	r2, #0
 800b534:	6062      	str	r2, [r4, #4]
 800b536:	04d9      	lsls	r1, r3, #19
 800b538:	6922      	ldr	r2, [r4, #16]
 800b53a:	6022      	str	r2, [r4, #0]
 800b53c:	d504      	bpl.n	800b548 <__sflush_r+0x7c>
 800b53e:	1c42      	adds	r2, r0, #1
 800b540:	d101      	bne.n	800b546 <__sflush_r+0x7a>
 800b542:	682b      	ldr	r3, [r5, #0]
 800b544:	b903      	cbnz	r3, 800b548 <__sflush_r+0x7c>
 800b546:	6560      	str	r0, [r4, #84]	; 0x54
 800b548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b54a:	602f      	str	r7, [r5, #0]
 800b54c:	2900      	cmp	r1, #0
 800b54e:	d0ca      	beq.n	800b4e6 <__sflush_r+0x1a>
 800b550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b554:	4299      	cmp	r1, r3
 800b556:	d002      	beq.n	800b55e <__sflush_r+0x92>
 800b558:	4628      	mov	r0, r5
 800b55a:	f000 f8fd 	bl	800b758 <_free_r>
 800b55e:	2000      	movs	r0, #0
 800b560:	6360      	str	r0, [r4, #52]	; 0x34
 800b562:	e7c1      	b.n	800b4e8 <__sflush_r+0x1c>
 800b564:	6a21      	ldr	r1, [r4, #32]
 800b566:	2301      	movs	r3, #1
 800b568:	4628      	mov	r0, r5
 800b56a:	47b0      	blx	r6
 800b56c:	1c41      	adds	r1, r0, #1
 800b56e:	d1c7      	bne.n	800b500 <__sflush_r+0x34>
 800b570:	682b      	ldr	r3, [r5, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d0c4      	beq.n	800b500 <__sflush_r+0x34>
 800b576:	2b1d      	cmp	r3, #29
 800b578:	d001      	beq.n	800b57e <__sflush_r+0xb2>
 800b57a:	2b16      	cmp	r3, #22
 800b57c:	d101      	bne.n	800b582 <__sflush_r+0xb6>
 800b57e:	602f      	str	r7, [r5, #0]
 800b580:	e7b1      	b.n	800b4e6 <__sflush_r+0x1a>
 800b582:	89a3      	ldrh	r3, [r4, #12]
 800b584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b588:	81a3      	strh	r3, [r4, #12]
 800b58a:	e7ad      	b.n	800b4e8 <__sflush_r+0x1c>
 800b58c:	690f      	ldr	r7, [r1, #16]
 800b58e:	2f00      	cmp	r7, #0
 800b590:	d0a9      	beq.n	800b4e6 <__sflush_r+0x1a>
 800b592:	0793      	lsls	r3, r2, #30
 800b594:	680e      	ldr	r6, [r1, #0]
 800b596:	bf08      	it	eq
 800b598:	694b      	ldreq	r3, [r1, #20]
 800b59a:	600f      	str	r7, [r1, #0]
 800b59c:	bf18      	it	ne
 800b59e:	2300      	movne	r3, #0
 800b5a0:	eba6 0807 	sub.w	r8, r6, r7
 800b5a4:	608b      	str	r3, [r1, #8]
 800b5a6:	f1b8 0f00 	cmp.w	r8, #0
 800b5aa:	dd9c      	ble.n	800b4e6 <__sflush_r+0x1a>
 800b5ac:	6a21      	ldr	r1, [r4, #32]
 800b5ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b5b0:	4643      	mov	r3, r8
 800b5b2:	463a      	mov	r2, r7
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	47b0      	blx	r6
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	dc06      	bgt.n	800b5ca <__sflush_r+0xfe>
 800b5bc:	89a3      	ldrh	r3, [r4, #12]
 800b5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5c2:	81a3      	strh	r3, [r4, #12]
 800b5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c8:	e78e      	b.n	800b4e8 <__sflush_r+0x1c>
 800b5ca:	4407      	add	r7, r0
 800b5cc:	eba8 0800 	sub.w	r8, r8, r0
 800b5d0:	e7e9      	b.n	800b5a6 <__sflush_r+0xda>
 800b5d2:	bf00      	nop
 800b5d4:	20400001 	.word	0x20400001

0800b5d8 <_fflush_r>:
 800b5d8:	b538      	push	{r3, r4, r5, lr}
 800b5da:	690b      	ldr	r3, [r1, #16]
 800b5dc:	4605      	mov	r5, r0
 800b5de:	460c      	mov	r4, r1
 800b5e0:	b913      	cbnz	r3, 800b5e8 <_fflush_r+0x10>
 800b5e2:	2500      	movs	r5, #0
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	b118      	cbz	r0, 800b5f2 <_fflush_r+0x1a>
 800b5ea:	6983      	ldr	r3, [r0, #24]
 800b5ec:	b90b      	cbnz	r3, 800b5f2 <_fflush_r+0x1a>
 800b5ee:	f7ff fa15 	bl	800aa1c <__sinit>
 800b5f2:	4b14      	ldr	r3, [pc, #80]	; (800b644 <_fflush_r+0x6c>)
 800b5f4:	429c      	cmp	r4, r3
 800b5f6:	d11b      	bne.n	800b630 <_fflush_r+0x58>
 800b5f8:	686c      	ldr	r4, [r5, #4]
 800b5fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d0ef      	beq.n	800b5e2 <_fflush_r+0xa>
 800b602:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b604:	07d0      	lsls	r0, r2, #31
 800b606:	d404      	bmi.n	800b612 <_fflush_r+0x3a>
 800b608:	0599      	lsls	r1, r3, #22
 800b60a:	d402      	bmi.n	800b612 <_fflush_r+0x3a>
 800b60c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b60e:	f7ff faa3 	bl	800ab58 <__retarget_lock_acquire_recursive>
 800b612:	4628      	mov	r0, r5
 800b614:	4621      	mov	r1, r4
 800b616:	f7ff ff59 	bl	800b4cc <__sflush_r>
 800b61a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b61c:	07da      	lsls	r2, r3, #31
 800b61e:	4605      	mov	r5, r0
 800b620:	d4e0      	bmi.n	800b5e4 <_fflush_r+0xc>
 800b622:	89a3      	ldrh	r3, [r4, #12]
 800b624:	059b      	lsls	r3, r3, #22
 800b626:	d4dd      	bmi.n	800b5e4 <_fflush_r+0xc>
 800b628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b62a:	f7ff fa96 	bl	800ab5a <__retarget_lock_release_recursive>
 800b62e:	e7d9      	b.n	800b5e4 <_fflush_r+0xc>
 800b630:	4b05      	ldr	r3, [pc, #20]	; (800b648 <_fflush_r+0x70>)
 800b632:	429c      	cmp	r4, r3
 800b634:	d101      	bne.n	800b63a <_fflush_r+0x62>
 800b636:	68ac      	ldr	r4, [r5, #8]
 800b638:	e7df      	b.n	800b5fa <_fflush_r+0x22>
 800b63a:	4b04      	ldr	r3, [pc, #16]	; (800b64c <_fflush_r+0x74>)
 800b63c:	429c      	cmp	r4, r3
 800b63e:	bf08      	it	eq
 800b640:	68ec      	ldreq	r4, [r5, #12]
 800b642:	e7da      	b.n	800b5fa <_fflush_r+0x22>
 800b644:	0800b8e8 	.word	0x0800b8e8
 800b648:	0800b908 	.word	0x0800b908
 800b64c:	0800b8c8 	.word	0x0800b8c8

0800b650 <_lseek_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4d07      	ldr	r5, [pc, #28]	; (800b670 <_lseek_r+0x20>)
 800b654:	4604      	mov	r4, r0
 800b656:	4608      	mov	r0, r1
 800b658:	4611      	mov	r1, r2
 800b65a:	2200      	movs	r2, #0
 800b65c:	602a      	str	r2, [r5, #0]
 800b65e:	461a      	mov	r2, r3
 800b660:	f7f5 ff68 	bl	8001534 <_lseek>
 800b664:	1c43      	adds	r3, r0, #1
 800b666:	d102      	bne.n	800b66e <_lseek_r+0x1e>
 800b668:	682b      	ldr	r3, [r5, #0]
 800b66a:	b103      	cbz	r3, 800b66e <_lseek_r+0x1e>
 800b66c:	6023      	str	r3, [r4, #0]
 800b66e:	bd38      	pop	{r3, r4, r5, pc}
 800b670:	240004e8 	.word	0x240004e8

0800b674 <__swhatbuf_r>:
 800b674:	b570      	push	{r4, r5, r6, lr}
 800b676:	460e      	mov	r6, r1
 800b678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b67c:	2900      	cmp	r1, #0
 800b67e:	b096      	sub	sp, #88	; 0x58
 800b680:	4614      	mov	r4, r2
 800b682:	461d      	mov	r5, r3
 800b684:	da08      	bge.n	800b698 <__swhatbuf_r+0x24>
 800b686:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	602a      	str	r2, [r5, #0]
 800b68e:	061a      	lsls	r2, r3, #24
 800b690:	d410      	bmi.n	800b6b4 <__swhatbuf_r+0x40>
 800b692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b696:	e00e      	b.n	800b6b6 <__swhatbuf_r+0x42>
 800b698:	466a      	mov	r2, sp
 800b69a:	f000 f8bb 	bl	800b814 <_fstat_r>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	dbf1      	blt.n	800b686 <__swhatbuf_r+0x12>
 800b6a2:	9a01      	ldr	r2, [sp, #4]
 800b6a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b6a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b6ac:	425a      	negs	r2, r3
 800b6ae:	415a      	adcs	r2, r3
 800b6b0:	602a      	str	r2, [r5, #0]
 800b6b2:	e7ee      	b.n	800b692 <__swhatbuf_r+0x1e>
 800b6b4:	2340      	movs	r3, #64	; 0x40
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	b016      	add	sp, #88	; 0x58
 800b6bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b6c0 <__smakebuf_r>:
 800b6c0:	898b      	ldrh	r3, [r1, #12]
 800b6c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6c4:	079d      	lsls	r5, r3, #30
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	460c      	mov	r4, r1
 800b6ca:	d507      	bpl.n	800b6dc <__smakebuf_r+0x1c>
 800b6cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	6123      	str	r3, [r4, #16]
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	6163      	str	r3, [r4, #20]
 800b6d8:	b002      	add	sp, #8
 800b6da:	bd70      	pop	{r4, r5, r6, pc}
 800b6dc:	ab01      	add	r3, sp, #4
 800b6de:	466a      	mov	r2, sp
 800b6e0:	f7ff ffc8 	bl	800b674 <__swhatbuf_r>
 800b6e4:	9900      	ldr	r1, [sp, #0]
 800b6e6:	4605      	mov	r5, r0
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f7ff fa57 	bl	800ab9c <_malloc_r>
 800b6ee:	b948      	cbnz	r0, 800b704 <__smakebuf_r+0x44>
 800b6f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6f4:	059a      	lsls	r2, r3, #22
 800b6f6:	d4ef      	bmi.n	800b6d8 <__smakebuf_r+0x18>
 800b6f8:	f023 0303 	bic.w	r3, r3, #3
 800b6fc:	f043 0302 	orr.w	r3, r3, #2
 800b700:	81a3      	strh	r3, [r4, #12]
 800b702:	e7e3      	b.n	800b6cc <__smakebuf_r+0xc>
 800b704:	4b0d      	ldr	r3, [pc, #52]	; (800b73c <__smakebuf_r+0x7c>)
 800b706:	62b3      	str	r3, [r6, #40]	; 0x28
 800b708:	89a3      	ldrh	r3, [r4, #12]
 800b70a:	6020      	str	r0, [r4, #0]
 800b70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b710:	81a3      	strh	r3, [r4, #12]
 800b712:	9b00      	ldr	r3, [sp, #0]
 800b714:	6163      	str	r3, [r4, #20]
 800b716:	9b01      	ldr	r3, [sp, #4]
 800b718:	6120      	str	r0, [r4, #16]
 800b71a:	b15b      	cbz	r3, 800b734 <__smakebuf_r+0x74>
 800b71c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b720:	4630      	mov	r0, r6
 800b722:	f000 f889 	bl	800b838 <_isatty_r>
 800b726:	b128      	cbz	r0, 800b734 <__smakebuf_r+0x74>
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	f023 0303 	bic.w	r3, r3, #3
 800b72e:	f043 0301 	orr.w	r3, r3, #1
 800b732:	81a3      	strh	r3, [r4, #12]
 800b734:	89a0      	ldrh	r0, [r4, #12]
 800b736:	4305      	orrs	r5, r0
 800b738:	81a5      	strh	r5, [r4, #12]
 800b73a:	e7cd      	b.n	800b6d8 <__smakebuf_r+0x18>
 800b73c:	0800a9b5 	.word	0x0800a9b5

0800b740 <__malloc_lock>:
 800b740:	4801      	ldr	r0, [pc, #4]	; (800b748 <__malloc_lock+0x8>)
 800b742:	f7ff ba09 	b.w	800ab58 <__retarget_lock_acquire_recursive>
 800b746:	bf00      	nop
 800b748:	240004dc 	.word	0x240004dc

0800b74c <__malloc_unlock>:
 800b74c:	4801      	ldr	r0, [pc, #4]	; (800b754 <__malloc_unlock+0x8>)
 800b74e:	f7ff ba04 	b.w	800ab5a <__retarget_lock_release_recursive>
 800b752:	bf00      	nop
 800b754:	240004dc 	.word	0x240004dc

0800b758 <_free_r>:
 800b758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b75a:	2900      	cmp	r1, #0
 800b75c:	d044      	beq.n	800b7e8 <_free_r+0x90>
 800b75e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b762:	9001      	str	r0, [sp, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	f1a1 0404 	sub.w	r4, r1, #4
 800b76a:	bfb8      	it	lt
 800b76c:	18e4      	addlt	r4, r4, r3
 800b76e:	f7ff ffe7 	bl	800b740 <__malloc_lock>
 800b772:	4a1e      	ldr	r2, [pc, #120]	; (800b7ec <_free_r+0x94>)
 800b774:	9801      	ldr	r0, [sp, #4]
 800b776:	6813      	ldr	r3, [r2, #0]
 800b778:	b933      	cbnz	r3, 800b788 <_free_r+0x30>
 800b77a:	6063      	str	r3, [r4, #4]
 800b77c:	6014      	str	r4, [r2, #0]
 800b77e:	b003      	add	sp, #12
 800b780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b784:	f7ff bfe2 	b.w	800b74c <__malloc_unlock>
 800b788:	42a3      	cmp	r3, r4
 800b78a:	d908      	bls.n	800b79e <_free_r+0x46>
 800b78c:	6825      	ldr	r5, [r4, #0]
 800b78e:	1961      	adds	r1, r4, r5
 800b790:	428b      	cmp	r3, r1
 800b792:	bf01      	itttt	eq
 800b794:	6819      	ldreq	r1, [r3, #0]
 800b796:	685b      	ldreq	r3, [r3, #4]
 800b798:	1949      	addeq	r1, r1, r5
 800b79a:	6021      	streq	r1, [r4, #0]
 800b79c:	e7ed      	b.n	800b77a <_free_r+0x22>
 800b79e:	461a      	mov	r2, r3
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	b10b      	cbz	r3, 800b7a8 <_free_r+0x50>
 800b7a4:	42a3      	cmp	r3, r4
 800b7a6:	d9fa      	bls.n	800b79e <_free_r+0x46>
 800b7a8:	6811      	ldr	r1, [r2, #0]
 800b7aa:	1855      	adds	r5, r2, r1
 800b7ac:	42a5      	cmp	r5, r4
 800b7ae:	d10b      	bne.n	800b7c8 <_free_r+0x70>
 800b7b0:	6824      	ldr	r4, [r4, #0]
 800b7b2:	4421      	add	r1, r4
 800b7b4:	1854      	adds	r4, r2, r1
 800b7b6:	42a3      	cmp	r3, r4
 800b7b8:	6011      	str	r1, [r2, #0]
 800b7ba:	d1e0      	bne.n	800b77e <_free_r+0x26>
 800b7bc:	681c      	ldr	r4, [r3, #0]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	6053      	str	r3, [r2, #4]
 800b7c2:	4421      	add	r1, r4
 800b7c4:	6011      	str	r1, [r2, #0]
 800b7c6:	e7da      	b.n	800b77e <_free_r+0x26>
 800b7c8:	d902      	bls.n	800b7d0 <_free_r+0x78>
 800b7ca:	230c      	movs	r3, #12
 800b7cc:	6003      	str	r3, [r0, #0]
 800b7ce:	e7d6      	b.n	800b77e <_free_r+0x26>
 800b7d0:	6825      	ldr	r5, [r4, #0]
 800b7d2:	1961      	adds	r1, r4, r5
 800b7d4:	428b      	cmp	r3, r1
 800b7d6:	bf04      	itt	eq
 800b7d8:	6819      	ldreq	r1, [r3, #0]
 800b7da:	685b      	ldreq	r3, [r3, #4]
 800b7dc:	6063      	str	r3, [r4, #4]
 800b7de:	bf04      	itt	eq
 800b7e0:	1949      	addeq	r1, r1, r5
 800b7e2:	6021      	streq	r1, [r4, #0]
 800b7e4:	6054      	str	r4, [r2, #4]
 800b7e6:	e7ca      	b.n	800b77e <_free_r+0x26>
 800b7e8:	b003      	add	sp, #12
 800b7ea:	bd30      	pop	{r4, r5, pc}
 800b7ec:	240004e0 	.word	0x240004e0

0800b7f0 <_read_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d07      	ldr	r5, [pc, #28]	; (800b810 <_read_r+0x20>)
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	4608      	mov	r0, r1
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	602a      	str	r2, [r5, #0]
 800b7fe:	461a      	mov	r2, r3
 800b800:	f7f5 fe38 	bl	8001474 <_read>
 800b804:	1c43      	adds	r3, r0, #1
 800b806:	d102      	bne.n	800b80e <_read_r+0x1e>
 800b808:	682b      	ldr	r3, [r5, #0]
 800b80a:	b103      	cbz	r3, 800b80e <_read_r+0x1e>
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	bd38      	pop	{r3, r4, r5, pc}
 800b810:	240004e8 	.word	0x240004e8

0800b814 <_fstat_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4d07      	ldr	r5, [pc, #28]	; (800b834 <_fstat_r+0x20>)
 800b818:	2300      	movs	r3, #0
 800b81a:	4604      	mov	r4, r0
 800b81c:	4608      	mov	r0, r1
 800b81e:	4611      	mov	r1, r2
 800b820:	602b      	str	r3, [r5, #0]
 800b822:	f7f5 fe6c 	bl	80014fe <_fstat>
 800b826:	1c43      	adds	r3, r0, #1
 800b828:	d102      	bne.n	800b830 <_fstat_r+0x1c>
 800b82a:	682b      	ldr	r3, [r5, #0]
 800b82c:	b103      	cbz	r3, 800b830 <_fstat_r+0x1c>
 800b82e:	6023      	str	r3, [r4, #0]
 800b830:	bd38      	pop	{r3, r4, r5, pc}
 800b832:	bf00      	nop
 800b834:	240004e8 	.word	0x240004e8

0800b838 <_isatty_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	4d06      	ldr	r5, [pc, #24]	; (800b854 <_isatty_r+0x1c>)
 800b83c:	2300      	movs	r3, #0
 800b83e:	4604      	mov	r4, r0
 800b840:	4608      	mov	r0, r1
 800b842:	602b      	str	r3, [r5, #0]
 800b844:	f7f5 fe6b 	bl	800151e <_isatty>
 800b848:	1c43      	adds	r3, r0, #1
 800b84a:	d102      	bne.n	800b852 <_isatty_r+0x1a>
 800b84c:	682b      	ldr	r3, [r5, #0]
 800b84e:	b103      	cbz	r3, 800b852 <_isatty_r+0x1a>
 800b850:	6023      	str	r3, [r4, #0]
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	240004e8 	.word	0x240004e8

0800b858 <_init>:
 800b858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85a:	bf00      	nop
 800b85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b85e:	bc08      	pop	{r3}
 800b860:	469e      	mov	lr, r3
 800b862:	4770      	bx	lr

0800b864 <_fini>:
 800b864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b866:	bf00      	nop
 800b868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b86a:	bc08      	pop	{r3}
 800b86c:	469e      	mov	lr, r3
 800b86e:	4770      	bx	lr
