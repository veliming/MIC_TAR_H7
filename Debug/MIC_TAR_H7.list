
MIC_TAR_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be58  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006f30  0800c0f8  0800c0f8  0001c0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013028  08013028  00023028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801302c  0801302c  0002302c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000104  24000000  08013030  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000908  24000104  08013134  00030104  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000a0c  08013134  00030a0c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001813d  00000000  00000000  00030132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000314b  00000000  00000000  0004826f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000012b8  00000000  00000000  0004b3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001118  00000000  00000000  0004c678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039222  00000000  00000000  0004d790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001a0c8  00000000  00000000  000869b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00164ff7  00000000  00000000  000a0a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00205a71  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005090  00000000  00000000  00205ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000104 	.word	0x24000104
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c0e0 	.word	0x0800c0e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000108 	.word	0x24000108
 80002dc:	0800c0e0 	.word	0x0800c0e0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_DMA_Init+0x5c>)
 8000388:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800038c:	4a13      	ldr	r2, [pc, #76]	; (80003dc <MX_DMA_Init+0x5c>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_DMA_Init+0x5c>)
 8000398:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800039c:	f003 0301 	and.w	r3, r3, #1
 80003a0:	607b      	str	r3, [r7, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2100      	movs	r1, #0
 80003a8:	200c      	movs	r0, #12
 80003aa:	f003 f9d0 	bl	800374e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80003ae:	200c      	movs	r0, #12
 80003b0:	f003 f9e7 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2100      	movs	r1, #0
 80003b8:	200d      	movs	r0, #13
 80003ba:	f003 f9c8 	bl	800374e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80003be:	200d      	movs	r0, #13
 80003c0:	f003 f9df 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2100      	movs	r1, #0
 80003c8:	200e      	movs	r0, #14
 80003ca:	f003 f9c0 	bl	800374e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80003ce:	200e      	movs	r0, #14
 80003d0:	f003 f9d7 	bl	8003782 <HAL_NVIC_EnableIRQ>

}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	58024400 	.word	0x58024400

080003e0 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b08a      	sub	sp, #40	; 0x28
 80003e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 0314 	add.w	r3, r7, #20
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003f6:	4b42      	ldr	r3, [pc, #264]	; (8000500 <MX_GPIO_Init+0x120>)
 80003f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003fc:	4a40      	ldr	r2, [pc, #256]	; (8000500 <MX_GPIO_Init+0x120>)
 80003fe:	f043 0310 	orr.w	r3, r3, #16
 8000402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000406:	4b3e      	ldr	r3, [pc, #248]	; (8000500 <MX_GPIO_Init+0x120>)
 8000408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800040c:	f003 0310 	and.w	r3, r3, #16
 8000410:	613b      	str	r3, [r7, #16]
 8000412:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000414:	4b3a      	ldr	r3, [pc, #232]	; (8000500 <MX_GPIO_Init+0x120>)
 8000416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800041a:	4a39      	ldr	r2, [pc, #228]	; (8000500 <MX_GPIO_Init+0x120>)
 800041c:	f043 0304 	orr.w	r3, r3, #4
 8000420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000424:	4b36      	ldr	r3, [pc, #216]	; (8000500 <MX_GPIO_Init+0x120>)
 8000426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800042a:	f003 0304 	and.w	r3, r3, #4
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000432:	4b33      	ldr	r3, [pc, #204]	; (8000500 <MX_GPIO_Init+0x120>)
 8000434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000438:	4a31      	ldr	r2, [pc, #196]	; (8000500 <MX_GPIO_Init+0x120>)
 800043a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800043e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000442:	4b2f      	ldr	r3, [pc, #188]	; (8000500 <MX_GPIO_Init+0x120>)
 8000444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b2b      	ldr	r3, [pc, #172]	; (8000500 <MX_GPIO_Init+0x120>)
 8000452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000456:	4a2a      	ldr	r2, [pc, #168]	; (8000500 <MX_GPIO_Init+0x120>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000460:	4b27      	ldr	r3, [pc, #156]	; (8000500 <MX_GPIO_Init+0x120>)
 8000462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046e:	4b24      	ldr	r3, [pc, #144]	; (8000500 <MX_GPIO_Init+0x120>)
 8000470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000474:	4a22      	ldr	r2, [pc, #136]	; (8000500 <MX_GPIO_Init+0x120>)
 8000476:	f043 0302 	orr.w	r3, r3, #2
 800047a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800047e:	4b20      	ldr	r3, [pc, #128]	; (8000500 <MX_GPIO_Init+0x120>)
 8000480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000484:	f003 0302 	and.w	r3, r3, #2
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2108      	movs	r1, #8
 8000490:	481c      	ldr	r0, [pc, #112]	; (8000504 <MX_GPIO_Init+0x124>)
 8000492:	f005 fc31 	bl	8005cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800049c:	4819      	ldr	r0, [pc, #100]	; (8000504 <MX_GPIO_Init+0x124>)
 800049e:	f005 fc2b 	bl	8005cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004a2:	2308      	movs	r3, #8
 80004a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a6:	2301      	movs	r3, #1
 80004a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ae:	2300      	movs	r3, #0
 80004b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004b2:	f107 0314 	add.w	r3, r7, #20
 80004b6:	4619      	mov	r1, r3
 80004b8:	4812      	ldr	r0, [pc, #72]	; (8000504 <MX_GPIO_Init+0x124>)
 80004ba:	f005 fa55 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80004be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004c8:	2302      	movs	r3, #2
 80004ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	4619      	mov	r1, r3
 80004d2:	480d      	ldr	r0, [pc, #52]	; (8000508 <MX_GPIO_Init+0x128>)
 80004d4:	f005 fa48 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 80004d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80004dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004de:	2301      	movs	r3, #1
 80004e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004e6:	2303      	movs	r3, #3
 80004e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	4619      	mov	r1, r3
 80004f0:	4804      	ldr	r0, [pc, #16]	; (8000504 <MX_GPIO_Init+0x124>)
 80004f2:	f005 fa39 	bl	8005968 <HAL_GPIO_Init>

}
 80004f6:	bf00      	nop
 80004f8:	3728      	adds	r7, #40	; 0x28
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	58024400 	.word	0x58024400
 8000504:	58021000 	.word	0x58021000
 8000508:	58020800 	.word	0x58020800

0800050c <MX_I2S1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi3_rx;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_I2S1_Init+0x5c>)
 8000512:	4a16      	ldr	r2, [pc, #88]	; (800056c <MX_I2S1_Init+0x60>)
 8000514:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000516:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_I2S1_Init+0x5c>)
 8000518:	2206      	movs	r2, #6
 800051a:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MX_I2S1_Init+0x5c>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_I2S1_Init+0x5c>)
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_I2S1_Init+0x5c>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_I2S1_Init+0x5c>)
 8000530:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000534:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_I2S1_Init+0x5c>)
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <MX_I2S1_Init+0x5c>)
 800053e:	2200      	movs	r2, #0
 8000540:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_I2S1_Init+0x5c>)
 8000544:	2200      	movs	r2, #0
 8000546:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <MX_I2S1_Init+0x5c>)
 800054a:	2200      	movs	r2, #0
 800054c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_I2S1_Init+0x5c>)
 8000550:	2200      	movs	r2, #0
 8000552:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <MX_I2S1_Init+0x5c>)
 8000556:	f005 fbe9 	bl	8005d2c <HAL_I2S_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_I2S1_Init+0x58>
  {
    Error_Handler();
 8000560:	f000 fb38 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	24000120 	.word	0x24000120
 800056c:	40013000 	.word	0x40013000

08000570 <MX_I2S2_Init>:
/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_I2S2_Init+0x5c>)
 8000576:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <MX_I2S2_Init+0x60>)
 8000578:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_I2S2_Init+0x5c>)
 800057c:	2206      	movs	r2, #6
 800057e:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_I2S2_Init+0x5c>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_I2S2_Init+0x5c>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_I2S2_Init+0x5c>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_I2S2_Init+0x5c>)
 8000594:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000598:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_I2S2_Init+0x5c>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_I2S2_Init+0x5c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_I2S2_Init+0x5c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <MX_I2S2_Init+0x5c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_I2S2_Init+0x5c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_I2S2_Init+0x5c>)
 80005ba:	f005 fbb7 	bl	8005d2c <HAL_I2S_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_I2S2_Init+0x58>
  {
    Error_Handler();
 80005c4:	f000 fb06 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	24000174 	.word	0x24000174
 80005d0:	40003800 	.word	0x40003800

080005d4 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <MX_I2S3_Init+0x5c>)
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <MX_I2S3_Init+0x60>)
 80005dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_I2S3_Init+0x5c>)
 80005e0:	2206      	movs	r2, #6
 80005e2:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_I2S3_Init+0x5c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_I2S3_Init+0x5c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_I2S3_Init+0x5c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_I2S3_Init+0x5c>)
 80005f8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005fc:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_I2S3_Init+0x5c>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_I2S3_Init+0x5c>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_I2S3_Init+0x5c>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_I2S3_Init+0x5c>)
 8000612:	2200      	movs	r2, #0
 8000614:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_I2S3_Init+0x5c>)
 8000618:	2200      	movs	r2, #0
 800061a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_I2S3_Init+0x5c>)
 800061e:	f005 fb85 	bl	8005d2c <HAL_I2S_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2S3_Init+0x58>
  {
    Error_Handler();
 8000628:	f000 fad4 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	240001c8 	.word	0x240001c8
 8000634:	40003c00 	.word	0x40003c00

08000638 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b090      	sub	sp, #64	; 0x40
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a74      	ldr	r2, [pc, #464]	; (8000828 <HAL_I2S_MspInit+0x1f0>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d15f      	bne.n	800071a <HAL_I2S_MspInit+0xe2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800065a:	4b74      	ldr	r3, [pc, #464]	; (800082c <HAL_I2S_MspInit+0x1f4>)
 800065c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000660:	4a72      	ldr	r2, [pc, #456]	; (800082c <HAL_I2S_MspInit+0x1f4>)
 8000662:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000666:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800066a:	4b70      	ldr	r3, [pc, #448]	; (800082c <HAL_I2S_MspInit+0x1f4>)
 800066c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
 8000676:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	4b6c      	ldr	r3, [pc, #432]	; (800082c <HAL_I2S_MspInit+0x1f4>)
 800067a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067e:	4a6b      	ldr	r2, [pc, #428]	; (800082c <HAL_I2S_MspInit+0x1f4>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000688:	4b68      	ldr	r3, [pc, #416]	; (800082c <HAL_I2S_MspInit+0x1f4>)
 800068a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
 8000694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000696:	2370      	movs	r3, #112	; 0x70
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	2302      	movs	r3, #2
 800069c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006a6:	2305      	movs	r3, #5
 80006a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ae:	4619      	mov	r1, r3
 80006b0:	485f      	ldr	r0, [pc, #380]	; (8000830 <HAL_I2S_MspInit+0x1f8>)
 80006b2:	f005 f959 	bl	8005968 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream1;
 80006b6:	4b5f      	ldr	r3, [pc, #380]	; (8000834 <HAL_I2S_MspInit+0x1fc>)
 80006b8:	4a5f      	ldr	r2, [pc, #380]	; (8000838 <HAL_I2S_MspInit+0x200>)
 80006ba:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80006bc:	4b5d      	ldr	r3, [pc, #372]	; (8000834 <HAL_I2S_MspInit+0x1fc>)
 80006be:	2225      	movs	r2, #37	; 0x25
 80006c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006c2:	4b5c      	ldr	r3, [pc, #368]	; (8000834 <HAL_I2S_MspInit+0x1fc>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c8:	4b5a      	ldr	r3, [pc, #360]	; (8000834 <HAL_I2S_MspInit+0x1fc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006ce:	4b59      	ldr	r3, [pc, #356]	; (8000834 <HAL_I2S_MspInit+0x1fc>)
 80006d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006d6:	4b57      	ldr	r3, [pc, #348]	; (8000834 <HAL_I2S_MspInit+0x1fc>)
 80006d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006dc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006de:	4b55      	ldr	r3, [pc, #340]	; (8000834 <HAL_I2S_MspInit+0x1fc>)
 80006e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80006e6:	4b53      	ldr	r3, [pc, #332]	; (8000834 <HAL_I2S_MspInit+0x1fc>)
 80006e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ec:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80006ee:	4b51      	ldr	r3, [pc, #324]	; (8000834 <HAL_I2S_MspInit+0x1fc>)
 80006f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006f4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006f6:	4b4f      	ldr	r3, [pc, #316]	; (8000834 <HAL_I2S_MspInit+0x1fc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80006fc:	484d      	ldr	r0, [pc, #308]	; (8000834 <HAL_I2S_MspInit+0x1fc>)
 80006fe:	f003 f85b 	bl	80037b8 <HAL_DMA_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <HAL_I2S_MspInit+0xd4>
    {
      Error_Handler();
 8000708:	f000 fa64 	bl	8000bd4 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi1_rx);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a49      	ldr	r2, [pc, #292]	; (8000834 <HAL_I2S_MspInit+0x1fc>)
 8000710:	649a      	str	r2, [r3, #72]	; 0x48
 8000712:	4a48      	ldr	r2, [pc, #288]	; (8000834 <HAL_I2S_MspInit+0x1fc>)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000718:	e11f      	b.n	800095a <HAL_I2S_MspInit+0x322>
  else if(i2sHandle->Instance==SPI2)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a47      	ldr	r2, [pc, #284]	; (800083c <HAL_I2S_MspInit+0x204>)
 8000720:	4293      	cmp	r3, r2
 8000722:	f040 8095 	bne.w	8000850 <HAL_I2S_MspInit+0x218>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000726:	4b41      	ldr	r3, [pc, #260]	; (800082c <HAL_I2S_MspInit+0x1f4>)
 8000728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800072c:	4a3f      	ldr	r2, [pc, #252]	; (800082c <HAL_I2S_MspInit+0x1f4>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000732:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000736:	4b3d      	ldr	r3, [pc, #244]	; (800082c <HAL_I2S_MspInit+0x1f4>)
 8000738:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800073c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000740:	623b      	str	r3, [r7, #32]
 8000742:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000744:	4b39      	ldr	r3, [pc, #228]	; (800082c <HAL_I2S_MspInit+0x1f4>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074a:	4a38      	ldr	r2, [pc, #224]	; (800082c <HAL_I2S_MspInit+0x1f4>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000754:	4b35      	ldr	r3, [pc, #212]	; (800082c <HAL_I2S_MspInit+0x1f4>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	61fb      	str	r3, [r7, #28]
 8000760:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b32      	ldr	r3, [pc, #200]	; (800082c <HAL_I2S_MspInit+0x1f4>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	4a30      	ldr	r2, [pc, #192]	; (800082c <HAL_I2S_MspInit+0x1f4>)
 800076a:	f043 0302 	orr.w	r3, r3, #2
 800076e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000772:	4b2e      	ldr	r3, [pc, #184]	; (800082c <HAL_I2S_MspInit+0x1f4>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000780:	2304      	movs	r3, #4
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000790:	2305      	movs	r3, #5
 8000792:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000798:	4619      	mov	r1, r3
 800079a:	4829      	ldr	r0, [pc, #164]	; (8000840 <HAL_I2S_MspInit+0x208>)
 800079c:	f005 f8e4 	bl	8005968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80007a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007b2:	2305      	movs	r3, #5
 80007b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ba:	4619      	mov	r1, r3
 80007bc:	4821      	ldr	r0, [pc, #132]	; (8000844 <HAL_I2S_MspInit+0x20c>)
 80007be:	f005 f8d3 	bl	8005968 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream2;
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <HAL_I2S_MspInit+0x210>)
 80007c4:	4a21      	ldr	r2, [pc, #132]	; (800084c <HAL_I2S_MspInit+0x214>)
 80007c6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <HAL_I2S_MspInit+0x210>)
 80007ca:	2227      	movs	r2, #39	; 0x27
 80007cc:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <HAL_I2S_MspInit+0x210>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <HAL_I2S_MspInit+0x210>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <HAL_I2S_MspInit+0x210>)
 80007dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <HAL_I2S_MspInit+0x210>)
 80007e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007e8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <HAL_I2S_MspInit+0x210>)
 80007ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007f0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <HAL_I2S_MspInit+0x210>)
 80007f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007f8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <HAL_I2S_MspInit+0x210>)
 80007fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000800:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <HAL_I2S_MspInit+0x210>)
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <HAL_I2S_MspInit+0x210>)
 800080a:	f002 ffd5 	bl	80037b8 <HAL_DMA_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <HAL_I2S_MspInit+0x1e0>
      Error_Handler();
 8000814:	f000 f9de 	bl	8000bd4 <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <HAL_I2S_MspInit+0x210>)
 800081c:	649a      	str	r2, [r3, #72]	; 0x48
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <HAL_I2S_MspInit+0x210>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000824:	e099      	b.n	800095a <HAL_I2S_MspInit+0x322>
 8000826:	bf00      	nop
 8000828:	40013000 	.word	0x40013000
 800082c:	58024400 	.word	0x58024400
 8000830:	58020000 	.word	0x58020000
 8000834:	2400021c 	.word	0x2400021c
 8000838:	40020028 	.word	0x40020028
 800083c:	40003800 	.word	0x40003800
 8000840:	58020800 	.word	0x58020800
 8000844:	58020400 	.word	0x58020400
 8000848:	24000294 	.word	0x24000294
 800084c:	40020040 	.word	0x40020040
  else if(i2sHandle->Instance==SPI3)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a43      	ldr	r2, [pc, #268]	; (8000964 <HAL_I2S_MspInit+0x32c>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d17f      	bne.n	800095a <HAL_I2S_MspInit+0x322>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800085a:	4b43      	ldr	r3, [pc, #268]	; (8000968 <HAL_I2S_MspInit+0x330>)
 800085c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000860:	4a41      	ldr	r2, [pc, #260]	; (8000968 <HAL_I2S_MspInit+0x330>)
 8000862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000866:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800086a:	4b3f      	ldr	r3, [pc, #252]	; (8000968 <HAL_I2S_MspInit+0x330>)
 800086c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000878:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <HAL_I2S_MspInit+0x330>)
 800087a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087e:	4a3a      	ldr	r2, [pc, #232]	; (8000968 <HAL_I2S_MspInit+0x330>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000888:	4b37      	ldr	r3, [pc, #220]	; (8000968 <HAL_I2S_MspInit+0x330>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	4b34      	ldr	r3, [pc, #208]	; (8000968 <HAL_I2S_MspInit+0x330>)
 8000898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089c:	4a32      	ldr	r2, [pc, #200]	; (8000968 <HAL_I2S_MspInit+0x330>)
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a6:	4b30      	ldr	r3, [pc, #192]	; (8000968 <HAL_I2S_MspInit+0x330>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008c6:	2306      	movs	r3, #6
 80008c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ce:	4619      	mov	r1, r3
 80008d0:	4826      	ldr	r0, [pc, #152]	; (800096c <HAL_I2S_MspInit+0x334>)
 80008d2:	f005 f849 	bl	8005968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e8:	2306      	movs	r3, #6
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f0:	4619      	mov	r1, r3
 80008f2:	481f      	ldr	r0, [pc, #124]	; (8000970 <HAL_I2S_MspInit+0x338>)
 80008f4:	f005 f838 	bl	8005968 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream3;
 80008f8:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <HAL_I2S_MspInit+0x33c>)
 80008fa:	4a1f      	ldr	r2, [pc, #124]	; (8000978 <HAL_I2S_MspInit+0x340>)
 80008fc:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <HAL_I2S_MspInit+0x33c>)
 8000900:	223d      	movs	r2, #61	; 0x3d
 8000902:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <HAL_I2S_MspInit+0x33c>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <HAL_I2S_MspInit+0x33c>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <HAL_I2S_MspInit+0x33c>)
 8000912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000916:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <HAL_I2S_MspInit+0x33c>)
 800091a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800091e:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_I2S_MspInit+0x33c>)
 8000922:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000926:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_I2S_MspInit+0x33c>)
 800092a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800092e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_I2S_MspInit+0x33c>)
 8000932:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000936:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_I2S_MspInit+0x33c>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <HAL_I2S_MspInit+0x33c>)
 8000940:	f002 ff3a 	bl	80037b8 <HAL_DMA_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_I2S_MspInit+0x316>
      Error_Handler();
 800094a:	f000 f943 	bl	8000bd4 <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi3_rx);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_I2S_MspInit+0x33c>)
 8000952:	649a      	str	r2, [r3, #72]	; 0x48
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <HAL_I2S_MspInit+0x33c>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6393      	str	r3, [r2, #56]	; 0x38
}
 800095a:	bf00      	nop
 800095c:	3740      	adds	r7, #64	; 0x40
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40003c00 	.word	0x40003c00
 8000968:	58024400 	.word	0x58024400
 800096c:	58020000 	.word	0x58020000
 8000970:	58020800 	.word	0x58020800
 8000974:	2400030c 	.word	0x2400030c
 8000978:	40020058 	.word	0x40020058

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	f5ad 7d42 	sub.w	sp, sp, #776	; 0x308
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f002 fd38 	bl	80033f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f83e 	bl	8000a08 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800098c:	f000 f8f6 	bl	8000b7c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000990:	f7ff fd26 	bl	80003e0 <MX_GPIO_Init>
  MX_I2S1_Init();
 8000994:	f7ff fdba 	bl	800050c <MX_I2S1_Init>
  MX_I2S2_Init();
 8000998:	f7ff fdea 	bl	8000570 <MX_I2S2_Init>
  MX_I2S3_Init();
 800099c:	f7ff fe1a 	bl	80005d4 <MX_I2S3_Init>
  MX_DMA_Init();
 80009a0:	f7ff fcee 	bl	8000380 <MX_DMA_Init>
  MX_TIM3_Init();
 80009a4:	f000 fba6 	bl	80010f4 <MX_TIM3_Init>
  MX_SPI4_Init();
 80009a8:	f000 f91a 	bl	8000be0 <MX_SPI4_Init>
  MX_TIM1_Init();
 80009ac:	f000 faf6 	bl	8000f9c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80009b0:	2100      	movs	r1, #0
 80009b2:	4810      	ldr	r0, [pc, #64]	; (80009f4 <main+0x78>)
 80009b4:	f009 fdb2 	bl	800a51c <HAL_TIM_PWM_Start>
  uint16_t hi2s1_Data[128];
  uint16_t hi2s2_Data[128];
  uint16_t hi2s3_Data[128];
  uint32_t PWM=TIM3->CCR1;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <main+0x7c>)
 80009ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009bc:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
  uint8_t  Pos_Neg=1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	f887 3303 	strb.w	r3, [r7, #771]	; 0x303
  HAL_I2S_Receive_DMA(&hi2s1, hi2s1_Data, 128);
 80009c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	4619      	mov	r1, r3
 80009ce:	480b      	ldr	r0, [pc, #44]	; (80009fc <main+0x80>)
 80009d0:	f005 facc 	bl	8005f6c <HAL_I2S_Receive_DMA>
  HAL_I2S_Receive_DMA(&hi2s2, hi2s2_Data, 128);
 80009d4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80009d8:	2280      	movs	r2, #128	; 0x80
 80009da:	4619      	mov	r1, r3
 80009dc:	4808      	ldr	r0, [pc, #32]	; (8000a00 <main+0x84>)
 80009de:	f005 fac5 	bl	8005f6c <HAL_I2S_Receive_DMA>
  HAL_I2S_Receive_DMA(&hi2s3, hi2s3_Data, 128);
 80009e2:	463b      	mov	r3, r7
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	4619      	mov	r1, r3
 80009e8:	4806      	ldr	r0, [pc, #24]	; (8000a04 <main+0x88>)
 80009ea:	f005 fabf 	bl	8005f6c <HAL_I2S_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_Test();
 80009ee:	f000 fcc1 	bl	8001374 <LCD_Test>

  while (1)
 80009f2:	e7fe      	b.n	80009f2 <main+0x76>
 80009f4:	2400045c 	.word	0x2400045c
 80009f8:	40000400 	.word	0x40000400
 80009fc:	24000120 	.word	0x24000120
 8000a00:	24000174 	.word	0x24000174
 8000a04:	240001c8 	.word	0x240001c8

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b09e      	sub	sp, #120	; 0x78
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a12:	224c      	movs	r2, #76	; 0x4c
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f00a feec 	bl	800b7f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2220      	movs	r2, #32
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f00a fee5 	bl	800b7f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f005 fbb4 	bl	8006198 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	4b4e      	ldr	r3, [pc, #312]	; (8000b70 <SystemClock_Config+0x168>)
 8000a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a38:	4a4d      	ldr	r2, [pc, #308]	; (8000b70 <SystemClock_Config+0x168>)
 8000a3a:	f023 0301 	bic.w	r3, r3, #1
 8000a3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a40:	4b4b      	ldr	r3, [pc, #300]	; (8000b70 <SystemClock_Config+0x168>)
 8000a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <SystemClock_Config+0x16c>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a49      	ldr	r2, [pc, #292]	; (8000b74 <SystemClock_Config+0x16c>)
 8000a50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b47      	ldr	r3, [pc, #284]	; (8000b74 <SystemClock_Config+0x16c>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a62:	bf00      	nop
 8000a64:	4b43      	ldr	r3, [pc, #268]	; (8000b74 <SystemClock_Config+0x16c>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a70:	d1f8      	bne.n	8000a64 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	4b41      	ldr	r3, [pc, #260]	; (8000b78 <SystemClock_Config+0x170>)
 8000a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a78:	4a3f      	ldr	r2, [pc, #252]	; (8000b78 <SystemClock_Config+0x170>)
 8000a7a:	f043 0302 	orr.w	r3, r3, #2
 8000a7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a82:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <SystemClock_Config+0x170>)
 8000a84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a88:	f003 0302 	and.w	r3, r3, #2
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a90:	2300      	movs	r3, #0
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <SystemClock_Config+0x16c>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a36      	ldr	r2, [pc, #216]	; (8000b74 <SystemClock_Config+0x16c>)
 8000a9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <SystemClock_Config+0x16c>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <SystemClock_Config+0x168>)
 8000aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aae:	4a30      	ldr	r2, [pc, #192]	; (8000b70 <SystemClock_Config+0x168>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <SystemClock_Config+0x168>)
 8000ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ac2:	bf00      	nop
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <SystemClock_Config+0x16c>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ad0:	d1f8      	bne.n	8000ac4 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000ad2:	4b29      	ldr	r3, [pc, #164]	; (8000b78 <SystemClock_Config+0x170>)
 8000ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad6:	f023 0303 	bic.w	r3, r3, #3
 8000ada:	4a27      	ldr	r2, [pc, #156]	; (8000b78 <SystemClock_Config+0x170>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aec:	2302      	movs	r3, #2
 8000aee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af0:	2302      	movs	r3, #2
 8000af2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000af4:	230a      	movs	r3, #10
 8000af6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000af8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000afc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000b02:	2305      	movs	r3, #5
 8000b04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f005 fb76 	bl	800620c <HAL_RCC_OscConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0x122>
  {
    Error_Handler();
 8000b26:	f000 f855 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2a:	233f      	movs	r3, #63	; 0x3f
 8000b2c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b36:	2308      	movs	r3, #8
 8000b38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b3a:	2340      	movs	r3, #64	; 0x40
 8000b3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b48:	2340      	movs	r3, #64	; 0x40
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2104      	movs	r1, #4
 8000b52:	4618      	mov	r0, r3
 8000b54:	f005 ff88 	bl	8006a68 <HAL_RCC_ClockConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 8000b5e:	f000 f839 	bl	8000bd4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000b62:	f006 f937 	bl	8006dd4 <HAL_RCC_EnableCSS>
}
 8000b66:	bf00      	nop
 8000b68:	3778      	adds	r7, #120	; 0x78
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	58000400 	.word	0x58000400
 8000b74:	58024800 	.word	0x58024800
 8000b78:	58024400 	.word	0x58024400

08000b7c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0b0      	sub	sp, #192	; 0xc0
 8000b80:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	22bc      	movs	r2, #188	; 0xbc
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f00a fe33 	bl	800b7f4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 8000b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b92:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 10;
 8000b94:	230a      	movs	r3, #10
 8000b96:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 20;
 8000b9c:	2314      	movs	r3, #20
 8000b9e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000ba8:	2340      	movs	r3, #64	; 0x40
 8000baa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f006 fac3 	bl	8007148 <HAL_RCCEx_PeriphCLKConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000bc8:	f000 f804 	bl	8000bd4 <Error_Handler>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	37c0      	adds	r7, #192	; 0xc0
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000be4:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000be6:	4a29      	ldr	r2, [pc, #164]	; (8000c8c <MX_SPI4_Init+0xac>)
 8000be8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000bea:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000bec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bf0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000bf2:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000bf4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000bf8:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bfa:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c00:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c06:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c0e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c12:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c16:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000c1a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_SPI4_Init+0xa8>)
 8000c74:	f008 fbf4 	bl	8009460 <HAL_SPI_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8000c7e:	f7ff ffa9 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	24000384 	.word	0x24000384
 8000c8c:	40013400 	.word	0x40013400

08000c90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0b8      	sub	sp, #224	; 0xe0
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	22bc      	movs	r2, #188	; 0xbc
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f00a fd9f 	bl	800b7f4 <memset>
  if(spiHandle->Instance==SPI4)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a25      	ldr	r2, [pc, #148]	; (8000d50 <HAL_SPI_MspInit+0xc0>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d142      	bne.n	8000d46 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f006 fa3a 	bl	8007148 <HAL_RCCEx_PeriphCLKConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000cda:	f7ff ff7b 	bl	8000bd4 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <HAL_SPI_MspInit+0xc4>)
 8000ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ce4:	4a1b      	ldr	r2, [pc, #108]	; (8000d54 <HAL_SPI_MspInit+0xc4>)
 8000ce6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <HAL_SPI_MspInit+0xc4>)
 8000cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_SPI_MspInit+0xc4>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <HAL_SPI_MspInit+0xc4>)
 8000d04:	f043 0310 	orr.w	r3, r3, #16
 8000d08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_SPI_MspInit+0xc4>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000d1a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000d1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000d34:	2305      	movs	r3, #5
 8000d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <HAL_SPI_MspInit+0xc8>)
 8000d42:	f004 fe11 	bl	8005968 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000d46:	bf00      	nop
 8000d48:	37e0      	adds	r7, #224	; 0xe0
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40013400 	.word	0x40013400
 8000d54:	58024400 	.word	0x58024400
 8000d58:	58021000 	.word	0x58021000

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_MspInit+0x30>)
 8000d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d68:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_MspInit+0x30>)
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_MspInit+0x30>)
 8000d74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	58024400 	.word	0x58024400

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f002 fb7e 	bl	80034dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <DMA1_Stream1_IRQHandler+0x10>)
 8000dea:	f003 faab 	bl	8004344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2400021c 	.word	0x2400021c

08000df8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <DMA1_Stream2_IRQHandler+0x10>)
 8000dfe:	f003 faa1 	bl	8004344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	24000294 	.word	0x24000294

08000e0c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <DMA1_Stream3_IRQHandler+0x10>)
 8000e12:	f003 fa97 	bl	8004344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2400030c 	.word	0x2400030c

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f00a fca6 	bl	800b7a0 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	24080000 	.word	0x24080000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	2400040c 	.word	0x2400040c
 8000e88:	24000a10 	.word	0x24000a10

08000e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e90:	4b37      	ldr	r3, [pc, #220]	; (8000f70 <SystemInit+0xe4>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e96:	4a36      	ldr	r2, [pc, #216]	; (8000f70 <SystemInit+0xe4>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ea0:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <SystemInit+0xe8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 030f 	and.w	r3, r3, #15
 8000ea8:	2b06      	cmp	r3, #6
 8000eaa:	d807      	bhi.n	8000ebc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eac:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <SystemInit+0xe8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f023 030f 	bic.w	r3, r3, #15
 8000eb4:	4a2f      	ldr	r2, [pc, #188]	; (8000f74 <SystemInit+0xe8>)
 8000eb6:	f043 0307 	orr.w	r3, r3, #7
 8000eba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ebc:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <SystemInit+0xec>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a2d      	ldr	r2, [pc, #180]	; (8000f78 <SystemInit+0xec>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ec8:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <SystemInit+0xec>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ece:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <SystemInit+0xec>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4929      	ldr	r1, [pc, #164]	; (8000f78 <SystemInit+0xec>)
 8000ed4:	4b29      	ldr	r3, [pc, #164]	; (8000f7c <SystemInit+0xf0>)
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <SystemInit+0xe8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d007      	beq.n	8000ef6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ee6:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <SystemInit+0xe8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f023 030f 	bic.w	r3, r3, #15
 8000eee:	4a21      	ldr	r2, [pc, #132]	; (8000f74 <SystemInit+0xe8>)
 8000ef0:	f043 0307 	orr.w	r3, r3, #7
 8000ef4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <SystemInit+0xec>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <SystemInit+0xec>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <SystemInit+0xec>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <SystemInit+0xec>)
 8000f0a:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <SystemInit+0xf4>)
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <SystemInit+0xec>)
 8000f10:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <SystemInit+0xf8>)
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <SystemInit+0xec>)
 8000f16:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <SystemInit+0xfc>)
 8000f18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <SystemInit+0xec>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <SystemInit+0xec>)
 8000f22:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <SystemInit+0xfc>)
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <SystemInit+0xec>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <SystemInit+0xec>)
 8000f2e:	4a16      	ldr	r2, [pc, #88]	; (8000f88 <SystemInit+0xfc>)
 8000f30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <SystemInit+0xec>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <SystemInit+0xec>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <SystemInit+0xec>)
 8000f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <SystemInit+0xec>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <SystemInit+0x100>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <SystemInit+0x104>)
 8000f50:	4013      	ands	r3, r2
 8000f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f56:	d202      	bcs.n	8000f5e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <SystemInit+0x108>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <SystemInit+0x10c>)
 8000f60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f64:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00
 8000f74:	52002000 	.word	0x52002000
 8000f78:	58024400 	.word	0x58024400
 8000f7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f80:	02020200 	.word	0x02020200
 8000f84:	01ff0000 	.word	0x01ff0000
 8000f88:	01010280 	.word	0x01010280
 8000f8c:	5c001000 	.word	0x5c001000
 8000f90:	ffff0000 	.word	0xffff0000
 8000f94:	51008108 	.word	0x51008108
 8000f98:	52004000 	.word	0x52004000

08000f9c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b09a      	sub	sp, #104	; 0x68
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	615a      	str	r2, [r3, #20]
 8000fce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	222c      	movs	r2, #44	; 0x2c
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f00a fc0c 	bl	800b7f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fdc:	4b43      	ldr	r3, [pc, #268]	; (80010ec <MX_TIM1_Init+0x150>)
 8000fde:	4a44      	ldr	r2, [pc, #272]	; (80010f0 <MX_TIM1_Init+0x154>)
 8000fe0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24-1;
 8000fe2:	4b42      	ldr	r3, [pc, #264]	; (80010ec <MX_TIM1_Init+0x150>)
 8000fe4:	2217      	movs	r2, #23
 8000fe6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b40      	ldr	r3, [pc, #256]	; (80010ec <MX_TIM1_Init+0x150>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000fee:	4b3f      	ldr	r3, [pc, #252]	; (80010ec <MX_TIM1_Init+0x150>)
 8000ff0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ff4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <MX_TIM1_Init+0x150>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ffc:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <MX_TIM1_Init+0x150>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b3a      	ldr	r3, [pc, #232]	; (80010ec <MX_TIM1_Init+0x150>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001008:	4838      	ldr	r0, [pc, #224]	; (80010ec <MX_TIM1_Init+0x150>)
 800100a:	f009 f9ce 	bl	800a3aa <HAL_TIM_Base_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001014:	f7ff fdde 	bl	8000bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800101e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001022:	4619      	mov	r1, r3
 8001024:	4831      	ldr	r0, [pc, #196]	; (80010ec <MX_TIM1_Init+0x150>)
 8001026:	f009 fc9b 	bl	800a960 <HAL_TIM_ConfigClockSource>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001030:	f7ff fdd0 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001034:	482d      	ldr	r0, [pc, #180]	; (80010ec <MX_TIM1_Init+0x150>)
 8001036:	f009 fa0f 	bl	800a458 <HAL_TIM_PWM_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001040:	f7ff fdc8 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001050:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001054:	4619      	mov	r1, r3
 8001056:	4825      	ldr	r0, [pc, #148]	; (80010ec <MX_TIM1_Init+0x150>)
 8001058:	f00a fa70 	bl	800b53c <HAL_TIMEx_MasterConfigSynchronization>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001062:	f7ff fdb7 	bl	8000bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001066:	2360      	movs	r3, #96	; 0x60
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800106e:	2300      	movs	r3, #0
 8001070:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001072:	2308      	movs	r3, #8
 8001074:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001082:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001086:	2204      	movs	r2, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4818      	ldr	r0, [pc, #96]	; (80010ec <MX_TIM1_Init+0x150>)
 800108c:	f009 fb54 	bl	800a738 <HAL_TIM_PWM_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001096:	f7ff fd9d 	bl	8000bd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4807      	ldr	r0, [pc, #28]	; (80010ec <MX_TIM1_Init+0x150>)
 80010d0:	f00a fac2 	bl	800b658 <HAL_TIMEx_ConfigBreakDeadTime>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80010da:	f7ff fd7b 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010de:	4803      	ldr	r0, [pc, #12]	; (80010ec <MX_TIM1_Init+0x150>)
 80010e0:	f000 f8ba 	bl	8001258 <HAL_TIM_MspPostInit>

}
 80010e4:	bf00      	nop
 80010e6:	3768      	adds	r7, #104	; 0x68
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	24000410 	.word	0x24000410
 80010f0:	40010000 	.word	0x40010000

080010f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08e      	sub	sp, #56	; 0x38
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
 8001122:	615a      	str	r2, [r3, #20]
 8001124:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001126:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <MX_TIM3_Init+0xe8>)
 8001128:	4a2d      	ldr	r2, [pc, #180]	; (80011e0 <MX_TIM3_Init+0xec>)
 800112a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MX_TIM3_Init+0xe8>)
 800112e:	22ef      	movs	r2, #239	; 0xef
 8001130:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <MX_TIM3_Init+0xe8>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <MX_TIM3_Init+0xe8>)
 800113a:	f241 3287 	movw	r2, #4999	; 0x1387
 800113e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	4b26      	ldr	r3, [pc, #152]	; (80011dc <MX_TIM3_Init+0xe8>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001146:	4b25      	ldr	r3, [pc, #148]	; (80011dc <MX_TIM3_Init+0xe8>)
 8001148:	2280      	movs	r2, #128	; 0x80
 800114a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800114c:	4823      	ldr	r0, [pc, #140]	; (80011dc <MX_TIM3_Init+0xe8>)
 800114e:	f009 f92c 	bl	800a3aa <HAL_TIM_Base_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001158:	f7ff fd3c 	bl	8000bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001166:	4619      	mov	r1, r3
 8001168:	481c      	ldr	r0, [pc, #112]	; (80011dc <MX_TIM3_Init+0xe8>)
 800116a:	f009 fbf9 	bl	800a960 <HAL_TIM_ConfigClockSource>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001174:	f7ff fd2e 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001178:	4818      	ldr	r0, [pc, #96]	; (80011dc <MX_TIM3_Init+0xe8>)
 800117a:	f009 f96d 	bl	800a458 <HAL_TIM_PWM_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001184:	f7ff fd26 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	4811      	ldr	r0, [pc, #68]	; (80011dc <MX_TIM3_Init+0xe8>)
 8001198:	f00a f9d0 	bl	800b53c <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011a2:	f7ff fd17 	bl	8000bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a6:	2360      	movs	r3, #96	; 0x60
 80011a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2500-1;
 80011aa:	f640 13c3 	movw	r3, #2499	; 0x9c3
 80011ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	4807      	ldr	r0, [pc, #28]	; (80011dc <MX_TIM3_Init+0xe8>)
 80011c0:	f009 faba 	bl	800a738 <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80011ca:	f7ff fd03 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <MX_TIM3_Init+0xe8>)
 80011d0:	f000 f842 	bl	8001258 <HAL_TIM_MspPostInit>

}
 80011d4:	bf00      	nop
 80011d6:	3738      	adds	r7, #56	; 0x38
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2400045c 	.word	0x2400045c
 80011e0:	40000400 	.word	0x40000400

080011e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a16      	ldr	r2, [pc, #88]	; (800124c <HAL_TIM_Base_MspInit+0x68>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d10f      	bne.n	8001216 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <HAL_TIM_Base_MspInit+0x6c>)
 80011f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011fc:	4a14      	ldr	r2, [pc, #80]	; (8001250 <HAL_TIM_Base_MspInit+0x6c>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_TIM_Base_MspInit+0x6c>)
 8001208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001214:	e013      	b.n	800123e <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM3)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_TIM_Base_MspInit+0x70>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d10e      	bne.n	800123e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_TIM_Base_MspInit+0x6c>)
 8001222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_TIM_Base_MspInit+0x6c>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <HAL_TIM_Base_MspInit+0x6c>)
 8001232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40010000 	.word	0x40010000
 8001250:	58024400 	.word	0x58024400
 8001254:	40000400 	.word	0x40000400

08001258 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a25      	ldr	r2, [pc, #148]	; (800130c <HAL_TIM_MspPostInit+0xb4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d120      	bne.n	80012bc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800127a:	4b25      	ldr	r3, [pc, #148]	; (8001310 <HAL_TIM_MspPostInit+0xb8>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	4a23      	ldr	r2, [pc, #140]	; (8001310 <HAL_TIM_MspPostInit+0xb8>)
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <HAL_TIM_MspPostInit+0xb8>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001290:	f003 0310 	and.w	r3, r3, #16
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = LCD_LIGHT_Pin;
 8001298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012aa:	2301      	movs	r3, #1
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_LIGHT_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4817      	ldr	r0, [pc, #92]	; (8001314 <HAL_TIM_MspPostInit+0xbc>)
 80012b6:	f004 fb57 	bl	8005968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012ba:	e023      	b.n	8001304 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a15      	ldr	r2, [pc, #84]	; (8001318 <HAL_TIM_MspPostInit+0xc0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d11e      	bne.n	8001304 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_TIM_MspPostInit+0xb8>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012cc:	4a10      	ldr	r2, [pc, #64]	; (8001310 <HAL_TIM_MspPostInit+0xb8>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_TIM_MspPostInit+0xb8>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012e4:	2340      	movs	r3, #64	; 0x40
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012f4:	2302      	movs	r3, #2
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <HAL_TIM_MspPostInit+0xc4>)
 8001300:	f004 fb32 	bl	8005968 <HAL_GPIO_Init>
}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40010000 	.word	0x40010000
 8001310:	58024400 	.word	0x58024400
 8001314:	58021000 	.word	0x58021000
 8001318:	40000400 	.word	0x40000400
 800131c:	58020800 	.word	0x58020800

08001320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001358 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001324:	f7ff fdb2 	bl	8000e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800132a:	490d      	ldr	r1, [pc, #52]	; (8001360 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001340:	4c0a      	ldr	r4, [pc, #40]	; (800136c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134e:	f00a fa2d 	bl	800b7ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001352:	f7ff fb13 	bl	800097c <main>
  bx  lr
 8001356:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001358:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800135c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001360:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8001364:	08013030 	.word	0x08013030
  ldr r2, =_sbss
 8001368:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 800136c:	24000a0c 	.word	0x24000a0c

08001370 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC3_IRQHandler>
	...

08001374 <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 8001374:	b5b0      	push	{r4, r5, r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af02      	add	r7, sp, #8
	uint8_t text[20];
	
	#ifdef TFT96
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 800137a:	4b7d      	ldr	r3, [pc, #500]	; (8001570 <LCD_Test+0x1fc>)
 800137c:	2203      	movs	r2, #3
 800137e:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = HannStar_Panel;
 8001380:	4b7b      	ldr	r3, [pc, #492]	; (8001570 <LCD_Test+0x1fc>)
 8001382:	2200      	movs	r2, #0
 8001384:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
 8001386:	4b7a      	ldr	r3, [pc, #488]	; (8001570 <LCD_Test+0x1fc>)
 8001388:	2201      	movs	r2, #1
 800138a:	735a      	strb	r2, [r3, #13]
	#else
	perror ("Unknown Screen");
	
	#endif
	
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 800138c:	4979      	ldr	r1, [pc, #484]	; (8001574 <LCD_Test+0x200>)
 800138e:	487a      	ldr	r0, [pc, #488]	; (8001578 <LCD_Test+0x204>)
 8001390:	f000 fcfa 	bl	8001d88 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8001394:	4b79      	ldr	r3, [pc, #484]	; (800157c <LCD_Test+0x208>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a75      	ldr	r2, [pc, #468]	; (8001570 <LCD_Test+0x1fc>)
 800139a:	2105      	movs	r1, #5
 800139c:	4876      	ldr	r0, [pc, #472]	; (8001578 <LCD_Test+0x204>)
 800139e:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 80013a0:	4b76      	ldr	r3, [pc, #472]	; (800157c <LCD_Test+0x208>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	4976      	ldr	r1, [pc, #472]	; (8001580 <LCD_Test+0x20c>)
 80013a6:	4874      	ldr	r0, [pc, #464]	; (8001578 <LCD_Test+0x204>)
 80013a8:	4798      	blx	r3
	
	LCD_SetBrightness(0);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f000 f8fa 	bl	80015a4 <LCD_SetBrightness>
	
	#ifdef TFT96
	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
 80013b0:	4b72      	ldr	r3, [pc, #456]	; (800157c <LCD_Test+0x208>)
 80013b2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80013b4:	4b73      	ldr	r3, [pc, #460]	; (8001584 <LCD_Test+0x210>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	486f      	ldr	r0, [pc, #444]	; (8001578 <LCD_Test+0x204>)
 80013bc:	47a0      	blx	r4
	#elif TFT18
	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);	
	#endif
	
  uint32_t tick = get_tick();
 80013be:	f002 f8a1 	bl	8003504 <HAL_GetTick>
 80013c2:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 80013c4:	e06a      	b.n	800149c <LCD_Test+0x128>
	{
		delay_ms(10);
 80013c6:	200a      	movs	r0, #10
 80013c8:	f002 f8a8 	bl	800351c <HAL_Delay>

		if (get_tick() - tick <= 1000)
 80013cc:	f002 f89a 	bl	8003504 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013da:	d80f      	bhi.n	80013fc <LCD_Test+0x88>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 80013dc:	f002 f892 	bl	8003504 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2264      	movs	r2, #100	; 0x64
 80013e8:	fb02 f303 	mul.w	r3, r2, r3
 80013ec:	4a66      	ldr	r2, [pc, #408]	; (8001588 <LCD_Test+0x214>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	099b      	lsrs	r3, r3, #6
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 f8d5 	bl	80015a4 <LCD_SetBrightness>
 80013fa:	e04f      	b.n	800149c <LCD_Test+0x128>
		else if (get_tick() - tick <= 3000)
 80013fc:	f002 f882 	bl	8003504 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800140a:	4293      	cmp	r3, r2
 800140c:	d83d      	bhi.n	800148a <LCD_Test+0x116>
		{
			sprintf((char *)&text, "%03d", (get_tick() - tick - 1000) / 10);
 800140e:	f002 f879 	bl	8003504 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800141c:	4a5b      	ldr	r2, [pc, #364]	; (800158c <LCD_Test+0x218>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	08da      	lsrs	r2, r3, #3
 8001424:	463b      	mov	r3, r7
 8001426:	495a      	ldr	r1, [pc, #360]	; (8001590 <LCD_Test+0x21c>)
 8001428:	4618      	mov	r0, r3
 800142a:	f00a f9eb 	bl	800b804 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 800142e:	4b50      	ldr	r3, [pc, #320]	; (8001570 <LCD_Test+0x1fc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	3b1e      	subs	r3, #30
 8001436:	b298      	uxth	r0, r3
 8001438:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <LCD_Test+0x1fc>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	b29a      	uxth	r2, r3
 800143e:	463b      	mov	r3, r7
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	2310      	movs	r3, #16
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2310      	movs	r3, #16
 8001448:	2101      	movs	r1, #1
 800144a:	f000 fb4f 	bl	8001aec <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 800144e:	4b4b      	ldr	r3, [pc, #300]	; (800157c <LCD_Test+0x208>)
 8001450:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001452:	4b47      	ldr	r3, [pc, #284]	; (8001570 <LCD_Test+0x1fc>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	1edd      	subs	r5, r3, #3
 8001458:	f002 f854 	bl	8003504 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001466:	4a42      	ldr	r2, [pc, #264]	; (8001570 <LCD_Test+0x1fc>)
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	4a46      	ldr	r2, [pc, #280]	; (8001588 <LCD_Test+0x214>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	09db      	lsrs	r3, r3, #7
 8001476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147a:	9201      	str	r2, [sp, #4]
 800147c:	2203      	movs	r2, #3
 800147e:	9200      	str	r2, [sp, #0]
 8001480:	462a      	mov	r2, r5
 8001482:	2100      	movs	r1, #0
 8001484:	483c      	ldr	r0, [pc, #240]	; (8001578 <LCD_Test+0x204>)
 8001486:	47a0      	blx	r4
 8001488:	e008      	b.n	800149c <LCD_Test+0x128>
		}
		else if (get_tick() - tick > 3000)
 800148a:	f002 f83b 	bl	8003504 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001498:	4293      	cmp	r3, r2
 800149a:	d808      	bhi.n	80014ae <LCD_Test+0x13a>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 800149c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a0:	483c      	ldr	r0, [pc, #240]	; (8001594 <LCD_Test+0x220>)
 80014a2:	f004 fc11 	bl	8005cc8 <HAL_GPIO_ReadPin>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d18c      	bne.n	80013c6 <LCD_Test+0x52>
 80014ac:	e004      	b.n	80014b8 <LCD_Test+0x144>
			break;
 80014ae:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 80014b0:	e002      	b.n	80014b8 <LCD_Test+0x144>
	{
		delay_ms(10);
 80014b2:	200a      	movs	r0, #10
 80014b4:	f002 f832 	bl	800351c <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 80014b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014bc:	4835      	ldr	r0, [pc, #212]	; (8001594 <LCD_Test+0x220>)
 80014be:	f004 fc03 	bl	8005cc8 <HAL_GPIO_ReadPin>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d0f4      	beq.n	80014b2 <LCD_Test+0x13e>
	}
	LCD_Light(0, 300);
 80014c8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80014cc:	2000      	movs	r0, #0
 80014ce:	f000 f885 	bl	80015dc <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 80014d2:	4b2a      	ldr	r3, [pc, #168]	; (800157c <LCD_Test+0x208>)
 80014d4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <LCD_Test+0x1fc>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b25      	ldr	r3, [pc, #148]	; (8001570 <LCD_Test+0x1fc>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2100      	movs	r1, #0
 80014e0:	9101      	str	r1, [sp, #4]
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	4613      	mov	r3, r2
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	4823      	ldr	r0, [pc, #140]	; (8001578 <LCD_Test+0x204>)
 80014ec:	47a0      	blx	r4

	sprintf((char *)&text, "WeAct Studio");
 80014ee:	463b      	mov	r3, r7
 80014f0:	4929      	ldr	r1, [pc, #164]	; (8001598 <LCD_Test+0x224>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f00a f986 	bl	800b804 <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <LCD_Test+0x1fc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	463b      	mov	r3, r7
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	2310      	movs	r3, #16
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2310      	movs	r3, #16
 8001508:	2104      	movs	r1, #4
 800150a:	2004      	movs	r0, #4
 800150c:	f000 faee 	bl	8001aec <LCD_ShowString>
	sprintf((char *)&text, "STM32H7xx 0x%X", HAL_GetDEVID());
 8001510:	f002 f834 	bl	800357c <HAL_GetDEVID>
 8001514:	4602      	mov	r2, r0
 8001516:	463b      	mov	r3, r7
 8001518:	4920      	ldr	r1, [pc, #128]	; (800159c <LCD_Test+0x228>)
 800151a:	4618      	mov	r0, r3
 800151c:	f00a f972 	bl	800b804 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <LCD_Test+0x1fc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	b29a      	uxth	r2, r3
 8001526:	463b      	mov	r3, r7
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	2310      	movs	r3, #16
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2310      	movs	r3, #16
 8001530:	2116      	movs	r1, #22
 8001532:	2004      	movs	r0, #4
 8001534:	f000 fada 	bl	8001aec <LCD_ShowString>
	sprintf((char *)&text, "LCD ID:0x%X", st7735_id);
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <LCD_Test+0x20c>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	463b      	mov	r3, r7
 800153e:	4918      	ldr	r1, [pc, #96]	; (80015a0 <LCD_Test+0x22c>)
 8001540:	4618      	mov	r0, r3
 8001542:	f00a f95f 	bl	800b804 <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <LCD_Test+0x1fc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b29a      	uxth	r2, r3
 800154c:	463b      	mov	r3, r7
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	2310      	movs	r3, #16
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2310      	movs	r3, #16
 8001556:	2128      	movs	r1, #40	; 0x28
 8001558:	2004      	movs	r0, #4
 800155a:	f000 fac7 	bl	8001aec <LCD_ShowString>

	LCD_Light(100, 200);
 800155e:	21c8      	movs	r1, #200	; 0xc8
 8001560:	2064      	movs	r0, #100	; 0x64
 8001562:	f000 f83b 	bl	80015dc <LCD_Light>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bdb0      	pop	{r4, r5, r7, pc}
 800156e:	bf00      	nop
 8001570:	240004e8 	.word	0x240004e8
 8001574:	24000008 	.word	0x24000008
 8001578:	240004a8 	.word	0x240004a8
 800157c:	2400002c 	.word	0x2400002c
 8001580:	240004e0 	.word	0x240004e0
 8001584:	0800cba0 	.word	0x0800cba0
 8001588:	10624dd3 	.word	0x10624dd3
 800158c:	cccccccd 	.word	0xcccccccd
 8001590:	0800c0f8 	.word	0x0800c0f8
 8001594:	58020800 	.word	0x58020800
 8001598:	0800c100 	.word	0x0800c100
 800159c:	0800c110 	.word	0x0800c110
 80015a0:	0800c120 	.word	0x0800c120

080015a4 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <LCD_SetBrightness+0x1c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	24000410 	.word	0x24000410

080015c4 <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <LCD_GetBrightness+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	24000410 	.word	0x24000410

080015dc <LCD_Light>:

// 屏幕逐渐变亮或者变暗
// Brightness_Dis: 目标值
// time: 达到目标值的时间,单位: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 80015e6:	f7ff ffed 	bl	80015c4 <LCD_GetBrightness>
 80015ea:	6278      	str	r0, [r7, #36]	; 0x24
	time_now = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 80015f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d05e      	beq.n	80016b6 <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d05c      	beq.n	80016ba <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800160a:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	ee07 3a90 	vmov	s15, r3
 8001614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001618:	ed97 7a07 	vldr	s14, [r7, #28]
 800161c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001620:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800162e:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800163c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001644:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 8001648:	edd7 6a07 	vldr	s13, [r7, #28]
 800164c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001654:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 8001658:	f001 ff54 	bl	8003504 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 800165e:	2001      	movs	r0, #1
 8001660:	f001 ff5c 	bl	800351c <HAL_Delay>
		
		time_now = get_tick()-tick;
 8001664:	f001 ff4e 	bl	8003504 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800167a:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 800167e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001682:	edd7 7a05 	vldr	s15, [r7, #20]
 8001686:	ee27 7a27 	vmul.f32	s14, s14, s15
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	ee07 3a90 	vmov	s15, r3
 8001690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001698:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 800169c:	edd7 7a03 	vldr	s15, [r7, #12]
 80016a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016a4:	ee17 0a90 	vmov	r0, s15
 80016a8:	f7ff ff7c 	bl	80015a4 <LCD_SetBrightness>
		
		if(time_now >= time) break;
 80016ac:	6a3a      	ldr	r2, [r7, #32]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d204      	bcs.n	80016be <LCD_Light+0xe2>
		delay_ms(1);
 80016b4:	e7d3      	b.n	800165e <LCD_Light+0x82>
		return;
 80016b6:	bf00      	nop
 80016b8:	e002      	b.n	80016c0 <LCD_Light+0xe4>
		return;
 80016ba:	bf00      	nop
 80016bc:	e000      	b.n	80016c0 <LCD_Light+0xe4>
		if(time_now >= time) break;
 80016be:	bf00      	nop
		
	}
}
 80016c0:	3728      	adds	r7, #40	; 0x28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <LCD_ShowChar>:
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16
//mode:叠加方式(1)还是非叠加方式(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 80016c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016cc:	b097      	sub	sp, #92	; 0x5c
 80016ce:	af02      	add	r7, sp, #8
 80016d0:	461e      	mov	r6, r3
 80016d2:	4603      	mov	r3, r0
 80016d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80016d6:	460b      	mov	r3, r1
 80016d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80016da:	4613      	mov	r3, r2
 80016dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80016e0:	4633      	mov	r3, r6
 80016e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80016e6:	466b      	mov	r3, sp
 80016e8:	607b      	str	r3, [r7, #4]
  uint8_t temp,t1,t;
	uint16_t y0=y;
 80016ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint16_t x0=x;
 80016f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t colortemp=POINT_COLOR; 
 80016f6:	4baf      	ldr	r3, [pc, #700]	; (80019b4 <LCD_ShowChar+0x2ec>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 80016fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001702:	2b0c      	cmp	r3, #12
 8001704:	d101      	bne.n	800170a <LCD_ShowChar+0x42>
 8001706:	2106      	movs	r1, #6
 8001708:	e000      	b.n	800170c <LCD_ShowChar+0x44>
 800170a:	2108      	movs	r1, #8
 800170c:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8001710:	1e4b      	subs	r3, r1, #1
 8001712:	643b      	str	r3, [r7, #64]	; 0x40
 8001714:	460a      	mov	r2, r1
 8001716:	2300      	movs	r3, #0
 8001718:	4692      	mov	sl, r2
 800171a:	469b      	mov	fp, r3
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8001728:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800172c:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8001730:	460b      	mov	r3, r1
 8001732:	005e      	lsls	r6, r3, #1
 8001734:	4603      	mov	r3, r0
 8001736:	3b01      	subs	r3, #1
 8001738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800173a:	460a      	mov	r2, r1
 800173c:	2300      	movs	r3, #0
 800173e:	61ba      	str	r2, [r7, #24]
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	b2c3      	uxtb	r3, r0
 8001744:	2200      	movs	r2, #0
 8001746:	623b      	str	r3, [r7, #32]
 8001748:	627a      	str	r2, [r7, #36]	; 0x24
 800174a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800174e:	465b      	mov	r3, fp
 8001750:	6a3a      	ldr	r2, [r7, #32]
 8001752:	fb02 fc03 	mul.w	ip, r2, r3
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	4652      	mov	r2, sl
 800175a:	fb02 f303 	mul.w	r3, r2, r3
 800175e:	449c      	add	ip, r3
 8001760:	4652      	mov	r2, sl
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	fba2 8903 	umull	r8, r9, r2, r3
 8001768:	eb0c 0309 	add.w	r3, ip, r9
 800176c:	4699      	mov	r9, r3
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800177a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800177e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001782:	460a      	mov	r2, r1
 8001784:	2300      	movs	r3, #0
 8001786:	613a      	str	r2, [r7, #16]
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	b2c3      	uxtb	r3, r0
 800178c:	2200      	movs	r2, #0
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	60fa      	str	r2, [r7, #12]
 8001792:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001796:	464b      	mov	r3, r9
 8001798:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800179c:	4652      	mov	r2, sl
 800179e:	fb02 fc03 	mul.w	ip, r2, r3
 80017a2:	465b      	mov	r3, fp
 80017a4:	4642      	mov	r2, r8
 80017a6:	fb02 f303 	mul.w	r3, r2, r3
 80017aa:	449c      	add	ip, r3
 80017ac:	4642      	mov	r2, r8
 80017ae:	4653      	mov	r3, sl
 80017b0:	fba2 4503 	umull	r4, r5, r2, r3
 80017b4:	eb0c 0305 	add.w	r3, ip, r5
 80017b8:	461d      	mov	r5, r3
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	012b      	lsls	r3, r5, #4
 80017c4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017c8:	0122      	lsls	r2, r4, #4
 80017ca:	460b      	mov	r3, r1
 80017cc:	4602      	mov	r2, r0
 80017ce:	fb02 f303 	mul.w	r3, r2, r3
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	3307      	adds	r3, #7
 80017d6:	08db      	lsrs	r3, r3, #3
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	ebad 0d03 	sub.w	sp, sp, r3
 80017de:	ab02      	add	r3, sp, #8
 80017e0:	3301      	adds	r3, #1
 80017e2:	085b      	lsrs	r3, r3, #1
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 80017e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017ec:	4619      	mov	r1, r3
 80017ee:	4872      	ldr	r0, [pc, #456]	; (80019b8 <LCD_ShowChar+0x2f0>)
 80017f0:	f001 fc26 	bl	8003040 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 80017f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017f8:	4619      	mov	r1, r3
 80017fa:	486f      	ldr	r0, [pc, #444]	; (80019b8 <LCD_ShowChar+0x2f0>)
 80017fc:	f001 fc32 	bl	8003064 <ST7735_GetYSize>
	
	//设置窗口		   
	num=num-' ';//得到偏移后的值
 8001800:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001804:	3b20      	subs	r3, #32
 8001806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	count = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	
	if(!mode) //非叠加方式
 8001810:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001814:	2b00      	cmp	r3, #0
 8001816:	f040 80a7 	bne.w	8001968 <LCD_ShowChar+0x2a0>
	{
		for(t=0;t<size;t++)
 800181a:	2300      	movs	r3, #0
 800181c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001820:	e09a      	b.n	8001958 <LCD_ShowChar+0x290>
		{   
			if(size==12)temp=asc2_1206[num][t];  //调用1206字体
 8001822:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001826:	2b0c      	cmp	r3, #12
 8001828:	d10e      	bne.n	8001848 <LCD_ShowChar+0x180>
 800182a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800182e:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 8001832:	4862      	ldr	r0, [pc, #392]	; (80019bc <LCD_ShowChar+0x2f4>)
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4403      	add	r3, r0
 800183e:	440b      	add	r3, r1
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001846:	e00a      	b.n	800185e <LCD_ShowChar+0x196>
			else temp=asc2_1608[num][t];		 //调用1608字体
 8001848:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800184c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001850:	495b      	ldr	r1, [pc, #364]	; (80019c0 <LCD_ShowChar+0x2f8>)
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	440a      	add	r2, r1
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			
			for(t1=0;t1<8;t1++)
 800185e:	2300      	movs	r3, #0
 8001860:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001864:	e06d      	b.n	8001942 <LCD_ShowChar+0x27a>
			{			    
				if(temp&0x80)
 8001866:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800186a:	2b00      	cmp	r3, #0
 800186c:	da0e      	bge.n	800188c <LCD_ShowChar+0x1c4>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 800186e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	b21a      	sxth	r2, r3
 8001876:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	b29b      	uxth	r3, r3
 800187e:	b21b      	sxth	r3, r3
 8001880:	4313      	orrs	r3, r2
 8001882:	b21b      	sxth	r3, r3
 8001884:	b29a      	uxth	r2, r3
 8001886:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <LCD_ShowChar+0x2ec>)
 8001888:	801a      	strh	r2, [r3, #0]
 800188a:	e00d      	b.n	80018a8 <LCD_ShowChar+0x1e0>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 800188c:	4b4d      	ldr	r3, [pc, #308]	; (80019c4 <LCD_ShowChar+0x2fc>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	b21a      	sxth	r2, r3
 8001894:	4b4b      	ldr	r3, [pc, #300]	; (80019c4 <LCD_ShowChar+0x2fc>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	b29b      	uxth	r3, r3
 800189c:	b21b      	sxth	r3, r3
 800189e:	4313      	orrs	r3, r2
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <LCD_ShowChar+0x2ec>)
 80018a6:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 80018a8:	0872      	lsrs	r2, r6, #1
 80018aa:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 80018ae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018b2:	085b      	lsrs	r3, r3, #1
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461c      	mov	r4, r3
 80018b8:	4b3e      	ldr	r3, [pc, #248]	; (80019b4 <LCD_ShowChar+0x2ec>)
 80018ba:	8818      	ldrh	r0, [r3, #0]
 80018bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018be:	fb01 f202 	mul.w	r2, r1, r2
 80018c2:	4422      	add	r2, r4
 80018c4:	4601      	mov	r1, r0
 80018c6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 80018ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018ce:	3301      	adds	r3, #1
 80018d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				if(count >= size) count =0;
 80018d4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80018d8:	b29b      	uxth	r3, r3
 80018da:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80018de:	429a      	cmp	r2, r3
 80018e0:	d302      	bcc.n	80018e8 <LCD_ShowChar+0x220>
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				
				temp<<=1;
 80018e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				y++;
 80018f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018f4:	3301      	adds	r3, #1
 80018f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//超区域了
 80018f8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80018fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d304      	bcc.n	800190a <LCD_ShowChar+0x242>
 8001900:	4a2c      	ldr	r2, [pc, #176]	; (80019b4 <LCD_ShowChar+0x2ec>)
 8001902:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001906:	8013      	strh	r3, [r2, #0]
 8001908:	e0e6      	b.n	8001ad8 <LCD_ShowChar+0x410>
				if((y-y0)==size)
 800190a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800190c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001910:	1ad2      	subs	r2, r2, r3
 8001912:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001916:	429a      	cmp	r2, r3
 8001918:	d10e      	bne.n	8001938 <LCD_ShowChar+0x270>
				{
					y=y0;
 800191a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800191e:	85bb      	strh	r3, [r7, #44]	; 0x2c
					x++;
 8001920:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001922:	3301      	adds	r3, #1
 8001924:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//超区域了
 8001926:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192a:	429a      	cmp	r2, r3
 800192c:	d30e      	bcc.n	800194c <LCD_ShowChar+0x284>
 800192e:	4a21      	ldr	r2, [pc, #132]	; (80019b4 <LCD_ShowChar+0x2ec>)
 8001930:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001934:	8013      	strh	r3, [r2, #0]
 8001936:	e0cf      	b.n	8001ad8 <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 8001938:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800193c:	3301      	adds	r3, #1
 800193e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001942:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001946:	2b07      	cmp	r3, #7
 8001948:	d98d      	bls.n	8001866 <LCD_ShowChar+0x19e>
 800194a:	e000      	b.n	800194e <LCD_ShowChar+0x286>
					break;
 800194c:	bf00      	nop
		for(t=0;t<size;t++)
 800194e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001952:	3301      	adds	r3, #1
 8001954:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001958:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800195c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001960:	429a      	cmp	r2, r3
 8001962:	f4ff af5e 	bcc.w	8001822 <LCD_ShowChar+0x15a>
 8001966:	e09c      	b.n	8001aa2 <LCD_ShowChar+0x3da>
			}
		}
	}
	else//叠加方式
	{
		for(t=0;t<size;t++)
 8001968:	2300      	movs	r3, #0
 800196a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800196e:	e091      	b.n	8001a94 <LCD_ShowChar+0x3cc>
		{   
			if(size==12)temp=asc2_1206[num][t];  //调用1206字体
 8001970:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001974:	2b0c      	cmp	r3, #12
 8001976:	d10e      	bne.n	8001996 <LCD_ShowChar+0x2ce>
 8001978:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800197c:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 8001980:	480e      	ldr	r0, [pc, #56]	; (80019bc <LCD_ShowChar+0x2f4>)
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4403      	add	r3, r0
 800198c:	440b      	add	r3, r1
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001994:	e00a      	b.n	80019ac <LCD_ShowChar+0x2e4>
			else temp=asc2_1608[num][t];		 //调用1608字体 	                          
 8001996:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800199a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800199e:	4908      	ldr	r1, [pc, #32]	; (80019c0 <LCD_ShowChar+0x2f8>)
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	440a      	add	r2, r1
 80019a4:	4413      	add	r3, r2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			for(t1=0;t1<8;t1++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80019b2:	e064      	b.n	8001a7e <LCD_ShowChar+0x3b6>
 80019b4:	24000028 	.word	0x24000028
 80019b8:	240004a8 	.word	0x240004a8
 80019bc:	0800c13c 	.word	0x0800c13c
 80019c0:	0800c5b0 	.word	0x0800c5b0
 80019c4:	240004e4 	.word	0x240004e4
			{			    
				if(temp&0x80)
 80019c8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	da1a      	bge.n	8001a06 <LCD_ShowChar+0x33e>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 80019d0:	4b44      	ldr	r3, [pc, #272]	; (8001ae4 <LCD_ShowChar+0x41c>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	b21a      	sxth	r2, r3
 80019d8:	4b42      	ldr	r3, [pc, #264]	; (8001ae4 <LCD_ShowChar+0x41c>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	b29b      	uxth	r3, r3
 80019e0:	b21b      	sxth	r3, r3
 80019e2:	4313      	orrs	r3, r2
 80019e4:	b218      	sxth	r0, r3
 80019e6:	0872      	lsrs	r2, r6, #1
 80019e8:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 80019ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019f0:	085b      	lsrs	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461c      	mov	r4, r3
 80019f6:	b280      	uxth	r0, r0
 80019f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019fa:	fb01 f202 	mul.w	r2, r1, r2
 80019fe:	4422      	add	r2, r4
 8001a00:	4601      	mov	r1, r0
 8001a02:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8001a06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				if(count >= size) count =0;
 8001a10:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d302      	bcc.n	8001a24 <LCD_ShowChar+0x35c>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				
				temp<<=1;
 8001a24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				y++;
 8001a2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a30:	3301      	adds	r3, #1
 8001a32:	85bb      	strh	r3, [r7, #44]	; 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//超区域了
 8001a34:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d304      	bcc.n	8001a46 <LCD_ShowChar+0x37e>
 8001a3c:	4a29      	ldr	r2, [pc, #164]	; (8001ae4 <LCD_ShowChar+0x41c>)
 8001a3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001a42:	8013      	strh	r3, [r2, #0]
 8001a44:	e048      	b.n	8001ad8 <LCD_ShowChar+0x410>
				if((y-y0)==size)
 8001a46:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001a48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001a4c:	1ad2      	subs	r2, r2, r3
 8001a4e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d10e      	bne.n	8001a74 <LCD_ShowChar+0x3ac>
				{
					y=y0;
 8001a56:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001a5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
					x++;
 8001a5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a5e:	3301      	adds	r3, #1
 8001a60:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//超区域了
 8001a62:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d30e      	bcc.n	8001a88 <LCD_ShowChar+0x3c0>
 8001a6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ae4 <LCD_ShowChar+0x41c>)
 8001a6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001a70:	8013      	strh	r3, [r2, #0]
 8001a72:	e031      	b.n	8001ad8 <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 8001a74:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001a7e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001a82:	2b07      	cmp	r3, #7
 8001a84:	d9a0      	bls.n	80019c8 <LCD_ShowChar+0x300>
 8001a86:	e000      	b.n	8001a8a <LCD_ShowChar+0x3c2>
					break;
 8001a88:	bf00      	nop
		for(t=0;t<size;t++)
 8001a8a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001a94:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001a98:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	f4ff af67 	bcc.w	8001970 <LCD_ShowChar+0x2a8>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 8001aa2:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8001aa6:	f8b7 0048 	ldrh.w	r0, [r7, #72]	; 0x48
 8001aaa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001aae:	2b0c      	cmp	r3, #12
 8001ab0:	d101      	bne.n	8001ab6 <LCD_ShowChar+0x3ee>
 8001ab2:	2306      	movs	r3, #6
 8001ab4:	e000      	b.n	8001ab8 <LCD_ShowChar+0x3f0>
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001abc:	9201      	str	r2, [sp, #4]
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4808      	ldr	r0, [pc, #32]	; (8001ae8 <LCD_ShowChar+0x420>)
 8001ac6:	f001 f90d 	bl	8002ce4 <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 8001aca:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <LCD_ShowChar+0x41c>)
 8001acc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001ad0:	8013      	strh	r3, [r2, #0]
 8001ad2:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8001ad6:	e001      	b.n	8001adc <LCD_ShowChar+0x414>
 8001ad8:	f8d7 d004 	ldr.w	sp, [r7, #4]
}   
 8001adc:	3754      	adds	r7, #84	; 0x54
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ae4:	24000028 	.word	0x24000028
 8001ae8:	240004a8 	.word	0x240004a8

08001aec <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小  
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	4604      	mov	r4, r0
 8001af4:	4608      	mov	r0, r1
 8001af6:	4611      	mov	r1, r2
 8001af8:	461a      	mov	r2, r3
 8001afa:	4623      	mov	r3, r4
 8001afc:	80fb      	strh	r3, [r7, #6]
 8001afe:	4603      	mov	r3, r0
 8001b00:	80bb      	strh	r3, [r7, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	807b      	strh	r3, [r7, #2]
 8001b06:	4613      	mov	r3, r2
 8001b08:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	4413      	add	r3, r2
 8001b14:	807b      	strh	r3, [r7, #2]
	height+=y;
 8001b16:	883a      	ldrh	r2, [r7, #0]
 8001b18:	88bb      	ldrh	r3, [r7, #4]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8001b1e:	e024      	b.n	8001b6a <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 8001b20:	88fa      	ldrh	r2, [r7, #6]
 8001b22:	887b      	ldrh	r3, [r7, #2]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d307      	bcc.n	8001b38 <LCD_ShowString+0x4c>
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	80fb      	strh	r3, [r7, #6]
 8001b2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	88bb      	ldrh	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 8001b38:	88ba      	ldrh	r2, [r7, #4]
 8001b3a:	883b      	ldrh	r3, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d21d      	bcs.n	8001b7c <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	781a      	ldrb	r2, [r3, #0]
 8001b44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b48:	88b9      	ldrh	r1, [r7, #4]
 8001b4a:	88f8      	ldrh	r0, [r7, #6]
 8001b4c:	2400      	movs	r4, #0
 8001b4e:	9400      	str	r4, [sp, #0]
 8001b50:	f7ff fdba 	bl	80016c8 <LCD_ShowChar>
        x+=size/2;
 8001b54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b58:	085b      	lsrs	r3, r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	4413      	add	r3, r2
 8001b62:	80fb      	strh	r3, [r7, #6]
        p++;
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	3301      	adds	r3, #1
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b7e      	cmp	r3, #126	; 0x7e
 8001b70:	d805      	bhi.n	8001b7e <LCD_ShowString+0x92>
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b1f      	cmp	r3, #31
 8001b78:	d8d2      	bhi.n	8001b20 <LCD_ShowString+0x34>
    }  
}
 8001b7a:	e000      	b.n	8001b7e <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 8001b7c:	bf00      	nop
}
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}
	...

08001b88 <lcd_init>:

static int32_t lcd_init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 8001b92:	2104      	movs	r1, #4
 8001b94:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <lcd_init+0x1c>)
 8001b96:	f009 fc0f 	bl	800b3b8 <HAL_TIMEx_PWMN_Start>
	return result;
 8001b9a:	687b      	ldr	r3, [r7, #4]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	24000410 	.word	0x24000410

08001ba8 <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001bac:	f001 fcaa 	bl	8003504 <HAL_GetTick>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bcc:	481d      	ldr	r0, [pc, #116]	; (8001c44 <lcd_writereg+0x8c>)
 8001bce:	f004 f893 	bl	8005cf8 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bd8:	481a      	ldr	r0, [pc, #104]	; (8001c44 <lcd_writereg+0x8c>)
 8001bda:	f004 f88d 	bl	8005cf8 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8001bde:	f107 010f 	add.w	r1, r7, #15
 8001be2:	2364      	movs	r3, #100	; 0x64
 8001be4:	2201      	movs	r2, #1
 8001be6:	4818      	ldr	r0, [pc, #96]	; (8001c48 <lcd_writereg+0x90>)
 8001be8:	f007 fd40 	bl	800966c <HAL_SPI_Transmit>
 8001bec:	4603      	mov	r3, r0
 8001bee:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bf6:	4813      	ldr	r0, [pc, #76]	; (8001c44 <lcd_writereg+0x8c>)
 8001bf8:	f004 f87e 	bl	8005cf8 <HAL_GPIO_WritePin>
	if(length > 0)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00c      	beq.n	8001c1c <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c0a:	68b9      	ldr	r1, [r7, #8]
 8001c0c:	480e      	ldr	r0, [pc, #56]	; (8001c48 <lcd_writereg+0x90>)
 8001c0e:	f007 fd2d 	bl	800966c <HAL_SPI_Transmit>
 8001c12:	4603      	mov	r3, r0
 8001c14:	461a      	mov	r2, r3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	4413      	add	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c22:	4808      	ldr	r0, [pc, #32]	; (8001c44 <lcd_writereg+0x8c>)
 8001c24:	f004 f868 	bl	8005cf8 <HAL_GPIO_WritePin>
	if(result>0){
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	dd03      	ble.n	8001c36 <lcd_writereg+0x7e>
		result = -1;}
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	e001      	b.n	8001c3a <lcd_writereg+0x82>
	else{
		result = 0;}
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
	return result;
 8001c3a:	697b      	ldr	r3, [r7, #20]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	58021000 	.word	0x58021000
 8001c48:	24000384 	.word	0x24000384

08001c4c <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c5e:	481b      	ldr	r0, [pc, #108]	; (8001ccc <lcd_readreg+0x80>)
 8001c60:	f004 f84a 	bl	8005cf8 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c6a:	4818      	ldr	r0, [pc, #96]	; (8001ccc <lcd_readreg+0x80>)
 8001c6c:	f004 f844 	bl	8005cf8 <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8001c70:	1df9      	adds	r1, r7, #7
 8001c72:	2364      	movs	r3, #100	; 0x64
 8001c74:	2201      	movs	r2, #1
 8001c76:	4816      	ldr	r0, [pc, #88]	; (8001cd0 <lcd_readreg+0x84>)
 8001c78:	f007 fcf8 	bl	800966c <HAL_SPI_Transmit>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 8001c80:	2201      	movs	r2, #1
 8001c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c86:	4811      	ldr	r0, [pc, #68]	; (8001ccc <lcd_readreg+0x80>)
 8001c88:	f004 f836 	bl	8005cf8 <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 8001c8c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c90:	2201      	movs	r2, #1
 8001c92:	6839      	ldr	r1, [r7, #0]
 8001c94:	480e      	ldr	r0, [pc, #56]	; (8001cd0 <lcd_readreg+0x84>)
 8001c96:	f007 fedb 	bl	8009a50 <HAL_SPI_Receive>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001caa:	4808      	ldr	r0, [pc, #32]	; (8001ccc <lcd_readreg+0x80>)
 8001cac:	f004 f824 	bl	8005cf8 <HAL_GPIO_WritePin>
	if(result>0){
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	dd03      	ble.n	8001cbe <lcd_readreg+0x72>
		result = -1;}
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	e001      	b.n	8001cc2 <lcd_readreg+0x76>
	else{
		result = 0;}
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
	return result;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	58021000 	.word	0x58021000
 8001cd0:	24000384 	.word	0x24000384

08001cd4 <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ce4:	480f      	ldr	r0, [pc, #60]	; (8001d24 <lcd_senddata+0x50>)
 8001ce6:	f004 f807 	bl	8005cf8 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	2364      	movs	r3, #100	; 0x64
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	480d      	ldr	r0, [pc, #52]	; (8001d28 <lcd_senddata+0x54>)
 8001cf4:	f007 fcba 	bl	800966c <HAL_SPI_Transmit>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d02:	4808      	ldr	r0, [pc, #32]	; (8001d24 <lcd_senddata+0x50>)
 8001d04:	f003 fff8 	bl	8005cf8 <HAL_GPIO_WritePin>
	if(result>0){
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	dd03      	ble.n	8001d16 <lcd_senddata+0x42>
		result = -1;}
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	e001      	b.n	8001d1a <lcd_senddata+0x46>
	else{
		result = 0;}
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
	return result;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	58021000 	.word	0x58021000
 8001d28:	24000384 	.word	0x24000384

08001d2c <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8001d36:	2200      	movs	r2, #0
 8001d38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d3c:	4810      	ldr	r0, [pc, #64]	; (8001d80 <lcd_recvdata+0x54>)
 8001d3e:	f003 ffdb 	bl	8005cf8 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <lcd_recvdata+0x58>)
 8001d4e:	f007 fe7f 	bl	8009a50 <HAL_SPI_Receive>
 8001d52:	4603      	mov	r3, r0
 8001d54:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001d56:	2201      	movs	r2, #1
 8001d58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d5c:	4808      	ldr	r0, [pc, #32]	; (8001d80 <lcd_recvdata+0x54>)
 8001d5e:	f003 ffcb 	bl	8005cf8 <HAL_GPIO_WritePin>
	if(result>0){
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	dd03      	ble.n	8001d70 <lcd_recvdata+0x44>
		result = -1;}
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	e001      	b.n	8001d74 <lcd_recvdata+0x48>
	else{
		result = 0;}
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
	return result;
 8001d74:	68fb      	ldr	r3, [r7, #12]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	58021000 	.word	0x58021000
 8001d84:	24000384 	.word	0x24000384

08001d88 <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d103      	bne.n	8001da0 <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e03a      	b.n	8001e16 <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	891a      	ldrh	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	69da      	ldr	r2, [r3, #28]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <ST7735_RegisterBusIO+0x98>)
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <ST7735_RegisterBusIO+0x9c>)
 8001dea:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <ST7735_RegisterBusIO+0xa0>)
 8001df0:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <ST7735_RegisterBusIO+0xa4>)
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.handle    = pObj;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	631a      	str	r2, [r3, #48]	; 0x30

    if(pObj->IO.Init != NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d004      	beq.n	8001e10 <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4798      	blx	r3
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	e002      	b.n	8001e16 <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
 8001e14:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001e16:	68fb      	ldr	r3, [r7, #12]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	08003291 	.word	0x08003291
 8001e24:	080032b9 	.word	0x080032b9
 8001e28:	080032e3 	.word	0x080032e3
 8001e2c:	08003307 	.word	0x08003307

08001e30 <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d103      	bne.n	8001e4a <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	e3a6      	b.n	8002598 <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f103 0020 	add.w	r0, r3, #32
 8001e54:	f107 0213 	add.w	r2, r7, #19
 8001e58:	2300      	movs	r3, #0
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	f001 fa92 	bl	8003384 <st7735_write_reg>
 8001e60:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8001e62:	2178      	movs	r1, #120	; 0x78
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f001 fa60 	bl	800332a <ST7735_IO_Delay>
		
		tmp = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f103 0020 	add.w	r0, r3, #32
 8001e74:	f107 0213 	add.w	r2, r7, #19
 8001e78:	2300      	movs	r3, #0
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	f001 fa82 	bl	8003384 <st7735_write_reg>
 8001e80:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8001e82:	2178      	movs	r1, #120	; 0x78
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f001 fa50 	bl	800332a <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f103 0020 	add.w	r0, r3, #32
 8001e94:	f107 0213 	add.w	r2, r7, #19
 8001e98:	2301      	movs	r3, #1
 8001e9a:	2111      	movs	r1, #17
 8001e9c:	f001 fa72 	bl	8003384 <st7735_write_reg>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f103 0020 	add.w	r0, r3, #32
 8001eae:	f107 0213 	add.w	r2, r7, #19
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	21b1      	movs	r1, #177	; 0xb1
 8001eb6:	f001 fa65 	bl	8003384 <st7735_write_reg>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3320      	adds	r3, #32
 8001eca:	f107 0113 	add.w	r1, r7, #19
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f001 fa6c 	bl	80033ae <st7735_send_data>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	4413      	add	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001ede:	232c      	movs	r3, #44	; 0x2c
 8001ee0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3320      	adds	r3, #32
 8001ee6:	f107 0113 	add.w	r1, r7, #19
 8001eea:	2201      	movs	r2, #1
 8001eec:	4618      	mov	r0, r3
 8001eee:	f001 fa5e 	bl	80033ae <st7735_send_data>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001efa:	232d      	movs	r3, #45	; 0x2d
 8001efc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3320      	adds	r3, #32
 8001f02:	f107 0113 	add.w	r1, r7, #19
 8001f06:	2201      	movs	r2, #1
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f001 fa50 	bl	80033ae <st7735_send_data>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	4413      	add	r3, r2
 8001f14:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 8001f16:	2301      	movs	r3, #1
 8001f18:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f103 0020 	add.w	r0, r3, #32
 8001f20:	f107 0213 	add.w	r2, r7, #19
 8001f24:	2301      	movs	r3, #1
 8001f26:	21b2      	movs	r1, #178	; 0xb2
 8001f28:	f001 fa2c 	bl	8003384 <st7735_write_reg>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	4413      	add	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001f34:	232c      	movs	r3, #44	; 0x2c
 8001f36:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3320      	adds	r3, #32
 8001f3c:	f107 0113 	add.w	r1, r7, #19
 8001f40:	2201      	movs	r2, #1
 8001f42:	4618      	mov	r0, r3
 8001f44:	f001 fa33 	bl	80033ae <st7735_send_data>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001f50:	232d      	movs	r3, #45	; 0x2d
 8001f52:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3320      	adds	r3, #32
 8001f58:	f107 0113 	add.w	r1, r7, #19
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f001 fa25 	bl	80033ae <st7735_send_data>
 8001f64:	4602      	mov	r2, r0
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	4413      	add	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f103 0020 	add.w	r0, r3, #32
 8001f76:	f107 0213 	add.w	r2, r7, #19
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	21b3      	movs	r1, #179	; 0xb3
 8001f7e:	f001 fa01 	bl	8003384 <st7735_write_reg>
 8001f82:	4602      	mov	r2, r0
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	4413      	add	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001f8a:	232c      	movs	r3, #44	; 0x2c
 8001f8c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3320      	adds	r3, #32
 8001f92:	f107 0113 	add.w	r1, r7, #19
 8001f96:	2201      	movs	r2, #1
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f001 fa08 	bl	80033ae <st7735_send_data>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001fa6:	232d      	movs	r3, #45	; 0x2d
 8001fa8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3320      	adds	r3, #32
 8001fae:	f107 0113 	add.w	r1, r7, #19
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f001 f9fa 	bl	80033ae <st7735_send_data>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3320      	adds	r3, #32
 8001fca:	f107 0113 	add.w	r1, r7, #19
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f001 f9ec 	bl	80033ae <st7735_send_data>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	4413      	add	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001fde:	232c      	movs	r3, #44	; 0x2c
 8001fe0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3320      	adds	r3, #32
 8001fe6:	f107 0113 	add.w	r1, r7, #19
 8001fea:	2201      	movs	r2, #1
 8001fec:	4618      	mov	r0, r3
 8001fee:	f001 f9de 	bl	80033ae <st7735_send_data>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001ffa:	232d      	movs	r3, #45	; 0x2d
 8001ffc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3320      	adds	r3, #32
 8002002:	f107 0113 	add.w	r1, r7, #19
 8002006:	2201      	movs	r2, #1
 8002008:	4618      	mov	r0, r3
 800200a:	f001 f9d0 	bl	80033ae <st7735_send_data>
 800200e:	4602      	mov	r2, r0
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	4413      	add	r3, r2
 8002014:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 8002016:	2307      	movs	r3, #7
 8002018:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f103 0020 	add.w	r0, r3, #32
 8002020:	f107 0213 	add.w	r2, r7, #19
 8002024:	2301      	movs	r3, #1
 8002026:	21b4      	movs	r1, #180	; 0xb4
 8002028:	f001 f9ac 	bl	8003384 <st7735_write_reg>
 800202c:	4602      	mov	r2, r0
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	4413      	add	r3, r2
 8002032:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 8002034:	23a2      	movs	r3, #162	; 0xa2
 8002036:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f103 0020 	add.w	r0, r3, #32
 800203e:	f107 0213 	add.w	r2, r7, #19
 8002042:	2301      	movs	r3, #1
 8002044:	21c0      	movs	r1, #192	; 0xc0
 8002046:	f001 f99d 	bl	8003384 <st7735_write_reg>
 800204a:	4602      	mov	r2, r0
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	4413      	add	r3, r2
 8002050:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8002052:	2302      	movs	r3, #2
 8002054:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3320      	adds	r3, #32
 800205a:	f107 0113 	add.w	r1, r7, #19
 800205e:	2201      	movs	r2, #1
 8002060:	4618      	mov	r0, r3
 8002062:	f001 f9a4 	bl	80033ae <st7735_send_data>
 8002066:	4602      	mov	r2, r0
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	4413      	add	r3, r2
 800206c:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 800206e:	2384      	movs	r3, #132	; 0x84
 8002070:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3320      	adds	r3, #32
 8002076:	f107 0113 	add.w	r1, r7, #19
 800207a:	2201      	movs	r2, #1
 800207c:	4618      	mov	r0, r3
 800207e:	f001 f996 	bl	80033ae <st7735_send_data>
 8002082:	4602      	mov	r2, r0
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	4413      	add	r3, r2
 8002088:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 800208a:	23c5      	movs	r3, #197	; 0xc5
 800208c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f103 0020 	add.w	r0, r3, #32
 8002094:	f107 0213 	add.w	r2, r7, #19
 8002098:	2301      	movs	r3, #1
 800209a:	21c1      	movs	r1, #193	; 0xc1
 800209c:	f001 f972 	bl	8003384 <st7735_write_reg>
 80020a0:	4602      	mov	r2, r0
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	4413      	add	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 80020a8:	230a      	movs	r3, #10
 80020aa:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f103 0020 	add.w	r0, r3, #32
 80020b2:	f107 0213 	add.w	r2, r7, #19
 80020b6:	2301      	movs	r3, #1
 80020b8:	21c2      	movs	r1, #194	; 0xc2
 80020ba:	f001 f963 	bl	8003384 <st7735_write_reg>
 80020be:	4602      	mov	r2, r0
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	4413      	add	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3320      	adds	r3, #32
 80020ce:	f107 0113 	add.w	r1, r7, #19
 80020d2:	2201      	movs	r2, #1
 80020d4:	4618      	mov	r0, r3
 80020d6:	f001 f96a 	bl	80033ae <st7735_send_data>
 80020da:	4602      	mov	r2, r0
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	4413      	add	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 80020e2:	238a      	movs	r3, #138	; 0x8a
 80020e4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f103 0020 	add.w	r0, r3, #32
 80020ec:	f107 0213 	add.w	r2, r7, #19
 80020f0:	2301      	movs	r3, #1
 80020f2:	21c3      	movs	r1, #195	; 0xc3
 80020f4:	f001 f946 	bl	8003384 <st7735_write_reg>
 80020f8:	4602      	mov	r2, r0
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	4413      	add	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8002100:	232a      	movs	r3, #42	; 0x2a
 8002102:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3320      	adds	r3, #32
 8002108:	f107 0113 	add.w	r1, r7, #19
 800210c:	2201      	movs	r2, #1
 800210e:	4618      	mov	r0, r3
 8002110:	f001 f94d 	bl	80033ae <st7735_send_data>
 8002114:	4602      	mov	r2, r0
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	4413      	add	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 800211c:	238a      	movs	r3, #138	; 0x8a
 800211e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f103 0020 	add.w	r0, r3, #32
 8002126:	f107 0213 	add.w	r2, r7, #19
 800212a:	2301      	movs	r3, #1
 800212c:	21c4      	movs	r1, #196	; 0xc4
 800212e:	f001 f929 	bl	8003384 <st7735_write_reg>
 8002132:	4602      	mov	r2, r0
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	4413      	add	r3, r2
 8002138:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 800213a:	23ee      	movs	r3, #238	; 0xee
 800213c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3320      	adds	r3, #32
 8002142:	f107 0113 	add.w	r1, r7, #19
 8002146:	2201      	movs	r2, #1
 8002148:	4618      	mov	r0, r3
 800214a:	f001 f930 	bl	80033ae <st7735_send_data>
 800214e:	4602      	mov	r2, r0
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	4413      	add	r3, r2
 8002154:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8002156:	230e      	movs	r3, #14
 8002158:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f103 0020 	add.w	r0, r3, #32
 8002160:	f107 0213 	add.w	r2, r7, #19
 8002164:	2301      	movs	r3, #1
 8002166:	21c5      	movs	r1, #197	; 0xc5
 8002168:	f001 f90c 	bl	8003384 <st7735_write_reg>
 800216c:	4602      	mov	r2, r0
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	4413      	add	r3, r2
 8002172:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7b1b      	ldrb	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10d      	bne.n	8002198 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f103 0020 	add.w	r0, r3, #32
 8002182:	f107 0213 	add.w	r2, r7, #19
 8002186:	2300      	movs	r3, #0
 8002188:	2121      	movs	r1, #33	; 0x21
 800218a:	f001 f8fb 	bl	8003384 <st7735_write_reg>
 800218e:	4602      	mov	r2, r0
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	4413      	add	r3, r2
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e00c      	b.n	80021b2 <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f103 0020 	add.w	r0, r3, #32
 800219e:	f107 0213 	add.w	r2, r7, #19
 80021a2:	2300      	movs	r3, #0
 80021a4:	2120      	movs	r1, #32
 80021a6:	f001 f8ed 	bl	8003384 <st7735_write_reg>
 80021aa:	4602      	mov	r2, r0
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	4413      	add	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f103 0020 	add.w	r0, r3, #32
 80021b8:	f107 0208 	add.w	r2, r7, #8
 80021bc:	2301      	movs	r3, #1
 80021be:	213a      	movs	r1, #58	; 0x3a
 80021c0:	f001 f8e0 	bl	8003384 <st7735_write_reg>
 80021c4:	4602      	mov	r2, r0
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	4413      	add	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 80021cc:	2302      	movs	r3, #2
 80021ce:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f103 0020 	add.w	r0, r3, #32
 80021d6:	f107 0213 	add.w	r2, r7, #19
 80021da:	2301      	movs	r3, #1
 80021dc:	21e0      	movs	r1, #224	; 0xe0
 80021de:	f001 f8d1 	bl	8003384 <st7735_write_reg>
 80021e2:	4602      	mov	r2, r0
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	4413      	add	r3, r2
 80021e8:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 80021ea:	231c      	movs	r3, #28
 80021ec:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3320      	adds	r3, #32
 80021f2:	f107 0113 	add.w	r1, r7, #19
 80021f6:	2201      	movs	r2, #1
 80021f8:	4618      	mov	r0, r3
 80021fa:	f001 f8d8 	bl	80033ae <st7735_send_data>
 80021fe:	4602      	mov	r2, r0
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	4413      	add	r3, r2
 8002204:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8002206:	2307      	movs	r3, #7
 8002208:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3320      	adds	r3, #32
 800220e:	f107 0113 	add.w	r1, r7, #19
 8002212:	2201      	movs	r2, #1
 8002214:	4618      	mov	r0, r3
 8002216:	f001 f8ca 	bl	80033ae <st7735_send_data>
 800221a:	4602      	mov	r2, r0
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	4413      	add	r3, r2
 8002220:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8002222:	2312      	movs	r3, #18
 8002224:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3320      	adds	r3, #32
 800222a:	f107 0113 	add.w	r1, r7, #19
 800222e:	2201      	movs	r2, #1
 8002230:	4618      	mov	r0, r3
 8002232:	f001 f8bc 	bl	80033ae <st7735_send_data>
 8002236:	4602      	mov	r2, r0
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	4413      	add	r3, r2
 800223c:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 800223e:	2337      	movs	r3, #55	; 0x37
 8002240:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3320      	adds	r3, #32
 8002246:	f107 0113 	add.w	r1, r7, #19
 800224a:	2201      	movs	r2, #1
 800224c:	4618      	mov	r0, r3
 800224e:	f001 f8ae 	bl	80033ae <st7735_send_data>
 8002252:	4602      	mov	r2, r0
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	4413      	add	r3, r2
 8002258:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 800225a:	2332      	movs	r3, #50	; 0x32
 800225c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3320      	adds	r3, #32
 8002262:	f107 0113 	add.w	r1, r7, #19
 8002266:	2201      	movs	r2, #1
 8002268:	4618      	mov	r0, r3
 800226a:	f001 f8a0 	bl	80033ae <st7735_send_data>
 800226e:	4602      	mov	r2, r0
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	4413      	add	r3, r2
 8002274:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8002276:	2329      	movs	r3, #41	; 0x29
 8002278:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	3320      	adds	r3, #32
 800227e:	f107 0113 	add.w	r1, r7, #19
 8002282:	2201      	movs	r2, #1
 8002284:	4618      	mov	r0, r3
 8002286:	f001 f892 	bl	80033ae <st7735_send_data>
 800228a:	4602      	mov	r2, r0
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	4413      	add	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002292:	232d      	movs	r3, #45	; 0x2d
 8002294:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3320      	adds	r3, #32
 800229a:	f107 0113 	add.w	r1, r7, #19
 800229e:	2201      	movs	r2, #1
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 f884 	bl	80033ae <st7735_send_data>
 80022a6:	4602      	mov	r2, r0
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	4413      	add	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 80022ae:	2329      	movs	r3, #41	; 0x29
 80022b0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3320      	adds	r3, #32
 80022b6:	f107 0113 	add.w	r1, r7, #19
 80022ba:	2201      	movs	r2, #1
 80022bc:	4618      	mov	r0, r3
 80022be:	f001 f876 	bl	80033ae <st7735_send_data>
 80022c2:	4602      	mov	r2, r0
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	4413      	add	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 80022ca:	2325      	movs	r3, #37	; 0x25
 80022cc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	3320      	adds	r3, #32
 80022d2:	f107 0113 	add.w	r1, r7, #19
 80022d6:	2201      	movs	r2, #1
 80022d8:	4618      	mov	r0, r3
 80022da:	f001 f868 	bl	80033ae <st7735_send_data>
 80022de:	4602      	mov	r2, r0
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	4413      	add	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 80022e6:	232b      	movs	r3, #43	; 0x2b
 80022e8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3320      	adds	r3, #32
 80022ee:	f107 0113 	add.w	r1, r7, #19
 80022f2:	2201      	movs	r2, #1
 80022f4:	4618      	mov	r0, r3
 80022f6:	f001 f85a 	bl	80033ae <st7735_send_data>
 80022fa:	4602      	mov	r2, r0
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	4413      	add	r3, r2
 8002300:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 8002302:	2339      	movs	r3, #57	; 0x39
 8002304:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3320      	adds	r3, #32
 800230a:	f107 0113 	add.w	r1, r7, #19
 800230e:	2201      	movs	r2, #1
 8002310:	4618      	mov	r0, r3
 8002312:	f001 f84c 	bl	80033ae <st7735_send_data>
 8002316:	4602      	mov	r2, r0
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	4413      	add	r3, r2
 800231c:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3320      	adds	r3, #32
 8002326:	f107 0113 	add.w	r1, r7, #19
 800232a:	2201      	movs	r2, #1
 800232c:	4618      	mov	r0, r3
 800232e:	f001 f83e 	bl	80033ae <st7735_send_data>
 8002332:	4602      	mov	r2, r0
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	4413      	add	r3, r2
 8002338:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 800233a:	2301      	movs	r3, #1
 800233c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3320      	adds	r3, #32
 8002342:	f107 0113 	add.w	r1, r7, #19
 8002346:	2201      	movs	r2, #1
 8002348:	4618      	mov	r0, r3
 800234a:	f001 f830 	bl	80033ae <st7735_send_data>
 800234e:	4602      	mov	r2, r0
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	4413      	add	r3, r2
 8002354:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 8002356:	2303      	movs	r3, #3
 8002358:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3320      	adds	r3, #32
 800235e:	f107 0113 	add.w	r1, r7, #19
 8002362:	2201      	movs	r2, #1
 8002364:	4618      	mov	r0, r3
 8002366:	f001 f822 	bl	80033ae <st7735_send_data>
 800236a:	4602      	mov	r2, r0
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	4413      	add	r3, r2
 8002370:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8002372:	2310      	movs	r3, #16
 8002374:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3320      	adds	r3, #32
 800237a:	f107 0113 	add.w	r1, r7, #19
 800237e:	2201      	movs	r2, #1
 8002380:	4618      	mov	r0, r3
 8002382:	f001 f814 	bl	80033ae <st7735_send_data>
 8002386:	4602      	mov	r2, r0
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	4413      	add	r3, r2
 800238c:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 800238e:	2303      	movs	r3, #3
 8002390:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f103 0020 	add.w	r0, r3, #32
 8002398:	f107 0213 	add.w	r2, r7, #19
 800239c:	2301      	movs	r3, #1
 800239e:	21e1      	movs	r1, #225	; 0xe1
 80023a0:	f000 fff0 	bl	8003384 <st7735_write_reg>
 80023a4:	4602      	mov	r2, r0
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	4413      	add	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 80023ac:	231d      	movs	r3, #29
 80023ae:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3320      	adds	r3, #32
 80023b4:	f107 0113 	add.w	r1, r7, #19
 80023b8:	2201      	movs	r2, #1
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fff7 	bl	80033ae <st7735_send_data>
 80023c0:	4602      	mov	r2, r0
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	4413      	add	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 80023c8:	2307      	movs	r3, #7
 80023ca:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3320      	adds	r3, #32
 80023d0:	f107 0113 	add.w	r1, r7, #19
 80023d4:	2201      	movs	r2, #1
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 ffe9 	bl	80033ae <st7735_send_data>
 80023dc:	4602      	mov	r2, r0
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	4413      	add	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 80023e4:	2306      	movs	r3, #6
 80023e6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3320      	adds	r3, #32
 80023ec:	f107 0113 	add.w	r1, r7, #19
 80023f0:	2201      	movs	r2, #1
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 ffdb 	bl	80033ae <st7735_send_data>
 80023f8:	4602      	mov	r2, r0
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	4413      	add	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8002400:	232e      	movs	r3, #46	; 0x2e
 8002402:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3320      	adds	r3, #32
 8002408:	f107 0113 	add.w	r1, r7, #19
 800240c:	2201      	movs	r2, #1
 800240e:	4618      	mov	r0, r3
 8002410:	f000 ffcd 	bl	80033ae <st7735_send_data>
 8002414:	4602      	mov	r2, r0
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	4413      	add	r3, r2
 800241a:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 800241c:	232c      	movs	r3, #44	; 0x2c
 800241e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	3320      	adds	r3, #32
 8002424:	f107 0113 	add.w	r1, r7, #19
 8002428:	2201      	movs	r2, #1
 800242a:	4618      	mov	r0, r3
 800242c:	f000 ffbf 	bl	80033ae <st7735_send_data>
 8002430:	4602      	mov	r2, r0
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	4413      	add	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8002438:	2329      	movs	r3, #41	; 0x29
 800243a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3320      	adds	r3, #32
 8002440:	f107 0113 	add.w	r1, r7, #19
 8002444:	2201      	movs	r2, #1
 8002446:	4618      	mov	r0, r3
 8002448:	f000 ffb1 	bl	80033ae <st7735_send_data>
 800244c:	4602      	mov	r2, r0
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	4413      	add	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002454:	232d      	movs	r3, #45	; 0x2d
 8002456:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3320      	adds	r3, #32
 800245c:	f107 0113 	add.w	r1, r7, #19
 8002460:	2201      	movs	r2, #1
 8002462:	4618      	mov	r0, r3
 8002464:	f000 ffa3 	bl	80033ae <st7735_send_data>
 8002468:	4602      	mov	r2, r0
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	4413      	add	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8002470:	232e      	movs	r3, #46	; 0x2e
 8002472:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	3320      	adds	r3, #32
 8002478:	f107 0113 	add.w	r1, r7, #19
 800247c:	2201      	movs	r2, #1
 800247e:	4618      	mov	r0, r3
 8002480:	f000 ff95 	bl	80033ae <st7735_send_data>
 8002484:	4602      	mov	r2, r0
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	4413      	add	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 800248c:	232e      	movs	r3, #46	; 0x2e
 800248e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3320      	adds	r3, #32
 8002494:	f107 0113 	add.w	r1, r7, #19
 8002498:	2201      	movs	r2, #1
 800249a:	4618      	mov	r0, r3
 800249c:	f000 ff87 	bl	80033ae <st7735_send_data>
 80024a0:	4602      	mov	r2, r0
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	4413      	add	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 80024a8:	2337      	movs	r3, #55	; 0x37
 80024aa:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3320      	adds	r3, #32
 80024b0:	f107 0113 	add.w	r1, r7, #19
 80024b4:	2201      	movs	r2, #1
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 ff79 	bl	80033ae <st7735_send_data>
 80024bc:	4602      	mov	r2, r0
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	4413      	add	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 80024c4:	233f      	movs	r3, #63	; 0x3f
 80024c6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3320      	adds	r3, #32
 80024cc:	f107 0113 	add.w	r1, r7, #19
 80024d0:	2201      	movs	r2, #1
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 ff6b 	bl	80033ae <st7735_send_data>
 80024d8:	4602      	mov	r2, r0
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	4413      	add	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3320      	adds	r3, #32
 80024e8:	f107 0113 	add.w	r1, r7, #19
 80024ec:	2201      	movs	r2, #1
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 ff5d 	bl	80033ae <st7735_send_data>
 80024f4:	4602      	mov	r2, r0
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	4413      	add	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3320      	adds	r3, #32
 8002504:	f107 0113 	add.w	r1, r7, #19
 8002508:	2201      	movs	r2, #1
 800250a:	4618      	mov	r0, r3
 800250c:	f000 ff4f 	bl	80033ae <st7735_send_data>
 8002510:	4602      	mov	r2, r0
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	4413      	add	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8002518:	2302      	movs	r3, #2
 800251a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	3320      	adds	r3, #32
 8002520:	f107 0113 	add.w	r1, r7, #19
 8002524:	2201      	movs	r2, #1
 8002526:	4618      	mov	r0, r3
 8002528:	f000 ff41 	bl	80033ae <st7735_send_data>
 800252c:	4602      	mov	r2, r0
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	4413      	add	r3, r2
 8002532:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8002534:	2310      	movs	r3, #16
 8002536:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3320      	adds	r3, #32
 800253c:	f107 0113 	add.w	r1, r7, #19
 8002540:	2201      	movs	r2, #1
 8002542:	4618      	mov	r0, r3
 8002544:	f000 ff33 	bl	80033ae <st7735_send_data>
 8002548:	4602      	mov	r2, r0
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	4413      	add	r3, r2
 800254e:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 8002550:	2300      	movs	r3, #0
 8002552:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f103 0020 	add.w	r0, r3, #32
 800255a:	f107 0213 	add.w	r2, r7, #19
 800255e:	2301      	movs	r3, #1
 8002560:	2113      	movs	r1, #19
 8002562:	f000 ff0f 	bl	8003384 <st7735_write_reg>
 8002566:	4602      	mov	r2, r0
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	4413      	add	r3, r2
 800256c:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f103 0020 	add.w	r0, r3, #32
 8002574:	f107 0213 	add.w	r2, r7, #19
 8002578:	2301      	movs	r3, #1
 800257a:	2129      	movs	r1, #41	; 0x29
 800257c:	f000 ff02 	bl	8003384 <st7735_write_reg>
 8002580:	4602      	mov	r2, r0
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	4413      	add	r3, r2
 8002586:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f944 	bl	8002818 <ST7735_SetOrientation>
 8002590:	4602      	mov	r2, r0
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	4413      	add	r3, r2
 8002596:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
 80025a2:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80025a4:	697b      	ldr	r3, [r7, #20]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3320      	adds	r3, #32
 80025d2:	f107 0208 	add.w	r2, r7, #8
 80025d6:	21da      	movs	r1, #218	; 0xda
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fec0 	bl	800335e <st7735_read_reg>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	e02d      	b.n	8002648 <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f103 0020 	add.w	r0, r3, #32
 80025f2:	f107 0308 	add.w	r3, r7, #8
 80025f6:	3301      	adds	r3, #1
 80025f8:	461a      	mov	r2, r3
 80025fa:	21db      	movs	r1, #219	; 0xdb
 80025fc:	f000 feaf 	bl	800335e <st7735_read_reg>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	e01c      	b.n	8002648 <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f103 0020 	add.w	r0, r3, #32
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	3302      	adds	r3, #2
 800261a:	461a      	mov	r2, r3
 800261c:	21dc      	movs	r1, #220	; 0xdc
 800261e:	f000 fe9e 	bl	800335e <st7735_read_reg>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	e00b      	b.n	8002648 <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 8002630:	7abb      	ldrb	r3, [r7, #10]
 8002632:	461a      	mov	r2, r3
 8002634:	7a7b      	ldrb	r3, [r7, #9]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	431a      	orrs	r2, r3
 800263a:	7a3b      	ldrb	r3, [r7, #8]
 800263c:	041b      	lsls	r3, r3, #16
 800263e:	431a      	orrs	r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002648:	68fb      	ldr	r3, [r7, #12]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f103 0020 	add.w	r0, r3, #32
 8002666:	f107 020b 	add.w	r2, r7, #11
 800266a:	2300      	movs	r3, #0
 800266c:	2113      	movs	r1, #19
 800266e:	f000 fe89 	bl	8003384 <st7735_write_reg>
 8002672:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8002674:	210a      	movs	r1, #10
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fe57 	bl	800332a <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f103 0020 	add.w	r0, r3, #32
 8002682:	f107 020b 	add.w	r2, r7, #11
 8002686:	2300      	movs	r3, #0
 8002688:	2129      	movs	r1, #41	; 0x29
 800268a:	f000 fe7b 	bl	8003384 <st7735_write_reg>
 800268e:	4602      	mov	r2, r0
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4413      	add	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8002696:	210a      	movs	r1, #10
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fe46 	bl	800332a <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f103 0020 	add.w	r0, r3, #32
 80026a4:	f107 020b 	add.w	r2, r7, #11
 80026a8:	2300      	movs	r3, #0
 80026aa:	2136      	movs	r1, #54	; 0x36
 80026ac:	f000 fe6a 	bl	8003384 <st7735_write_reg>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4413      	add	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80026b8:	4b16      	ldr	r3, [pc, #88]	; (8002714 <ST7735_DisplayOn+0xc0>)
 80026ba:	7b1b      	ldrb	r3, [r3, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80026c0:	4b14      	ldr	r3, [pc, #80]	; (8002714 <ST7735_DisplayOn+0xc0>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <ST7735_DisplayOn+0xc4>)
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4413      	add	r3, r2
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80026ce:	f043 0308 	orr.w	r3, r3, #8
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	e006      	b.n	80026e4 <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <ST7735_DisplayOn+0xc0>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	4a0f      	ldr	r2, [pc, #60]	; (8002718 <ST7735_DisplayOn+0xc4>)
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3320      	adds	r3, #32
 80026ea:	f107 010b 	add.w	r1, r7, #11
 80026ee:	2201      	movs	r2, #1
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fe5c 	bl	80033ae <st7735_send_data>
 80026f6:	4602      	mov	r2, r0
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4413      	add	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 8002704:	f04f 33ff 	mov.w	r3, #4294967295
 8002708:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	240004e8 	.word	0x240004e8
 8002718:	24000078 	.word	0x24000078

0800271c <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f103 0020 	add.w	r0, r3, #32
 800272e:	f107 020b 	add.w	r2, r7, #11
 8002732:	2300      	movs	r3, #0
 8002734:	2113      	movs	r1, #19
 8002736:	f000 fe25 	bl	8003384 <st7735_write_reg>
 800273a:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 800273c:	210a      	movs	r1, #10
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fdf3 	bl	800332a <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f103 0020 	add.w	r0, r3, #32
 800274a:	f107 020b 	add.w	r2, r7, #11
 800274e:	2300      	movs	r3, #0
 8002750:	2128      	movs	r1, #40	; 0x28
 8002752:	f000 fe17 	bl	8003384 <st7735_write_reg>
 8002756:	4602      	mov	r2, r0
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4413      	add	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 800275e:	210a      	movs	r1, #10
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fde2 	bl	800332a <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f103 0020 	add.w	r0, r3, #32
 800276c:	f107 020b 	add.w	r2, r7, #11
 8002770:	2300      	movs	r3, #0
 8002772:	2136      	movs	r1, #54	; 0x36
 8002774:	f000 fe06 	bl	8003384 <st7735_write_reg>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4413      	add	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002780:	4b16      	ldr	r3, [pc, #88]	; (80027dc <ST7735_DisplayOff+0xc0>)
 8002782:	7b1b      	ldrb	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10a      	bne.n	800279e <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <ST7735_DisplayOff+0xc0>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <ST7735_DisplayOff+0xc4>)
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002796:	f043 0308 	orr.w	r3, r3, #8
 800279a:	b2db      	uxtb	r3, r3
 800279c:	e006      	b.n	80027ac <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <ST7735_DisplayOff+0xc0>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4a0f      	ldr	r2, [pc, #60]	; (80027e0 <ST7735_DisplayOff+0xc4>)
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3320      	adds	r3, #32
 80027b2:	f107 010b 	add.w	r1, r7, #11
 80027b6:	2201      	movs	r2, #1
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fdf8 	bl	80033ae <st7735_send_data>
 80027be:	4602      	mov	r2, r0
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 80027cc:	f04f 33ff 	mov.w	r3, #4294967295
 80027d0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80027d2:	68fb      	ldr	r3, [r7, #12]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	240004e8 	.word	0x240004e8
 80027e0:	24000078 	.word	0x24000078

080027e4 <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 8002808:	f04f 33ff 	mov.w	r3, #4294967295
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af02      	add	r7, sp, #8
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <ST7735_SetOrientation+0x1a>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d119      	bne.n	8002866 <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	7b5b      	ldrb	r3, [r3, #13]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d106      	bne.n	8002848 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 800283a:	4b3c      	ldr	r3, [pc, #240]	; (800292c <ST7735_SetOrientation+0x114>)
 800283c:	2250      	movs	r2, #80	; 0x50
 800283e:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 8002840:	4b3a      	ldr	r3, [pc, #232]	; (800292c <ST7735_SetOrientation+0x114>)
 8002842:	22a0      	movs	r2, #160	; 0xa0
 8002844:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8002846:	e028      	b.n	800289a <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	7b5b      	ldrb	r3, [r3, #13]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <ST7735_SetOrientation+0x40>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	7b5b      	ldrb	r3, [r3, #13]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d120      	bne.n	800289a <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 8002858:	4b34      	ldr	r3, [pc, #208]	; (800292c <ST7735_SetOrientation+0x114>)
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 800285e:	4b33      	ldr	r3, [pc, #204]	; (800292c <ST7735_SetOrientation+0x114>)
 8002860:	22a0      	movs	r2, #160	; 0xa0
 8002862:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8002864:	e019      	b.n	800289a <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	7b5b      	ldrb	r3, [r3, #13]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d106      	bne.n	800287c <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 800286e:	4b2f      	ldr	r3, [pc, #188]	; (800292c <ST7735_SetOrientation+0x114>)
 8002870:	22a0      	movs	r2, #160	; 0xa0
 8002872:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 8002874:	4b2d      	ldr	r3, [pc, #180]	; (800292c <ST7735_SetOrientation+0x114>)
 8002876:	2250      	movs	r2, #80	; 0x50
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	e00f      	b.n	800289c <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	7b5b      	ldrb	r3, [r3, #13]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <ST7735_SetOrientation+0x74>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	7b5b      	ldrb	r3, [r3, #13]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d107      	bne.n	800289c <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 800288c:	4b27      	ldr	r3, [pc, #156]	; (800292c <ST7735_SetOrientation+0x114>)
 800288e:	22a0      	movs	r2, #160	; 0xa0
 8002890:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <ST7735_SetOrientation+0x114>)
 8002894:	2280      	movs	r2, #128	; 0x80
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	e000      	b.n	800289c <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800289a:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4a22      	ldr	r2, [pc, #136]	; (800292c <ST7735_SetOrientation+0x114>)
 80028a2:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	7b1a      	ldrb	r2, [r3, #12]
 80028a8:	4b20      	ldr	r3, [pc, #128]	; (800292c <ST7735_SetOrientation+0x114>)
 80028aa:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	7b5a      	ldrb	r2, [r3, #13]
 80028b0:	4b1e      	ldr	r3, [pc, #120]	; (800292c <ST7735_SetOrientation+0x114>)
 80028b2:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80028b4:	4b1d      	ldr	r3, [pc, #116]	; (800292c <ST7735_SetOrientation+0x114>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b1c      	ldr	r3, [pc, #112]	; (800292c <ST7735_SetOrientation+0x114>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	4613      	mov	r3, r2
 80028c0:	2200      	movs	r2, #0
 80028c2:	2100      	movs	r1, #0
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fbdf 	bl	8003088 <ST7735_SetDisplayWindow>
 80028ca:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80028cc:	4b17      	ldr	r3, [pc, #92]	; (800292c <ST7735_SetOrientation+0x114>)
 80028ce:	7b1b      	ldrb	r3, [r3, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10a      	bne.n	80028ea <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <ST7735_SetOrientation+0x114>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a15      	ldr	r2, [pc, #84]	; (8002930 <ST7735_SetOrientation+0x118>)
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80028e2:	f043 0308 	orr.w	r3, r3, #8
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	e006      	b.n	80028f8 <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <ST7735_SetOrientation+0x114>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	4a10      	ldr	r2, [pc, #64]	; (8002930 <ST7735_SetOrientation+0x118>)
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f103 0020 	add.w	r0, r3, #32
 8002900:	f107 020b 	add.w	r2, r7, #11
 8002904:	2301      	movs	r3, #1
 8002906:	2136      	movs	r1, #54	; 0x36
 8002908:	f000 fd3c 	bl	8003384 <st7735_write_reg>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4413      	add	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 800291a:	f04f 33ff 	mov.w	r3, #4294967295
 800291e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002920:	68fb      	ldr	r3, [r7, #12]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	240004e8 	.word	0x240004e8
 8002930:	24000078 	.word	0x24000078

08002934 <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <ST7735_GetOrientation+0x20>)
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	240004e8 	.word	0x240004e8

08002958 <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8002964:	4b59      	ldr	r3, [pc, #356]	; (8002acc <ST7735_SetCursor+0x174>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d821      	bhi.n	80029b0 <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 800296c:	4b57      	ldr	r3, [pc, #348]	; (8002acc <ST7735_SetCursor+0x174>)
 800296e:	7b5b      	ldrb	r3, [r3, #13]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d10e      	bne.n	8002992 <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8002974:	4b55      	ldr	r3, [pc, #340]	; (8002acc <ST7735_SetCursor+0x174>)
 8002976:	7b1b      	ldrb	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d106      	bne.n	800298a <ST7735_SetCursor+0x32>
				Xpos += 26;
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	331a      	adds	r3, #26
 8002980:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3301      	adds	r3, #1
 8002986:	607b      	str	r3, [r7, #4]
 8002988:	e033      	b.n	80029f2 <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	3318      	adds	r3, #24
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	e02f      	b.n	80029f2 <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002992:	4b4e      	ldr	r3, [pc, #312]	; (8002acc <ST7735_SetCursor+0x174>)
 8002994:	7b5b      	ldrb	r3, [r3, #13]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d12b      	bne.n	80029f2 <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 800299a:	4b4c      	ldr	r3, [pc, #304]	; (8002acc <ST7735_SetCursor+0x174>)
 800299c:	7b1b      	ldrb	r3, [r3, #12]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d127      	bne.n	80029f2 <ST7735_SetCursor+0x9a>
				Xpos += 2;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3302      	adds	r3, #2
 80029a6:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3301      	adds	r3, #1
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	e020      	b.n	80029f2 <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 80029b0:	4b46      	ldr	r3, [pc, #280]	; (8002acc <ST7735_SetCursor+0x174>)
 80029b2:	7b5b      	ldrb	r3, [r3, #13]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d10e      	bne.n	80029d6 <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80029b8:	4b44      	ldr	r3, [pc, #272]	; (8002acc <ST7735_SetCursor+0x174>)
 80029ba:	7b1b      	ldrb	r3, [r3, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <ST7735_SetCursor+0x76>
				Xpos += 1;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	3301      	adds	r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	331a      	adds	r3, #26
 80029ca:	607b      	str	r3, [r7, #4]
 80029cc:	e011      	b.n	80029f2 <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3318      	adds	r3, #24
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	e00d      	b.n	80029f2 <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80029d6:	4b3d      	ldr	r3, [pc, #244]	; (8002acc <ST7735_SetCursor+0x174>)
 80029d8:	7b5b      	ldrb	r3, [r3, #13]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d109      	bne.n	80029f2 <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80029de:	4b3b      	ldr	r3, [pc, #236]	; (8002acc <ST7735_SetCursor+0x174>)
 80029e0:	7b1b      	ldrb	r3, [r3, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d105      	bne.n	80029f2 <ST7735_SetCursor+0x9a>
				Xpos += 1;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3301      	adds	r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3302      	adds	r3, #2
 80029f0:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f103 0020 	add.w	r0, r3, #32
 80029f8:	f107 0213 	add.w	r2, r7, #19
 80029fc:	2300      	movs	r3, #0
 80029fe:	212a      	movs	r1, #42	; 0x2a
 8002a00:	f000 fcc0 	bl	8003384 <st7735_write_reg>
 8002a04:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	0a1b      	lsrs	r3, r3, #8
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	3320      	adds	r3, #32
 8002a12:	f107 0113 	add.w	r1, r7, #19
 8002a16:	2201      	movs	r2, #1
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 fcc8 	bl	80033ae <st7735_send_data>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	4413      	add	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3320      	adds	r3, #32
 8002a30:	f107 0113 	add.w	r1, r7, #19
 8002a34:	2201      	movs	r2, #1
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fcb9 	bl	80033ae <st7735_send_data>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	4413      	add	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f103 0020 	add.w	r0, r3, #32
 8002a4a:	f107 0213 	add.w	r2, r7, #19
 8002a4e:	2300      	movs	r3, #0
 8002a50:	212b      	movs	r1, #43	; 0x2b
 8002a52:	f000 fc97 	bl	8003384 <st7735_write_reg>
 8002a56:	4602      	mov	r2, r0
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	0a1b      	lsrs	r3, r3, #8
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3320      	adds	r3, #32
 8002a6a:	f107 0113 	add.w	r1, r7, #19
 8002a6e:	2201      	movs	r2, #1
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fc9c 	bl	80033ae <st7735_send_data>
 8002a76:	4602      	mov	r2, r0
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	3320      	adds	r3, #32
 8002a88:	f107 0113 	add.w	r1, r7, #19
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fc8d 	bl	80033ae <st7735_send_data>
 8002a94:	4602      	mov	r2, r0
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	4413      	add	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f103 0020 	add.w	r0, r3, #32
 8002aa2:	f107 0213 	add.w	r2, r7, #19
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	f000 fc6b 	bl	8003384 <st7735_write_reg>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002ac2:	697b      	ldr	r3, [r7, #20]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	240004e8 	.word	0x240004e8

08002ad0 <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b090      	sub	sp, #64	; 0x40
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	330a      	adds	r3, #10
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	330b      	adds	r3, #11
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	441a      	add	r2, r3
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	330c      	adds	r3, #12
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	041b      	lsls	r3, r3, #16
 8002b00:	441a      	add	r2, r3
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	330d      	adds	r3, #13
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	061b      	lsls	r3, r3, #24
 8002b0a:	4413      	add	r3, r2
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	3312      	adds	r3, #18
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	3313      	adds	r3, #19
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	441a      	add	r2, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	3314      	adds	r3, #20
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	441a      	add	r2, r3
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	3315      	adds	r3, #21
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	061b      	lsls	r3, r3, #24
 8002b32:	4413      	add	r3, r2
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	3316      	adds	r3, #22
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	3317      	adds	r3, #23
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	441a      	add	r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	3318      	adds	r3, #24
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	041b      	lsls	r3, r3, #16
 8002b50:	441a      	add	r2, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	3319      	adds	r3, #25
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	061b      	lsls	r3, r3, #24
 8002b5a:	4413      	add	r3, r2
 8002b5c:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	3302      	adds	r3, #2
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	3303      	adds	r3, #3
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	441a      	add	r2, r3
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	3304      	adds	r3, #4
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	041b      	lsls	r3, r3, #16
 8002b78:	441a      	add	r2, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	3305      	adds	r3, #5
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	061b      	lsls	r3, r3, #24
 8002b82:	4413      	add	r3, r2
 8002b84:	61fb      	str	r3, [r7, #28]
  size = size - index;
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b92:	4413      	add	r3, r2
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 8002b96:	4b51      	ldr	r3, [pc, #324]	; (8002cdc <ST7735_DrawBitmap+0x20c>)
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	1ad2      	subs	r2, r2, r3
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fa6a 	bl	8003088 <ST7735_SetDisplayWindow>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc0:	e087      	b.n	8002cd2 <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002bc2:	4b46      	ldr	r3, [pc, #280]	; (8002cdc <ST7735_DrawBitmap+0x20c>)
 8002bc4:	7b1b      	ldrb	r3, [r3, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 8002bca:	4b44      	ldr	r3, [pc, #272]	; (8002cdc <ST7735_DrawBitmap+0x20c>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	4a44      	ldr	r2, [pc, #272]	; (8002ce0 <ST7735_DrawBitmap+0x210>)
 8002bd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bd4:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002bd6:	f043 0308 	orr.w	r3, r3, #8
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	e005      	b.n	8002bea <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 8002bde:	4b3f      	ldr	r3, [pc, #252]	; (8002cdc <ST7735_DrawBitmap+0x20c>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	4a3f      	ldr	r2, [pc, #252]	; (8002ce0 <ST7735_DrawBitmap+0x210>)
 8002be4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f103 0020 	add.w	r0, r3, #32
 8002bf2:	f107 0213 	add.w	r2, r7, #19
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	2136      	movs	r1, #54	; 0x36
 8002bfa:	f000 fbc3 	bl	8003384 <st7735_write_reg>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
 8002c08:	637b      	str	r3, [r7, #52]	; 0x34
 8002c0a:	e062      	b.n	8002cd2 <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f7ff fea1 	bl	8002958 <ST7735_SetCursor>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 8002c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c20:	637b      	str	r3, [r7, #52]	; 0x34
 8002c22:	e056      	b.n	8002cd2 <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c26:	785b      	ldrb	r3, [r3, #1]
 8002c28:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	3320      	adds	r3, #32
 8002c34:	f107 0114 	add.w	r1, r7, #20
 8002c38:	2202      	movs	r2, #2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fbb7 	bl	80033ae <st7735_send_data>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 8002c46:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8002c4c:	e009      	b.n	8002c62 <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	3302      	adds	r3, #2
 8002c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        pbmp += 2;
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	3302      	adds	r3, #2
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30
      }while(counter < size);
 8002c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d3e0      	bcc.n	8002c24 <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002c62:	4b1e      	ldr	r3, [pc, #120]	; (8002cdc <ST7735_DrawBitmap+0x20c>)
 8002c64:	7b1b      	ldrb	r3, [r3, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <ST7735_DrawBitmap+0x20c>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <ST7735_DrawBitmap+0x210>)
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002c78:	f043 0308 	orr.w	r3, r3, #8
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	e006      	b.n	8002c8e <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8002c80:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <ST7735_DrawBitmap+0x20c>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	4a16      	ldr	r2, [pc, #88]	; (8002ce0 <ST7735_DrawBitmap+0x210>)
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f103 0020 	add.w	r0, r3, #32
 8002c96:	f107 0213 	add.w	r2, r7, #19
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	2136      	movs	r1, #54	; 0x36
 8002c9e:	f000 fb71 	bl	8003384 <st7735_write_reg>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cac:	637b      	str	r3, [r7, #52]	; 0x34
 8002cae:	e010      	b.n	8002cd2 <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <ST7735_DrawBitmap+0x20c>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <ST7735_DrawBitmap+0x20c>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f9e1 	bl	8003088 <ST7735_SetDisplayWindow>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd0:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
  }

  return ret;
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3738      	adds	r7, #56	; 0x38
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	240004e8 	.word	0x240004e8
 8002ce0:	24000078 	.word	0x24000078

08002ce4 <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfe:	441a      	add	r2, r3
 8002d00:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <ST7735_FillRGBRect+0xcc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d806      	bhi.n	8002d16 <ST7735_FillRGBRect+0x32>
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	441a      	add	r2, r3
 8002d0e:	4b28      	ldr	r3, [pc, #160]	; (8002db0 <ST7735_FillRGBRect+0xcc>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d903      	bls.n	8002d1e <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	e042      	b.n	8002da4 <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	e03b      	b.n	8002d9c <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f7ff fe12 	bl	8002958 <ST7735_SetCursor>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 8002d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	e029      	b.n	8002d96 <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	e013      	b.n	8002d70 <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	7811      	ldrb	r1, [r2, #0]
 8002d50:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <ST7735_FillRGBRect+0xd0>)
 8002d52:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	7811      	ldrb	r1, [r2, #0]
 8002d60:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <ST7735_FillRGBRect+0xd0>)
 8002d62:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	3302      	adds	r3, #2
 8002d68:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d3e7      	bcc.n	8002d48 <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f103 0020 	add.w	r0, r3, #32
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	461a      	mov	r2, r3
 8002d84:	490b      	ldr	r1, [pc, #44]	; (8002db4 <ST7735_FillRGBRect+0xd0>)
 8002d86:	f000 fb12 	bl	80033ae <st7735_send_data>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 8002d90:	f04f 33ff 	mov.w	r3, #4294967295
 8002d94:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d3bf      	bcc.n	8002d24 <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 8002da4:	69fb      	ldr	r3, [r7, #28]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	240004e8 	.word	0x240004e8
 8002db4:	240004f8 	.word	0x240004f8

08002db8 <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	441a      	add	r2, r3
 8002dd0:	4b1f      	ldr	r3, [pc, #124]	; (8002e50 <ST7735_DrawHLine+0x98>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d903      	bls.n	8002de0 <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 8002dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	e032      	b.n	8002e46 <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f7ff fdb7 	bl	8002958 <ST7735_SetCursor>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 8002df0:	f04f 33ff 	mov.w	r3, #4294967295
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	e026      	b.n	8002e46 <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	e010      	b.n	8002e20 <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	0a1a      	lsrs	r2, r3, #8
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	b2d1      	uxtb	r1, r2
 8002e08:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <ST7735_DrawHLine+0x9c>)
 8002e0a:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	3301      	adds	r3, #1
 8002e12:	6a3a      	ldr	r2, [r7, #32]
 8002e14:	b2d1      	uxtb	r1, r2
 8002e16:	4a0f      	ldr	r2, [pc, #60]	; (8002e54 <ST7735_DrawHLine+0x9c>)
 8002e18:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d3ea      	bcc.n	8002dfe <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f103 0020 	add.w	r0, r3, #32
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	461a      	mov	r2, r3
 8002e34:	4907      	ldr	r1, [pc, #28]	; (8002e54 <ST7735_DrawHLine+0x9c>)
 8002e36:	f000 faba 	bl	80033ae <st7735_send_data>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 8002e40:	f04f 33ff 	mov.w	r3, #4294967295
 8002e44:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002e46:	697b      	ldr	r3, [r7, #20]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	240004e8 	.word	0x240004e8
 8002e54:	24000778 	.word	0x24000778

08002e58 <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	441a      	add	r2, r3
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <ST7735_DrawVLine+0x64>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d903      	bls.n	8002e80 <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 8002e78:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	e018      	b.n	8002eb2 <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	e011      	b.n	8002eaa <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	441a      	add	r2, r3
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f841 	bl	8002f18 <ST7735_SetPixel>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 8002e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea0:	617b      	str	r3, [r7, #20]
        break;
 8002ea2:	e006      	b.n	8002eb2 <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d3e9      	bcc.n	8002e86 <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 8002eb2:	697b      	ldr	r3, [r7, #20]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	240004e8 	.word	0x240004e8

08002ec0 <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	e014      	b.n	8002f06 <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff ff66 	bl	8002db8 <ST7735_DrawHLine>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 8002ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef6:	61fb      	str	r3, [r7, #28]
      break;
 8002ef8:	e009      	b.n	8002f0e <ST7735_FillRect+0x4e>
    }
    y_pos++;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3301      	adds	r3, #1
 8002efe:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	3301      	adds	r3, #1
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d3e6      	bcc.n	8002edc <ST7735_FillRect+0x1c>
  }

  return ret;
 8002f0e:	69fb      	ldr	r3, [r7, #28]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	0a1b      	lsrs	r3, r3, #8
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	8a7b      	ldrh	r3, [r7, #18]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8002f42:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <ST7735_SetPixel+0x84>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d204      	bcs.n	8002f56 <ST7735_SetPixel+0x3e>
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <ST7735_SetPixel+0x84>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d303      	bcc.n	8002f5e <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	e019      	b.n	8002f92 <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f7ff fcf8 	bl	8002958 <ST7735_SetCursor>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 8002f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	e00d      	b.n	8002f92 <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3320      	adds	r3, #32
 8002f7a:	f107 0112 	add.w	r1, r7, #18
 8002f7e:	2202      	movs	r2, #2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fa14 	bl	80033ae <st7735_send_data>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 8002f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f90:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002f92:	697b      	ldr	r3, [r7, #20]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	240004e8 	.word	0x240004e8

08002fa0 <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f7ff fcd0 	bl	8002958 <ST7735_SetCursor>
 8002fb8:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3320      	adds	r3, #32
 8002fbe:	f107 0211 	add.w	r2, r7, #17
 8002fc2:	212e      	movs	r1, #46	; 0x2e
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 f9ca 	bl	800335e <st7735_read_reg>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	4413      	add	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3320      	adds	r3, #32
 8002fd6:	f107 0111 	add.w	r1, r7, #17
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 f9f8 	bl	80033d2 <st7735_recv_data>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	3320      	adds	r3, #32
 8002fee:	f107 0113 	add.w	r1, r7, #19
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 f9ec 	bl	80033d2 <st7735_recv_data>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	4413      	add	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3320      	adds	r3, #32
 8003006:	f107 0112 	add.w	r1, r7, #18
 800300a:	2201      	movs	r2, #1
 800300c:	4618      	mov	r0, r3
 800300e:	f000 f9e0 	bl	80033d2 <st7735_recv_data>
 8003012:	4602      	mov	r2, r0
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	4413      	add	r3, r2
 8003018:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 800301a:	7cfb      	ldrb	r3, [r7, #19]
 800301c:	461a      	mov	r2, r3
 800301e:	7cbb      	ldrb	r3, [r7, #18]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	441a      	add	r2, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 800302e:	f04f 33ff 	mov.w	r3, #4294967295
 8003032:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003034:	697b      	ldr	r3, [r7, #20]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <ST7735_GetXSize+0x20>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	240004e8 	.word	0x240004e8

08003064 <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <ST7735_GetYSize+0x20>)
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	240004e8 	.word	0x240004e8

08003088 <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8003096:	4b7d      	ldr	r3, [pc, #500]	; (800328c <ST7735_SetDisplayWindow+0x204>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d821      	bhi.n	80030e2 <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 800309e:	4b7b      	ldr	r3, [pc, #492]	; (800328c <ST7735_SetDisplayWindow+0x204>)
 80030a0:	7b5b      	ldrb	r3, [r3, #13]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d10e      	bne.n	80030c4 <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 80030a6:	4b79      	ldr	r3, [pc, #484]	; (800328c <ST7735_SetDisplayWindow+0x204>)
 80030a8:	7b1b      	ldrb	r3, [r3, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	331a      	adds	r3, #26
 80030b2:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3301      	adds	r3, #1
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	e036      	b.n	800312a <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	3318      	adds	r3, #24
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	e032      	b.n	800312a <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80030c4:	4b71      	ldr	r3, [pc, #452]	; (800328c <ST7735_SetDisplayWindow+0x204>)
 80030c6:	7b5b      	ldrb	r3, [r3, #13]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d12e      	bne.n	800312a <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80030cc:	4b6f      	ldr	r3, [pc, #444]	; (800328c <ST7735_SetDisplayWindow+0x204>)
 80030ce:	7b1b      	ldrb	r3, [r3, #12]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d12a      	bne.n	800312a <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	3302      	adds	r3, #2
 80030d8:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3301      	adds	r3, #1
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	e023      	b.n	800312a <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 80030e2:	4b6a      	ldr	r3, [pc, #424]	; (800328c <ST7735_SetDisplayWindow+0x204>)
 80030e4:	7b5b      	ldrb	r3, [r3, #13]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d111      	bne.n	800310e <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80030ea:	4b68      	ldr	r3, [pc, #416]	; (800328c <ST7735_SetDisplayWindow+0x204>)
 80030ec:	7b1b      	ldrb	r3, [r3, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	3301      	adds	r3, #1
 80030f6:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	331a      	adds	r3, #26
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	e014      	b.n	800312a <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	3301      	adds	r3, #1
 8003104:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3318      	adds	r3, #24
 800310a:	607b      	str	r3, [r7, #4]
 800310c:	e00d      	b.n	800312a <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800310e:	4b5f      	ldr	r3, [pc, #380]	; (800328c <ST7735_SetDisplayWindow+0x204>)
 8003110:	7b5b      	ldrb	r3, [r3, #13]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d109      	bne.n	800312a <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8003116:	4b5d      	ldr	r3, [pc, #372]	; (800328c <ST7735_SetDisplayWindow+0x204>)
 8003118:	7b1b      	ldrb	r3, [r3, #12]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	3301      	adds	r3, #1
 8003122:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3302      	adds	r3, #2
 8003128:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f103 0020 	add.w	r0, r3, #32
 8003130:	f107 0213 	add.w	r2, r7, #19
 8003134:	2300      	movs	r3, #0
 8003136:	212a      	movs	r1, #42	; 0x2a
 8003138:	f000 f924 	bl	8003384 <st7735_write_reg>
 800313c:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	0a1b      	lsrs	r3, r3, #8
 8003142:	b2db      	uxtb	r3, r3
 8003144:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	3320      	adds	r3, #32
 800314a:	f107 0113 	add.w	r1, r7, #19
 800314e:	2201      	movs	r2, #1
 8003150:	4618      	mov	r0, r3
 8003152:	f000 f92c 	bl	80033ae <st7735_send_data>
 8003156:	4602      	mov	r2, r0
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	4413      	add	r3, r2
 800315c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3320      	adds	r3, #32
 8003168:	f107 0113 	add.w	r1, r7, #19
 800316c:	2201      	movs	r2, #1
 800316e:	4618      	mov	r0, r3
 8003170:	f000 f91d 	bl	80033ae <st7735_send_data>
 8003174:	4602      	mov	r2, r0
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	4413      	add	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	4413      	add	r3, r2
 8003182:	3b01      	subs	r3, #1
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	b2db      	uxtb	r3, r3
 8003188:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	3320      	adds	r3, #32
 800318e:	f107 0113 	add.w	r1, r7, #19
 8003192:	2201      	movs	r2, #1
 8003194:	4618      	mov	r0, r3
 8003196:	f000 f90a 	bl	80033ae <st7735_send_data>
 800319a:	4602      	mov	r2, r0
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	4413      	add	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3320      	adds	r3, #32
 80031b8:	f107 0113 	add.w	r1, r7, #19
 80031bc:	2201      	movs	r2, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 f8f5 	bl	80033ae <st7735_send_data>
 80031c4:	4602      	mov	r2, r0
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	4413      	add	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f103 0020 	add.w	r0, r3, #32
 80031d2:	f107 0213 	add.w	r2, r7, #19
 80031d6:	2300      	movs	r3, #0
 80031d8:	212b      	movs	r1, #43	; 0x2b
 80031da:	f000 f8d3 	bl	8003384 <st7735_write_reg>
 80031de:	4602      	mov	r2, r0
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	4413      	add	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	0a1b      	lsrs	r3, r3, #8
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3320      	adds	r3, #32
 80031f2:	f107 0113 	add.w	r1, r7, #19
 80031f6:	2201      	movs	r2, #1
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 f8d8 	bl	80033ae <st7735_send_data>
 80031fe:	4602      	mov	r2, r0
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	4413      	add	r3, r2
 8003204:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3320      	adds	r3, #32
 8003210:	f107 0113 	add.w	r1, r7, #19
 8003214:	2201      	movs	r2, #1
 8003216:	4618      	mov	r0, r3
 8003218:	f000 f8c9 	bl	80033ae <st7735_send_data>
 800321c:	4602      	mov	r2, r0
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	4413      	add	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	4413      	add	r3, r2
 800322a:	3b01      	subs	r3, #1
 800322c:	0a1b      	lsrs	r3, r3, #8
 800322e:	b2db      	uxtb	r3, r3
 8003230:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3320      	adds	r3, #32
 8003236:	f107 0113 	add.w	r1, r7, #19
 800323a:	2201      	movs	r2, #1
 800323c:	4618      	mov	r0, r3
 800323e:	f000 f8b6 	bl	80033ae <st7735_send_data>
 8003242:	4602      	mov	r2, r0
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	4413      	add	r3, r2
 8003248:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	4413      	add	r3, r2
 8003254:	b2db      	uxtb	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b2db      	uxtb	r3, r3
 800325a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3320      	adds	r3, #32
 8003260:	f107 0113 	add.w	r1, r7, #19
 8003264:	2201      	movs	r2, #1
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f8a1 	bl	80033ae <st7735_send_data>
 800326c:	4602      	mov	r2, r0
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	4413      	add	r3, r2
 8003272:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 800327a:	f04f 33ff 	mov.w	r3, #4294967295
 800327e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003280:	697b      	ldr	r3, [r7, #20]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	240004e8 	.word	0x240004e8

08003290 <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	460b      	mov	r3, r1
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	7afa      	ldrb	r2, [r7, #11]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4610      	mov	r0, r2
 80032ac:	4798      	blx	r3
 80032ae:	4603      	mov	r3, r0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	460b      	mov	r3, r1
 80032c6:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	7af8      	ldrb	r0, [r7, #11]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4798      	blx	r3
 80032d8:	4603      	mov	r3, r0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b086      	sub	sp, #24
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	68b8      	ldr	r0, [r7, #8]
 80032fa:	4798      	blx	r3
 80032fc:	4603      	mov	r3, r0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b086      	sub	sp, #24
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	68b8      	ldr	r0, [r7, #8]
 800331e:	4798      	blx	r3
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	4798      	blx	r3
 800333a:	4603      	mov	r3, r0
 800333c:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800333e:	bf00      	nop
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	4798      	blx	r3
 8003346:	4603      	mov	r3, r0
 8003348:	461a      	mov	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d8f5      	bhi.n	8003340 <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	460b      	mov	r3, r1
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	6910      	ldr	r0, [r2, #16]
 8003374:	7af9      	ldrb	r1, [r7, #11]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	4798      	blx	r3
 800337a:	4603      	mov	r3, r0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 8003384:	b590      	push	{r4, r7, lr}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	460b      	mov	r3, r1
 8003392:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681c      	ldr	r4, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6918      	ldr	r0, [r3, #16]
 800339c:	7af9      	ldrb	r1, [r7, #11]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	47a0      	blx	r4
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd90      	pop	{r4, r7, pc}

080033ae <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	6910      	ldr	r0, [r2, #16]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	4798      	blx	r3
 80033c8:	4603      	mov	r3, r0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	6910      	ldr	r0, [r2, #16]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	4798      	blx	r3
 80033ec:	4603      	mov	r3, r0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033fe:	2003      	movs	r0, #3
 8003400:	f000 f99a 	bl	8003738 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003404:	f003 fcf6 	bl	8006df4 <HAL_RCC_GetSysClockFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b15      	ldr	r3, [pc, #84]	; (8003460 <HAL_Init+0x68>)
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	0a1b      	lsrs	r3, r3, #8
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	4913      	ldr	r1, [pc, #76]	; (8003464 <HAL_Init+0x6c>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
 8003420:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003422:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <HAL_Init+0x68>)
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	4a0e      	ldr	r2, [pc, #56]	; (8003464 <HAL_Init+0x6c>)
 800342c:	5cd3      	ldrb	r3, [r2, r3]
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
 8003438:	4a0b      	ldr	r2, [pc, #44]	; (8003468 <HAL_Init+0x70>)
 800343a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800343c:	4a0b      	ldr	r2, [pc, #44]	; (800346c <HAL_Init+0x74>)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003442:	200f      	movs	r0, #15
 8003444:	f000 f814 	bl	8003470 <HAL_InitTick>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e002      	b.n	8003458 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003452:	f7fd fc83 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	58024400 	.word	0x58024400
 8003464:	0800c12c 	.word	0x0800c12c
 8003468:	24000004 	.word	0x24000004
 800346c:	24000000 	.word	0x24000000

08003470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003478:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <HAL_InitTick+0x60>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e021      	b.n	80034c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <HAL_InitTick+0x64>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_InitTick+0x60>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	4619      	mov	r1, r3
 800348e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003492:	fbb3 f3f1 	udiv	r3, r3, r1
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f97f 	bl	800379e <HAL_SYSTICK_Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e00e      	b.n	80034c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b0f      	cmp	r3, #15
 80034ae:	d80a      	bhi.n	80034c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034b0:	2200      	movs	r2, #0
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	f04f 30ff 	mov.w	r0, #4294967295
 80034b8:	f000 f949 	bl	800374e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034bc:	4a06      	ldr	r2, [pc, #24]	; (80034d8 <HAL_InitTick+0x68>)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e000      	b.n	80034c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	2400009c 	.word	0x2400009c
 80034d4:	24000000 	.word	0x24000000
 80034d8:	24000098 	.word	0x24000098

080034dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_IncTick+0x20>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_IncTick+0x24>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4413      	add	r3, r2
 80034ec:	4a04      	ldr	r2, [pc, #16]	; (8003500 <HAL_IncTick+0x24>)
 80034ee:	6013      	str	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	2400009c 	.word	0x2400009c
 8003500:	240009f8 	.word	0x240009f8

08003504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return uwTick;
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_GetTick+0x14>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	240009f8 	.word	0x240009f8

0800351c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003524:	f7ff ffee 	bl	8003504 <HAL_GetTick>
 8003528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d005      	beq.n	8003542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <HAL_Delay+0x44>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4413      	add	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003542:	bf00      	nop
 8003544:	f7ff ffde 	bl	8003504 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	429a      	cmp	r2, r3
 8003552:	d8f7      	bhi.n	8003544 <HAL_Delay+0x28>
  {
  }
}
 8003554:	bf00      	nop
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	2400009c 	.word	0x2400009c

08003564 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003568:	4b03      	ldr	r3, [pc, #12]	; (8003578 <HAL_GetREVID+0x14>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	0c1b      	lsrs	r3, r3, #16
}
 800356e:	4618      	mov	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	5c001000 	.word	0x5c001000

0800357c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <HAL_GetDEVID+0x18>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	5c001000 	.word	0x5c001000

08003598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <__NVIC_SetPriorityGrouping+0x40>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035b4:	4013      	ands	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <__NVIC_SetPriorityGrouping+0x44>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035c6:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <__NVIC_SetPriorityGrouping+0x40>)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	60d3      	str	r3, [r2, #12]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000ed00 	.word	0xe000ed00
 80035dc:	05fa0000 	.word	0x05fa0000

080035e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <__NVIC_GetPriorityGrouping+0x18>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	f003 0307 	and.w	r3, r3, #7
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800360a:	2b00      	cmp	r3, #0
 800360c:	db0b      	blt.n	8003626 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	f003 021f 	and.w	r2, r3, #31
 8003614:	4907      	ldr	r1, [pc, #28]	; (8003634 <__NVIC_EnableIRQ+0x38>)
 8003616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	2001      	movs	r0, #1
 800361e:	fa00 f202 	lsl.w	r2, r0, r2
 8003622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	e000e100 	.word	0xe000e100

08003638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	6039      	str	r1, [r7, #0]
 8003642:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003648:	2b00      	cmp	r3, #0
 800364a:	db0a      	blt.n	8003662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	b2da      	uxtb	r2, r3
 8003650:	490c      	ldr	r1, [pc, #48]	; (8003684 <__NVIC_SetPriority+0x4c>)
 8003652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003656:	0112      	lsls	r2, r2, #4
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	440b      	add	r3, r1
 800365c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003660:	e00a      	b.n	8003678 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	4908      	ldr	r1, [pc, #32]	; (8003688 <__NVIC_SetPriority+0x50>)
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	3b04      	subs	r3, #4
 8003670:	0112      	lsls	r2, r2, #4
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	440b      	add	r3, r1
 8003676:	761a      	strb	r2, [r3, #24]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	e000e100 	.word	0xe000e100
 8003688:	e000ed00 	.word	0xe000ed00

0800368c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800368c:	b480      	push	{r7}
 800368e:	b089      	sub	sp, #36	; 0x24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f1c3 0307 	rsb	r3, r3, #7
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	bf28      	it	cs
 80036aa:	2304      	movcs	r3, #4
 80036ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3304      	adds	r3, #4
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d902      	bls.n	80036bc <NVIC_EncodePriority+0x30>
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3b03      	subs	r3, #3
 80036ba:	e000      	b.n	80036be <NVIC_EncodePriority+0x32>
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c0:	f04f 32ff 	mov.w	r2, #4294967295
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43da      	mvns	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	401a      	ands	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036d4:	f04f 31ff 	mov.w	r1, #4294967295
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	fa01 f303 	lsl.w	r3, r1, r3
 80036de:	43d9      	mvns	r1, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e4:	4313      	orrs	r3, r2
         );
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3724      	adds	r7, #36	; 0x24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3b01      	subs	r3, #1
 8003700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003704:	d301      	bcc.n	800370a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003706:	2301      	movs	r3, #1
 8003708:	e00f      	b.n	800372a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800370a:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <SysTick_Config+0x40>)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3b01      	subs	r3, #1
 8003710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003712:	210f      	movs	r1, #15
 8003714:	f04f 30ff 	mov.w	r0, #4294967295
 8003718:	f7ff ff8e 	bl	8003638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <SysTick_Config+0x40>)
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003722:	4b04      	ldr	r3, [pc, #16]	; (8003734 <SysTick_Config+0x40>)
 8003724:	2207      	movs	r2, #7
 8003726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	e000e010 	.word	0xe000e010

08003738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff29 	bl	8003598 <__NVIC_SetPriorityGrouping>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	4603      	mov	r3, r0
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800375c:	f7ff ff40 	bl	80035e0 <__NVIC_GetPriorityGrouping>
 8003760:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	6978      	ldr	r0, [r7, #20]
 8003768:	f7ff ff90 	bl	800368c <NVIC_EncodePriority>
 800376c:	4602      	mov	r2, r0
 800376e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff5f 	bl	8003638 <__NVIC_SetPriority>
}
 800377a:	bf00      	nop
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800378c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ff33 	bl	80035fc <__NVIC_EnableIRQ>
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff ffa4 	bl	80036f4 <SysTick_Config>
 80037ac:	4603      	mov	r3, r0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80037c0:	f7ff fea0 	bl	8003504 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e316      	b.n	8003dfe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a66      	ldr	r2, [pc, #408]	; (8003970 <HAL_DMA_Init+0x1b8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d04a      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a65      	ldr	r2, [pc, #404]	; (8003974 <HAL_DMA_Init+0x1bc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d045      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a63      	ldr	r2, [pc, #396]	; (8003978 <HAL_DMA_Init+0x1c0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d040      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a62      	ldr	r2, [pc, #392]	; (800397c <HAL_DMA_Init+0x1c4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d03b      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a60      	ldr	r2, [pc, #384]	; (8003980 <HAL_DMA_Init+0x1c8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d036      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a5f      	ldr	r2, [pc, #380]	; (8003984 <HAL_DMA_Init+0x1cc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d031      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a5d      	ldr	r2, [pc, #372]	; (8003988 <HAL_DMA_Init+0x1d0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d02c      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a5c      	ldr	r2, [pc, #368]	; (800398c <HAL_DMA_Init+0x1d4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d027      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a5a      	ldr	r2, [pc, #360]	; (8003990 <HAL_DMA_Init+0x1d8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d022      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a59      	ldr	r2, [pc, #356]	; (8003994 <HAL_DMA_Init+0x1dc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d01d      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a57      	ldr	r2, [pc, #348]	; (8003998 <HAL_DMA_Init+0x1e0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d018      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a56      	ldr	r2, [pc, #344]	; (800399c <HAL_DMA_Init+0x1e4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d013      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a54      	ldr	r2, [pc, #336]	; (80039a0 <HAL_DMA_Init+0x1e8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00e      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a53      	ldr	r2, [pc, #332]	; (80039a4 <HAL_DMA_Init+0x1ec>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d009      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a51      	ldr	r2, [pc, #324]	; (80039a8 <HAL_DMA_Init+0x1f0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d004      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a50      	ldr	r2, [pc, #320]	; (80039ac <HAL_DMA_Init+0x1f4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d101      	bne.n	8003874 <HAL_DMA_Init+0xbc>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <HAL_DMA_Init+0xbe>
 8003874:	2300      	movs	r3, #0
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 813b 	beq.w	8003af2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a37      	ldr	r2, [pc, #220]	; (8003970 <HAL_DMA_Init+0x1b8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d04a      	beq.n	800392c <HAL_DMA_Init+0x174>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a36      	ldr	r2, [pc, #216]	; (8003974 <HAL_DMA_Init+0x1bc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d045      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a34      	ldr	r2, [pc, #208]	; (8003978 <HAL_DMA_Init+0x1c0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d040      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a33      	ldr	r2, [pc, #204]	; (800397c <HAL_DMA_Init+0x1c4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d03b      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a31      	ldr	r2, [pc, #196]	; (8003980 <HAL_DMA_Init+0x1c8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d036      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a30      	ldr	r2, [pc, #192]	; (8003984 <HAL_DMA_Init+0x1cc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d031      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a2e      	ldr	r2, [pc, #184]	; (8003988 <HAL_DMA_Init+0x1d0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d02c      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a2d      	ldr	r2, [pc, #180]	; (800398c <HAL_DMA_Init+0x1d4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d027      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a2b      	ldr	r2, [pc, #172]	; (8003990 <HAL_DMA_Init+0x1d8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d022      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <HAL_DMA_Init+0x1dc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d01d      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a28      	ldr	r2, [pc, #160]	; (8003998 <HAL_DMA_Init+0x1e0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d018      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a27      	ldr	r2, [pc, #156]	; (800399c <HAL_DMA_Init+0x1e4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d013      	beq.n	800392c <HAL_DMA_Init+0x174>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a25      	ldr	r2, [pc, #148]	; (80039a0 <HAL_DMA_Init+0x1e8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00e      	beq.n	800392c <HAL_DMA_Init+0x174>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a24      	ldr	r2, [pc, #144]	; (80039a4 <HAL_DMA_Init+0x1ec>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d009      	beq.n	800392c <HAL_DMA_Init+0x174>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <HAL_DMA_Init+0x1f0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <HAL_DMA_Init+0x174>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a21      	ldr	r2, [pc, #132]	; (80039ac <HAL_DMA_Init+0x1f4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d108      	bne.n	800393e <HAL_DMA_Init+0x186>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e007      	b.n	800394e <HAL_DMA_Init+0x196>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0201 	bic.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800394e:	e02f      	b.n	80039b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003950:	f7ff fdd8 	bl	8003504 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b05      	cmp	r3, #5
 800395c:	d928      	bls.n	80039b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2220      	movs	r2, #32
 8003962:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2203      	movs	r2, #3
 8003968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e246      	b.n	8003dfe <HAL_DMA_Init+0x646>
 8003970:	40020010 	.word	0x40020010
 8003974:	40020028 	.word	0x40020028
 8003978:	40020040 	.word	0x40020040
 800397c:	40020058 	.word	0x40020058
 8003980:	40020070 	.word	0x40020070
 8003984:	40020088 	.word	0x40020088
 8003988:	400200a0 	.word	0x400200a0
 800398c:	400200b8 	.word	0x400200b8
 8003990:	40020410 	.word	0x40020410
 8003994:	40020428 	.word	0x40020428
 8003998:	40020440 	.word	0x40020440
 800399c:	40020458 	.word	0x40020458
 80039a0:	40020470 	.word	0x40020470
 80039a4:	40020488 	.word	0x40020488
 80039a8:	400204a0 	.word	0x400204a0
 80039ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1c8      	bne.n	8003950 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4b83      	ldr	r3, [pc, #524]	; (8003bd8 <HAL_DMA_Init+0x420>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80039d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d107      	bne.n	8003a14 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003a14:	4b71      	ldr	r3, [pc, #452]	; (8003bdc <HAL_DMA_Init+0x424>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b71      	ldr	r3, [pc, #452]	; (8003be0 <HAL_DMA_Init+0x428>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a20:	d328      	bcc.n	8003a74 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b28      	cmp	r3, #40	; 0x28
 8003a28:	d903      	bls.n	8003a32 <HAL_DMA_Init+0x27a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8003a30:	d917      	bls.n	8003a62 <HAL_DMA_Init+0x2aa>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b3e      	cmp	r3, #62	; 0x3e
 8003a38:	d903      	bls.n	8003a42 <HAL_DMA_Init+0x28a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b42      	cmp	r3, #66	; 0x42
 8003a40:	d90f      	bls.n	8003a62 <HAL_DMA_Init+0x2aa>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b46      	cmp	r3, #70	; 0x46
 8003a48:	d903      	bls.n	8003a52 <HAL_DMA_Init+0x29a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b48      	cmp	r3, #72	; 0x48
 8003a50:	d907      	bls.n	8003a62 <HAL_DMA_Init+0x2aa>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b4e      	cmp	r3, #78	; 0x4e
 8003a58:	d905      	bls.n	8003a66 <HAL_DMA_Init+0x2ae>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b52      	cmp	r3, #82	; 0x52
 8003a60:	d801      	bhi.n	8003a66 <HAL_DMA_Init+0x2ae>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_DMA_Init+0x2b0>
 8003a66:	2300      	movs	r3, #0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a72:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f023 0307 	bic.w	r3, r3, #7
 8003a8a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d117      	bne.n	8003ace <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00e      	beq.n	8003ace <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f001 fdcf 	bl	8005654 <DMA_CheckFifoParam>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2240      	movs	r2, #64	; 0x40
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e197      	b.n	8003dfe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f001 fd0a 	bl	80054f0 <DMA_CalcBaseAndBitshift>
 8003adc:	4603      	mov	r3, r0
 8003ade:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	223f      	movs	r2, #63	; 0x3f
 8003aea:	409a      	lsls	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	e0cd      	b.n	8003c8e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a3b      	ldr	r2, [pc, #236]	; (8003be4 <HAL_DMA_Init+0x42c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d022      	beq.n	8003b42 <HAL_DMA_Init+0x38a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a39      	ldr	r2, [pc, #228]	; (8003be8 <HAL_DMA_Init+0x430>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01d      	beq.n	8003b42 <HAL_DMA_Init+0x38a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a38      	ldr	r2, [pc, #224]	; (8003bec <HAL_DMA_Init+0x434>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d018      	beq.n	8003b42 <HAL_DMA_Init+0x38a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a36      	ldr	r2, [pc, #216]	; (8003bf0 <HAL_DMA_Init+0x438>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <HAL_DMA_Init+0x38a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a35      	ldr	r2, [pc, #212]	; (8003bf4 <HAL_DMA_Init+0x43c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00e      	beq.n	8003b42 <HAL_DMA_Init+0x38a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a33      	ldr	r2, [pc, #204]	; (8003bf8 <HAL_DMA_Init+0x440>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d009      	beq.n	8003b42 <HAL_DMA_Init+0x38a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a32      	ldr	r2, [pc, #200]	; (8003bfc <HAL_DMA_Init+0x444>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d004      	beq.n	8003b42 <HAL_DMA_Init+0x38a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a30      	ldr	r2, [pc, #192]	; (8003c00 <HAL_DMA_Init+0x448>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <HAL_DMA_Init+0x38e>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <HAL_DMA_Init+0x390>
 8003b46:	2300      	movs	r3, #0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8097 	beq.w	8003c7c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a24      	ldr	r2, [pc, #144]	; (8003be4 <HAL_DMA_Init+0x42c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d021      	beq.n	8003b9c <HAL_DMA_Init+0x3e4>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a22      	ldr	r2, [pc, #136]	; (8003be8 <HAL_DMA_Init+0x430>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01c      	beq.n	8003b9c <HAL_DMA_Init+0x3e4>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a21      	ldr	r2, [pc, #132]	; (8003bec <HAL_DMA_Init+0x434>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d017      	beq.n	8003b9c <HAL_DMA_Init+0x3e4>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1f      	ldr	r2, [pc, #124]	; (8003bf0 <HAL_DMA_Init+0x438>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d012      	beq.n	8003b9c <HAL_DMA_Init+0x3e4>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1e      	ldr	r2, [pc, #120]	; (8003bf4 <HAL_DMA_Init+0x43c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00d      	beq.n	8003b9c <HAL_DMA_Init+0x3e4>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <HAL_DMA_Init+0x440>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d008      	beq.n	8003b9c <HAL_DMA_Init+0x3e4>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1b      	ldr	r2, [pc, #108]	; (8003bfc <HAL_DMA_Init+0x444>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <HAL_DMA_Init+0x3e4>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a19      	ldr	r2, [pc, #100]	; (8003c00 <HAL_DMA_Init+0x448>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <HAL_DMA_Init+0x44c>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	d020      	beq.n	8003c08 <HAL_DMA_Init+0x450>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b80      	cmp	r3, #128	; 0x80
 8003bcc:	d102      	bne.n	8003bd4 <HAL_DMA_Init+0x41c>
 8003bce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bd2:	e01a      	b.n	8003c0a <HAL_DMA_Init+0x452>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e018      	b.n	8003c0a <HAL_DMA_Init+0x452>
 8003bd8:	fe10803f 	.word	0xfe10803f
 8003bdc:	5c001000 	.word	0x5c001000
 8003be0:	ffff0000 	.word	0xffff0000
 8003be4:	58025408 	.word	0x58025408
 8003be8:	5802541c 	.word	0x5802541c
 8003bec:	58025430 	.word	0x58025430
 8003bf0:	58025444 	.word	0x58025444
 8003bf4:	58025458 	.word	0x58025458
 8003bf8:	5802546c 	.word	0x5802546c
 8003bfc:	58025480 	.word	0x58025480
 8003c00:	58025494 	.word	0x58025494
 8003c04:	fffe000f 	.word	0xfffe000f
 8003c08:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68d2      	ldr	r2, [r2, #12]
 8003c0e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c38:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4b6e      	ldr	r3, [pc, #440]	; (8003e08 <HAL_DMA_Init+0x650>)
 8003c50:	4413      	add	r3, r2
 8003c52:	4a6e      	ldr	r2, [pc, #440]	; (8003e0c <HAL_DMA_Init+0x654>)
 8003c54:	fba2 2303 	umull	r2, r3, r2, r3
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	009a      	lsls	r2, r3, #2
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f001 fc45 	bl	80054f0 <DMA_CalcBaseAndBitshift>
 8003c66:	4603      	mov	r3, r0
 8003c68:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	2201      	movs	r2, #1
 8003c74:	409a      	lsls	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	e008      	b.n	8003c8e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2240      	movs	r2, #64	; 0x40
 8003c80:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2203      	movs	r2, #3
 8003c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e0b7      	b.n	8003dfe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a5f      	ldr	r2, [pc, #380]	; (8003e10 <HAL_DMA_Init+0x658>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d072      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a5d      	ldr	r2, [pc, #372]	; (8003e14 <HAL_DMA_Init+0x65c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d06d      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a5c      	ldr	r2, [pc, #368]	; (8003e18 <HAL_DMA_Init+0x660>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d068      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a5a      	ldr	r2, [pc, #360]	; (8003e1c <HAL_DMA_Init+0x664>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d063      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a59      	ldr	r2, [pc, #356]	; (8003e20 <HAL_DMA_Init+0x668>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d05e      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a57      	ldr	r2, [pc, #348]	; (8003e24 <HAL_DMA_Init+0x66c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d059      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a56      	ldr	r2, [pc, #344]	; (8003e28 <HAL_DMA_Init+0x670>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d054      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a54      	ldr	r2, [pc, #336]	; (8003e2c <HAL_DMA_Init+0x674>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d04f      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a53      	ldr	r2, [pc, #332]	; (8003e30 <HAL_DMA_Init+0x678>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d04a      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a51      	ldr	r2, [pc, #324]	; (8003e34 <HAL_DMA_Init+0x67c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d045      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a50      	ldr	r2, [pc, #320]	; (8003e38 <HAL_DMA_Init+0x680>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d040      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a4e      	ldr	r2, [pc, #312]	; (8003e3c <HAL_DMA_Init+0x684>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d03b      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a4d      	ldr	r2, [pc, #308]	; (8003e40 <HAL_DMA_Init+0x688>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d036      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a4b      	ldr	r2, [pc, #300]	; (8003e44 <HAL_DMA_Init+0x68c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d031      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a4a      	ldr	r2, [pc, #296]	; (8003e48 <HAL_DMA_Init+0x690>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d02c      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a48      	ldr	r2, [pc, #288]	; (8003e4c <HAL_DMA_Init+0x694>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d027      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a47      	ldr	r2, [pc, #284]	; (8003e50 <HAL_DMA_Init+0x698>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d022      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a45      	ldr	r2, [pc, #276]	; (8003e54 <HAL_DMA_Init+0x69c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01d      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a44      	ldr	r2, [pc, #272]	; (8003e58 <HAL_DMA_Init+0x6a0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d018      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a42      	ldr	r2, [pc, #264]	; (8003e5c <HAL_DMA_Init+0x6a4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a41      	ldr	r2, [pc, #260]	; (8003e60 <HAL_DMA_Init+0x6a8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00e      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a3f      	ldr	r2, [pc, #252]	; (8003e64 <HAL_DMA_Init+0x6ac>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d009      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a3e      	ldr	r2, [pc, #248]	; (8003e68 <HAL_DMA_Init+0x6b0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a3c      	ldr	r2, [pc, #240]	; (8003e6c <HAL_DMA_Init+0x6b4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d101      	bne.n	8003d82 <HAL_DMA_Init+0x5ca>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <HAL_DMA_Init+0x5cc>
 8003d82:	2300      	movs	r3, #0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d032      	beq.n	8003dee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f001 fcdf 	bl	800574c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b80      	cmp	r3, #128	; 0x80
 8003d94:	d102      	bne.n	8003d9c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003db0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d010      	beq.n	8003ddc <HAL_DMA_Init+0x624>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d80c      	bhi.n	8003ddc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f001 fd5c 	bl	8005880 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	e008      	b.n	8003dee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	a7fdabf8 	.word	0xa7fdabf8
 8003e0c:	cccccccd 	.word	0xcccccccd
 8003e10:	40020010 	.word	0x40020010
 8003e14:	40020028 	.word	0x40020028
 8003e18:	40020040 	.word	0x40020040
 8003e1c:	40020058 	.word	0x40020058
 8003e20:	40020070 	.word	0x40020070
 8003e24:	40020088 	.word	0x40020088
 8003e28:	400200a0 	.word	0x400200a0
 8003e2c:	400200b8 	.word	0x400200b8
 8003e30:	40020410 	.word	0x40020410
 8003e34:	40020428 	.word	0x40020428
 8003e38:	40020440 	.word	0x40020440
 8003e3c:	40020458 	.word	0x40020458
 8003e40:	40020470 	.word	0x40020470
 8003e44:	40020488 	.word	0x40020488
 8003e48:	400204a0 	.word	0x400204a0
 8003e4c:	400204b8 	.word	0x400204b8
 8003e50:	58025408 	.word	0x58025408
 8003e54:	5802541c 	.word	0x5802541c
 8003e58:	58025430 	.word	0x58025430
 8003e5c:	58025444 	.word	0x58025444
 8003e60:	58025458 	.word	0x58025458
 8003e64:	5802546c 	.word	0x5802546c
 8003e68:	58025480 	.word	0x58025480
 8003e6c:	58025494 	.word	0x58025494

08003e70 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e226      	b.n	80042da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_DMA_Start_IT+0x2a>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e21f      	b.n	80042da <HAL_DMA_Start_IT+0x46a>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	f040 820a 	bne.w	80042c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a68      	ldr	r2, [pc, #416]	; (8004064 <HAL_DMA_Start_IT+0x1f4>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d04a      	beq.n	8003f5e <HAL_DMA_Start_IT+0xee>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a66      	ldr	r2, [pc, #408]	; (8004068 <HAL_DMA_Start_IT+0x1f8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d045      	beq.n	8003f5e <HAL_DMA_Start_IT+0xee>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a65      	ldr	r2, [pc, #404]	; (800406c <HAL_DMA_Start_IT+0x1fc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d040      	beq.n	8003f5e <HAL_DMA_Start_IT+0xee>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a63      	ldr	r2, [pc, #396]	; (8004070 <HAL_DMA_Start_IT+0x200>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d03b      	beq.n	8003f5e <HAL_DMA_Start_IT+0xee>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a62      	ldr	r2, [pc, #392]	; (8004074 <HAL_DMA_Start_IT+0x204>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d036      	beq.n	8003f5e <HAL_DMA_Start_IT+0xee>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a60      	ldr	r2, [pc, #384]	; (8004078 <HAL_DMA_Start_IT+0x208>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d031      	beq.n	8003f5e <HAL_DMA_Start_IT+0xee>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a5f      	ldr	r2, [pc, #380]	; (800407c <HAL_DMA_Start_IT+0x20c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d02c      	beq.n	8003f5e <HAL_DMA_Start_IT+0xee>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a5d      	ldr	r2, [pc, #372]	; (8004080 <HAL_DMA_Start_IT+0x210>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d027      	beq.n	8003f5e <HAL_DMA_Start_IT+0xee>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a5c      	ldr	r2, [pc, #368]	; (8004084 <HAL_DMA_Start_IT+0x214>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d022      	beq.n	8003f5e <HAL_DMA_Start_IT+0xee>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a5a      	ldr	r2, [pc, #360]	; (8004088 <HAL_DMA_Start_IT+0x218>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d01d      	beq.n	8003f5e <HAL_DMA_Start_IT+0xee>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a59      	ldr	r2, [pc, #356]	; (800408c <HAL_DMA_Start_IT+0x21c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d018      	beq.n	8003f5e <HAL_DMA_Start_IT+0xee>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a57      	ldr	r2, [pc, #348]	; (8004090 <HAL_DMA_Start_IT+0x220>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <HAL_DMA_Start_IT+0xee>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a56      	ldr	r2, [pc, #344]	; (8004094 <HAL_DMA_Start_IT+0x224>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00e      	beq.n	8003f5e <HAL_DMA_Start_IT+0xee>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a54      	ldr	r2, [pc, #336]	; (8004098 <HAL_DMA_Start_IT+0x228>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d009      	beq.n	8003f5e <HAL_DMA_Start_IT+0xee>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a53      	ldr	r2, [pc, #332]	; (800409c <HAL_DMA_Start_IT+0x22c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d004      	beq.n	8003f5e <HAL_DMA_Start_IT+0xee>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a51      	ldr	r2, [pc, #324]	; (80040a0 <HAL_DMA_Start_IT+0x230>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d108      	bne.n	8003f70 <HAL_DMA_Start_IT+0x100>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0201 	bic.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	e007      	b.n	8003f80 <HAL_DMA_Start_IT+0x110>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0201 	bic.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f001 f906 	bl	8005198 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a34      	ldr	r2, [pc, #208]	; (8004064 <HAL_DMA_Start_IT+0x1f4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d04a      	beq.n	800402c <HAL_DMA_Start_IT+0x1bc>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a33      	ldr	r2, [pc, #204]	; (8004068 <HAL_DMA_Start_IT+0x1f8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d045      	beq.n	800402c <HAL_DMA_Start_IT+0x1bc>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a31      	ldr	r2, [pc, #196]	; (800406c <HAL_DMA_Start_IT+0x1fc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d040      	beq.n	800402c <HAL_DMA_Start_IT+0x1bc>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a30      	ldr	r2, [pc, #192]	; (8004070 <HAL_DMA_Start_IT+0x200>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d03b      	beq.n	800402c <HAL_DMA_Start_IT+0x1bc>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2e      	ldr	r2, [pc, #184]	; (8004074 <HAL_DMA_Start_IT+0x204>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d036      	beq.n	800402c <HAL_DMA_Start_IT+0x1bc>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a2d      	ldr	r2, [pc, #180]	; (8004078 <HAL_DMA_Start_IT+0x208>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d031      	beq.n	800402c <HAL_DMA_Start_IT+0x1bc>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a2b      	ldr	r2, [pc, #172]	; (800407c <HAL_DMA_Start_IT+0x20c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d02c      	beq.n	800402c <HAL_DMA_Start_IT+0x1bc>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a2a      	ldr	r2, [pc, #168]	; (8004080 <HAL_DMA_Start_IT+0x210>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d027      	beq.n	800402c <HAL_DMA_Start_IT+0x1bc>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a28      	ldr	r2, [pc, #160]	; (8004084 <HAL_DMA_Start_IT+0x214>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d022      	beq.n	800402c <HAL_DMA_Start_IT+0x1bc>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a27      	ldr	r2, [pc, #156]	; (8004088 <HAL_DMA_Start_IT+0x218>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d01d      	beq.n	800402c <HAL_DMA_Start_IT+0x1bc>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a25      	ldr	r2, [pc, #148]	; (800408c <HAL_DMA_Start_IT+0x21c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d018      	beq.n	800402c <HAL_DMA_Start_IT+0x1bc>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a24      	ldr	r2, [pc, #144]	; (8004090 <HAL_DMA_Start_IT+0x220>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d013      	beq.n	800402c <HAL_DMA_Start_IT+0x1bc>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a22      	ldr	r2, [pc, #136]	; (8004094 <HAL_DMA_Start_IT+0x224>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00e      	beq.n	800402c <HAL_DMA_Start_IT+0x1bc>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a21      	ldr	r2, [pc, #132]	; (8004098 <HAL_DMA_Start_IT+0x228>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d009      	beq.n	800402c <HAL_DMA_Start_IT+0x1bc>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1f      	ldr	r2, [pc, #124]	; (800409c <HAL_DMA_Start_IT+0x22c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d004      	beq.n	800402c <HAL_DMA_Start_IT+0x1bc>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1e      	ldr	r2, [pc, #120]	; (80040a0 <HAL_DMA_Start_IT+0x230>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d101      	bne.n	8004030 <HAL_DMA_Start_IT+0x1c0>
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <HAL_DMA_Start_IT+0x1c2>
 8004030:	2300      	movs	r3, #0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d036      	beq.n	80040a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f023 021e 	bic.w	r2, r3, #30
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0216 	orr.w	r2, r2, #22
 8004048:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	d03e      	beq.n	80040d0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0208 	orr.w	r2, r2, #8
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	e035      	b.n	80040d0 <HAL_DMA_Start_IT+0x260>
 8004064:	40020010 	.word	0x40020010
 8004068:	40020028 	.word	0x40020028
 800406c:	40020040 	.word	0x40020040
 8004070:	40020058 	.word	0x40020058
 8004074:	40020070 	.word	0x40020070
 8004078:	40020088 	.word	0x40020088
 800407c:	400200a0 	.word	0x400200a0
 8004080:	400200b8 	.word	0x400200b8
 8004084:	40020410 	.word	0x40020410
 8004088:	40020428 	.word	0x40020428
 800408c:	40020440 	.word	0x40020440
 8004090:	40020458 	.word	0x40020458
 8004094:	40020470 	.word	0x40020470
 8004098:	40020488 	.word	0x40020488
 800409c:	400204a0 	.word	0x400204a0
 80040a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 020e 	bic.w	r2, r3, #14
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 020a 	orr.w	r2, r2, #10
 80040b6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0204 	orr.w	r2, r2, #4
 80040ce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a83      	ldr	r2, [pc, #524]	; (80042e4 <HAL_DMA_Start_IT+0x474>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d072      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a82      	ldr	r2, [pc, #520]	; (80042e8 <HAL_DMA_Start_IT+0x478>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d06d      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a80      	ldr	r2, [pc, #512]	; (80042ec <HAL_DMA_Start_IT+0x47c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d068      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a7f      	ldr	r2, [pc, #508]	; (80042f0 <HAL_DMA_Start_IT+0x480>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d063      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a7d      	ldr	r2, [pc, #500]	; (80042f4 <HAL_DMA_Start_IT+0x484>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d05e      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a7c      	ldr	r2, [pc, #496]	; (80042f8 <HAL_DMA_Start_IT+0x488>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d059      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a7a      	ldr	r2, [pc, #488]	; (80042fc <HAL_DMA_Start_IT+0x48c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d054      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a79      	ldr	r2, [pc, #484]	; (8004300 <HAL_DMA_Start_IT+0x490>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d04f      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a77      	ldr	r2, [pc, #476]	; (8004304 <HAL_DMA_Start_IT+0x494>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d04a      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a76      	ldr	r2, [pc, #472]	; (8004308 <HAL_DMA_Start_IT+0x498>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d045      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a74      	ldr	r2, [pc, #464]	; (800430c <HAL_DMA_Start_IT+0x49c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d040      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a73      	ldr	r2, [pc, #460]	; (8004310 <HAL_DMA_Start_IT+0x4a0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d03b      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a71      	ldr	r2, [pc, #452]	; (8004314 <HAL_DMA_Start_IT+0x4a4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d036      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a70      	ldr	r2, [pc, #448]	; (8004318 <HAL_DMA_Start_IT+0x4a8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d031      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a6e      	ldr	r2, [pc, #440]	; (800431c <HAL_DMA_Start_IT+0x4ac>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d02c      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a6d      	ldr	r2, [pc, #436]	; (8004320 <HAL_DMA_Start_IT+0x4b0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d027      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a6b      	ldr	r2, [pc, #428]	; (8004324 <HAL_DMA_Start_IT+0x4b4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d022      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a6a      	ldr	r2, [pc, #424]	; (8004328 <HAL_DMA_Start_IT+0x4b8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d01d      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a68      	ldr	r2, [pc, #416]	; (800432c <HAL_DMA_Start_IT+0x4bc>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d018      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a67      	ldr	r2, [pc, #412]	; (8004330 <HAL_DMA_Start_IT+0x4c0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d013      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a65      	ldr	r2, [pc, #404]	; (8004334 <HAL_DMA_Start_IT+0x4c4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00e      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a64      	ldr	r2, [pc, #400]	; (8004338 <HAL_DMA_Start_IT+0x4c8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d009      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a62      	ldr	r2, [pc, #392]	; (800433c <HAL_DMA_Start_IT+0x4cc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d004      	beq.n	80041c0 <HAL_DMA_Start_IT+0x350>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a61      	ldr	r2, [pc, #388]	; (8004340 <HAL_DMA_Start_IT+0x4d0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d101      	bne.n	80041c4 <HAL_DMA_Start_IT+0x354>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <HAL_DMA_Start_IT+0x356>
 80041c4:	2300      	movs	r3, #0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01a      	beq.n	8004200 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d007      	beq.n	80041e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d007      	beq.n	8004200 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a37      	ldr	r2, [pc, #220]	; (80042e4 <HAL_DMA_Start_IT+0x474>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d04a      	beq.n	80042a0 <HAL_DMA_Start_IT+0x430>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a36      	ldr	r2, [pc, #216]	; (80042e8 <HAL_DMA_Start_IT+0x478>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d045      	beq.n	80042a0 <HAL_DMA_Start_IT+0x430>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a34      	ldr	r2, [pc, #208]	; (80042ec <HAL_DMA_Start_IT+0x47c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d040      	beq.n	80042a0 <HAL_DMA_Start_IT+0x430>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a33      	ldr	r2, [pc, #204]	; (80042f0 <HAL_DMA_Start_IT+0x480>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d03b      	beq.n	80042a0 <HAL_DMA_Start_IT+0x430>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a31      	ldr	r2, [pc, #196]	; (80042f4 <HAL_DMA_Start_IT+0x484>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d036      	beq.n	80042a0 <HAL_DMA_Start_IT+0x430>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a30      	ldr	r2, [pc, #192]	; (80042f8 <HAL_DMA_Start_IT+0x488>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d031      	beq.n	80042a0 <HAL_DMA_Start_IT+0x430>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a2e      	ldr	r2, [pc, #184]	; (80042fc <HAL_DMA_Start_IT+0x48c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02c      	beq.n	80042a0 <HAL_DMA_Start_IT+0x430>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a2d      	ldr	r2, [pc, #180]	; (8004300 <HAL_DMA_Start_IT+0x490>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d027      	beq.n	80042a0 <HAL_DMA_Start_IT+0x430>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a2b      	ldr	r2, [pc, #172]	; (8004304 <HAL_DMA_Start_IT+0x494>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d022      	beq.n	80042a0 <HAL_DMA_Start_IT+0x430>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2a      	ldr	r2, [pc, #168]	; (8004308 <HAL_DMA_Start_IT+0x498>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d01d      	beq.n	80042a0 <HAL_DMA_Start_IT+0x430>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a28      	ldr	r2, [pc, #160]	; (800430c <HAL_DMA_Start_IT+0x49c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d018      	beq.n	80042a0 <HAL_DMA_Start_IT+0x430>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a27      	ldr	r2, [pc, #156]	; (8004310 <HAL_DMA_Start_IT+0x4a0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d013      	beq.n	80042a0 <HAL_DMA_Start_IT+0x430>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a25      	ldr	r2, [pc, #148]	; (8004314 <HAL_DMA_Start_IT+0x4a4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00e      	beq.n	80042a0 <HAL_DMA_Start_IT+0x430>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a24      	ldr	r2, [pc, #144]	; (8004318 <HAL_DMA_Start_IT+0x4a8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d009      	beq.n	80042a0 <HAL_DMA_Start_IT+0x430>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a22      	ldr	r2, [pc, #136]	; (800431c <HAL_DMA_Start_IT+0x4ac>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_DMA_Start_IT+0x430>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a21      	ldr	r2, [pc, #132]	; (8004320 <HAL_DMA_Start_IT+0x4b0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d108      	bne.n	80042b2 <HAL_DMA_Start_IT+0x442>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	e012      	b.n	80042d8 <HAL_DMA_Start_IT+0x468>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0201 	orr.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	e009      	b.n	80042d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40020010 	.word	0x40020010
 80042e8:	40020028 	.word	0x40020028
 80042ec:	40020040 	.word	0x40020040
 80042f0:	40020058 	.word	0x40020058
 80042f4:	40020070 	.word	0x40020070
 80042f8:	40020088 	.word	0x40020088
 80042fc:	400200a0 	.word	0x400200a0
 8004300:	400200b8 	.word	0x400200b8
 8004304:	40020410 	.word	0x40020410
 8004308:	40020428 	.word	0x40020428
 800430c:	40020440 	.word	0x40020440
 8004310:	40020458 	.word	0x40020458
 8004314:	40020470 	.word	0x40020470
 8004318:	40020488 	.word	0x40020488
 800431c:	400204a0 	.word	0x400204a0
 8004320:	400204b8 	.word	0x400204b8
 8004324:	58025408 	.word	0x58025408
 8004328:	5802541c 	.word	0x5802541c
 800432c:	58025430 	.word	0x58025430
 8004330:	58025444 	.word	0x58025444
 8004334:	58025458 	.word	0x58025458
 8004338:	5802546c 	.word	0x5802546c
 800433c:	58025480 	.word	0x58025480
 8004340:	58025494 	.word	0x58025494

08004344 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004350:	4b67      	ldr	r3, [pc, #412]	; (80044f0 <HAL_DMA_IRQHandler+0x1ac>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a67      	ldr	r2, [pc, #412]	; (80044f4 <HAL_DMA_IRQHandler+0x1b0>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	0a9b      	lsrs	r3, r3, #10
 800435c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004368:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a5f      	ldr	r2, [pc, #380]	; (80044f8 <HAL_DMA_IRQHandler+0x1b4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d04a      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a5d      	ldr	r2, [pc, #372]	; (80044fc <HAL_DMA_IRQHandler+0x1b8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d045      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a5c      	ldr	r2, [pc, #368]	; (8004500 <HAL_DMA_IRQHandler+0x1bc>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d040      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a5a      	ldr	r2, [pc, #360]	; (8004504 <HAL_DMA_IRQHandler+0x1c0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d03b      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a59      	ldr	r2, [pc, #356]	; (8004508 <HAL_DMA_IRQHandler+0x1c4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d036      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a57      	ldr	r2, [pc, #348]	; (800450c <HAL_DMA_IRQHandler+0x1c8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d031      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a56      	ldr	r2, [pc, #344]	; (8004510 <HAL_DMA_IRQHandler+0x1cc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d02c      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a54      	ldr	r2, [pc, #336]	; (8004514 <HAL_DMA_IRQHandler+0x1d0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d027      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a53      	ldr	r2, [pc, #332]	; (8004518 <HAL_DMA_IRQHandler+0x1d4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d022      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a51      	ldr	r2, [pc, #324]	; (800451c <HAL_DMA_IRQHandler+0x1d8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01d      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a50      	ldr	r2, [pc, #320]	; (8004520 <HAL_DMA_IRQHandler+0x1dc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d018      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a4e      	ldr	r2, [pc, #312]	; (8004524 <HAL_DMA_IRQHandler+0x1e0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a4d      	ldr	r2, [pc, #308]	; (8004528 <HAL_DMA_IRQHandler+0x1e4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00e      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a4b      	ldr	r2, [pc, #300]	; (800452c <HAL_DMA_IRQHandler+0x1e8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d009      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a4a      	ldr	r2, [pc, #296]	; (8004530 <HAL_DMA_IRQHandler+0x1ec>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a48      	ldr	r2, [pc, #288]	; (8004534 <HAL_DMA_IRQHandler+0x1f0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <HAL_DMA_IRQHandler+0xd6>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_DMA_IRQHandler+0xd8>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 842b 	beq.w	8004c78 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	2208      	movs	r2, #8
 800442c:	409a      	lsls	r2, r3
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80a2 	beq.w	800457c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2e      	ldr	r2, [pc, #184]	; (80044f8 <HAL_DMA_IRQHandler+0x1b4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d04a      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a2d      	ldr	r2, [pc, #180]	; (80044fc <HAL_DMA_IRQHandler+0x1b8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d045      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2b      	ldr	r2, [pc, #172]	; (8004500 <HAL_DMA_IRQHandler+0x1bc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d040      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2a      	ldr	r2, [pc, #168]	; (8004504 <HAL_DMA_IRQHandler+0x1c0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d03b      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a28      	ldr	r2, [pc, #160]	; (8004508 <HAL_DMA_IRQHandler+0x1c4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d036      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a27      	ldr	r2, [pc, #156]	; (800450c <HAL_DMA_IRQHandler+0x1c8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d031      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a25      	ldr	r2, [pc, #148]	; (8004510 <HAL_DMA_IRQHandler+0x1cc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d02c      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a24      	ldr	r2, [pc, #144]	; (8004514 <HAL_DMA_IRQHandler+0x1d0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d027      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a22      	ldr	r2, [pc, #136]	; (8004518 <HAL_DMA_IRQHandler+0x1d4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d022      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a21      	ldr	r2, [pc, #132]	; (800451c <HAL_DMA_IRQHandler+0x1d8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d01d      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <HAL_DMA_IRQHandler+0x1dc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d018      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <HAL_DMA_IRQHandler+0x1e0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d013      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1c      	ldr	r2, [pc, #112]	; (8004528 <HAL_DMA_IRQHandler+0x1e4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00e      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1b      	ldr	r2, [pc, #108]	; (800452c <HAL_DMA_IRQHandler+0x1e8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d009      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a19      	ldr	r2, [pc, #100]	; (8004530 <HAL_DMA_IRQHandler+0x1ec>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a18      	ldr	r2, [pc, #96]	; (8004534 <HAL_DMA_IRQHandler+0x1f0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d12f      	bne.n	8004538 <HAL_DMA_IRQHandler+0x1f4>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bf14      	ite	ne
 80044e6:	2301      	movne	r3, #1
 80044e8:	2300      	moveq	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	e02e      	b.n	800454c <HAL_DMA_IRQHandler+0x208>
 80044ee:	bf00      	nop
 80044f0:	24000000 	.word	0x24000000
 80044f4:	1b4e81b5 	.word	0x1b4e81b5
 80044f8:	40020010 	.word	0x40020010
 80044fc:	40020028 	.word	0x40020028
 8004500:	40020040 	.word	0x40020040
 8004504:	40020058 	.word	0x40020058
 8004508:	40020070 	.word	0x40020070
 800450c:	40020088 	.word	0x40020088
 8004510:	400200a0 	.word	0x400200a0
 8004514:	400200b8 	.word	0x400200b8
 8004518:	40020410 	.word	0x40020410
 800451c:	40020428 	.word	0x40020428
 8004520:	40020440 	.word	0x40020440
 8004524:	40020458 	.word	0x40020458
 8004528:	40020470 	.word	0x40020470
 800452c:	40020488 	.word	0x40020488
 8004530:	400204a0 	.word	0x400204a0
 8004534:	400204b8 	.word	0x400204b8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	bf14      	ite	ne
 8004546:	2301      	movne	r3, #1
 8004548:	2300      	moveq	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d015      	beq.n	800457c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0204 	bic.w	r2, r2, #4
 800455e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	2208      	movs	r2, #8
 800456a:	409a      	lsls	r2, r3
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004574:	f043 0201 	orr.w	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	fa22 f303 	lsr.w	r3, r2, r3
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d06e      	beq.n	8004670 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a69      	ldr	r2, [pc, #420]	; (800473c <HAL_DMA_IRQHandler+0x3f8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d04a      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a67      	ldr	r2, [pc, #412]	; (8004740 <HAL_DMA_IRQHandler+0x3fc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d045      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a66      	ldr	r2, [pc, #408]	; (8004744 <HAL_DMA_IRQHandler+0x400>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d040      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a64      	ldr	r2, [pc, #400]	; (8004748 <HAL_DMA_IRQHandler+0x404>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d03b      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a63      	ldr	r2, [pc, #396]	; (800474c <HAL_DMA_IRQHandler+0x408>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d036      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a61      	ldr	r2, [pc, #388]	; (8004750 <HAL_DMA_IRQHandler+0x40c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d031      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a60      	ldr	r2, [pc, #384]	; (8004754 <HAL_DMA_IRQHandler+0x410>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d02c      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a5e      	ldr	r2, [pc, #376]	; (8004758 <HAL_DMA_IRQHandler+0x414>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d027      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a5d      	ldr	r2, [pc, #372]	; (800475c <HAL_DMA_IRQHandler+0x418>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d022      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a5b      	ldr	r2, [pc, #364]	; (8004760 <HAL_DMA_IRQHandler+0x41c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d01d      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a5a      	ldr	r2, [pc, #360]	; (8004764 <HAL_DMA_IRQHandler+0x420>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d018      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a58      	ldr	r2, [pc, #352]	; (8004768 <HAL_DMA_IRQHandler+0x424>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d013      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a57      	ldr	r2, [pc, #348]	; (800476c <HAL_DMA_IRQHandler+0x428>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00e      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a55      	ldr	r2, [pc, #340]	; (8004770 <HAL_DMA_IRQHandler+0x42c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d009      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a54      	ldr	r2, [pc, #336]	; (8004774 <HAL_DMA_IRQHandler+0x430>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a52      	ldr	r2, [pc, #328]	; (8004778 <HAL_DMA_IRQHandler+0x434>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10a      	bne.n	8004648 <HAL_DMA_IRQHandler+0x304>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf14      	ite	ne
 8004640:	2301      	movne	r3, #1
 8004642:	2300      	moveq	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e003      	b.n	8004650 <HAL_DMA_IRQHandler+0x30c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2300      	movs	r3, #0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2201      	movs	r2, #1
 800465e:	409a      	lsls	r2, r3
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004668:	f043 0202 	orr.w	r2, r3, #2
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	2204      	movs	r2, #4
 800467a:	409a      	lsls	r2, r3
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	4013      	ands	r3, r2
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 808f 	beq.w	80047a4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a2c      	ldr	r2, [pc, #176]	; (800473c <HAL_DMA_IRQHandler+0x3f8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d04a      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a2a      	ldr	r2, [pc, #168]	; (8004740 <HAL_DMA_IRQHandler+0x3fc>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d045      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a29      	ldr	r2, [pc, #164]	; (8004744 <HAL_DMA_IRQHandler+0x400>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d040      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a27      	ldr	r2, [pc, #156]	; (8004748 <HAL_DMA_IRQHandler+0x404>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d03b      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a26      	ldr	r2, [pc, #152]	; (800474c <HAL_DMA_IRQHandler+0x408>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d036      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a24      	ldr	r2, [pc, #144]	; (8004750 <HAL_DMA_IRQHandler+0x40c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d031      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a23      	ldr	r2, [pc, #140]	; (8004754 <HAL_DMA_IRQHandler+0x410>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d02c      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a21      	ldr	r2, [pc, #132]	; (8004758 <HAL_DMA_IRQHandler+0x414>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d027      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a20      	ldr	r2, [pc, #128]	; (800475c <HAL_DMA_IRQHandler+0x418>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d022      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1e      	ldr	r2, [pc, #120]	; (8004760 <HAL_DMA_IRQHandler+0x41c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d01d      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1d      	ldr	r2, [pc, #116]	; (8004764 <HAL_DMA_IRQHandler+0x420>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d018      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1b      	ldr	r2, [pc, #108]	; (8004768 <HAL_DMA_IRQHandler+0x424>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1a      	ldr	r2, [pc, #104]	; (800476c <HAL_DMA_IRQHandler+0x428>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00e      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a18      	ldr	r2, [pc, #96]	; (8004770 <HAL_DMA_IRQHandler+0x42c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d009      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a17      	ldr	r2, [pc, #92]	; (8004774 <HAL_DMA_IRQHandler+0x430>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a15      	ldr	r2, [pc, #84]	; (8004778 <HAL_DMA_IRQHandler+0x434>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d12a      	bne.n	800477c <HAL_DMA_IRQHandler+0x438>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf14      	ite	ne
 8004734:	2301      	movne	r3, #1
 8004736:	2300      	moveq	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	e023      	b.n	8004784 <HAL_DMA_IRQHandler+0x440>
 800473c:	40020010 	.word	0x40020010
 8004740:	40020028 	.word	0x40020028
 8004744:	40020040 	.word	0x40020040
 8004748:	40020058 	.word	0x40020058
 800474c:	40020070 	.word	0x40020070
 8004750:	40020088 	.word	0x40020088
 8004754:	400200a0 	.word	0x400200a0
 8004758:	400200b8 	.word	0x400200b8
 800475c:	40020410 	.word	0x40020410
 8004760:	40020428 	.word	0x40020428
 8004764:	40020440 	.word	0x40020440
 8004768:	40020458 	.word	0x40020458
 800476c:	40020470 	.word	0x40020470
 8004770:	40020488 	.word	0x40020488
 8004774:	400204a0 	.word	0x400204a0
 8004778:	400204b8 	.word	0x400204b8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2300      	movs	r3, #0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00d      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	2204      	movs	r2, #4
 8004792:	409a      	lsls	r2, r3
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479c:	f043 0204 	orr.w	r2, r3, #4
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	2210      	movs	r2, #16
 80047ae:	409a      	lsls	r2, r3
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80a6 	beq.w	8004906 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a85      	ldr	r2, [pc, #532]	; (80049d4 <HAL_DMA_IRQHandler+0x690>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d04a      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a83      	ldr	r2, [pc, #524]	; (80049d8 <HAL_DMA_IRQHandler+0x694>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d045      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a82      	ldr	r2, [pc, #520]	; (80049dc <HAL_DMA_IRQHandler+0x698>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d040      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a80      	ldr	r2, [pc, #512]	; (80049e0 <HAL_DMA_IRQHandler+0x69c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d03b      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7f      	ldr	r2, [pc, #508]	; (80049e4 <HAL_DMA_IRQHandler+0x6a0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d036      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a7d      	ldr	r2, [pc, #500]	; (80049e8 <HAL_DMA_IRQHandler+0x6a4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d031      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a7c      	ldr	r2, [pc, #496]	; (80049ec <HAL_DMA_IRQHandler+0x6a8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d02c      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a7a      	ldr	r2, [pc, #488]	; (80049f0 <HAL_DMA_IRQHandler+0x6ac>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d027      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a79      	ldr	r2, [pc, #484]	; (80049f4 <HAL_DMA_IRQHandler+0x6b0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d022      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a77      	ldr	r2, [pc, #476]	; (80049f8 <HAL_DMA_IRQHandler+0x6b4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d01d      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a76      	ldr	r2, [pc, #472]	; (80049fc <HAL_DMA_IRQHandler+0x6b8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d018      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a74      	ldr	r2, [pc, #464]	; (8004a00 <HAL_DMA_IRQHandler+0x6bc>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d013      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a73      	ldr	r2, [pc, #460]	; (8004a04 <HAL_DMA_IRQHandler+0x6c0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00e      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a71      	ldr	r2, [pc, #452]	; (8004a08 <HAL_DMA_IRQHandler+0x6c4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d009      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a70      	ldr	r2, [pc, #448]	; (8004a0c <HAL_DMA_IRQHandler+0x6c8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d004      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6e      	ldr	r2, [pc, #440]	; (8004a10 <HAL_DMA_IRQHandler+0x6cc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d10a      	bne.n	8004870 <HAL_DMA_IRQHandler+0x52c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	bf14      	ite	ne
 8004868:	2301      	movne	r3, #1
 800486a:	2300      	moveq	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	e009      	b.n	8004884 <HAL_DMA_IRQHandler+0x540>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	bf14      	ite	ne
 800487e:	2301      	movne	r3, #1
 8004880:	2300      	moveq	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d03e      	beq.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2210      	movs	r2, #16
 8004892:	409a      	lsls	r2, r3
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d018      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d108      	bne.n	80048c6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d024      	beq.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	4798      	blx	r3
 80048c4:	e01f      	b.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d01b      	beq.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4798      	blx	r3
 80048d6:	e016      	b.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d107      	bne.n	80048f6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0208 	bic.w	r2, r2, #8
 80048f4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	2220      	movs	r2, #32
 8004910:	409a      	lsls	r2, r3
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 8110 	beq.w	8004b3c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a2c      	ldr	r2, [pc, #176]	; (80049d4 <HAL_DMA_IRQHandler+0x690>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d04a      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a2b      	ldr	r2, [pc, #172]	; (80049d8 <HAL_DMA_IRQHandler+0x694>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d045      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a29      	ldr	r2, [pc, #164]	; (80049dc <HAL_DMA_IRQHandler+0x698>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d040      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a28      	ldr	r2, [pc, #160]	; (80049e0 <HAL_DMA_IRQHandler+0x69c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d03b      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a26      	ldr	r2, [pc, #152]	; (80049e4 <HAL_DMA_IRQHandler+0x6a0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d036      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a25      	ldr	r2, [pc, #148]	; (80049e8 <HAL_DMA_IRQHandler+0x6a4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d031      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a23      	ldr	r2, [pc, #140]	; (80049ec <HAL_DMA_IRQHandler+0x6a8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d02c      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a22      	ldr	r2, [pc, #136]	; (80049f0 <HAL_DMA_IRQHandler+0x6ac>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d027      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a20      	ldr	r2, [pc, #128]	; (80049f4 <HAL_DMA_IRQHandler+0x6b0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d022      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1f      	ldr	r2, [pc, #124]	; (80049f8 <HAL_DMA_IRQHandler+0x6b4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d01d      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a1d      	ldr	r2, [pc, #116]	; (80049fc <HAL_DMA_IRQHandler+0x6b8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d018      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1c      	ldr	r2, [pc, #112]	; (8004a00 <HAL_DMA_IRQHandler+0x6bc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1a      	ldr	r2, [pc, #104]	; (8004a04 <HAL_DMA_IRQHandler+0x6c0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00e      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a19      	ldr	r2, [pc, #100]	; (8004a08 <HAL_DMA_IRQHandler+0x6c4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a17      	ldr	r2, [pc, #92]	; (8004a0c <HAL_DMA_IRQHandler+0x6c8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a16      	ldr	r2, [pc, #88]	; (8004a10 <HAL_DMA_IRQHandler+0x6cc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d12b      	bne.n	8004a14 <HAL_DMA_IRQHandler+0x6d0>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	bf14      	ite	ne
 80049ca:	2301      	movne	r3, #1
 80049cc:	2300      	moveq	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	e02a      	b.n	8004a28 <HAL_DMA_IRQHandler+0x6e4>
 80049d2:	bf00      	nop
 80049d4:	40020010 	.word	0x40020010
 80049d8:	40020028 	.word	0x40020028
 80049dc:	40020040 	.word	0x40020040
 80049e0:	40020058 	.word	0x40020058
 80049e4:	40020070 	.word	0x40020070
 80049e8:	40020088 	.word	0x40020088
 80049ec:	400200a0 	.word	0x400200a0
 80049f0:	400200b8 	.word	0x400200b8
 80049f4:	40020410 	.word	0x40020410
 80049f8:	40020428 	.word	0x40020428
 80049fc:	40020440 	.word	0x40020440
 8004a00:	40020458 	.word	0x40020458
 8004a04:	40020470 	.word	0x40020470
 8004a08:	40020488 	.word	0x40020488
 8004a0c:	400204a0 	.word	0x400204a0
 8004a10:	400204b8 	.word	0x400204b8
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bf14      	ite	ne
 8004a22:	2301      	movne	r3, #1
 8004a24:	2300      	moveq	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8087 	beq.w	8004b3c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	2220      	movs	r2, #32
 8004a38:	409a      	lsls	r2, r3
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d139      	bne.n	8004abe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0216 	bic.w	r2, r2, #22
 8004a58:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a68:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d103      	bne.n	8004a7a <HAL_DMA_IRQHandler+0x736>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0208 	bic.w	r2, r2, #8
 8004a88:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8e:	f003 031f 	and.w	r3, r3, #31
 8004a92:	223f      	movs	r2, #63	; 0x3f
 8004a94:	409a      	lsls	r2, r3
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 834a 	beq.w	8005148 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4798      	blx	r3
          }
          return;
 8004abc:	e344      	b.n	8005148 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d018      	beq.n	8004afe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d108      	bne.n	8004aec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d02c      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	4798      	blx	r3
 8004aea:	e027      	b.n	8004b3c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d023      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
 8004afc:	e01e      	b.n	8004b3c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10f      	bne.n	8004b2c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0210 	bic.w	r2, r2, #16
 8004b1a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8306 	beq.w	8005152 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 8088 	beq.w	8004c64 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2204      	movs	r2, #4
 8004b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a7a      	ldr	r2, [pc, #488]	; (8004d4c <HAL_DMA_IRQHandler+0xa08>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d04a      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a79      	ldr	r2, [pc, #484]	; (8004d50 <HAL_DMA_IRQHandler+0xa0c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d045      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a77      	ldr	r2, [pc, #476]	; (8004d54 <HAL_DMA_IRQHandler+0xa10>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d040      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a76      	ldr	r2, [pc, #472]	; (8004d58 <HAL_DMA_IRQHandler+0xa14>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d03b      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a74      	ldr	r2, [pc, #464]	; (8004d5c <HAL_DMA_IRQHandler+0xa18>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d036      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a73      	ldr	r2, [pc, #460]	; (8004d60 <HAL_DMA_IRQHandler+0xa1c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d031      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a71      	ldr	r2, [pc, #452]	; (8004d64 <HAL_DMA_IRQHandler+0xa20>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d02c      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a70      	ldr	r2, [pc, #448]	; (8004d68 <HAL_DMA_IRQHandler+0xa24>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d027      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a6e      	ldr	r2, [pc, #440]	; (8004d6c <HAL_DMA_IRQHandler+0xa28>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d022      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a6d      	ldr	r2, [pc, #436]	; (8004d70 <HAL_DMA_IRQHandler+0xa2c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d01d      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a6b      	ldr	r2, [pc, #428]	; (8004d74 <HAL_DMA_IRQHandler+0xa30>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d018      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a6a      	ldr	r2, [pc, #424]	; (8004d78 <HAL_DMA_IRQHandler+0xa34>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d013      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a68      	ldr	r2, [pc, #416]	; (8004d7c <HAL_DMA_IRQHandler+0xa38>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00e      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a67      	ldr	r2, [pc, #412]	; (8004d80 <HAL_DMA_IRQHandler+0xa3c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a65      	ldr	r2, [pc, #404]	; (8004d84 <HAL_DMA_IRQHandler+0xa40>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a64      	ldr	r2, [pc, #400]	; (8004d88 <HAL_DMA_IRQHandler+0xa44>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d108      	bne.n	8004c0e <HAL_DMA_IRQHandler+0x8ca>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	e007      	b.n	8004c1e <HAL_DMA_IRQHandler+0x8da>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0201 	bic.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3301      	adds	r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d307      	bcc.n	8004c3a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1f2      	bne.n	8004c1e <HAL_DMA_IRQHandler+0x8da>
 8004c38:	e000      	b.n	8004c3c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c3a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d004      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c52:	e003      	b.n	8004c5c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8272 	beq.w	8005152 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4798      	blx	r3
 8004c76:	e26c      	b.n	8005152 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a43      	ldr	r2, [pc, #268]	; (8004d8c <HAL_DMA_IRQHandler+0xa48>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d022      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x984>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a42      	ldr	r2, [pc, #264]	; (8004d90 <HAL_DMA_IRQHandler+0xa4c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d01d      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x984>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a40      	ldr	r2, [pc, #256]	; (8004d94 <HAL_DMA_IRQHandler+0xa50>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d018      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x984>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a3f      	ldr	r2, [pc, #252]	; (8004d98 <HAL_DMA_IRQHandler+0xa54>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d013      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x984>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a3d      	ldr	r2, [pc, #244]	; (8004d9c <HAL_DMA_IRQHandler+0xa58>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00e      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x984>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a3c      	ldr	r2, [pc, #240]	; (8004da0 <HAL_DMA_IRQHandler+0xa5c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d009      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x984>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a3a      	ldr	r2, [pc, #232]	; (8004da4 <HAL_DMA_IRQHandler+0xa60>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x984>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a39      	ldr	r2, [pc, #228]	; (8004da8 <HAL_DMA_IRQHandler+0xa64>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d101      	bne.n	8004ccc <HAL_DMA_IRQHandler+0x988>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <HAL_DMA_IRQHandler+0x98a>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 823f 	beq.w	8005152 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80cd 	beq.w	8004e8c <HAL_DMA_IRQHandler+0xb48>
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 80c7 	beq.w	8004e8c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d02:	f003 031f 	and.w	r3, r3, #31
 8004d06:	2204      	movs	r2, #4
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d049      	beq.n	8004dac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 8210 	beq.w	800514c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d34:	e20a      	b.n	800514c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8206 	beq.w	800514c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d48:	e200      	b.n	800514c <HAL_DMA_IRQHandler+0xe08>
 8004d4a:	bf00      	nop
 8004d4c:	40020010 	.word	0x40020010
 8004d50:	40020028 	.word	0x40020028
 8004d54:	40020040 	.word	0x40020040
 8004d58:	40020058 	.word	0x40020058
 8004d5c:	40020070 	.word	0x40020070
 8004d60:	40020088 	.word	0x40020088
 8004d64:	400200a0 	.word	0x400200a0
 8004d68:	400200b8 	.word	0x400200b8
 8004d6c:	40020410 	.word	0x40020410
 8004d70:	40020428 	.word	0x40020428
 8004d74:	40020440 	.word	0x40020440
 8004d78:	40020458 	.word	0x40020458
 8004d7c:	40020470 	.word	0x40020470
 8004d80:	40020488 	.word	0x40020488
 8004d84:	400204a0 	.word	0x400204a0
 8004d88:	400204b8 	.word	0x400204b8
 8004d8c:	58025408 	.word	0x58025408
 8004d90:	5802541c 	.word	0x5802541c
 8004d94:	58025430 	.word	0x58025430
 8004d98:	58025444 	.word	0x58025444
 8004d9c:	58025458 	.word	0x58025458
 8004da0:	5802546c 	.word	0x5802546c
 8004da4:	58025480 	.word	0x58025480
 8004da8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d160      	bne.n	8004e78 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a7f      	ldr	r2, [pc, #508]	; (8004fb8 <HAL_DMA_IRQHandler+0xc74>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d04a      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a7d      	ldr	r2, [pc, #500]	; (8004fbc <HAL_DMA_IRQHandler+0xc78>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d045      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a7c      	ldr	r2, [pc, #496]	; (8004fc0 <HAL_DMA_IRQHandler+0xc7c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d040      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a7a      	ldr	r2, [pc, #488]	; (8004fc4 <HAL_DMA_IRQHandler+0xc80>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d03b      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a79      	ldr	r2, [pc, #484]	; (8004fc8 <HAL_DMA_IRQHandler+0xc84>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d036      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a77      	ldr	r2, [pc, #476]	; (8004fcc <HAL_DMA_IRQHandler+0xc88>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d031      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a76      	ldr	r2, [pc, #472]	; (8004fd0 <HAL_DMA_IRQHandler+0xc8c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d02c      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a74      	ldr	r2, [pc, #464]	; (8004fd4 <HAL_DMA_IRQHandler+0xc90>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d027      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a73      	ldr	r2, [pc, #460]	; (8004fd8 <HAL_DMA_IRQHandler+0xc94>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d022      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a71      	ldr	r2, [pc, #452]	; (8004fdc <HAL_DMA_IRQHandler+0xc98>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01d      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a70      	ldr	r2, [pc, #448]	; (8004fe0 <HAL_DMA_IRQHandler+0xc9c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d018      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a6e      	ldr	r2, [pc, #440]	; (8004fe4 <HAL_DMA_IRQHandler+0xca0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a6d      	ldr	r2, [pc, #436]	; (8004fe8 <HAL_DMA_IRQHandler+0xca4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00e      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a6b      	ldr	r2, [pc, #428]	; (8004fec <HAL_DMA_IRQHandler+0xca8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d009      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a6a      	ldr	r2, [pc, #424]	; (8004ff0 <HAL_DMA_IRQHandler+0xcac>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d004      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a68      	ldr	r2, [pc, #416]	; (8004ff4 <HAL_DMA_IRQHandler+0xcb0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d108      	bne.n	8004e68 <HAL_DMA_IRQHandler+0xb24>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0208 	bic.w	r2, r2, #8
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e007      	b.n	8004e78 <HAL_DMA_IRQHandler+0xb34>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0204 	bic.w	r2, r2, #4
 8004e76:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 8165 	beq.w	800514c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e8a:	e15f      	b.n	800514c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e90:	f003 031f 	and.w	r3, r3, #31
 8004e94:	2202      	movs	r2, #2
 8004e96:	409a      	lsls	r2, r3
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 80c5 	beq.w	800502c <HAL_DMA_IRQHandler+0xce8>
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 80bf 	beq.w	800502c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	409a      	lsls	r2, r3
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d018      	beq.n	8004efa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d109      	bne.n	8004ee6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 813a 	beq.w	8005150 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ee4:	e134      	b.n	8005150 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8130 	beq.w	8005150 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ef8:	e12a      	b.n	8005150 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f040 8089 	bne.w	8005018 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a2b      	ldr	r2, [pc, #172]	; (8004fb8 <HAL_DMA_IRQHandler+0xc74>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d04a      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a29      	ldr	r2, [pc, #164]	; (8004fbc <HAL_DMA_IRQHandler+0xc78>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d045      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a28      	ldr	r2, [pc, #160]	; (8004fc0 <HAL_DMA_IRQHandler+0xc7c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d040      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a26      	ldr	r2, [pc, #152]	; (8004fc4 <HAL_DMA_IRQHandler+0xc80>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d03b      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a25      	ldr	r2, [pc, #148]	; (8004fc8 <HAL_DMA_IRQHandler+0xc84>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d036      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a23      	ldr	r2, [pc, #140]	; (8004fcc <HAL_DMA_IRQHandler+0xc88>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d031      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a22      	ldr	r2, [pc, #136]	; (8004fd0 <HAL_DMA_IRQHandler+0xc8c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d02c      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a20      	ldr	r2, [pc, #128]	; (8004fd4 <HAL_DMA_IRQHandler+0xc90>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d027      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1f      	ldr	r2, [pc, #124]	; (8004fd8 <HAL_DMA_IRQHandler+0xc94>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d022      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <HAL_DMA_IRQHandler+0xc98>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01d      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1c      	ldr	r2, [pc, #112]	; (8004fe0 <HAL_DMA_IRQHandler+0xc9c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d018      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1a      	ldr	r2, [pc, #104]	; (8004fe4 <HAL_DMA_IRQHandler+0xca0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a19      	ldr	r2, [pc, #100]	; (8004fe8 <HAL_DMA_IRQHandler+0xca4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00e      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a17      	ldr	r2, [pc, #92]	; (8004fec <HAL_DMA_IRQHandler+0xca8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d009      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a16      	ldr	r2, [pc, #88]	; (8004ff0 <HAL_DMA_IRQHandler+0xcac>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d004      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a14      	ldr	r2, [pc, #80]	; (8004ff4 <HAL_DMA_IRQHandler+0xcb0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d128      	bne.n	8004ff8 <HAL_DMA_IRQHandler+0xcb4>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0214 	bic.w	r2, r2, #20
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	e027      	b.n	8005008 <HAL_DMA_IRQHandler+0xcc4>
 8004fb8:	40020010 	.word	0x40020010
 8004fbc:	40020028 	.word	0x40020028
 8004fc0:	40020040 	.word	0x40020040
 8004fc4:	40020058 	.word	0x40020058
 8004fc8:	40020070 	.word	0x40020070
 8004fcc:	40020088 	.word	0x40020088
 8004fd0:	400200a0 	.word	0x400200a0
 8004fd4:	400200b8 	.word	0x400200b8
 8004fd8:	40020410 	.word	0x40020410
 8004fdc:	40020428 	.word	0x40020428
 8004fe0:	40020440 	.word	0x40020440
 8004fe4:	40020458 	.word	0x40020458
 8004fe8:	40020470 	.word	0x40020470
 8004fec:	40020488 	.word	0x40020488
 8004ff0:	400204a0 	.word	0x400204a0
 8004ff4:	400204b8 	.word	0x400204b8
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 020a 	bic.w	r2, r2, #10
 8005006:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8097 	beq.w	8005150 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800502a:	e091      	b.n	8005150 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	2208      	movs	r2, #8
 8005036:	409a      	lsls	r2, r3
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4013      	ands	r3, r2
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8088 	beq.w	8005152 <HAL_DMA_IRQHandler+0xe0e>
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8082 	beq.w	8005152 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a41      	ldr	r2, [pc, #260]	; (8005158 <HAL_DMA_IRQHandler+0xe14>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d04a      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a3f      	ldr	r2, [pc, #252]	; (800515c <HAL_DMA_IRQHandler+0xe18>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d045      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a3e      	ldr	r2, [pc, #248]	; (8005160 <HAL_DMA_IRQHandler+0xe1c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d040      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a3c      	ldr	r2, [pc, #240]	; (8005164 <HAL_DMA_IRQHandler+0xe20>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d03b      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a3b      	ldr	r2, [pc, #236]	; (8005168 <HAL_DMA_IRQHandler+0xe24>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d036      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a39      	ldr	r2, [pc, #228]	; (800516c <HAL_DMA_IRQHandler+0xe28>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d031      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a38      	ldr	r2, [pc, #224]	; (8005170 <HAL_DMA_IRQHandler+0xe2c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d02c      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a36      	ldr	r2, [pc, #216]	; (8005174 <HAL_DMA_IRQHandler+0xe30>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d027      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a35      	ldr	r2, [pc, #212]	; (8005178 <HAL_DMA_IRQHandler+0xe34>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d022      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a33      	ldr	r2, [pc, #204]	; (800517c <HAL_DMA_IRQHandler+0xe38>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01d      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a32      	ldr	r2, [pc, #200]	; (8005180 <HAL_DMA_IRQHandler+0xe3c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d018      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a30      	ldr	r2, [pc, #192]	; (8005184 <HAL_DMA_IRQHandler+0xe40>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d013      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a2f      	ldr	r2, [pc, #188]	; (8005188 <HAL_DMA_IRQHandler+0xe44>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00e      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a2d      	ldr	r2, [pc, #180]	; (800518c <HAL_DMA_IRQHandler+0xe48>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d009      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a2c      	ldr	r2, [pc, #176]	; (8005190 <HAL_DMA_IRQHandler+0xe4c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d004      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a2a      	ldr	r2, [pc, #168]	; (8005194 <HAL_DMA_IRQHandler+0xe50>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d108      	bne.n	8005100 <HAL_DMA_IRQHandler+0xdbc>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 021c 	bic.w	r2, r2, #28
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e007      	b.n	8005110 <HAL_DMA_IRQHandler+0xdcc>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 020e 	bic.w	r2, r2, #14
 800510e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005114:	f003 031f 	and.w	r3, r3, #31
 8005118:	2201      	movs	r2, #1
 800511a:	409a      	lsls	r2, r3
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4798      	blx	r3
 8005146:	e004      	b.n	8005152 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005148:	bf00      	nop
 800514a:	e002      	b.n	8005152 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800514c:	bf00      	nop
 800514e:	e000      	b.n	8005152 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005150:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005152:	3728      	adds	r7, #40	; 0x28
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40020010 	.word	0x40020010
 800515c:	40020028 	.word	0x40020028
 8005160:	40020040 	.word	0x40020040
 8005164:	40020058 	.word	0x40020058
 8005168:	40020070 	.word	0x40020070
 800516c:	40020088 	.word	0x40020088
 8005170:	400200a0 	.word	0x400200a0
 8005174:	400200b8 	.word	0x400200b8
 8005178:	40020410 	.word	0x40020410
 800517c:	40020428 	.word	0x40020428
 8005180:	40020440 	.word	0x40020440
 8005184:	40020458 	.word	0x40020458
 8005188:	40020470 	.word	0x40020470
 800518c:	40020488 	.word	0x40020488
 8005190:	400204a0 	.word	0x400204a0
 8005194:	400204b8 	.word	0x400204b8

08005198 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051aa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a7f      	ldr	r2, [pc, #508]	; (80053b4 <DMA_SetConfig+0x21c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d072      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a7d      	ldr	r2, [pc, #500]	; (80053b8 <DMA_SetConfig+0x220>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d06d      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a7c      	ldr	r2, [pc, #496]	; (80053bc <DMA_SetConfig+0x224>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d068      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a7a      	ldr	r2, [pc, #488]	; (80053c0 <DMA_SetConfig+0x228>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d063      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a79      	ldr	r2, [pc, #484]	; (80053c4 <DMA_SetConfig+0x22c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d05e      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a77      	ldr	r2, [pc, #476]	; (80053c8 <DMA_SetConfig+0x230>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d059      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a76      	ldr	r2, [pc, #472]	; (80053cc <DMA_SetConfig+0x234>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d054      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a74      	ldr	r2, [pc, #464]	; (80053d0 <DMA_SetConfig+0x238>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d04f      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a73      	ldr	r2, [pc, #460]	; (80053d4 <DMA_SetConfig+0x23c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d04a      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a71      	ldr	r2, [pc, #452]	; (80053d8 <DMA_SetConfig+0x240>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d045      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a70      	ldr	r2, [pc, #448]	; (80053dc <DMA_SetConfig+0x244>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d040      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a6e      	ldr	r2, [pc, #440]	; (80053e0 <DMA_SetConfig+0x248>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d03b      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a6d      	ldr	r2, [pc, #436]	; (80053e4 <DMA_SetConfig+0x24c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d036      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a6b      	ldr	r2, [pc, #428]	; (80053e8 <DMA_SetConfig+0x250>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d031      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a6a      	ldr	r2, [pc, #424]	; (80053ec <DMA_SetConfig+0x254>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d02c      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a68      	ldr	r2, [pc, #416]	; (80053f0 <DMA_SetConfig+0x258>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d027      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a67      	ldr	r2, [pc, #412]	; (80053f4 <DMA_SetConfig+0x25c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d022      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a65      	ldr	r2, [pc, #404]	; (80053f8 <DMA_SetConfig+0x260>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d01d      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a64      	ldr	r2, [pc, #400]	; (80053fc <DMA_SetConfig+0x264>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d018      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a62      	ldr	r2, [pc, #392]	; (8005400 <DMA_SetConfig+0x268>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d013      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a61      	ldr	r2, [pc, #388]	; (8005404 <DMA_SetConfig+0x26c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00e      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a5f      	ldr	r2, [pc, #380]	; (8005408 <DMA_SetConfig+0x270>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d009      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a5e      	ldr	r2, [pc, #376]	; (800540c <DMA_SetConfig+0x274>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <DMA_SetConfig+0x10a>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a5c      	ldr	r2, [pc, #368]	; (8005410 <DMA_SetConfig+0x278>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d101      	bne.n	80052a6 <DMA_SetConfig+0x10e>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <DMA_SetConfig+0x110>
 80052a6:	2300      	movs	r3, #0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00d      	beq.n	80052c8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052b4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d004      	beq.n	80052c8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052c6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a39      	ldr	r2, [pc, #228]	; (80053b4 <DMA_SetConfig+0x21c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d04a      	beq.n	8005368 <DMA_SetConfig+0x1d0>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a38      	ldr	r2, [pc, #224]	; (80053b8 <DMA_SetConfig+0x220>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d045      	beq.n	8005368 <DMA_SetConfig+0x1d0>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a36      	ldr	r2, [pc, #216]	; (80053bc <DMA_SetConfig+0x224>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d040      	beq.n	8005368 <DMA_SetConfig+0x1d0>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a35      	ldr	r2, [pc, #212]	; (80053c0 <DMA_SetConfig+0x228>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d03b      	beq.n	8005368 <DMA_SetConfig+0x1d0>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a33      	ldr	r2, [pc, #204]	; (80053c4 <DMA_SetConfig+0x22c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d036      	beq.n	8005368 <DMA_SetConfig+0x1d0>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a32      	ldr	r2, [pc, #200]	; (80053c8 <DMA_SetConfig+0x230>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d031      	beq.n	8005368 <DMA_SetConfig+0x1d0>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a30      	ldr	r2, [pc, #192]	; (80053cc <DMA_SetConfig+0x234>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d02c      	beq.n	8005368 <DMA_SetConfig+0x1d0>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a2f      	ldr	r2, [pc, #188]	; (80053d0 <DMA_SetConfig+0x238>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d027      	beq.n	8005368 <DMA_SetConfig+0x1d0>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a2d      	ldr	r2, [pc, #180]	; (80053d4 <DMA_SetConfig+0x23c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d022      	beq.n	8005368 <DMA_SetConfig+0x1d0>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a2c      	ldr	r2, [pc, #176]	; (80053d8 <DMA_SetConfig+0x240>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d01d      	beq.n	8005368 <DMA_SetConfig+0x1d0>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a2a      	ldr	r2, [pc, #168]	; (80053dc <DMA_SetConfig+0x244>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d018      	beq.n	8005368 <DMA_SetConfig+0x1d0>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a29      	ldr	r2, [pc, #164]	; (80053e0 <DMA_SetConfig+0x248>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d013      	beq.n	8005368 <DMA_SetConfig+0x1d0>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a27      	ldr	r2, [pc, #156]	; (80053e4 <DMA_SetConfig+0x24c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00e      	beq.n	8005368 <DMA_SetConfig+0x1d0>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <DMA_SetConfig+0x250>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d009      	beq.n	8005368 <DMA_SetConfig+0x1d0>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a24      	ldr	r2, [pc, #144]	; (80053ec <DMA_SetConfig+0x254>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d004      	beq.n	8005368 <DMA_SetConfig+0x1d0>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a23      	ldr	r2, [pc, #140]	; (80053f0 <DMA_SetConfig+0x258>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d101      	bne.n	800536c <DMA_SetConfig+0x1d4>
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <DMA_SetConfig+0x1d6>
 800536c:	2300      	movs	r3, #0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d059      	beq.n	8005426 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005376:	f003 031f 	and.w	r3, r3, #31
 800537a:	223f      	movs	r2, #63	; 0x3f
 800537c:	409a      	lsls	r2, r3
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005390:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	d138      	bne.n	8005414 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053b2:	e086      	b.n	80054c2 <DMA_SetConfig+0x32a>
 80053b4:	40020010 	.word	0x40020010
 80053b8:	40020028 	.word	0x40020028
 80053bc:	40020040 	.word	0x40020040
 80053c0:	40020058 	.word	0x40020058
 80053c4:	40020070 	.word	0x40020070
 80053c8:	40020088 	.word	0x40020088
 80053cc:	400200a0 	.word	0x400200a0
 80053d0:	400200b8 	.word	0x400200b8
 80053d4:	40020410 	.word	0x40020410
 80053d8:	40020428 	.word	0x40020428
 80053dc:	40020440 	.word	0x40020440
 80053e0:	40020458 	.word	0x40020458
 80053e4:	40020470 	.word	0x40020470
 80053e8:	40020488 	.word	0x40020488
 80053ec:	400204a0 	.word	0x400204a0
 80053f0:	400204b8 	.word	0x400204b8
 80053f4:	58025408 	.word	0x58025408
 80053f8:	5802541c 	.word	0x5802541c
 80053fc:	58025430 	.word	0x58025430
 8005400:	58025444 	.word	0x58025444
 8005404:	58025458 	.word	0x58025458
 8005408:	5802546c 	.word	0x5802546c
 800540c:	58025480 	.word	0x58025480
 8005410:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	60da      	str	r2, [r3, #12]
}
 8005424:	e04d      	b.n	80054c2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a29      	ldr	r2, [pc, #164]	; (80054d0 <DMA_SetConfig+0x338>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d022      	beq.n	8005476 <DMA_SetConfig+0x2de>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a27      	ldr	r2, [pc, #156]	; (80054d4 <DMA_SetConfig+0x33c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01d      	beq.n	8005476 <DMA_SetConfig+0x2de>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a26      	ldr	r2, [pc, #152]	; (80054d8 <DMA_SetConfig+0x340>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d018      	beq.n	8005476 <DMA_SetConfig+0x2de>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a24      	ldr	r2, [pc, #144]	; (80054dc <DMA_SetConfig+0x344>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d013      	beq.n	8005476 <DMA_SetConfig+0x2de>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a23      	ldr	r2, [pc, #140]	; (80054e0 <DMA_SetConfig+0x348>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00e      	beq.n	8005476 <DMA_SetConfig+0x2de>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a21      	ldr	r2, [pc, #132]	; (80054e4 <DMA_SetConfig+0x34c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d009      	beq.n	8005476 <DMA_SetConfig+0x2de>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a20      	ldr	r2, [pc, #128]	; (80054e8 <DMA_SetConfig+0x350>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d004      	beq.n	8005476 <DMA_SetConfig+0x2de>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a1e      	ldr	r2, [pc, #120]	; (80054ec <DMA_SetConfig+0x354>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d101      	bne.n	800547a <DMA_SetConfig+0x2e2>
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <DMA_SetConfig+0x2e4>
 800547a:	2300      	movs	r3, #0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d020      	beq.n	80054c2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005484:	f003 031f 	and.w	r3, r3, #31
 8005488:	2201      	movs	r2, #1
 800548a:	409a      	lsls	r2, r3
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b40      	cmp	r3, #64	; 0x40
 800549e:	d108      	bne.n	80054b2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	60da      	str	r2, [r3, #12]
}
 80054b0:	e007      	b.n	80054c2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	60da      	str	r2, [r3, #12]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	58025408 	.word	0x58025408
 80054d4:	5802541c 	.word	0x5802541c
 80054d8:	58025430 	.word	0x58025430
 80054dc:	58025444 	.word	0x58025444
 80054e0:	58025458 	.word	0x58025458
 80054e4:	5802546c 	.word	0x5802546c
 80054e8:	58025480 	.word	0x58025480
 80054ec:	58025494 	.word	0x58025494

080054f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a42      	ldr	r2, [pc, #264]	; (8005608 <DMA_CalcBaseAndBitshift+0x118>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d04a      	beq.n	8005598 <DMA_CalcBaseAndBitshift+0xa8>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a41      	ldr	r2, [pc, #260]	; (800560c <DMA_CalcBaseAndBitshift+0x11c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d045      	beq.n	8005598 <DMA_CalcBaseAndBitshift+0xa8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a3f      	ldr	r2, [pc, #252]	; (8005610 <DMA_CalcBaseAndBitshift+0x120>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d040      	beq.n	8005598 <DMA_CalcBaseAndBitshift+0xa8>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a3e      	ldr	r2, [pc, #248]	; (8005614 <DMA_CalcBaseAndBitshift+0x124>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d03b      	beq.n	8005598 <DMA_CalcBaseAndBitshift+0xa8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a3c      	ldr	r2, [pc, #240]	; (8005618 <DMA_CalcBaseAndBitshift+0x128>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d036      	beq.n	8005598 <DMA_CalcBaseAndBitshift+0xa8>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a3b      	ldr	r2, [pc, #236]	; (800561c <DMA_CalcBaseAndBitshift+0x12c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d031      	beq.n	8005598 <DMA_CalcBaseAndBitshift+0xa8>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a39      	ldr	r2, [pc, #228]	; (8005620 <DMA_CalcBaseAndBitshift+0x130>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d02c      	beq.n	8005598 <DMA_CalcBaseAndBitshift+0xa8>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a38      	ldr	r2, [pc, #224]	; (8005624 <DMA_CalcBaseAndBitshift+0x134>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d027      	beq.n	8005598 <DMA_CalcBaseAndBitshift+0xa8>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a36      	ldr	r2, [pc, #216]	; (8005628 <DMA_CalcBaseAndBitshift+0x138>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d022      	beq.n	8005598 <DMA_CalcBaseAndBitshift+0xa8>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a35      	ldr	r2, [pc, #212]	; (800562c <DMA_CalcBaseAndBitshift+0x13c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d01d      	beq.n	8005598 <DMA_CalcBaseAndBitshift+0xa8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a33      	ldr	r2, [pc, #204]	; (8005630 <DMA_CalcBaseAndBitshift+0x140>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d018      	beq.n	8005598 <DMA_CalcBaseAndBitshift+0xa8>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a32      	ldr	r2, [pc, #200]	; (8005634 <DMA_CalcBaseAndBitshift+0x144>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d013      	beq.n	8005598 <DMA_CalcBaseAndBitshift+0xa8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a30      	ldr	r2, [pc, #192]	; (8005638 <DMA_CalcBaseAndBitshift+0x148>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00e      	beq.n	8005598 <DMA_CalcBaseAndBitshift+0xa8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2f      	ldr	r2, [pc, #188]	; (800563c <DMA_CalcBaseAndBitshift+0x14c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d009      	beq.n	8005598 <DMA_CalcBaseAndBitshift+0xa8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a2d      	ldr	r2, [pc, #180]	; (8005640 <DMA_CalcBaseAndBitshift+0x150>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d004      	beq.n	8005598 <DMA_CalcBaseAndBitshift+0xa8>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a2c      	ldr	r2, [pc, #176]	; (8005644 <DMA_CalcBaseAndBitshift+0x154>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d101      	bne.n	800559c <DMA_CalcBaseAndBitshift+0xac>
 8005598:	2301      	movs	r3, #1
 800559a:	e000      	b.n	800559e <DMA_CalcBaseAndBitshift+0xae>
 800559c:	2300      	movs	r3, #0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d024      	beq.n	80055ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	3b10      	subs	r3, #16
 80055aa:	4a27      	ldr	r2, [pc, #156]	; (8005648 <DMA_CalcBaseAndBitshift+0x158>)
 80055ac:	fba2 2303 	umull	r2, r3, r2, r3
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	4a24      	ldr	r2, [pc, #144]	; (800564c <DMA_CalcBaseAndBitshift+0x15c>)
 80055bc:	5cd3      	ldrb	r3, [r2, r3]
 80055be:	461a      	mov	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d908      	bls.n	80055dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	4b1f      	ldr	r3, [pc, #124]	; (8005650 <DMA_CalcBaseAndBitshift+0x160>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	1d1a      	adds	r2, r3, #4
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	659a      	str	r2, [r3, #88]	; 0x58
 80055da:	e00d      	b.n	80055f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	461a      	mov	r2, r3
 80055e2:	4b1b      	ldr	r3, [pc, #108]	; (8005650 <DMA_CalcBaseAndBitshift+0x160>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6593      	str	r3, [r2, #88]	; 0x58
 80055ea:	e005      	b.n	80055f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	40020010 	.word	0x40020010
 800560c:	40020028 	.word	0x40020028
 8005610:	40020040 	.word	0x40020040
 8005614:	40020058 	.word	0x40020058
 8005618:	40020070 	.word	0x40020070
 800561c:	40020088 	.word	0x40020088
 8005620:	400200a0 	.word	0x400200a0
 8005624:	400200b8 	.word	0x400200b8
 8005628:	40020410 	.word	0x40020410
 800562c:	40020428 	.word	0x40020428
 8005630:	40020440 	.word	0x40020440
 8005634:	40020458 	.word	0x40020458
 8005638:	40020470 	.word	0x40020470
 800563c:	40020488 	.word	0x40020488
 8005640:	400204a0 	.word	0x400204a0
 8005644:	400204b8 	.word	0x400204b8
 8005648:	aaaaaaab 	.word	0xaaaaaaab
 800564c:	08012fec 	.word	0x08012fec
 8005650:	fffffc00 	.word	0xfffffc00

08005654 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d120      	bne.n	80056aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	2b03      	cmp	r3, #3
 800566e:	d858      	bhi.n	8005722 <DMA_CheckFifoParam+0xce>
 8005670:	a201      	add	r2, pc, #4	; (adr r2, 8005678 <DMA_CheckFifoParam+0x24>)
 8005672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005676:	bf00      	nop
 8005678:	08005689 	.word	0x08005689
 800567c:	0800569b 	.word	0x0800569b
 8005680:	08005689 	.word	0x08005689
 8005684:	08005723 	.word	0x08005723
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d048      	beq.n	8005726 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005698:	e045      	b.n	8005726 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056a2:	d142      	bne.n	800572a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056a8:	e03f      	b.n	800572a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b2:	d123      	bne.n	80056fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d838      	bhi.n	800572e <DMA_CheckFifoParam+0xda>
 80056bc:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <DMA_CheckFifoParam+0x70>)
 80056be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c2:	bf00      	nop
 80056c4:	080056d5 	.word	0x080056d5
 80056c8:	080056db 	.word	0x080056db
 80056cc:	080056d5 	.word	0x080056d5
 80056d0:	080056ed 	.word	0x080056ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
        break;
 80056d8:	e030      	b.n	800573c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d025      	beq.n	8005732 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056ea:	e022      	b.n	8005732 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056f4:	d11f      	bne.n	8005736 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056fa:	e01c      	b.n	8005736 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	2b02      	cmp	r3, #2
 8005702:	d902      	bls.n	800570a <DMA_CheckFifoParam+0xb6>
 8005704:	2b03      	cmp	r3, #3
 8005706:	d003      	beq.n	8005710 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005708:	e018      	b.n	800573c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
        break;
 800570e:	e015      	b.n	800573c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00e      	beq.n	800573a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	73fb      	strb	r3, [r7, #15]
    break;
 8005720:	e00b      	b.n	800573a <DMA_CheckFifoParam+0xe6>
        break;
 8005722:	bf00      	nop
 8005724:	e00a      	b.n	800573c <DMA_CheckFifoParam+0xe8>
        break;
 8005726:	bf00      	nop
 8005728:	e008      	b.n	800573c <DMA_CheckFifoParam+0xe8>
        break;
 800572a:	bf00      	nop
 800572c:	e006      	b.n	800573c <DMA_CheckFifoParam+0xe8>
        break;
 800572e:	bf00      	nop
 8005730:	e004      	b.n	800573c <DMA_CheckFifoParam+0xe8>
        break;
 8005732:	bf00      	nop
 8005734:	e002      	b.n	800573c <DMA_CheckFifoParam+0xe8>
        break;
 8005736:	bf00      	nop
 8005738:	e000      	b.n	800573c <DMA_CheckFifoParam+0xe8>
    break;
 800573a:	bf00      	nop
    }
  }

  return status;
 800573c:	7bfb      	ldrb	r3, [r7, #15]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop

0800574c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a38      	ldr	r2, [pc, #224]	; (8005840 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d022      	beq.n	80057aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a36      	ldr	r2, [pc, #216]	; (8005844 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d01d      	beq.n	80057aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a35      	ldr	r2, [pc, #212]	; (8005848 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d018      	beq.n	80057aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a33      	ldr	r2, [pc, #204]	; (800584c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d013      	beq.n	80057aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a32      	ldr	r2, [pc, #200]	; (8005850 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00e      	beq.n	80057aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a30      	ldr	r2, [pc, #192]	; (8005854 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d009      	beq.n	80057aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a2f      	ldr	r2, [pc, #188]	; (8005858 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d004      	beq.n	80057aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a2d      	ldr	r2, [pc, #180]	; (800585c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d101      	bne.n	80057ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80057ae:	2300      	movs	r3, #0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d01a      	beq.n	80057ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	3b08      	subs	r3, #8
 80057bc:	4a28      	ldr	r2, [pc, #160]	; (8005860 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80057be:	fba2 2303 	umull	r2, r3, r2, r3
 80057c2:	091b      	lsrs	r3, r3, #4
 80057c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4b26      	ldr	r3, [pc, #152]	; (8005864 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	461a      	mov	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a24      	ldr	r2, [pc, #144]	; (8005868 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80057d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	2201      	movs	r2, #1
 80057e2:	409a      	lsls	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80057e8:	e024      	b.n	8005834 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	3b10      	subs	r3, #16
 80057f2:	4a1e      	ldr	r2, [pc, #120]	; (800586c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80057f4:	fba2 2303 	umull	r2, r3, r2, r3
 80057f8:	091b      	lsrs	r3, r3, #4
 80057fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4a1c      	ldr	r2, [pc, #112]	; (8005870 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d806      	bhi.n	8005812 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4a1b      	ldr	r2, [pc, #108]	; (8005874 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d902      	bls.n	8005812 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3308      	adds	r3, #8
 8005810:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4b18      	ldr	r3, [pc, #96]	; (8005878 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	461a      	mov	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a16      	ldr	r2, [pc, #88]	; (800587c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005824:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f003 031f 	and.w	r3, r3, #31
 800582c:	2201      	movs	r2, #1
 800582e:	409a      	lsls	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	58025408 	.word	0x58025408
 8005844:	5802541c 	.word	0x5802541c
 8005848:	58025430 	.word	0x58025430
 800584c:	58025444 	.word	0x58025444
 8005850:	58025458 	.word	0x58025458
 8005854:	5802546c 	.word	0x5802546c
 8005858:	58025480 	.word	0x58025480
 800585c:	58025494 	.word	0x58025494
 8005860:	cccccccd 	.word	0xcccccccd
 8005864:	16009600 	.word	0x16009600
 8005868:	58025880 	.word	0x58025880
 800586c:	aaaaaaab 	.word	0xaaaaaaab
 8005870:	400204b8 	.word	0x400204b8
 8005874:	4002040f 	.word	0x4002040f
 8005878:	10008200 	.word	0x10008200
 800587c:	40020880 	.word	0x40020880

08005880 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d04a      	beq.n	800592c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b08      	cmp	r3, #8
 800589a:	d847      	bhi.n	800592c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a25      	ldr	r2, [pc, #148]	; (8005938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d022      	beq.n	80058ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a24      	ldr	r2, [pc, #144]	; (800593c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d01d      	beq.n	80058ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a22      	ldr	r2, [pc, #136]	; (8005940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d018      	beq.n	80058ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a21      	ldr	r2, [pc, #132]	; (8005944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d013      	beq.n	80058ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1f      	ldr	r2, [pc, #124]	; (8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00e      	beq.n	80058ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1e      	ldr	r2, [pc, #120]	; (800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d009      	beq.n	80058ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1c      	ldr	r2, [pc, #112]	; (8005950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d004      	beq.n	80058ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a1b      	ldr	r2, [pc, #108]	; (8005954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d101      	bne.n	80058f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80058ec:	2301      	movs	r3, #1
 80058ee:	e000      	b.n	80058f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80058f0:	2300      	movs	r3, #0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4b17      	ldr	r3, [pc, #92]	; (8005958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	461a      	mov	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a15      	ldr	r2, [pc, #84]	; (800595c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005908:	671a      	str	r2, [r3, #112]	; 0x70
 800590a:	e009      	b.n	8005920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4b14      	ldr	r3, [pc, #80]	; (8005960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	461a      	mov	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a11      	ldr	r2, [pc, #68]	; (8005964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800591e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3b01      	subs	r3, #1
 8005924:	2201      	movs	r2, #1
 8005926:	409a      	lsls	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800592c:	bf00      	nop
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	58025408 	.word	0x58025408
 800593c:	5802541c 	.word	0x5802541c
 8005940:	58025430 	.word	0x58025430
 8005944:	58025444 	.word	0x58025444
 8005948:	58025458 	.word	0x58025458
 800594c:	5802546c 	.word	0x5802546c
 8005950:	58025480 	.word	0x58025480
 8005954:	58025494 	.word	0x58025494
 8005958:	1600963f 	.word	0x1600963f
 800595c:	58025940 	.word	0x58025940
 8005960:	1000823f 	.word	0x1000823f
 8005964:	40020940 	.word	0x40020940

08005968 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005968:	b480      	push	{r7}
 800596a:	b089      	sub	sp, #36	; 0x24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005972:	2300      	movs	r3, #0
 8005974:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005976:	4b89      	ldr	r3, [pc, #548]	; (8005b9c <HAL_GPIO_Init+0x234>)
 8005978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800597a:	e194      	b.n	8005ca6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	2101      	movs	r1, #1
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	fa01 f303 	lsl.w	r3, r1, r3
 8005988:	4013      	ands	r3, r2
 800598a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 8186 	beq.w	8005ca0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	2b01      	cmp	r3, #1
 800599e:	d005      	beq.n	80059ac <HAL_GPIO_Init+0x44>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f003 0303 	and.w	r3, r3, #3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d130      	bne.n	8005a0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	2203      	movs	r2, #3
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	43db      	mvns	r3, r3
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	4013      	ands	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059e2:	2201      	movs	r2, #1
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	43db      	mvns	r3, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4013      	ands	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	091b      	lsrs	r3, r3, #4
 80059f8:	f003 0201 	and.w	r2, r3, #1
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d017      	beq.n	8005a4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	2203      	movs	r2, #3
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d123      	bne.n	8005a9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	08da      	lsrs	r2, r3, #3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3208      	adds	r2, #8
 8005a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	220f      	movs	r2, #15
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	43db      	mvns	r3, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4013      	ands	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	08da      	lsrs	r2, r3, #3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3208      	adds	r2, #8
 8005a98:	69b9      	ldr	r1, [r7, #24]
 8005a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f003 0203 	and.w	r2, r3, #3
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 80e0 	beq.w	8005ca0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ae0:	4b2f      	ldr	r3, [pc, #188]	; (8005ba0 <HAL_GPIO_Init+0x238>)
 8005ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ae6:	4a2e      	ldr	r2, [pc, #184]	; (8005ba0 <HAL_GPIO_Init+0x238>)
 8005ae8:	f043 0302 	orr.w	r3, r3, #2
 8005aec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005af0:	4b2b      	ldr	r3, [pc, #172]	; (8005ba0 <HAL_GPIO_Init+0x238>)
 8005af2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005afe:	4a29      	ldr	r2, [pc, #164]	; (8005ba4 <HAL_GPIO_Init+0x23c>)
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	089b      	lsrs	r3, r3, #2
 8005b04:	3302      	adds	r3, #2
 8005b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	220f      	movs	r2, #15
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a20      	ldr	r2, [pc, #128]	; (8005ba8 <HAL_GPIO_Init+0x240>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d052      	beq.n	8005bd0 <HAL_GPIO_Init+0x268>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a1f      	ldr	r2, [pc, #124]	; (8005bac <HAL_GPIO_Init+0x244>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d031      	beq.n	8005b96 <HAL_GPIO_Init+0x22e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a1e      	ldr	r2, [pc, #120]	; (8005bb0 <HAL_GPIO_Init+0x248>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d02b      	beq.n	8005b92 <HAL_GPIO_Init+0x22a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <HAL_GPIO_Init+0x24c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d025      	beq.n	8005b8e <HAL_GPIO_Init+0x226>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a1c      	ldr	r2, [pc, #112]	; (8005bb8 <HAL_GPIO_Init+0x250>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d01f      	beq.n	8005b8a <HAL_GPIO_Init+0x222>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a1b      	ldr	r2, [pc, #108]	; (8005bbc <HAL_GPIO_Init+0x254>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d019      	beq.n	8005b86 <HAL_GPIO_Init+0x21e>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a1a      	ldr	r2, [pc, #104]	; (8005bc0 <HAL_GPIO_Init+0x258>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_GPIO_Init+0x21a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a19      	ldr	r2, [pc, #100]	; (8005bc4 <HAL_GPIO_Init+0x25c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00d      	beq.n	8005b7e <HAL_GPIO_Init+0x216>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a18      	ldr	r2, [pc, #96]	; (8005bc8 <HAL_GPIO_Init+0x260>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d007      	beq.n	8005b7a <HAL_GPIO_Init+0x212>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a17      	ldr	r2, [pc, #92]	; (8005bcc <HAL_GPIO_Init+0x264>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d101      	bne.n	8005b76 <HAL_GPIO_Init+0x20e>
 8005b72:	2309      	movs	r3, #9
 8005b74:	e02d      	b.n	8005bd2 <HAL_GPIO_Init+0x26a>
 8005b76:	230a      	movs	r3, #10
 8005b78:	e02b      	b.n	8005bd2 <HAL_GPIO_Init+0x26a>
 8005b7a:	2308      	movs	r3, #8
 8005b7c:	e029      	b.n	8005bd2 <HAL_GPIO_Init+0x26a>
 8005b7e:	2307      	movs	r3, #7
 8005b80:	e027      	b.n	8005bd2 <HAL_GPIO_Init+0x26a>
 8005b82:	2306      	movs	r3, #6
 8005b84:	e025      	b.n	8005bd2 <HAL_GPIO_Init+0x26a>
 8005b86:	2305      	movs	r3, #5
 8005b88:	e023      	b.n	8005bd2 <HAL_GPIO_Init+0x26a>
 8005b8a:	2304      	movs	r3, #4
 8005b8c:	e021      	b.n	8005bd2 <HAL_GPIO_Init+0x26a>
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e01f      	b.n	8005bd2 <HAL_GPIO_Init+0x26a>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e01d      	b.n	8005bd2 <HAL_GPIO_Init+0x26a>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e01b      	b.n	8005bd2 <HAL_GPIO_Init+0x26a>
 8005b9a:	bf00      	nop
 8005b9c:	58000080 	.word	0x58000080
 8005ba0:	58024400 	.word	0x58024400
 8005ba4:	58000400 	.word	0x58000400
 8005ba8:	58020000 	.word	0x58020000
 8005bac:	58020400 	.word	0x58020400
 8005bb0:	58020800 	.word	0x58020800
 8005bb4:	58020c00 	.word	0x58020c00
 8005bb8:	58021000 	.word	0x58021000
 8005bbc:	58021400 	.word	0x58021400
 8005bc0:	58021800 	.word	0x58021800
 8005bc4:	58021c00 	.word	0x58021c00
 8005bc8:	58022000 	.word	0x58022000
 8005bcc:	58022400 	.word	0x58022400
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	f002 0203 	and.w	r2, r2, #3
 8005bd8:	0092      	lsls	r2, r2, #2
 8005bda:	4093      	lsls	r3, r2
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005be2:	4938      	ldr	r1, [pc, #224]	; (8005cc4 <HAL_GPIO_Init+0x35c>)
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	089b      	lsrs	r3, r3, #2
 8005be8:	3302      	adds	r3, #2
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	43db      	mvns	r3, r3
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	43db      	mvns	r3, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	43db      	mvns	r3, r3
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	4013      	ands	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f47f ae63 	bne.w	800597c <HAL_GPIO_Init+0x14>
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	bf00      	nop
 8005cba:	3724      	adds	r7, #36	; 0x24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	58000400 	.word	0x58000400

08005cc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	887b      	ldrh	r3, [r7, #2]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	73fb      	strb	r3, [r7, #15]
 8005ce4:	e001      	b.n	8005cea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	807b      	strh	r3, [r7, #2]
 8005d04:	4613      	mov	r3, r2
 8005d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d08:	787b      	ldrb	r3, [r7, #1]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d0e:	887a      	ldrh	r2, [r7, #2]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d14:	e003      	b.n	8005d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d16:	887b      	ldrh	r3, [r7, #2]
 8005d18:	041a      	lsls	r2, r3, #16
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	619a      	str	r2, [r3, #24]
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
	...

08005d2c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e10b      	b.n	8005f56 <HAL_I2S_Init+0x22a>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fa fc70 	bl	8000638 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d107      	bne.n	8005d7e <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0201 	bic.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2200      	movs	r2, #0
 8005d84:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d008      	beq.n	8005da0 <HAL_I2S_Init+0x74>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2b06      	cmp	r3, #6
 8005d94:	d004      	beq.n	8005da0 <HAL_I2S_Init+0x74>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b0a      	cmp	r3, #10
 8005d9c:	f040 8085 	bne.w	8005eaa <HAL_I2S_Init+0x17e>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d058      	beq.n	8005e5a <HAL_I2S_Init+0x12e>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8005db0:	2302      	movs	r3, #2
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	e001      	b.n	8005dba <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8005db6:	2301      	movs	r3, #1
 8005db8:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b30      	cmp	r3, #48	; 0x30
 8005dc0:	d003      	beq.n	8005dca <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8005dc6:	2bb0      	cmp	r3, #176	; 0xb0
 8005dc8:	d102      	bne.n	8005dd0 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	e001      	b.n	8005dd4 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8005dd4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005dd8:	f002 f8fc 	bl	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ddc:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005de6:	d113      	bne.n	8005e10 <HAL_I2S_Init+0xe4>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8005de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	fa22 f303 	lsr.w	r3, r2, r3
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	461a      	mov	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0a:	3305      	adds	r3, #5
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	e014      	b.n	8005e3a <HAL_I2S_Init+0x10e>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8005e10:	2220      	movs	r2, #32
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	fa22 f303 	lsr.w	r3, r2, r3
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	fb02 f303 	mul.w	r3, r2, r3
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e24:	4613      	mov	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e36:	3305      	adds	r3, #5
 8005e38:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4a48      	ldr	r2, [pc, #288]	; (8005f60 <HAL_I2S_Init+0x234>)
 8005e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e42:	08db      	lsrs	r3, r3, #3
 8005e44:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	085b      	lsrs	r3, r3, #1
 8005e56:	61fb      	str	r3, [r7, #28]
 8005e58:	e003      	b.n	8005e62 <HAL_I2S_Init+0x136>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d102      	bne.n	8005e6e <HAL_I2S_Init+0x142>
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d002      	beq.n	8005e74 <HAL_I2S_Init+0x148>
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	2bff      	cmp	r3, #255	; 0xff
 8005e72:	d907      	bls.n	8005e84 <HAL_I2S_Init+0x158>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e78:	f043 0210 	orr.w	r2, r3, #16
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e068      	b.n	8005f56 <HAL_I2S_Init+0x22a>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_I2S_Init+0x162>
    {
      i2sodd = 1UL;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e94:	4b33      	ldr	r3, [pc, #204]	; (8005f64 <HAL_I2S_Init+0x238>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	69fa      	ldr	r2, [r7, #28]
 8005e9a:	0411      	lsls	r1, r2, #16
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	0612      	lsls	r2, r2, #24
 8005ea0:	4311      	orrs	r1, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	430b      	orrs	r3, r1
 8005ea8:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eb0:	4b2d      	ldr	r3, [pc, #180]	; (8005f68 <HAL_I2S_Init+0x23c>)
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6851      	ldr	r1, [r2, #4]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6892      	ldr	r2, [r2, #8]
 8005ebc:	4311      	orrs	r1, r2
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	68d2      	ldr	r2, [r2, #12]
 8005ec2:	4311      	orrs	r1, r2
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6992      	ldr	r2, [r2, #24]
 8005ec8:	4311      	orrs	r1, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6a12      	ldr	r2, [r2, #32]
 8005ece:	4311      	orrs	r1, r2
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ed4:	4311      	orrs	r1, r2
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6912      	ldr	r2, [r2, #16]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0201 	orr.w	r2, r2, #1
 8005ee6:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f640 72f8 	movw	r2, #4088	; 0xff8
 8005ef0:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005f00:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	69da      	ldr	r2, [r3, #28]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d007      	beq.n	8005f30 <HAL_I2S_Init+0x204>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b06      	cmp	r3, #6
 8005f26:	d003      	beq.n	8005f30 <HAL_I2S_Init+0x204>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b0a      	cmp	r3, #10
 8005f2e:	d10a      	bne.n	8005f46 <HAL_I2S_Init+0x21a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3720      	adds	r7, #32
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	cccccccd 	.word	0xcccccccd
 8005f64:	fe00ffff 	.word	0xfe00ffff
 8005f68:	fdff9040 	.word	0xfdff9040

08005f6c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	4613      	mov	r3, r2
 8005f78:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <HAL_I2S_Receive_DMA+0x1e>
 8005f84:	88fb      	ldrh	r3, [r7, #6]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e086      	b.n	800609c <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d001      	beq.n	8005f9e <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e07e      	b.n	800609c <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d101      	bne.n	8005fae <HAL_I2S_Receive_DMA+0x42>
 8005faa:	2302      	movs	r3, #2
 8005fac:	e076      	b.n	800609c <HAL_I2S_Receive_DMA+0x130>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2204      	movs	r2, #4
 8005fba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pRxBuffPtr  = pData;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = Size;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	88fa      	ldrh	r2, [r7, #6]
 8005fce:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	88fa      	ldrh	r2, [r7, #6]
 8005fd4:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	865a      	strh	r2, [r3, #50]	; 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fec:	4a2d      	ldr	r2, [pc, #180]	; (80060a4 <HAL_I2S_Receive_DMA+0x138>)
 8005fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ff4:	4a2c      	ldr	r2, [pc, #176]	; (80060a8 <HAL_I2S_Receive_DMA+0x13c>)
 8005ff6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffc:	4a2b      	ldr	r2, [pc, #172]	; (80060ac <HAL_I2S_Receive_DMA+0x140>)
 8005ffe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3330      	adds	r3, #48	; 0x30
 800600a:	4619      	mov	r1, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006010:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006016:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8006018:	f7fd ff2a 	bl	8003e70 <HAL_DMA_Start_IT>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d011      	beq.n	8006046 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006026:	f043 0208 	orr.w	r2, r3, #8
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e02a      	b.n	800609c <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d107      	bne.n	8006064 <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006062:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d107      	bne.n	8006082 <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0201 	orr.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006090:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 800609a:	7dfb      	ldrb	r3, [r7, #23]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	0800612f 	.word	0x0800612f
 80060a8:	080060ed 	.word	0x080060ed
 80060ac:	0800614b 	.word	0x0800614b

080060b0 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10e      	bne.n	8006120 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006110:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	875a      	strh	r2, [r3, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff ffcf 	bl	80060c4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006126:	bf00      	nop
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7ff ffb7 	bl	80060b0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006142:	bf00      	nop
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006156:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006166:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006180:	f043 0208 	orr.w	r2, r3, #8
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f7ff ffa5 	bl	80060d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800618e:	bf00      	nop
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80061a0:	4b19      	ldr	r3, [pc, #100]	; (8006208 <HAL_PWREx_ConfigSupply+0x70>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d00a      	beq.n	80061c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80061ac:	4b16      	ldr	r3, [pc, #88]	; (8006208 <HAL_PWREx_ConfigSupply+0x70>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d001      	beq.n	80061be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e01f      	b.n	80061fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	e01d      	b.n	80061fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80061c2:	4b11      	ldr	r3, [pc, #68]	; (8006208 <HAL_PWREx_ConfigSupply+0x70>)
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f023 0207 	bic.w	r2, r3, #7
 80061ca:	490f      	ldr	r1, [pc, #60]	; (8006208 <HAL_PWREx_ConfigSupply+0x70>)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80061d2:	f7fd f997 	bl	8003504 <HAL_GetTick>
 80061d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061d8:	e009      	b.n	80061ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80061da:	f7fd f993 	bl	8003504 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061e8:	d901      	bls.n	80061ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e007      	b.n	80061fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061ee:	4b06      	ldr	r3, [pc, #24]	; (8006208 <HAL_PWREx_ConfigSupply+0x70>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061fa:	d1ee      	bne.n	80061da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	58024800 	.word	0x58024800

0800620c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08c      	sub	sp, #48	; 0x30
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d102      	bne.n	8006220 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	f000 bc1d 	b.w	8006a5a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 8087 	beq.w	800633c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800622e:	4b99      	ldr	r3, [pc, #612]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006236:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006238:	4b96      	ldr	r3, [pc, #600]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800623e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006240:	2b10      	cmp	r3, #16
 8006242:	d007      	beq.n	8006254 <HAL_RCC_OscConfig+0x48>
 8006244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006246:	2b18      	cmp	r3, #24
 8006248:	d110      	bne.n	800626c <HAL_RCC_OscConfig+0x60>
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	f003 0303 	and.w	r3, r3, #3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d10b      	bne.n	800626c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006254:	4b8f      	ldr	r3, [pc, #572]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d06c      	beq.n	800633a <HAL_RCC_OscConfig+0x12e>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d168      	bne.n	800633a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e3f6      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006274:	d106      	bne.n	8006284 <HAL_RCC_OscConfig+0x78>
 8006276:	4b87      	ldr	r3, [pc, #540]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a86      	ldr	r2, [pc, #536]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 800627c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	e02e      	b.n	80062e2 <HAL_RCC_OscConfig+0xd6>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10c      	bne.n	80062a6 <HAL_RCC_OscConfig+0x9a>
 800628c:	4b81      	ldr	r3, [pc, #516]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a80      	ldr	r2, [pc, #512]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 8006292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	4b7e      	ldr	r3, [pc, #504]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a7d      	ldr	r2, [pc, #500]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 800629e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	e01d      	b.n	80062e2 <HAL_RCC_OscConfig+0xd6>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062ae:	d10c      	bne.n	80062ca <HAL_RCC_OscConfig+0xbe>
 80062b0:	4b78      	ldr	r3, [pc, #480]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a77      	ldr	r2, [pc, #476]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 80062b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	4b75      	ldr	r3, [pc, #468]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a74      	ldr	r2, [pc, #464]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 80062c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	e00b      	b.n	80062e2 <HAL_RCC_OscConfig+0xd6>
 80062ca:	4b72      	ldr	r3, [pc, #456]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a71      	ldr	r2, [pc, #452]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 80062d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	4b6f      	ldr	r3, [pc, #444]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a6e      	ldr	r2, [pc, #440]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 80062dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d013      	beq.n	8006312 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ea:	f7fd f90b 	bl	8003504 <HAL_GetTick>
 80062ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062f2:	f7fd f907 	bl	8003504 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b64      	cmp	r3, #100	; 0x64
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e3aa      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006304:	4b63      	ldr	r3, [pc, #396]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0f0      	beq.n	80062f2 <HAL_RCC_OscConfig+0xe6>
 8006310:	e014      	b.n	800633c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006312:	f7fd f8f7 	bl	8003504 <HAL_GetTick>
 8006316:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006318:	e008      	b.n	800632c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800631a:	f7fd f8f3 	bl	8003504 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b64      	cmp	r3, #100	; 0x64
 8006326:	d901      	bls.n	800632c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e396      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800632c:	4b59      	ldr	r3, [pc, #356]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1f0      	bne.n	800631a <HAL_RCC_OscConfig+0x10e>
 8006338:	e000      	b.n	800633c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800633a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 80cb 	beq.w	80064e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800634a:	4b52      	ldr	r3, [pc, #328]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006352:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006354:	4b4f      	ldr	r3, [pc, #316]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d007      	beq.n	8006370 <HAL_RCC_OscConfig+0x164>
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	2b18      	cmp	r3, #24
 8006364:	d156      	bne.n	8006414 <HAL_RCC_OscConfig+0x208>
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	f003 0303 	and.w	r3, r3, #3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d151      	bne.n	8006414 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006370:	4b48      	ldr	r3, [pc, #288]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <HAL_RCC_OscConfig+0x17c>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e368      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006388:	4b42      	ldr	r3, [pc, #264]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f023 0219 	bic.w	r2, r3, #25
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	493f      	ldr	r1, [pc, #252]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 8006396:	4313      	orrs	r3, r2
 8006398:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800639a:	f7fd f8b3 	bl	8003504 <HAL_GetTick>
 800639e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063a0:	e008      	b.n	80063b4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063a2:	f7fd f8af 	bl	8003504 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e352      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063b4:	4b37      	ldr	r3, [pc, #220]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0f0      	beq.n	80063a2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063c0:	f7fd f8d0 	bl	8003564 <HAL_GetREVID>
 80063c4:	4603      	mov	r3, r0
 80063c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d817      	bhi.n	80063fe <HAL_RCC_OscConfig+0x1f2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b40      	cmp	r3, #64	; 0x40
 80063d4:	d108      	bne.n	80063e8 <HAL_RCC_OscConfig+0x1dc>
 80063d6:	4b2f      	ldr	r3, [pc, #188]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80063de:	4a2d      	ldr	r2, [pc, #180]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 80063e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063e4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063e6:	e07b      	b.n	80064e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063e8:	4b2a      	ldr	r3, [pc, #168]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	031b      	lsls	r3, r3, #12
 80063f6:	4927      	ldr	r1, [pc, #156]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063fc:	e070      	b.n	80064e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063fe:	4b25      	ldr	r3, [pc, #148]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	061b      	lsls	r3, r3, #24
 800640c:	4921      	ldr	r1, [pc, #132]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 800640e:	4313      	orrs	r3, r2
 8006410:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006412:	e065      	b.n	80064e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d048      	beq.n	80064ae <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800641c:	4b1d      	ldr	r3, [pc, #116]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f023 0219 	bic.w	r2, r3, #25
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	491a      	ldr	r1, [pc, #104]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 800642a:	4313      	orrs	r3, r2
 800642c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642e:	f7fd f869 	bl	8003504 <HAL_GetTick>
 8006432:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006436:	f7fd f865 	bl	8003504 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e308      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006448:	4b12      	ldr	r3, [pc, #72]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006454:	f7fd f886 	bl	8003564 <HAL_GetREVID>
 8006458:	4603      	mov	r3, r0
 800645a:	f241 0203 	movw	r2, #4099	; 0x1003
 800645e:	4293      	cmp	r3, r2
 8006460:	d81a      	bhi.n	8006498 <HAL_RCC_OscConfig+0x28c>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b40      	cmp	r3, #64	; 0x40
 8006468:	d108      	bne.n	800647c <HAL_RCC_OscConfig+0x270>
 800646a:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006472:	4a08      	ldr	r2, [pc, #32]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 8006474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006478:	6053      	str	r3, [r2, #4]
 800647a:	e031      	b.n	80064e0 <HAL_RCC_OscConfig+0x2d4>
 800647c:	4b05      	ldr	r3, [pc, #20]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	031b      	lsls	r3, r3, #12
 800648a:	4902      	ldr	r1, [pc, #8]	; (8006494 <HAL_RCC_OscConfig+0x288>)
 800648c:	4313      	orrs	r3, r2
 800648e:	604b      	str	r3, [r1, #4]
 8006490:	e026      	b.n	80064e0 <HAL_RCC_OscConfig+0x2d4>
 8006492:	bf00      	nop
 8006494:	58024400 	.word	0x58024400
 8006498:	4b9a      	ldr	r3, [pc, #616]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	061b      	lsls	r3, r3, #24
 80064a6:	4997      	ldr	r1, [pc, #604]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	604b      	str	r3, [r1, #4]
 80064ac:	e018      	b.n	80064e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ae:	4b95      	ldr	r3, [pc, #596]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a94      	ldr	r2, [pc, #592]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80064b4:	f023 0301 	bic.w	r3, r3, #1
 80064b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ba:	f7fd f823 	bl	8003504 <HAL_GetTick>
 80064be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064c0:	e008      	b.n	80064d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064c2:	f7fd f81f 	bl	8003504 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e2c2      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064d4:	4b8b      	ldr	r3, [pc, #556]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1f0      	bne.n	80064c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0310 	and.w	r3, r3, #16
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 80a9 	beq.w	8006640 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ee:	4b85      	ldr	r3, [pc, #532]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064f8:	4b82      	ldr	r3, [pc, #520]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80064fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	2b08      	cmp	r3, #8
 8006502:	d007      	beq.n	8006514 <HAL_RCC_OscConfig+0x308>
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	2b18      	cmp	r3, #24
 8006508:	d13a      	bne.n	8006580 <HAL_RCC_OscConfig+0x374>
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	2b01      	cmp	r3, #1
 8006512:	d135      	bne.n	8006580 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006514:	4b7b      	ldr	r3, [pc, #492]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <HAL_RCC_OscConfig+0x320>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	2b80      	cmp	r3, #128	; 0x80
 8006526:	d001      	beq.n	800652c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e296      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800652c:	f7fd f81a 	bl	8003564 <HAL_GetREVID>
 8006530:	4603      	mov	r3, r0
 8006532:	f241 0203 	movw	r2, #4099	; 0x1003
 8006536:	4293      	cmp	r3, r2
 8006538:	d817      	bhi.n	800656a <HAL_RCC_OscConfig+0x35e>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	2b20      	cmp	r3, #32
 8006540:	d108      	bne.n	8006554 <HAL_RCC_OscConfig+0x348>
 8006542:	4b70      	ldr	r3, [pc, #448]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800654a:	4a6e      	ldr	r2, [pc, #440]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800654c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006550:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006552:	e075      	b.n	8006640 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006554:	4b6b      	ldr	r3, [pc, #428]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	069b      	lsls	r3, r3, #26
 8006562:	4968      	ldr	r1, [pc, #416]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006564:	4313      	orrs	r3, r2
 8006566:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006568:	e06a      	b.n	8006640 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800656a:	4b66      	ldr	r3, [pc, #408]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	061b      	lsls	r3, r3, #24
 8006578:	4962      	ldr	r1, [pc, #392]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800657a:	4313      	orrs	r3, r2
 800657c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800657e:	e05f      	b.n	8006640 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d042      	beq.n	800660e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006588:	4b5e      	ldr	r3, [pc, #376]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a5d      	ldr	r2, [pc, #372]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800658e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006594:	f7fc ffb6 	bl	8003504 <HAL_GetTick>
 8006598:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800659c:	f7fc ffb2 	bl	8003504 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e255      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065ae:	4b55      	ldr	r3, [pc, #340]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0f0      	beq.n	800659c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065ba:	f7fc ffd3 	bl	8003564 <HAL_GetREVID>
 80065be:	4603      	mov	r3, r0
 80065c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d817      	bhi.n	80065f8 <HAL_RCC_OscConfig+0x3ec>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d108      	bne.n	80065e2 <HAL_RCC_OscConfig+0x3d6>
 80065d0:	4b4c      	ldr	r3, [pc, #304]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80065d8:	4a4a      	ldr	r2, [pc, #296]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80065da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065de:	6053      	str	r3, [r2, #4]
 80065e0:	e02e      	b.n	8006640 <HAL_RCC_OscConfig+0x434>
 80065e2:	4b48      	ldr	r3, [pc, #288]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	069b      	lsls	r3, r3, #26
 80065f0:	4944      	ldr	r1, [pc, #272]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	604b      	str	r3, [r1, #4]
 80065f6:	e023      	b.n	8006640 <HAL_RCC_OscConfig+0x434>
 80065f8:	4b42      	ldr	r3, [pc, #264]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	061b      	lsls	r3, r3, #24
 8006606:	493f      	ldr	r1, [pc, #252]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006608:	4313      	orrs	r3, r2
 800660a:	60cb      	str	r3, [r1, #12]
 800660c:	e018      	b.n	8006640 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800660e:	4b3d      	ldr	r3, [pc, #244]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a3c      	ldr	r2, [pc, #240]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661a:	f7fc ff73 	bl	8003504 <HAL_GetTick>
 800661e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006620:	e008      	b.n	8006634 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006622:	f7fc ff6f 	bl	8003504 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e212      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006634:	4b33      	ldr	r3, [pc, #204]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1f0      	bne.n	8006622 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b00      	cmp	r3, #0
 800664a:	d036      	beq.n	80066ba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d019      	beq.n	8006688 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006654:	4b2b      	ldr	r3, [pc, #172]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006658:	4a2a      	ldr	r2, [pc, #168]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800665a:	f043 0301 	orr.w	r3, r3, #1
 800665e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006660:	f7fc ff50 	bl	8003504 <HAL_GetTick>
 8006664:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006668:	f7fc ff4c 	bl	8003504 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e1ef      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800667a:	4b22      	ldr	r3, [pc, #136]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800667c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0f0      	beq.n	8006668 <HAL_RCC_OscConfig+0x45c>
 8006686:	e018      	b.n	80066ba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006688:	4b1e      	ldr	r3, [pc, #120]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800668a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800668c:	4a1d      	ldr	r2, [pc, #116]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800668e:	f023 0301 	bic.w	r3, r3, #1
 8006692:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006694:	f7fc ff36 	bl	8003504 <HAL_GetTick>
 8006698:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800669c:	f7fc ff32 	bl	8003504 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e1d5      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066ae:	4b15      	ldr	r3, [pc, #84]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80066b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d039      	beq.n	800673a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d01c      	beq.n	8006708 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066ce:	4b0d      	ldr	r3, [pc, #52]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a0c      	ldr	r2, [pc, #48]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80066d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066da:	f7fc ff13 	bl	8003504 <HAL_GetTick>
 80066de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066e0:	e008      	b.n	80066f4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80066e2:	f7fc ff0f 	bl	8003504 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e1b2      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066f4:	4b03      	ldr	r3, [pc, #12]	; (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0f0      	beq.n	80066e2 <HAL_RCC_OscConfig+0x4d6>
 8006700:	e01b      	b.n	800673a <HAL_RCC_OscConfig+0x52e>
 8006702:	bf00      	nop
 8006704:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006708:	4b9b      	ldr	r3, [pc, #620]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a9a      	ldr	r2, [pc, #616]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 800670e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006712:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006714:	f7fc fef6 	bl	8003504 <HAL_GetTick>
 8006718:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800671a:	e008      	b.n	800672e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800671c:	f7fc fef2 	bl	8003504 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e195      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800672e:	4b92      	ldr	r3, [pc, #584]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1f0      	bne.n	800671c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8081 	beq.w	800684a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006748:	4b8c      	ldr	r3, [pc, #560]	; (800697c <HAL_RCC_OscConfig+0x770>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a8b      	ldr	r2, [pc, #556]	; (800697c <HAL_RCC_OscConfig+0x770>)
 800674e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006752:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006754:	f7fc fed6 	bl	8003504 <HAL_GetTick>
 8006758:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800675c:	f7fc fed2 	bl	8003504 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b64      	cmp	r3, #100	; 0x64
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e175      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800676e:	4b83      	ldr	r3, [pc, #524]	; (800697c <HAL_RCC_OscConfig+0x770>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0f0      	beq.n	800675c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d106      	bne.n	8006790 <HAL_RCC_OscConfig+0x584>
 8006782:	4b7d      	ldr	r3, [pc, #500]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006786:	4a7c      	ldr	r2, [pc, #496]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006788:	f043 0301 	orr.w	r3, r3, #1
 800678c:	6713      	str	r3, [r2, #112]	; 0x70
 800678e:	e02d      	b.n	80067ec <HAL_RCC_OscConfig+0x5e0>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10c      	bne.n	80067b2 <HAL_RCC_OscConfig+0x5a6>
 8006798:	4b77      	ldr	r3, [pc, #476]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 800679a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679c:	4a76      	ldr	r2, [pc, #472]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 800679e:	f023 0301 	bic.w	r3, r3, #1
 80067a2:	6713      	str	r3, [r2, #112]	; 0x70
 80067a4:	4b74      	ldr	r3, [pc, #464]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a8:	4a73      	ldr	r2, [pc, #460]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067aa:	f023 0304 	bic.w	r3, r3, #4
 80067ae:	6713      	str	r3, [r2, #112]	; 0x70
 80067b0:	e01c      	b.n	80067ec <HAL_RCC_OscConfig+0x5e0>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2b05      	cmp	r3, #5
 80067b8:	d10c      	bne.n	80067d4 <HAL_RCC_OscConfig+0x5c8>
 80067ba:	4b6f      	ldr	r3, [pc, #444]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067be:	4a6e      	ldr	r2, [pc, #440]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067c0:	f043 0304 	orr.w	r3, r3, #4
 80067c4:	6713      	str	r3, [r2, #112]	; 0x70
 80067c6:	4b6c      	ldr	r3, [pc, #432]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ca:	4a6b      	ldr	r2, [pc, #428]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067cc:	f043 0301 	orr.w	r3, r3, #1
 80067d0:	6713      	str	r3, [r2, #112]	; 0x70
 80067d2:	e00b      	b.n	80067ec <HAL_RCC_OscConfig+0x5e0>
 80067d4:	4b68      	ldr	r3, [pc, #416]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d8:	4a67      	ldr	r2, [pc, #412]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	6713      	str	r3, [r2, #112]	; 0x70
 80067e0:	4b65      	ldr	r3, [pc, #404]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e4:	4a64      	ldr	r2, [pc, #400]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067e6:	f023 0304 	bic.w	r3, r3, #4
 80067ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d015      	beq.n	8006820 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f4:	f7fc fe86 	bl	8003504 <HAL_GetTick>
 80067f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067fa:	e00a      	b.n	8006812 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067fc:	f7fc fe82 	bl	8003504 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	f241 3288 	movw	r2, #5000	; 0x1388
 800680a:	4293      	cmp	r3, r2
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e123      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006812:	4b59      	ldr	r3, [pc, #356]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0ee      	beq.n	80067fc <HAL_RCC_OscConfig+0x5f0>
 800681e:	e014      	b.n	800684a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006820:	f7fc fe70 	bl	8003504 <HAL_GetTick>
 8006824:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006826:	e00a      	b.n	800683e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006828:	f7fc fe6c 	bl	8003504 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	f241 3288 	movw	r2, #5000	; 0x1388
 8006836:	4293      	cmp	r3, r2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e10d      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800683e:	4b4e      	ldr	r3, [pc, #312]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1ee      	bne.n	8006828 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 8102 	beq.w	8006a58 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006854:	4b48      	ldr	r3, [pc, #288]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800685c:	2b18      	cmp	r3, #24
 800685e:	f000 80bd 	beq.w	80069dc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	2b02      	cmp	r3, #2
 8006868:	f040 809e 	bne.w	80069a8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800686c:	4b42      	ldr	r3, [pc, #264]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a41      	ldr	r2, [pc, #260]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006878:	f7fc fe44 	bl	8003504 <HAL_GetTick>
 800687c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006880:	f7fc fe40 	bl	8003504 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e0e3      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006892:	4b39      	ldr	r3, [pc, #228]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f0      	bne.n	8006880 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800689e:	4b36      	ldr	r3, [pc, #216]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 80068a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068a2:	4b37      	ldr	r3, [pc, #220]	; (8006980 <HAL_RCC_OscConfig+0x774>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80068ae:	0112      	lsls	r2, r2, #4
 80068b0:	430a      	orrs	r2, r1
 80068b2:	4931      	ldr	r1, [pc, #196]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	628b      	str	r3, [r1, #40]	; 0x28
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068bc:	3b01      	subs	r3, #1
 80068be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c6:	3b01      	subs	r3, #1
 80068c8:	025b      	lsls	r3, r3, #9
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	431a      	orrs	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	3b01      	subs	r3, #1
 80068d4:	041b      	lsls	r3, r3, #16
 80068d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e0:	3b01      	subs	r3, #1
 80068e2:	061b      	lsls	r3, r3, #24
 80068e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80068e8:	4923      	ldr	r1, [pc, #140]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80068ee:	4b22      	ldr	r3, [pc, #136]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 80068f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f2:	4a21      	ldr	r2, [pc, #132]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 80068f4:	f023 0301 	bic.w	r3, r3, #1
 80068f8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80068fa:	4b1f      	ldr	r3, [pc, #124]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 80068fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068fe:	4b21      	ldr	r3, [pc, #132]	; (8006984 <HAL_RCC_OscConfig+0x778>)
 8006900:	4013      	ands	r3, r2
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006906:	00d2      	lsls	r2, r2, #3
 8006908:	491b      	ldr	r1, [pc, #108]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 800690a:	4313      	orrs	r3, r2
 800690c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800690e:	4b1a      	ldr	r3, [pc, #104]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006912:	f023 020c 	bic.w	r2, r3, #12
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	4917      	ldr	r1, [pc, #92]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 800691c:	4313      	orrs	r3, r2
 800691e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006920:	4b15      	ldr	r3, [pc, #84]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	f023 0202 	bic.w	r2, r3, #2
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692c:	4912      	ldr	r1, [pc, #72]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 800692e:	4313      	orrs	r3, r2
 8006930:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006932:	4b11      	ldr	r3, [pc, #68]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006936:	4a10      	ldr	r2, [pc, #64]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800693c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800693e:	4b0e      	ldr	r3, [pc, #56]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	4a0d      	ldr	r2, [pc, #52]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006948:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800694a:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 800694c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694e:	4a0a      	ldr	r2, [pc, #40]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006954:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006956:	4b08      	ldr	r3, [pc, #32]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695a:	4a07      	ldr	r2, [pc, #28]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 800695c:	f043 0301 	orr.w	r3, r3, #1
 8006960:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006962:	4b05      	ldr	r3, [pc, #20]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a04      	ldr	r2, [pc, #16]	; (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006968:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800696c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696e:	f7fc fdc9 	bl	8003504 <HAL_GetTick>
 8006972:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006974:	e011      	b.n	800699a <HAL_RCC_OscConfig+0x78e>
 8006976:	bf00      	nop
 8006978:	58024400 	.word	0x58024400
 800697c:	58024800 	.word	0x58024800
 8006980:	fffffc0c 	.word	0xfffffc0c
 8006984:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006988:	f7fc fdbc 	bl	8003504 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e05f      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800699a:	4b32      	ldr	r3, [pc, #200]	; (8006a64 <HAL_RCC_OscConfig+0x858>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d0f0      	beq.n	8006988 <HAL_RCC_OscConfig+0x77c>
 80069a6:	e057      	b.n	8006a58 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069a8:	4b2e      	ldr	r3, [pc, #184]	; (8006a64 <HAL_RCC_OscConfig+0x858>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a2d      	ldr	r2, [pc, #180]	; (8006a64 <HAL_RCC_OscConfig+0x858>)
 80069ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b4:	f7fc fda6 	bl	8003504 <HAL_GetTick>
 80069b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069ba:	e008      	b.n	80069ce <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069bc:	f7fc fda2 	bl	8003504 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e045      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069ce:	4b25      	ldr	r3, [pc, #148]	; (8006a64 <HAL_RCC_OscConfig+0x858>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1f0      	bne.n	80069bc <HAL_RCC_OscConfig+0x7b0>
 80069da:	e03d      	b.n	8006a58 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80069dc:	4b21      	ldr	r3, [pc, #132]	; (8006a64 <HAL_RCC_OscConfig+0x858>)
 80069de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80069e2:	4b20      	ldr	r3, [pc, #128]	; (8006a64 <HAL_RCC_OscConfig+0x858>)
 80069e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d031      	beq.n	8006a54 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f003 0203 	and.w	r2, r3, #3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d12a      	bne.n	8006a54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	091b      	lsrs	r3, r3, #4
 8006a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d122      	bne.n	8006a54 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d11a      	bne.n	8006a54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	0a5b      	lsrs	r3, r3, #9
 8006a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d111      	bne.n	8006a54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	0c1b      	lsrs	r3, r3, #16
 8006a34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d108      	bne.n	8006a54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	0e1b      	lsrs	r3, r3, #24
 8006a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d001      	beq.n	8006a58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e000      	b.n	8006a5a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3730      	adds	r7, #48	; 0x30
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	58024400 	.word	0x58024400

08006a68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e19c      	b.n	8006db6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a7c:	4b8a      	ldr	r3, [pc, #552]	; (8006ca8 <HAL_RCC_ClockConfig+0x240>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 030f 	and.w	r3, r3, #15
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d910      	bls.n	8006aac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a8a:	4b87      	ldr	r3, [pc, #540]	; (8006ca8 <HAL_RCC_ClockConfig+0x240>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f023 020f 	bic.w	r2, r3, #15
 8006a92:	4985      	ldr	r1, [pc, #532]	; (8006ca8 <HAL_RCC_ClockConfig+0x240>)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a9a:	4b83      	ldr	r3, [pc, #524]	; (8006ca8 <HAL_RCC_ClockConfig+0x240>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d001      	beq.n	8006aac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e184      	b.n	8006db6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d010      	beq.n	8006ada <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	4b7b      	ldr	r3, [pc, #492]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d908      	bls.n	8006ada <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ac8:	4b78      	ldr	r3, [pc, #480]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	4975      	ldr	r1, [pc, #468]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d010      	beq.n	8006b08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695a      	ldr	r2, [r3, #20]
 8006aea:	4b70      	ldr	r3, [pc, #448]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d908      	bls.n	8006b08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006af6:	4b6d      	ldr	r3, [pc, #436]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	496a      	ldr	r1, [pc, #424]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0310 	and.w	r3, r3, #16
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d010      	beq.n	8006b36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	699a      	ldr	r2, [r3, #24]
 8006b18:	4b64      	ldr	r3, [pc, #400]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d908      	bls.n	8006b36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b24:	4b61      	ldr	r3, [pc, #388]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	495e      	ldr	r1, [pc, #376]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d010      	beq.n	8006b64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69da      	ldr	r2, [r3, #28]
 8006b46:	4b59      	ldr	r3, [pc, #356]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d908      	bls.n	8006b64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006b52:	4b56      	ldr	r3, [pc, #344]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	4953      	ldr	r1, [pc, #332]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d010      	beq.n	8006b92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	4b4d      	ldr	r3, [pc, #308]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	f003 030f 	and.w	r3, r3, #15
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d908      	bls.n	8006b92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b80:	4b4a      	ldr	r3, [pc, #296]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	f023 020f 	bic.w	r2, r3, #15
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	4947      	ldr	r1, [pc, #284]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d055      	beq.n	8006c4a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006b9e:	4b43      	ldr	r3, [pc, #268]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	4940      	ldr	r1, [pc, #256]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d107      	bne.n	8006bc8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bb8:	4b3c      	ldr	r3, [pc, #240]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d121      	bne.n	8006c08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e0f6      	b.n	8006db6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d107      	bne.n	8006be0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bd0:	4b36      	ldr	r3, [pc, #216]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d115      	bne.n	8006c08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e0ea      	b.n	8006db6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d107      	bne.n	8006bf8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006be8:	4b30      	ldr	r3, [pc, #192]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d109      	bne.n	8006c08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e0de      	b.n	8006db6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bf8:	4b2c      	ldr	r3, [pc, #176]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e0d6      	b.n	8006db6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c08:	4b28      	ldr	r3, [pc, #160]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	f023 0207 	bic.w	r2, r3, #7
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	4925      	ldr	r1, [pc, #148]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c1a:	f7fc fc73 	bl	8003504 <HAL_GetTick>
 8006c1e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c20:	e00a      	b.n	8006c38 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c22:	f7fc fc6f 	bl	8003504 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e0be      	b.n	8006db6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c38:	4b1c      	ldr	r3, [pc, #112]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d1eb      	bne.n	8006c22 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d010      	beq.n	8006c78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	4b14      	ldr	r3, [pc, #80]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	f003 030f 	and.w	r3, r3, #15
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d208      	bcs.n	8006c78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c66:	4b11      	ldr	r3, [pc, #68]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	f023 020f 	bic.w	r2, r3, #15
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	490e      	ldr	r1, [pc, #56]	; (8006cac <HAL_RCC_ClockConfig+0x244>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c78:	4b0b      	ldr	r3, [pc, #44]	; (8006ca8 <HAL_RCC_ClockConfig+0x240>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 030f 	and.w	r3, r3, #15
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d214      	bcs.n	8006cb0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c86:	4b08      	ldr	r3, [pc, #32]	; (8006ca8 <HAL_RCC_ClockConfig+0x240>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f023 020f 	bic.w	r2, r3, #15
 8006c8e:	4906      	ldr	r1, [pc, #24]	; (8006ca8 <HAL_RCC_ClockConfig+0x240>)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c96:	4b04      	ldr	r3, [pc, #16]	; (8006ca8 <HAL_RCC_ClockConfig+0x240>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d005      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e086      	b.n	8006db6 <HAL_RCC_ClockConfig+0x34e>
 8006ca8:	52002000 	.word	0x52002000
 8006cac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d010      	beq.n	8006cde <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	4b3f      	ldr	r3, [pc, #252]	; (8006dc0 <HAL_RCC_ClockConfig+0x358>)
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d208      	bcs.n	8006cde <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ccc:	4b3c      	ldr	r3, [pc, #240]	; (8006dc0 <HAL_RCC_ClockConfig+0x358>)
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	4939      	ldr	r1, [pc, #228]	; (8006dc0 <HAL_RCC_ClockConfig+0x358>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d010      	beq.n	8006d0c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	695a      	ldr	r2, [r3, #20]
 8006cee:	4b34      	ldr	r3, [pc, #208]	; (8006dc0 <HAL_RCC_ClockConfig+0x358>)
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d208      	bcs.n	8006d0c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cfa:	4b31      	ldr	r3, [pc, #196]	; (8006dc0 <HAL_RCC_ClockConfig+0x358>)
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	492e      	ldr	r1, [pc, #184]	; (8006dc0 <HAL_RCC_ClockConfig+0x358>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0310 	and.w	r3, r3, #16
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d010      	beq.n	8006d3a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	699a      	ldr	r2, [r3, #24]
 8006d1c:	4b28      	ldr	r3, [pc, #160]	; (8006dc0 <HAL_RCC_ClockConfig+0x358>)
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d208      	bcs.n	8006d3a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d28:	4b25      	ldr	r3, [pc, #148]	; (8006dc0 <HAL_RCC_ClockConfig+0x358>)
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	4922      	ldr	r1, [pc, #136]	; (8006dc0 <HAL_RCC_ClockConfig+0x358>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0320 	and.w	r3, r3, #32
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d010      	beq.n	8006d68 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	69da      	ldr	r2, [r3, #28]
 8006d4a:	4b1d      	ldr	r3, [pc, #116]	; (8006dc0 <HAL_RCC_ClockConfig+0x358>)
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d208      	bcs.n	8006d68 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006d56:	4b1a      	ldr	r3, [pc, #104]	; (8006dc0 <HAL_RCC_ClockConfig+0x358>)
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	4917      	ldr	r1, [pc, #92]	; (8006dc0 <HAL_RCC_ClockConfig+0x358>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d68:	f000 f844 	bl	8006df4 <HAL_RCC_GetSysClockFreq>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	4b14      	ldr	r3, [pc, #80]	; (8006dc0 <HAL_RCC_ClockConfig+0x358>)
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	0a1b      	lsrs	r3, r3, #8
 8006d74:	f003 030f 	and.w	r3, r3, #15
 8006d78:	4912      	ldr	r1, [pc, #72]	; (8006dc4 <HAL_RCC_ClockConfig+0x35c>)
 8006d7a:	5ccb      	ldrb	r3, [r1, r3]
 8006d7c:	f003 031f 	and.w	r3, r3, #31
 8006d80:	fa22 f303 	lsr.w	r3, r2, r3
 8006d84:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d86:	4b0e      	ldr	r3, [pc, #56]	; (8006dc0 <HAL_RCC_ClockConfig+0x358>)
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	4a0d      	ldr	r2, [pc, #52]	; (8006dc4 <HAL_RCC_ClockConfig+0x35c>)
 8006d90:	5cd3      	ldrb	r3, [r2, r3]
 8006d92:	f003 031f 	and.w	r3, r3, #31
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9c:	4a0a      	ldr	r2, [pc, #40]	; (8006dc8 <HAL_RCC_ClockConfig+0x360>)
 8006d9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006da0:	4a0a      	ldr	r2, [pc, #40]	; (8006dcc <HAL_RCC_ClockConfig+0x364>)
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006da6:	4b0a      	ldr	r3, [pc, #40]	; (8006dd0 <HAL_RCC_ClockConfig+0x368>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fc fb60 	bl	8003470 <HAL_InitTick>
 8006db0:	4603      	mov	r3, r0
 8006db2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	58024400 	.word	0x58024400
 8006dc4:	0800c12c 	.word	0x0800c12c
 8006dc8:	24000004 	.word	0x24000004
 8006dcc:	24000000 	.word	0x24000000
 8006dd0:	24000098 	.word	0x24000098

08006dd4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8006dd8:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <HAL_RCC_EnableCSS+0x1c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a04      	ldr	r2, [pc, #16]	; (8006df0 <HAL_RCC_EnableCSS+0x1c>)
 8006dde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006de2:	6013      	str	r3, [r2, #0]
}
 8006de4:	bf00      	nop
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	58024400 	.word	0x58024400

08006df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b089      	sub	sp, #36	; 0x24
 8006df8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dfa:	4bb3      	ldr	r3, [pc, #716]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e02:	2b18      	cmp	r3, #24
 8006e04:	f200 8155 	bhi.w	80070b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006e08:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0e:	bf00      	nop
 8006e10:	08006e75 	.word	0x08006e75
 8006e14:	080070b3 	.word	0x080070b3
 8006e18:	080070b3 	.word	0x080070b3
 8006e1c:	080070b3 	.word	0x080070b3
 8006e20:	080070b3 	.word	0x080070b3
 8006e24:	080070b3 	.word	0x080070b3
 8006e28:	080070b3 	.word	0x080070b3
 8006e2c:	080070b3 	.word	0x080070b3
 8006e30:	08006e9b 	.word	0x08006e9b
 8006e34:	080070b3 	.word	0x080070b3
 8006e38:	080070b3 	.word	0x080070b3
 8006e3c:	080070b3 	.word	0x080070b3
 8006e40:	080070b3 	.word	0x080070b3
 8006e44:	080070b3 	.word	0x080070b3
 8006e48:	080070b3 	.word	0x080070b3
 8006e4c:	080070b3 	.word	0x080070b3
 8006e50:	08006ea1 	.word	0x08006ea1
 8006e54:	080070b3 	.word	0x080070b3
 8006e58:	080070b3 	.word	0x080070b3
 8006e5c:	080070b3 	.word	0x080070b3
 8006e60:	080070b3 	.word	0x080070b3
 8006e64:	080070b3 	.word	0x080070b3
 8006e68:	080070b3 	.word	0x080070b3
 8006e6c:	080070b3 	.word	0x080070b3
 8006e70:	08006ea7 	.word	0x08006ea7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e74:	4b94      	ldr	r3, [pc, #592]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0320 	and.w	r3, r3, #32
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d009      	beq.n	8006e94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e80:	4b91      	ldr	r3, [pc, #580]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	08db      	lsrs	r3, r3, #3
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	4a90      	ldr	r2, [pc, #576]	; (80070cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006e92:	e111      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e94:	4b8d      	ldr	r3, [pc, #564]	; (80070cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e96:	61bb      	str	r3, [r7, #24]
    break;
 8006e98:	e10e      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006e9a:	4b8d      	ldr	r3, [pc, #564]	; (80070d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e9c:	61bb      	str	r3, [r7, #24]
    break;
 8006e9e:	e10b      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006ea0:	4b8c      	ldr	r3, [pc, #560]	; (80070d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006ea2:	61bb      	str	r3, [r7, #24]
    break;
 8006ea4:	e108      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ea6:	4b88      	ldr	r3, [pc, #544]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006eb0:	4b85      	ldr	r3, [pc, #532]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	091b      	lsrs	r3, r3, #4
 8006eb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006ebc:	4b82      	ldr	r3, [pc, #520]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006ec6:	4b80      	ldr	r3, [pc, #512]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eca:	08db      	lsrs	r3, r3, #3
 8006ecc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	fb02 f303 	mul.w	r3, r2, r3
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ede:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 80e1 	beq.w	80070ac <HAL_RCC_GetSysClockFreq+0x2b8>
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	f000 8083 	beq.w	8006ff8 <HAL_RCC_GetSysClockFreq+0x204>
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	f200 80a1 	bhi.w	800703c <HAL_RCC_GetSysClockFreq+0x248>
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <HAL_RCC_GetSysClockFreq+0x114>
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d056      	beq.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006f06:	e099      	b.n	800703c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f08:	4b6f      	ldr	r3, [pc, #444]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0320 	and.w	r3, r3, #32
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d02d      	beq.n	8006f70 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f14:	4b6c      	ldr	r3, [pc, #432]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	08db      	lsrs	r3, r3, #3
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	4a6b      	ldr	r2, [pc, #428]	; (80070cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
 8006f24:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	ee07 3a90 	vmov	s15, r3
 8006f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3e:	4b62      	ldr	r3, [pc, #392]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f52:	eddf 5a61 	vldr	s11, [pc, #388]	; 80070d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006f6e:	e087      	b.n	8007080 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80070dc <HAL_RCC_GetSysClockFreq+0x2e8>
 8006f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f82:	4b51      	ldr	r3, [pc, #324]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f96:	eddf 5a50 	vldr	s11, [pc, #320]	; 80070d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fb2:	e065      	b.n	8007080 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbe:	eddf 6a48 	vldr	s13, [pc, #288]	; 80070e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc6:	4b40      	ldr	r3, [pc, #256]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fda:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80070d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ff6:	e043      	b.n	8007080 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	eddf 6a38 	vldr	s13, [pc, #224]	; 80070e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700a:	4b2f      	ldr	r3, [pc, #188]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800700c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701a:	ed97 6a02 	vldr	s12, [r7, #8]
 800701e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80070d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800702e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800703a:	e021      	b.n	8007080 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007046:	eddf 6a26 	vldr	s13, [pc, #152]	; 80070e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800704a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704e:	4b1e      	ldr	r3, [pc, #120]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800705e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007062:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80070d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800706a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800706e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800707e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007080:	4b11      	ldr	r3, [pc, #68]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007084:	0a5b      	lsrs	r3, r3, #9
 8007086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800708a:	3301      	adds	r3, #1
 800708c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	ee07 3a90 	vmov	s15, r3
 8007094:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007098:	edd7 6a07 	vldr	s13, [r7, #28]
 800709c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070a4:	ee17 3a90 	vmov	r3, s15
 80070a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80070aa:	e005      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	61bb      	str	r3, [r7, #24]
    break;
 80070b0:	e002      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80070b2:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80070b4:	61bb      	str	r3, [r7, #24]
    break;
 80070b6:	bf00      	nop
  }

  return sysclockfreq;
 80070b8:	69bb      	ldr	r3, [r7, #24]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3724      	adds	r7, #36	; 0x24
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	58024400 	.word	0x58024400
 80070cc:	03d09000 	.word	0x03d09000
 80070d0:	003d0900 	.word	0x003d0900
 80070d4:	017d7840 	.word	0x017d7840
 80070d8:	46000000 	.word	0x46000000
 80070dc:	4c742400 	.word	0x4c742400
 80070e0:	4a742400 	.word	0x4a742400
 80070e4:	4bbebc20 	.word	0x4bbebc20

080070e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80070ee:	f7ff fe81 	bl	8006df4 <HAL_RCC_GetSysClockFreq>
 80070f2:	4602      	mov	r2, r0
 80070f4:	4b10      	ldr	r3, [pc, #64]	; (8007138 <HAL_RCC_GetHCLKFreq+0x50>)
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	0a1b      	lsrs	r3, r3, #8
 80070fa:	f003 030f 	and.w	r3, r3, #15
 80070fe:	490f      	ldr	r1, [pc, #60]	; (800713c <HAL_RCC_GetHCLKFreq+0x54>)
 8007100:	5ccb      	ldrb	r3, [r1, r3]
 8007102:	f003 031f 	and.w	r3, r3, #31
 8007106:	fa22 f303 	lsr.w	r3, r2, r3
 800710a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800710c:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <HAL_RCC_GetHCLKFreq+0x50>)
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	f003 030f 	and.w	r3, r3, #15
 8007114:	4a09      	ldr	r2, [pc, #36]	; (800713c <HAL_RCC_GetHCLKFreq+0x54>)
 8007116:	5cd3      	ldrb	r3, [r2, r3]
 8007118:	f003 031f 	and.w	r3, r3, #31
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	fa22 f303 	lsr.w	r3, r2, r3
 8007122:	4a07      	ldr	r2, [pc, #28]	; (8007140 <HAL_RCC_GetHCLKFreq+0x58>)
 8007124:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007126:	4a07      	ldr	r2, [pc, #28]	; (8007144 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800712c:	4b04      	ldr	r3, [pc, #16]	; (8007140 <HAL_RCC_GetHCLKFreq+0x58>)
 800712e:	681b      	ldr	r3, [r3, #0]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	58024400 	.word	0x58024400
 800713c:	0800c12c 	.word	0x0800c12c
 8007140:	24000004 	.word	0x24000004
 8007144:	24000000 	.word	0x24000000

08007148 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007150:	2300      	movs	r3, #0
 8007152:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007154:	2300      	movs	r3, #0
 8007156:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d03f      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007168:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800716c:	d02a      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800716e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007172:	d824      	bhi.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007174:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007178:	d018      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800717a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800717e:	d81e      	bhi.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007188:	d007      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800718a:	e018      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800718c:	4ba3      	ldr	r3, [pc, #652]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	4aa2      	ldr	r2, [pc, #648]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007196:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007198:	e015      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	3304      	adds	r3, #4
 800719e:	2102      	movs	r1, #2
 80071a0:	4618      	mov	r0, r3
 80071a2:	f001 fff9 	bl	8009198 <RCCEx_PLL2_Config>
 80071a6:	4603      	mov	r3, r0
 80071a8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071aa:	e00c      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3324      	adds	r3, #36	; 0x24
 80071b0:	2102      	movs	r1, #2
 80071b2:	4618      	mov	r0, r3
 80071b4:	f002 f8a2 	bl	80092fc <RCCEx_PLL3_Config>
 80071b8:	4603      	mov	r3, r0
 80071ba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071bc:	e003      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	75fb      	strb	r3, [r7, #23]
      break;
 80071c2:	e000      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80071c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d109      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80071cc:	4b93      	ldr	r3, [pc, #588]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80071ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071d8:	4990      	ldr	r1, [pc, #576]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	650b      	str	r3, [r1, #80]	; 0x50
 80071de:	e001      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d03d      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	d826      	bhi.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80071f8:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80071fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fe:	bf00      	nop
 8007200:	08007215 	.word	0x08007215
 8007204:	08007223 	.word	0x08007223
 8007208:	08007235 	.word	0x08007235
 800720c:	0800724d 	.word	0x0800724d
 8007210:	0800724d 	.word	0x0800724d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007214:	4b81      	ldr	r3, [pc, #516]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	4a80      	ldr	r2, [pc, #512]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800721a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800721e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007220:	e015      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3304      	adds	r3, #4
 8007226:	2100      	movs	r1, #0
 8007228:	4618      	mov	r0, r3
 800722a:	f001 ffb5 	bl	8009198 <RCCEx_PLL2_Config>
 800722e:	4603      	mov	r3, r0
 8007230:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007232:	e00c      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3324      	adds	r3, #36	; 0x24
 8007238:	2100      	movs	r1, #0
 800723a:	4618      	mov	r0, r3
 800723c:	f002 f85e 	bl	80092fc <RCCEx_PLL3_Config>
 8007240:	4603      	mov	r3, r0
 8007242:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007244:	e003      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	75fb      	strb	r3, [r7, #23]
      break;
 800724a:	e000      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800724c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800724e:	7dfb      	ldrb	r3, [r7, #23]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d109      	bne.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007254:	4b71      	ldr	r3, [pc, #452]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007258:	f023 0207 	bic.w	r2, r3, #7
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007260:	496e      	ldr	r1, [pc, #440]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007262:	4313      	orrs	r3, r2
 8007264:	650b      	str	r3, [r1, #80]	; 0x50
 8007266:	e001      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007268:	7dfb      	ldrb	r3, [r7, #23]
 800726a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007274:	2b00      	cmp	r3, #0
 8007276:	d042      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007280:	d02b      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007286:	d825      	bhi.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007288:	2bc0      	cmp	r3, #192	; 0xc0
 800728a:	d028      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x196>
 800728c:	2bc0      	cmp	r3, #192	; 0xc0
 800728e:	d821      	bhi.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007290:	2b80      	cmp	r3, #128	; 0x80
 8007292:	d016      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007294:	2b80      	cmp	r3, #128	; 0x80
 8007296:	d81d      	bhi.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800729c:	2b40      	cmp	r3, #64	; 0x40
 800729e:	d007      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80072a0:	e018      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072a2:	4b5e      	ldr	r3, [pc, #376]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80072a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a6:	4a5d      	ldr	r2, [pc, #372]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80072a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072ae:	e017      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3304      	adds	r3, #4
 80072b4:	2100      	movs	r1, #0
 80072b6:	4618      	mov	r0, r3
 80072b8:	f001 ff6e 	bl	8009198 <RCCEx_PLL2_Config>
 80072bc:	4603      	mov	r3, r0
 80072be:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072c0:	e00e      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3324      	adds	r3, #36	; 0x24
 80072c6:	2100      	movs	r1, #0
 80072c8:	4618      	mov	r0, r3
 80072ca:	f002 f817 	bl	80092fc <RCCEx_PLL3_Config>
 80072ce:	4603      	mov	r3, r0
 80072d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072d2:	e005      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	75fb      	strb	r3, [r7, #23]
      break;
 80072d8:	e002      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80072da:	bf00      	nop
 80072dc:	e000      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80072de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d109      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80072e6:	4b4d      	ldr	r3, [pc, #308]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80072e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f2:	494a      	ldr	r1, [pc, #296]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	650b      	str	r3, [r1, #80]	; 0x50
 80072f8:	e001      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
 80072fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007306:	2b00      	cmp	r3, #0
 8007308:	d049      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007310:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007314:	d030      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007316:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800731a:	d82a      	bhi.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800731c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007320:	d02c      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007322:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007326:	d824      	bhi.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007328:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800732c:	d018      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800732e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007332:	d81e      	bhi.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007338:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800733c:	d007      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800733e:	e018      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007340:	4b36      	ldr	r3, [pc, #216]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007344:	4a35      	ldr	r2, [pc, #212]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800734a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800734c:	e017      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3304      	adds	r3, #4
 8007352:	2100      	movs	r1, #0
 8007354:	4618      	mov	r0, r3
 8007356:	f001 ff1f 	bl	8009198 <RCCEx_PLL2_Config>
 800735a:	4603      	mov	r3, r0
 800735c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800735e:	e00e      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3324      	adds	r3, #36	; 0x24
 8007364:	2100      	movs	r1, #0
 8007366:	4618      	mov	r0, r3
 8007368:	f001 ffc8 	bl	80092fc <RCCEx_PLL3_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007370:	e005      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	75fb      	strb	r3, [r7, #23]
      break;
 8007376:	e002      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007378:	bf00      	nop
 800737a:	e000      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800737c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800737e:	7dfb      	ldrb	r3, [r7, #23]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10a      	bne.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007384:	4b25      	ldr	r3, [pc, #148]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007388:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007392:	4922      	ldr	r1, [pc, #136]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007394:	4313      	orrs	r3, r2
 8007396:	658b      	str	r3, [r1, #88]	; 0x58
 8007398:	e001      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d04b      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073b4:	d030      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80073b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073ba:	d82a      	bhi.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80073bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80073c0:	d02e      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80073c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80073c6:	d824      	bhi.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80073c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073cc:	d018      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80073ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073d2:	d81e      	bhi.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80073d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073dc:	d007      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80073de:	e018      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e0:	4b0e      	ldr	r3, [pc, #56]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	4a0d      	ldr	r2, [pc, #52]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073ec:	e019      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	3304      	adds	r3, #4
 80073f2:	2100      	movs	r1, #0
 80073f4:	4618      	mov	r0, r3
 80073f6:	f001 fecf 	bl	8009198 <RCCEx_PLL2_Config>
 80073fa:	4603      	mov	r3, r0
 80073fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80073fe:	e010      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	3324      	adds	r3, #36	; 0x24
 8007404:	2100      	movs	r1, #0
 8007406:	4618      	mov	r0, r3
 8007408:	f001 ff78 	bl	80092fc <RCCEx_PLL3_Config>
 800740c:	4603      	mov	r3, r0
 800740e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007410:	e007      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	75fb      	strb	r3, [r7, #23]
      break;
 8007416:	e004      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007418:	bf00      	nop
 800741a:	e002      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800741c:	58024400 	.word	0x58024400
      break;
 8007420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10a      	bne.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007428:	4b99      	ldr	r3, [pc, #612]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800742a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007436:	4996      	ldr	r1, [pc, #600]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007438:	4313      	orrs	r3, r2
 800743a:	658b      	str	r3, [r1, #88]	; 0x58
 800743c:	e001      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800743e:	7dfb      	ldrb	r3, [r7, #23]
 8007440:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d032      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007452:	2b30      	cmp	r3, #48	; 0x30
 8007454:	d01c      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007456:	2b30      	cmp	r3, #48	; 0x30
 8007458:	d817      	bhi.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800745a:	2b20      	cmp	r3, #32
 800745c:	d00c      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800745e:	2b20      	cmp	r3, #32
 8007460:	d813      	bhi.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007462:	2b00      	cmp	r3, #0
 8007464:	d016      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007466:	2b10      	cmp	r3, #16
 8007468:	d10f      	bne.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800746a:	4b89      	ldr	r3, [pc, #548]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746e:	4a88      	ldr	r2, [pc, #544]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007474:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007476:	e00e      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3304      	adds	r3, #4
 800747c:	2102      	movs	r1, #2
 800747e:	4618      	mov	r0, r3
 8007480:	f001 fe8a 	bl	8009198 <RCCEx_PLL2_Config>
 8007484:	4603      	mov	r3, r0
 8007486:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007488:	e005      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	75fb      	strb	r3, [r7, #23]
      break;
 800748e:	e002      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007490:	bf00      	nop
 8007492:	e000      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007496:	7dfb      	ldrb	r3, [r7, #23]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d109      	bne.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800749c:	4b7c      	ldr	r3, [pc, #496]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800749e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074a8:	4979      	ldr	r1, [pc, #484]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 80074ae:	e001      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
 80074b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d047      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074c8:	d030      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80074ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074ce:	d82a      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80074d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074d4:	d02c      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80074d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074da:	d824      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80074dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e0:	d018      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80074e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e6:	d81e      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80074ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f0:	d007      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80074f2:	e018      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074f4:	4b66      	ldr	r3, [pc, #408]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	4a65      	ldr	r2, [pc, #404]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80074fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007500:	e017      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3304      	adds	r3, #4
 8007506:	2100      	movs	r1, #0
 8007508:	4618      	mov	r0, r3
 800750a:	f001 fe45 	bl	8009198 <RCCEx_PLL2_Config>
 800750e:	4603      	mov	r3, r0
 8007510:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007512:	e00e      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3324      	adds	r3, #36	; 0x24
 8007518:	2100      	movs	r1, #0
 800751a:	4618      	mov	r0, r3
 800751c:	f001 feee 	bl	80092fc <RCCEx_PLL3_Config>
 8007520:	4603      	mov	r3, r0
 8007522:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007524:	e005      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	75fb      	strb	r3, [r7, #23]
      break;
 800752a:	e002      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800752c:	bf00      	nop
 800752e:	e000      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007530:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007532:	7dfb      	ldrb	r3, [r7, #23]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d109      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007538:	4b55      	ldr	r3, [pc, #340]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800753a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007544:	4952      	ldr	r1, [pc, #328]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007546:	4313      	orrs	r3, r2
 8007548:	650b      	str	r3, [r1, #80]	; 0x50
 800754a:	e001      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754c:	7dfb      	ldrb	r3, [r7, #23]
 800754e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d049      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007564:	d02e      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007566:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800756a:	d828      	bhi.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x476>
 800756c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007570:	d02a      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007572:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007576:	d822      	bhi.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007578:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800757c:	d026      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800757e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007582:	d81c      	bhi.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007588:	d010      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x464>
 800758a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800758e:	d816      	bhi.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01d      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007598:	d111      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3304      	adds	r3, #4
 800759e:	2101      	movs	r1, #1
 80075a0:	4618      	mov	r0, r3
 80075a2:	f001 fdf9 	bl	8009198 <RCCEx_PLL2_Config>
 80075a6:	4603      	mov	r3, r0
 80075a8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80075aa:	e012      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	3324      	adds	r3, #36	; 0x24
 80075b0:	2101      	movs	r1, #1
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 fea2 	bl	80092fc <RCCEx_PLL3_Config>
 80075b8:	4603      	mov	r3, r0
 80075ba:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80075bc:	e009      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	75fb      	strb	r3, [r7, #23]
      break;
 80075c2:	e006      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80075c4:	bf00      	nop
 80075c6:	e004      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80075c8:	bf00      	nop
 80075ca:	e002      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80075cc:	bf00      	nop
 80075ce:	e000      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80075d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075d2:	7dfb      	ldrb	r3, [r7, #23]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d109      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80075d8:	4b2d      	ldr	r3, [pc, #180]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80075da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075dc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e4:	492a      	ldr	r1, [pc, #168]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	650b      	str	r3, [r1, #80]	; 0x50
 80075ea:	e001      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d04d      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007602:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007606:	d02e      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800760c:	d828      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800760e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007612:	d02a      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007618:	d822      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800761a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800761e:	d026      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007620:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007624:	d81c      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800762a:	d010      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800762c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007630:	d816      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d01d      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800763a:	d111      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3304      	adds	r3, #4
 8007640:	2101      	movs	r1, #1
 8007642:	4618      	mov	r0, r3
 8007644:	f001 fda8 	bl	8009198 <RCCEx_PLL2_Config>
 8007648:	4603      	mov	r3, r0
 800764a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800764c:	e012      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	3324      	adds	r3, #36	; 0x24
 8007652:	2101      	movs	r1, #1
 8007654:	4618      	mov	r0, r3
 8007656:	f001 fe51 	bl	80092fc <RCCEx_PLL3_Config>
 800765a:	4603      	mov	r3, r0
 800765c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800765e:	e009      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	75fb      	strb	r3, [r7, #23]
      break;
 8007664:	e006      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007666:	bf00      	nop
 8007668:	e004      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800766a:	bf00      	nop
 800766c:	e002      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800766e:	bf00      	nop
 8007670:	e000      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007674:	7dfb      	ldrb	r3, [r7, #23]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10c      	bne.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800767a:	4b05      	ldr	r3, [pc, #20]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800767c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007688:	4901      	ldr	r1, [pc, #4]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800768a:	4313      	orrs	r3, r2
 800768c:	658b      	str	r3, [r1, #88]	; 0x58
 800768e:	e003      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007690:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007694:	7dfb      	ldrb	r3, [r7, #23]
 8007696:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d02f      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ac:	d00e      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x584>
 80076ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b2:	d814      	bhi.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x596>
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d015      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80076b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076bc:	d10f      	bne.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076be:	4baf      	ldr	r3, [pc, #700]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c2:	4aae      	ldr	r2, [pc, #696]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80076ca:	e00c      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3304      	adds	r3, #4
 80076d0:	2101      	movs	r1, #1
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 fd60 	bl	8009198 <RCCEx_PLL2_Config>
 80076d8:	4603      	mov	r3, r0
 80076da:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80076dc:	e003      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	75fb      	strb	r3, [r7, #23]
      break;
 80076e2:	e000      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80076e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d109      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076ec:	4ba3      	ldr	r3, [pc, #652]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076f8:	49a0      	ldr	r1, [pc, #640]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	650b      	str	r3, [r1, #80]	; 0x50
 80076fe:	e001      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d032      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007714:	2b03      	cmp	r3, #3
 8007716:	d81b      	bhi.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007718:	a201      	add	r2, pc, #4	; (adr r2, 8007720 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800771a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771e:	bf00      	nop
 8007720:	08007757 	.word	0x08007757
 8007724:	08007731 	.word	0x08007731
 8007728:	0800773f 	.word	0x0800773f
 800772c:	08007757 	.word	0x08007757
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007730:	4b92      	ldr	r3, [pc, #584]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	4a91      	ldr	r2, [pc, #580]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800773a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800773c:	e00c      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3304      	adds	r3, #4
 8007742:	2102      	movs	r1, #2
 8007744:	4618      	mov	r0, r3
 8007746:	f001 fd27 	bl	8009198 <RCCEx_PLL2_Config>
 800774a:	4603      	mov	r3, r0
 800774c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800774e:	e003      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	75fb      	strb	r3, [r7, #23]
      break;
 8007754:	e000      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007758:	7dfb      	ldrb	r3, [r7, #23]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d109      	bne.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800775e:	4b87      	ldr	r3, [pc, #540]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007762:	f023 0203 	bic.w	r2, r3, #3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776a:	4984      	ldr	r1, [pc, #528]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800776c:	4313      	orrs	r3, r2
 800776e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007770:	e001      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007772:	7dfb      	ldrb	r3, [r7, #23]
 8007774:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 8086 	beq.w	8007890 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007784:	4b7e      	ldr	r3, [pc, #504]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a7d      	ldr	r2, [pc, #500]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800778a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800778e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007790:	f7fb feb8 	bl	8003504 <HAL_GetTick>
 8007794:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007796:	e009      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007798:	f7fb feb4 	bl	8003504 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b64      	cmp	r3, #100	; 0x64
 80077a4:	d902      	bls.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	75fb      	strb	r3, [r7, #23]
        break;
 80077aa:	e005      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077ac:	4b74      	ldr	r3, [pc, #464]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0ef      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d166      	bne.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80077be:	4b6f      	ldr	r3, [pc, #444]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80077c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077c8:	4053      	eors	r3, r2
 80077ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d013      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077d2:	4b6a      	ldr	r3, [pc, #424]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80077d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077da:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077dc:	4b67      	ldr	r3, [pc, #412]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80077de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e0:	4a66      	ldr	r2, [pc, #408]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80077e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077e6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077e8:	4b64      	ldr	r3, [pc, #400]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80077ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ec:	4a63      	ldr	r2, [pc, #396]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80077ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077f2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80077f4:	4a61      	ldr	r2, [pc, #388]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007804:	d115      	bne.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007806:	f7fb fe7d 	bl	8003504 <HAL_GetTick>
 800780a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800780c:	e00b      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800780e:	f7fb fe79 	bl	8003504 <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	f241 3288 	movw	r2, #5000	; 0x1388
 800781c:	4293      	cmp	r3, r2
 800781e:	d902      	bls.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	75fb      	strb	r3, [r7, #23]
            break;
 8007824:	e005      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007826:	4b55      	ldr	r3, [pc, #340]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0ed      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007832:	7dfb      	ldrb	r3, [r7, #23]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d126      	bne.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800783e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007846:	d10d      	bne.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007848:	4b4c      	ldr	r3, [pc, #304]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007856:	0919      	lsrs	r1, r3, #4
 8007858:	4b4a      	ldr	r3, [pc, #296]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800785a:	400b      	ands	r3, r1
 800785c:	4947      	ldr	r1, [pc, #284]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800785e:	4313      	orrs	r3, r2
 8007860:	610b      	str	r3, [r1, #16]
 8007862:	e005      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007864:	4b45      	ldr	r3, [pc, #276]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	4a44      	ldr	r2, [pc, #272]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800786a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800786e:	6113      	str	r3, [r2, #16]
 8007870:	4b42      	ldr	r3, [pc, #264]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007872:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800787a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800787e:	493f      	ldr	r1, [pc, #252]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007880:	4313      	orrs	r3, r2
 8007882:	670b      	str	r3, [r1, #112]	; 0x70
 8007884:	e004      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007886:	7dfb      	ldrb	r3, [r7, #23]
 8007888:	75bb      	strb	r3, [r7, #22]
 800788a:	e001      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800788c:	7dfb      	ldrb	r3, [r7, #23]
 800788e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 8085 	beq.w	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078a2:	2b28      	cmp	r3, #40	; 0x28
 80078a4:	d866      	bhi.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80078a6:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80078a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ac:	08007989 	.word	0x08007989
 80078b0:	08007975 	.word	0x08007975
 80078b4:	08007975 	.word	0x08007975
 80078b8:	08007975 	.word	0x08007975
 80078bc:	08007975 	.word	0x08007975
 80078c0:	08007975 	.word	0x08007975
 80078c4:	08007975 	.word	0x08007975
 80078c8:	08007975 	.word	0x08007975
 80078cc:	08007951 	.word	0x08007951
 80078d0:	08007975 	.word	0x08007975
 80078d4:	08007975 	.word	0x08007975
 80078d8:	08007975 	.word	0x08007975
 80078dc:	08007975 	.word	0x08007975
 80078e0:	08007975 	.word	0x08007975
 80078e4:	08007975 	.word	0x08007975
 80078e8:	08007975 	.word	0x08007975
 80078ec:	08007963 	.word	0x08007963
 80078f0:	08007975 	.word	0x08007975
 80078f4:	08007975 	.word	0x08007975
 80078f8:	08007975 	.word	0x08007975
 80078fc:	08007975 	.word	0x08007975
 8007900:	08007975 	.word	0x08007975
 8007904:	08007975 	.word	0x08007975
 8007908:	08007975 	.word	0x08007975
 800790c:	08007989 	.word	0x08007989
 8007910:	08007975 	.word	0x08007975
 8007914:	08007975 	.word	0x08007975
 8007918:	08007975 	.word	0x08007975
 800791c:	08007975 	.word	0x08007975
 8007920:	08007975 	.word	0x08007975
 8007924:	08007975 	.word	0x08007975
 8007928:	08007975 	.word	0x08007975
 800792c:	08007989 	.word	0x08007989
 8007930:	08007975 	.word	0x08007975
 8007934:	08007975 	.word	0x08007975
 8007938:	08007975 	.word	0x08007975
 800793c:	08007975 	.word	0x08007975
 8007940:	08007975 	.word	0x08007975
 8007944:	08007975 	.word	0x08007975
 8007948:	08007975 	.word	0x08007975
 800794c:	08007989 	.word	0x08007989
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3304      	adds	r3, #4
 8007954:	2101      	movs	r1, #1
 8007956:	4618      	mov	r0, r3
 8007958:	f001 fc1e 	bl	8009198 <RCCEx_PLL2_Config>
 800795c:	4603      	mov	r3, r0
 800795e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007960:	e013      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3324      	adds	r3, #36	; 0x24
 8007966:	2101      	movs	r1, #1
 8007968:	4618      	mov	r0, r3
 800796a:	f001 fcc7 	bl	80092fc <RCCEx_PLL3_Config>
 800796e:	4603      	mov	r3, r0
 8007970:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007972:	e00a      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	75fb      	strb	r3, [r7, #23]
      break;
 8007978:	e007      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800797a:	bf00      	nop
 800797c:	58024400 	.word	0x58024400
 8007980:	58024800 	.word	0x58024800
 8007984:	00ffffcf 	.word	0x00ffffcf
      break;
 8007988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d109      	bne.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007990:	4b96      	ldr	r3, [pc, #600]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007994:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800799c:	4993      	ldr	r1, [pc, #588]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	654b      	str	r3, [r1, #84]	; 0x54
 80079a2:	e001      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
 80079a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0302 	and.w	r3, r3, #2
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d038      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079b8:	2b05      	cmp	r3, #5
 80079ba:	d821      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80079bc:	a201      	add	r2, pc, #4	; (adr r2, 80079c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	08007a07 	.word	0x08007a07
 80079c8:	080079dd 	.word	0x080079dd
 80079cc:	080079ef 	.word	0x080079ef
 80079d0:	08007a07 	.word	0x08007a07
 80079d4:	08007a07 	.word	0x08007a07
 80079d8:	08007a07 	.word	0x08007a07
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3304      	adds	r3, #4
 80079e0:	2101      	movs	r1, #1
 80079e2:	4618      	mov	r0, r3
 80079e4:	f001 fbd8 	bl	8009198 <RCCEx_PLL2_Config>
 80079e8:	4603      	mov	r3, r0
 80079ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80079ec:	e00c      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3324      	adds	r3, #36	; 0x24
 80079f2:	2101      	movs	r1, #1
 80079f4:	4618      	mov	r0, r3
 80079f6:	f001 fc81 	bl	80092fc <RCCEx_PLL3_Config>
 80079fa:	4603      	mov	r3, r0
 80079fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80079fe:	e003      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	75fb      	strb	r3, [r7, #23]
      break;
 8007a04:	e000      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d109      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a0e:	4b77      	ldr	r3, [pc, #476]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a12:	f023 0207 	bic.w	r2, r3, #7
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a1a:	4974      	ldr	r1, [pc, #464]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	654b      	str	r3, [r1, #84]	; 0x54
 8007a20:	e001      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a22:	7dfb      	ldrb	r3, [r7, #23]
 8007a24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0304 	and.w	r3, r3, #4
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d03a      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a38:	2b05      	cmp	r3, #5
 8007a3a:	d821      	bhi.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007a3c:	a201      	add	r2, pc, #4	; (adr r2, 8007a44 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007a87 	.word	0x08007a87
 8007a48:	08007a5d 	.word	0x08007a5d
 8007a4c:	08007a6f 	.word	0x08007a6f
 8007a50:	08007a87 	.word	0x08007a87
 8007a54:	08007a87 	.word	0x08007a87
 8007a58:	08007a87 	.word	0x08007a87
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	2101      	movs	r1, #1
 8007a62:	4618      	mov	r0, r3
 8007a64:	f001 fb98 	bl	8009198 <RCCEx_PLL2_Config>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a6c:	e00c      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3324      	adds	r3, #36	; 0x24
 8007a72:	2101      	movs	r1, #1
 8007a74:	4618      	mov	r0, r3
 8007a76:	f001 fc41 	bl	80092fc <RCCEx_PLL3_Config>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a7e:	e003      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	75fb      	strb	r3, [r7, #23]
      break;
 8007a84:	e000      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10a      	bne.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a8e:	4b57      	ldr	r3, [pc, #348]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a92:	f023 0207 	bic.w	r2, r3, #7
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a9c:	4953      	ldr	r1, [pc, #332]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	658b      	str	r3, [r1, #88]	; 0x58
 8007aa2:	e001      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa4:	7dfb      	ldrb	r3, [r7, #23]
 8007aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0320 	and.w	r3, r3, #32
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d04b      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007abe:	d02e      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ac4:	d828      	bhi.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aca:	d02a      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad0:	d822      	bhi.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007ad2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ad6:	d026      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007ad8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007adc:	d81c      	bhi.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ae2:	d010      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ae8:	d816      	bhi.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d01d      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007af2:	d111      	bne.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3304      	adds	r3, #4
 8007af8:	2100      	movs	r1, #0
 8007afa:	4618      	mov	r0, r3
 8007afc:	f001 fb4c 	bl	8009198 <RCCEx_PLL2_Config>
 8007b00:	4603      	mov	r3, r0
 8007b02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007b04:	e012      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	3324      	adds	r3, #36	; 0x24
 8007b0a:	2102      	movs	r1, #2
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f001 fbf5 	bl	80092fc <RCCEx_PLL3_Config>
 8007b12:	4603      	mov	r3, r0
 8007b14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007b16:	e009      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b1c:	e006      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007b1e:	bf00      	nop
 8007b20:	e004      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007b22:	bf00      	nop
 8007b24:	e002      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007b26:	bf00      	nop
 8007b28:	e000      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10a      	bne.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b32:	4b2e      	ldr	r3, [pc, #184]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b40:	492a      	ldr	r1, [pc, #168]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	654b      	str	r3, [r1, #84]	; 0x54
 8007b46:	e001      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
 8007b4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d04d      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b62:	d02e      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007b64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b68:	d828      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b6e:	d02a      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b74:	d822      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007b76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b7a:	d026      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007b7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b80:	d81c      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b86:	d010      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b8c:	d816      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d01d      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b96:	d111      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f001 fafa 	bl	8009198 <RCCEx_PLL2_Config>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007ba8:	e012      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3324      	adds	r3, #36	; 0x24
 8007bae:	2102      	movs	r1, #2
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f001 fba3 	bl	80092fc <RCCEx_PLL3_Config>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007bba:	e009      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc0:	e006      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007bc2:	bf00      	nop
 8007bc4:	e004      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007bc6:	bf00      	nop
 8007bc8:	e002      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007bca:	bf00      	nop
 8007bcc:	e000      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10c      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007bd6:	4b05      	ldr	r3, [pc, #20]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bda:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007be4:	4901      	ldr	r1, [pc, #4]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	658b      	str	r3, [r1, #88]	; 0x58
 8007bea:	e003      	b.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007bec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d04b      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007c0a:	d02e      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007c0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007c10:	d828      	bhi.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c16:	d02a      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c1c:	d822      	bhi.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007c1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007c22:	d026      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007c24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007c28:	d81c      	bhi.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007c2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c2e:	d010      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c34:	d816      	bhi.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d01d      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c3e:	d111      	bne.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3304      	adds	r3, #4
 8007c44:	2100      	movs	r1, #0
 8007c46:	4618      	mov	r0, r3
 8007c48:	f001 faa6 	bl	8009198 <RCCEx_PLL2_Config>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c50:	e012      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	3324      	adds	r3, #36	; 0x24
 8007c56:	2102      	movs	r1, #2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 fb4f 	bl	80092fc <RCCEx_PLL3_Config>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c62:	e009      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	75fb      	strb	r3, [r7, #23]
      break;
 8007c68:	e006      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007c6a:	bf00      	nop
 8007c6c:	e004      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007c6e:	bf00      	nop
 8007c70:	e002      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007c72:	bf00      	nop
 8007c74:	e000      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c7e:	4b9d      	ldr	r3, [pc, #628]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c8c:	4999      	ldr	r1, [pc, #612]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	658b      	str	r3, [r1, #88]	; 0x58
 8007c92:	e001      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
 8007c96:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01a      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cae:	d10a      	bne.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3324      	adds	r3, #36	; 0x24
 8007cb4:	2102      	movs	r1, #2
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f001 fb20 	bl	80092fc <RCCEx_PLL3_Config>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007cc6:	4b8b      	ldr	r3, [pc, #556]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cd4:	4987      	ldr	r1, [pc, #540]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0310 	and.w	r3, r3, #16
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d01a      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf0:	d10a      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	3324      	adds	r3, #36	; 0x24
 8007cf6:	2102      	movs	r1, #2
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f001 faff 	bl	80092fc <RCCEx_PLL3_Config>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d08:	4b7a      	ldr	r3, [pc, #488]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d16:	4977      	ldr	r1, [pc, #476]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d034      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d32:	d01d      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007d34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d38:	d817      	bhi.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d42:	d009      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007d44:	e011      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f001 fa23 	bl	8009198 <RCCEx_PLL2_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d56:	e00c      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3324      	adds	r3, #36	; 0x24
 8007d5c:	2102      	movs	r1, #2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f001 facc 	bl	80092fc <RCCEx_PLL3_Config>
 8007d64:	4603      	mov	r3, r0
 8007d66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d68:	e003      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d6e:	e000      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007d70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10a      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d78:	4b5e      	ldr	r3, [pc, #376]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d86:	495b      	ldr	r1, [pc, #364]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	658b      	str	r3, [r1, #88]	; 0x58
 8007d8c:	e001      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8e:	7dfb      	ldrb	r3, [r7, #23]
 8007d90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d033      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007da4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007da8:	d01c      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007daa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007dae:	d816      	bhi.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007db4:	d003      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007db6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dba:	d007      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007dbc:	e00f      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dbe:	4b4d      	ldr	r3, [pc, #308]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc2:	4a4c      	ldr	r2, [pc, #304]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007dca:	e00c      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3324      	adds	r3, #36	; 0x24
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f001 fa92 	bl	80092fc <RCCEx_PLL3_Config>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007ddc:	e003      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	75fb      	strb	r3, [r7, #23]
      break;
 8007de2:	e000      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007de6:	7dfb      	ldrb	r3, [r7, #23]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10a      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dec:	4b41      	ldr	r3, [pc, #260]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dfa:	493e      	ldr	r1, [pc, #248]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	654b      	str	r3, [r1, #84]	; 0x54
 8007e00:	e001      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d029      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e1e:	d007      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007e20:	e00f      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e22:	4b34      	ldr	r3, [pc, #208]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e26:	4a33      	ldr	r2, [pc, #204]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007e2e:	e00b      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3304      	adds	r3, #4
 8007e34:	2102      	movs	r1, #2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f001 f9ae 	bl	8009198 <RCCEx_PLL2_Config>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007e40:	e002      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	75fb      	strb	r3, [r7, #23]
      break;
 8007e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d109      	bne.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e4e:	4b29      	ldr	r3, [pc, #164]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e5a:	4926      	ldr	r1, [pc, #152]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e60:	e001      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
 8007e64:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00a      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	3324      	adds	r3, #36	; 0x24
 8007e76:	2102      	movs	r1, #2
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f001 fa3f 	bl	80092fc <RCCEx_PLL3_Config>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d033      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e9c:	d017      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007e9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea2:	d811      	bhi.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ea8:	d013      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eae:	d80b      	bhi.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d010      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eb8:	d106      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eba:	4b0e      	ldr	r3, [pc, #56]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebe:	4a0d      	ldr	r2, [pc, #52]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007ec6:	e007      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	75fb      	strb	r3, [r7, #23]
      break;
 8007ecc:	e004      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007ece:	bf00      	nop
 8007ed0:	e002      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007ed2:	bf00      	nop
 8007ed4:	e000      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10c      	bne.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ede:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eea:	4902      	ldr	r1, [pc, #8]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	654b      	str	r3, [r1, #84]	; 0x54
 8007ef0:	e004      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007ef2:	bf00      	nop
 8007ef4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef8:	7dfb      	ldrb	r3, [r7, #23]
 8007efa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d008      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f08:	4b31      	ldr	r3, [pc, #196]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f14:	492e      	ldr	r1, [pc, #184]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d009      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007f26:	4b2a      	ldr	r3, [pc, #168]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f34:	4926      	ldr	r1, [pc, #152]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d008      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f46:	4b22      	ldr	r3, [pc, #136]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f52:	491f      	ldr	r1, [pc, #124]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00d      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f64:	4b1a      	ldr	r3, [pc, #104]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	4a19      	ldr	r2, [pc, #100]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f6e:	6113      	str	r3, [r2, #16]
 8007f70:	4b17      	ldr	r3, [pc, #92]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f72:	691a      	ldr	r2, [r3, #16]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f7a:	4915      	ldr	r1, [pc, #84]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	da08      	bge.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f88:	4b11      	ldr	r3, [pc, #68]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f94:	490e      	ldr	r1, [pc, #56]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d009      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007fa6:	4b0a      	ldr	r3, [pc, #40]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007faa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb4:	4906      	ldr	r1, [pc, #24]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007fba:	7dbb      	ldrb	r3, [r7, #22]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	e000      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3718      	adds	r7, #24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	58024400 	.word	0x58024400

08007fd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b090      	sub	sp, #64	; 0x40
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fe2:	f040 8095 	bne.w	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007fe6:	4b97      	ldr	r3, [pc, #604]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fea:	f003 0307 	and.w	r3, r3, #7
 8007fee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	f200 8088 	bhi.w	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007ff8:	a201      	add	r2, pc, #4	; (adr r2, 8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffe:	bf00      	nop
 8008000:	08008015 	.word	0x08008015
 8008004:	0800803d 	.word	0x0800803d
 8008008:	08008065 	.word	0x08008065
 800800c:	08008101 	.word	0x08008101
 8008010:	0800808d 	.word	0x0800808d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008014:	4b8b      	ldr	r3, [pc, #556]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800801c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008020:	d108      	bne.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008026:	4618      	mov	r0, r3
 8008028:	f000 ff64 	bl	8008ef4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008030:	f000 bc94 	b.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008038:	f000 bc90 	b.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800803c:	4b81      	ldr	r3, [pc, #516]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008044:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008048:	d108      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800804a:	f107 0318 	add.w	r3, r7, #24
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fca8 	bl	80089a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008058:	f000 bc80 	b.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800805c:	2300      	movs	r3, #0
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008060:	f000 bc7c 	b.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008064:	4b77      	ldr	r3, [pc, #476]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800806c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008070:	d108      	bne.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008072:	f107 030c 	add.w	r3, r7, #12
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fde8 	bl	8008c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008080:	f000 bc6c 	b.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008088:	f000 bc68 	b.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800808c:	4b6d      	ldr	r3, [pc, #436]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800808e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008090:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008094:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008096:	4b6b      	ldr	r3, [pc, #428]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0304 	and.w	r3, r3, #4
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d10c      	bne.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80080a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d109      	bne.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080a8:	4b66      	ldr	r3, [pc, #408]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	08db      	lsrs	r3, r3, #3
 80080ae:	f003 0303 	and.w	r3, r3, #3
 80080b2:	4a65      	ldr	r2, [pc, #404]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80080b4:	fa22 f303 	lsr.w	r3, r2, r3
 80080b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080ba:	e01f      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080bc:	4b61      	ldr	r3, [pc, #388]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c8:	d106      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80080ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080d0:	d102      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80080d2:	4b5e      	ldr	r3, [pc, #376]	; (800824c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080d6:	e011      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080d8:	4b5a      	ldr	r3, [pc, #360]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080e4:	d106      	bne.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80080e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080ec:	d102      	bne.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80080ee:	4b58      	ldr	r3, [pc, #352]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80080f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080f2:	e003      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80080f4:	2300      	movs	r3, #0
 80080f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80080f8:	f000 bc30 	b.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80080fc:	f000 bc2e 	b.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008100:	4b54      	ldr	r3, [pc, #336]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008104:	f000 bc2a 	b.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800810c:	f000 bc26 	b.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008116:	f040 809f 	bne.w	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800811a:	4b4a      	ldr	r3, [pc, #296]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800811c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800811e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008122:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800812a:	d04d      	beq.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008132:	f200 8084 	bhi.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	2bc0      	cmp	r3, #192	; 0xc0
 800813a:	d07d      	beq.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800813c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813e:	2bc0      	cmp	r3, #192	; 0xc0
 8008140:	d87d      	bhi.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	2b80      	cmp	r3, #128	; 0x80
 8008146:	d02d      	beq.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	2b80      	cmp	r3, #128	; 0x80
 800814c:	d877      	bhi.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	2b40      	cmp	r3, #64	; 0x40
 8008158:	d012      	beq.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800815a:	e070      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800815c:	4b39      	ldr	r3, [pc, #228]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008164:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008168:	d107      	bne.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800816a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800816e:	4618      	mov	r0, r3
 8008170:	f000 fec0 	bl	8008ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008178:	e3f0      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800817a:	2300      	movs	r3, #0
 800817c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800817e:	e3ed      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008180:	4b30      	ldr	r3, [pc, #192]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008188:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800818c:	d107      	bne.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800818e:	f107 0318 	add.w	r3, r7, #24
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fc06 	bl	80089a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800819c:	e3de      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800819e:	2300      	movs	r3, #0
 80081a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081a2:	e3db      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081a4:	4b27      	ldr	r3, [pc, #156]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081b0:	d107      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081b2:	f107 030c 	add.w	r3, r7, #12
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 fd48 	bl	8008c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081c0:	e3cc      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80081c2:	2300      	movs	r3, #0
 80081c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081c6:	e3c9      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80081c8:	4b1e      	ldr	r3, [pc, #120]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80081ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081d0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081d2:	4b1c      	ldr	r3, [pc, #112]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b04      	cmp	r3, #4
 80081dc:	d10c      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80081de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d109      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081e4:	4b17      	ldr	r3, [pc, #92]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	08db      	lsrs	r3, r3, #3
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	4a16      	ldr	r2, [pc, #88]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80081f0:	fa22 f303 	lsr.w	r3, r2, r3
 80081f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081f6:	e01e      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081f8:	4b12      	ldr	r3, [pc, #72]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008204:	d106      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008208:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800820c:	d102      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800820e:	4b0f      	ldr	r3, [pc, #60]	; (800824c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008212:	e010      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008214:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800821c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008220:	d106      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008228:	d102      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800822a:	4b09      	ldr	r3, [pc, #36]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800822c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800822e:	e002      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008230:	2300      	movs	r3, #0
 8008232:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008234:	e392      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008236:	e391      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008238:	4b06      	ldr	r3, [pc, #24]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800823a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800823c:	e38e      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800823e:	2300      	movs	r3, #0
 8008240:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008242:	e38b      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008244:	58024400 	.word	0x58024400
 8008248:	03d09000 	.word	0x03d09000
 800824c:	003d0900 	.word	0x003d0900
 8008250:	017d7840 	.word	0x017d7840
 8008254:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800825e:	f040 809c 	bne.w	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008262:	4b9d      	ldr	r3, [pc, #628]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008266:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800826a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008272:	d054      	beq.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800827a:	f200 808b 	bhi.w	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008284:	f000 8083 	beq.w	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800828e:	f200 8081 	bhi.w	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008298:	d02f      	beq.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082a0:	d878      	bhi.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d004      	beq.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082ae:	d012      	beq.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80082b0:	e070      	b.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082b2:	4b89      	ldr	r3, [pc, #548]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082be:	d107      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 fe15 	bl	8008ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80082ce:	e345      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082d4:	e342      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082d6:	4b80      	ldr	r3, [pc, #512]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082e2:	d107      	bne.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082e4:	f107 0318 	add.w	r3, r7, #24
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fb5b 	bl	80089a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80082f2:	e333      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082f8:	e330      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082fa:	4b77      	ldr	r3, [pc, #476]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008306:	d107      	bne.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008308:	f107 030c 	add.w	r3, r7, #12
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fc9d 	bl	8008c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008316:	e321      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800831c:	e31e      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800831e:	4b6e      	ldr	r3, [pc, #440]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008326:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008328:	4b6b      	ldr	r3, [pc, #428]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b04      	cmp	r3, #4
 8008332:	d10c      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008336:	2b00      	cmp	r3, #0
 8008338:	d109      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800833a:	4b67      	ldr	r3, [pc, #412]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	08db      	lsrs	r3, r3, #3
 8008340:	f003 0303 	and.w	r3, r3, #3
 8008344:	4a65      	ldr	r2, [pc, #404]	; (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008346:	fa22 f303 	lsr.w	r3, r2, r3
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800834c:	e01e      	b.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800834e:	4b62      	ldr	r3, [pc, #392]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800835a:	d106      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800835c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800835e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008362:	d102      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008364:	4b5e      	ldr	r3, [pc, #376]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008368:	e010      	b.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800836a:	4b5b      	ldr	r3, [pc, #364]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008376:	d106      	bne.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800837e:	d102      	bne.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008380:	4b58      	ldr	r3, [pc, #352]	; (80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008384:	e002      	b.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008386:	2300      	movs	r3, #0
 8008388:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800838a:	e2e7      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800838c:	e2e6      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800838e:	4b56      	ldr	r3, [pc, #344]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008390:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008392:	e2e3      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008398:	e2e0      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083a0:	f040 80a7 	bne.w	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80083a4:	4b4c      	ldr	r3, [pc, #304]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80083a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80083ac:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80083ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083b4:	d055      	beq.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80083b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083bc:	f200 8096 	bhi.w	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80083c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80083c6:	f000 8084 	beq.w	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80083d0:	f200 808c 	bhi.w	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80083d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083da:	d030      	beq.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083e2:	f200 8083 	bhi.w	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d004      	beq.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80083ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083f2:	d012      	beq.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80083f4:	e07a      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083f6:	4b38      	ldr	r3, [pc, #224]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008402:	d107      	bne.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008408:	4618      	mov	r0, r3
 800840a:	f000 fd73 	bl	8008ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008412:	e2a3      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008418:	e2a0      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800841a:	4b2f      	ldr	r3, [pc, #188]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008426:	d107      	bne.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008428:	f107 0318 	add.w	r3, r7, #24
 800842c:	4618      	mov	r0, r3
 800842e:	f000 fab9 	bl	80089a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008436:	e291      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008438:	2300      	movs	r3, #0
 800843a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800843c:	e28e      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800843e:	4b26      	ldr	r3, [pc, #152]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800844a:	d107      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800844c:	f107 030c 	add.w	r3, r7, #12
 8008450:	4618      	mov	r0, r3
 8008452:	f000 fbfb 	bl	8008c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800845a:	e27f      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800845c:	2300      	movs	r3, #0
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008460:	e27c      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008462:	4b1d      	ldr	r3, [pc, #116]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008466:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800846a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800846c:	4b1a      	ldr	r3, [pc, #104]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b04      	cmp	r3, #4
 8008476:	d10c      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847a:	2b00      	cmp	r3, #0
 800847c:	d109      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800847e:	4b16      	ldr	r3, [pc, #88]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	08db      	lsrs	r3, r3, #3
 8008484:	f003 0303 	and.w	r3, r3, #3
 8008488:	4a14      	ldr	r2, [pc, #80]	; (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800848a:	fa22 f303 	lsr.w	r3, r2, r3
 800848e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008490:	e01e      	b.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008492:	4b11      	ldr	r3, [pc, #68]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800849a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800849e:	d106      	bne.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80084a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084a6:	d102      	bne.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80084a8:	4b0d      	ldr	r3, [pc, #52]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80084aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084ac:	e010      	b.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084ae:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084ba:	d106      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80084bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084c2:	d102      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80084c4:	4b07      	ldr	r3, [pc, #28]	; (80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80084c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084c8:	e002      	b.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80084ce:	e245      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80084d0:	e244      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80084d2:	4b05      	ldr	r3, [pc, #20]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80084d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084d6:	e241      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80084d8:	58024400 	.word	0x58024400
 80084dc:	03d09000 	.word	0x03d09000
 80084e0:	003d0900 	.word	0x003d0900
 80084e4:	017d7840 	.word	0x017d7840
 80084e8:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084f0:	e234      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084f8:	f040 809c 	bne.w	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80084fc:	4b9b      	ldr	r3, [pc, #620]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80084fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008500:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008504:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800850c:	d054      	beq.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008514:	f200 808b 	bhi.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8008518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800851e:	f000 8083 	beq.w	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008524:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008528:	f200 8081 	bhi.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008532:	d02f      	beq.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800853a:	d878      	bhi.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800853c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853e:	2b00      	cmp	r3, #0
 8008540:	d004      	beq.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8008542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008548:	d012      	beq.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800854a:	e070      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800854c:	4b87      	ldr	r3, [pc, #540]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008554:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008558:	d107      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800855a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800855e:	4618      	mov	r0, r3
 8008560:	f000 fcc8 	bl	8008ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008568:	e1f8      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800856e:	e1f5      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008570:	4b7e      	ldr	r3, [pc, #504]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800857c:	d107      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800857e:	f107 0318 	add.w	r3, r7, #24
 8008582:	4618      	mov	r0, r3
 8008584:	f000 fa0e 	bl	80089a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800858c:	e1e6      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800858e:	2300      	movs	r3, #0
 8008590:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008592:	e1e3      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008594:	4b75      	ldr	r3, [pc, #468]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800859c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085a0:	d107      	bne.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085a2:	f107 030c 	add.w	r3, r7, #12
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 fb50 	bl	8008c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085b0:	e1d4      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085b6:	e1d1      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80085b8:	4b6c      	ldr	r3, [pc, #432]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80085ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085c0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085c2:	4b6a      	ldr	r3, [pc, #424]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0304 	and.w	r3, r3, #4
 80085ca:	2b04      	cmp	r3, #4
 80085cc:	d10c      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80085ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d109      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085d4:	4b65      	ldr	r3, [pc, #404]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	08db      	lsrs	r3, r3, #3
 80085da:	f003 0303 	and.w	r3, r3, #3
 80085de:	4a64      	ldr	r2, [pc, #400]	; (8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80085e0:	fa22 f303 	lsr.w	r3, r2, r3
 80085e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085e6:	e01e      	b.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085e8:	4b60      	ldr	r3, [pc, #384]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085f4:	d106      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80085f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085fc:	d102      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80085fe:	4b5d      	ldr	r3, [pc, #372]	; (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008602:	e010      	b.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008604:	4b59      	ldr	r3, [pc, #356]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800860c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008610:	d106      	bne.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008618:	d102      	bne.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800861a:	4b57      	ldr	r3, [pc, #348]	; (8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800861c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800861e:	e002      	b.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008620:	2300      	movs	r3, #0
 8008622:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008624:	e19a      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008626:	e199      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008628:	4b54      	ldr	r3, [pc, #336]	; (800877c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800862a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800862c:	e196      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800862e:	2300      	movs	r3, #0
 8008630:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008632:	e193      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800863a:	d173      	bne.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800863c:	4b4b      	ldr	r3, [pc, #300]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800863e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008644:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800864c:	d02f      	beq.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008654:	d863      	bhi.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8008656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008662:	d012      	beq.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8008664:	e05b      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008666:	4b41      	ldr	r3, [pc, #260]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800866e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008672:	d107      	bne.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008674:	f107 0318 	add.w	r3, r7, #24
 8008678:	4618      	mov	r0, r3
 800867a:	f000 f993 	bl	80089a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008682:	e16b      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008688:	e168      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800868a:	4b38      	ldr	r3, [pc, #224]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008696:	d107      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008698:	f107 030c 	add.w	r3, r7, #12
 800869c:	4618      	mov	r0, r3
 800869e:	f000 fad5 	bl	8008c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086a6:	e159      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80086a8:	2300      	movs	r3, #0
 80086aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086ac:	e156      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80086ae:	4b2f      	ldr	r3, [pc, #188]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80086b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086b6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086b8:	4b2c      	ldr	r3, [pc, #176]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0304 	and.w	r3, r3, #4
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	d10c      	bne.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80086c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d109      	bne.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086ca:	4b28      	ldr	r3, [pc, #160]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	08db      	lsrs	r3, r3, #3
 80086d0:	f003 0303 	and.w	r3, r3, #3
 80086d4:	4a26      	ldr	r2, [pc, #152]	; (8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80086d6:	fa22 f303 	lsr.w	r3, r2, r3
 80086da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086dc:	e01e      	b.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086de:	4b23      	ldr	r3, [pc, #140]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ea:	d106      	bne.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80086ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086f2:	d102      	bne.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80086f4:	4b1f      	ldr	r3, [pc, #124]	; (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80086f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086f8:	e010      	b.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086fa:	4b1c      	ldr	r3, [pc, #112]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008702:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008706:	d106      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8008708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800870e:	d102      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008710:	4b19      	ldr	r3, [pc, #100]	; (8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8008712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008714:	e002      	b.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800871a:	e11f      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800871c:	e11e      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008722:	e11b      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800872a:	d13e      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800872c:	4b0f      	ldr	r3, [pc, #60]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800872e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008734:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008738:	2b00      	cmp	r3, #0
 800873a:	d004      	beq.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800873c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008742:	d01d      	beq.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008744:	e02e      	b.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008746:	4b09      	ldr	r3, [pc, #36]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800874e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008752:	d107      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008758:	4618      	mov	r0, r3
 800875a:	f000 fbcb 	bl	8008ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008762:	e0fb      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008764:	2300      	movs	r3, #0
 8008766:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008768:	e0f8      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800876a:	bf00      	nop
 800876c:	58024400 	.word	0x58024400
 8008770:	03d09000 	.word	0x03d09000
 8008774:	003d0900 	.word	0x003d0900
 8008778:	017d7840 	.word	0x017d7840
 800877c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008780:	4b79      	ldr	r3, [pc, #484]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800878c:	d107      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800878e:	f107 0318 	add.w	r3, r7, #24
 8008792:	4618      	mov	r0, r3
 8008794:	f000 f906 	bl	80089a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008798:	6a3b      	ldr	r3, [r7, #32]
 800879a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800879c:	e0de      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087a2:	e0db      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087a8:	e0d8      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087b0:	f040 8085 	bne.w	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80087b4:	4b6c      	ldr	r3, [pc, #432]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80087b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80087bc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80087be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087c4:	d06b      	beq.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80087c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087cc:	d874      	bhi.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d4:	d056      	beq.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087dc:	d86c      	bhi.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80087de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087e4:	d03b      	beq.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80087e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087ec:	d864      	bhi.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80087ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087f4:	d021      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80087f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087fc:	d85c      	bhi.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80087fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008800:	2b00      	cmp	r3, #0
 8008802:	d004      	beq.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800880a:	d004      	beq.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800880c:	e054      	b.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800880e:	f000 f8b3 	bl	8008978 <HAL_RCCEx_GetD3PCLK1Freq>
 8008812:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008814:	e0a2      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008816:	4b54      	ldr	r3, [pc, #336]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800881e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008822:	d107      	bne.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008824:	f107 0318 	add.w	r3, r7, #24
 8008828:	4618      	mov	r0, r3
 800882a:	f000 f8bb 	bl	80089a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008832:	e093      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008834:	2300      	movs	r3, #0
 8008836:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008838:	e090      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800883a:	4b4b      	ldr	r3, [pc, #300]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008846:	d107      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008848:	f107 030c 	add.w	r3, r7, #12
 800884c:	4618      	mov	r0, r3
 800884e:	f000 f9fd 	bl	8008c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008856:	e081      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800885c:	e07e      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800885e:	4b42      	ldr	r3, [pc, #264]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0304 	and.w	r3, r3, #4
 8008866:	2b04      	cmp	r3, #4
 8008868:	d109      	bne.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800886a:	4b3f      	ldr	r3, [pc, #252]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	08db      	lsrs	r3, r3, #3
 8008870:	f003 0303 	and.w	r3, r3, #3
 8008874:	4a3d      	ldr	r2, [pc, #244]	; (800896c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008876:	fa22 f303 	lsr.w	r3, r2, r3
 800887a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800887c:	e06e      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008882:	e06b      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008884:	4b38      	ldr	r3, [pc, #224]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800888c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008890:	d102      	bne.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8008892:	4b37      	ldr	r3, [pc, #220]	; (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008894:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008896:	e061      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800889c:	e05e      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800889e:	4b32      	ldr	r3, [pc, #200]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088aa:	d102      	bne.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 80088ac:	4b31      	ldr	r3, [pc, #196]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80088ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80088b0:	e054      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80088b2:	2300      	movs	r3, #0
 80088b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088b6:	e051      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088bc:	e04e      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088c4:	d148      	bne.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80088c6:	4b28      	ldr	r3, [pc, #160]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80088c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088ce:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80088d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088d6:	d02a      	beq.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80088d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088de:	d838      	bhi.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 80088e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d004      	beq.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80088e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088ec:	d00d      	beq.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80088ee:	e030      	b.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80088f0:	4b1d      	ldr	r3, [pc, #116]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088fc:	d102      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 80088fe:	4b1d      	ldr	r3, [pc, #116]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008902:	e02b      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008908:	e028      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800890a:	4b17      	ldr	r3, [pc, #92]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008912:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008916:	d107      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800891c:	4618      	mov	r0, r3
 800891e:	f000 fae9 	bl	8008ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008926:	e019      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008928:	2300      	movs	r3, #0
 800892a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800892c:	e016      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800892e:	4b0e      	ldr	r3, [pc, #56]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008936:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800893a:	d107      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800893c:	f107 0318 	add.w	r3, r7, #24
 8008940:	4618      	mov	r0, r3
 8008942:	f000 f82f 	bl	80089a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800894a:	e007      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800894c:	2300      	movs	r3, #0
 800894e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008950:	e004      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008952:	2300      	movs	r3, #0
 8008954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008956:	e001      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8008958:	2300      	movs	r3, #0
 800895a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800895c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800895e:	4618      	mov	r0, r3
 8008960:	3740      	adds	r7, #64	; 0x40
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	58024400 	.word	0x58024400
 800896c:	03d09000 	.word	0x03d09000
 8008970:	003d0900 	.word	0x003d0900
 8008974:	017d7840 	.word	0x017d7840

08008978 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800897c:	f7fe fbb4 	bl	80070e8 <HAL_RCC_GetHCLKFreq>
 8008980:	4602      	mov	r2, r0
 8008982:	4b06      	ldr	r3, [pc, #24]	; (800899c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	091b      	lsrs	r3, r3, #4
 8008988:	f003 0307 	and.w	r3, r3, #7
 800898c:	4904      	ldr	r1, [pc, #16]	; (80089a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800898e:	5ccb      	ldrb	r3, [r1, r3]
 8008990:	f003 031f 	and.w	r3, r3, #31
 8008994:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008998:	4618      	mov	r0, r3
 800899a:	bd80      	pop	{r7, pc}
 800899c:	58024400 	.word	0x58024400
 80089a0:	0800c12c 	.word	0x0800c12c

080089a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b089      	sub	sp, #36	; 0x24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089ac:	4ba1      	ldr	r3, [pc, #644]	; (8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b0:	f003 0303 	and.w	r3, r3, #3
 80089b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80089b6:	4b9f      	ldr	r3, [pc, #636]	; (8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ba:	0b1b      	lsrs	r3, r3, #12
 80089bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80089c2:	4b9c      	ldr	r3, [pc, #624]	; (8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c6:	091b      	lsrs	r3, r3, #4
 80089c8:	f003 0301 	and.w	r3, r3, #1
 80089cc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80089ce:	4b99      	ldr	r3, [pc, #612]	; (8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d2:	08db      	lsrs	r3, r3, #3
 80089d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	fb02 f303 	mul.w	r3, r2, r3
 80089de:	ee07 3a90 	vmov	s15, r3
 80089e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 8111 	beq.w	8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	f000 8083 	beq.w	8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	f200 80a1 	bhi.w	8008b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d003      	beq.n	8008a10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d056      	beq.n	8008abc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008a0e:	e099      	b.n	8008b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a10:	4b88      	ldr	r3, [pc, #544]	; (8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0320 	and.w	r3, r3, #32
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d02d      	beq.n	8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a1c:	4b85      	ldr	r3, [pc, #532]	; (8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	08db      	lsrs	r3, r3, #3
 8008a22:	f003 0303 	and.w	r3, r3, #3
 8008a26:	4a84      	ldr	r2, [pc, #528]	; (8008c38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008a28:	fa22 f303 	lsr.w	r3, r2, r3
 8008a2c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	ee07 3a90 	vmov	s15, r3
 8008a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a46:	4b7b      	ldr	r3, [pc, #492]	; (8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a72:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008a76:	e087      	b.n	8008b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	ee07 3a90 	vmov	s15, r3
 8008a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a8a:	4b6a      	ldr	r3, [pc, #424]	; (8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a92:	ee07 3a90 	vmov	s15, r3
 8008a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008aba:	e065      	b.n	8008b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	ee07 3a90 	vmov	s15, r3
 8008ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008c44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ace:	4b59      	ldr	r3, [pc, #356]	; (8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad6:	ee07 3a90 	vmov	s15, r3
 8008ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ae2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008afa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008afe:	e043      	b.n	8008b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	ee07 3a90 	vmov	s15, r3
 8008b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008c48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b12:	4b48      	ldr	r3, [pc, #288]	; (8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b1a:	ee07 3a90 	vmov	s15, r3
 8008b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b26:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b42:	e021      	b.n	8008b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	ee07 3a90 	vmov	s15, r3
 8008b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008c44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b56:	4b37      	ldr	r3, [pc, #220]	; (8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008b88:	4b2a      	ldr	r3, [pc, #168]	; (8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8c:	0a5b      	lsrs	r3, r3, #9
 8008b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b92:	ee07 3a90 	vmov	s15, r3
 8008b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bae:	ee17 2a90 	vmov	r2, s15
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008bb6:	4b1f      	ldr	r3, [pc, #124]	; (8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bba:	0c1b      	lsrs	r3, r3, #16
 8008bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bc0:	ee07 3a90 	vmov	s15, r3
 8008bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bdc:	ee17 2a90 	vmov	r2, s15
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008be4:	4b13      	ldr	r3, [pc, #76]	; (8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be8:	0e1b      	lsrs	r3, r3, #24
 8008bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bee:	ee07 3a90 	vmov	s15, r3
 8008bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c0a:	ee17 2a90 	vmov	r2, s15
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008c12:	e008      	b.n	8008c26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	609a      	str	r2, [r3, #8]
}
 8008c26:	bf00      	nop
 8008c28:	3724      	adds	r7, #36	; 0x24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	58024400 	.word	0x58024400
 8008c38:	03d09000 	.word	0x03d09000
 8008c3c:	46000000 	.word	0x46000000
 8008c40:	4c742400 	.word	0x4c742400
 8008c44:	4a742400 	.word	0x4a742400
 8008c48:	4bbebc20 	.word	0x4bbebc20

08008c4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b089      	sub	sp, #36	; 0x24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c54:	4ba1      	ldr	r3, [pc, #644]	; (8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c58:	f003 0303 	and.w	r3, r3, #3
 8008c5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008c5e:	4b9f      	ldr	r3, [pc, #636]	; (8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c62:	0d1b      	lsrs	r3, r3, #20
 8008c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c6a:	4b9c      	ldr	r3, [pc, #624]	; (8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	0a1b      	lsrs	r3, r3, #8
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008c76:	4b99      	ldr	r3, [pc, #612]	; (8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7a:	08db      	lsrs	r3, r3, #3
 8008c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	fb02 f303 	mul.w	r3, r2, r3
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 8111 	beq.w	8008ebc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	f000 8083 	beq.w	8008da8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	f200 80a1 	bhi.w	8008dec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d056      	beq.n	8008d64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008cb6:	e099      	b.n	8008dec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cb8:	4b88      	ldr	r3, [pc, #544]	; (8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0320 	and.w	r3, r3, #32
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d02d      	beq.n	8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cc4:	4b85      	ldr	r3, [pc, #532]	; (8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	08db      	lsrs	r3, r3, #3
 8008cca:	f003 0303 	and.w	r3, r3, #3
 8008cce:	4a84      	ldr	r2, [pc, #528]	; (8008ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	ee07 3a90 	vmov	s15, r3
 8008cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	ee07 3a90 	vmov	s15, r3
 8008ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cee:	4b7b      	ldr	r3, [pc, #492]	; (8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf6:	ee07 3a90 	vmov	s15, r3
 8008cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d02:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008d1e:	e087      	b.n	8008e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	ee07 3a90 	vmov	s15, r3
 8008d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d32:	4b6a      	ldr	r3, [pc, #424]	; (8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d3a:	ee07 3a90 	vmov	s15, r3
 8008d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d46:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d62:	e065      	b.n	8008e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	ee07 3a90 	vmov	s15, r3
 8008d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008eec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d76:	4b59      	ldr	r3, [pc, #356]	; (8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7e:	ee07 3a90 	vmov	s15, r3
 8008d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008da6:	e043      	b.n	8008e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	ee07 3a90 	vmov	s15, r3
 8008dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dba:	4b48      	ldr	r3, [pc, #288]	; (8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc2:	ee07 3a90 	vmov	s15, r3
 8008dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dce:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008dea:	e021      	b.n	8008e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	ee07 3a90 	vmov	s15, r3
 8008df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008eec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfe:	4b37      	ldr	r3, [pc, #220]	; (8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e06:	ee07 3a90 	vmov	s15, r3
 8008e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008e30:	4b2a      	ldr	r3, [pc, #168]	; (8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e34:	0a5b      	lsrs	r3, r3, #9
 8008e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e3a:	ee07 3a90 	vmov	s15, r3
 8008e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e56:	ee17 2a90 	vmov	r2, s15
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008e5e:	4b1f      	ldr	r3, [pc, #124]	; (8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e62:	0c1b      	lsrs	r3, r3, #16
 8008e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e68:	ee07 3a90 	vmov	s15, r3
 8008e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e78:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e84:	ee17 2a90 	vmov	r2, s15
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008e8c:	4b13      	ldr	r3, [pc, #76]	; (8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e90:	0e1b      	lsrs	r3, r3, #24
 8008e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e96:	ee07 3a90 	vmov	s15, r3
 8008e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ea6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eb2:	ee17 2a90 	vmov	r2, s15
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008eba:	e008      	b.n	8008ece <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	609a      	str	r2, [r3, #8]
}
 8008ece:	bf00      	nop
 8008ed0:	3724      	adds	r7, #36	; 0x24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	58024400 	.word	0x58024400
 8008ee0:	03d09000 	.word	0x03d09000
 8008ee4:	46000000 	.word	0x46000000
 8008ee8:	4c742400 	.word	0x4c742400
 8008eec:	4a742400 	.word	0x4a742400
 8008ef0:	4bbebc20 	.word	0x4bbebc20

08008ef4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b089      	sub	sp, #36	; 0x24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008efc:	4ba0      	ldr	r3, [pc, #640]	; (8009180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f00:	f003 0303 	and.w	r3, r3, #3
 8008f04:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008f06:	4b9e      	ldr	r3, [pc, #632]	; (8009180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0a:	091b      	lsrs	r3, r3, #4
 8008f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f10:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008f12:	4b9b      	ldr	r3, [pc, #620]	; (8009180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	f003 0301 	and.w	r3, r3, #1
 8008f1a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008f1c:	4b98      	ldr	r3, [pc, #608]	; (8009180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f20:	08db      	lsrs	r3, r3, #3
 8008f22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	fb02 f303 	mul.w	r3, r2, r3
 8008f2c:	ee07 3a90 	vmov	s15, r3
 8008f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f34:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f000 8111 	beq.w	8009162 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	f000 8083 	beq.w	800904e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	f200 80a1 	bhi.w	8009092 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d056      	beq.n	800900a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008f5c:	e099      	b.n	8009092 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f5e:	4b88      	ldr	r3, [pc, #544]	; (8009180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0320 	and.w	r3, r3, #32
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d02d      	beq.n	8008fc6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f6a:	4b85      	ldr	r3, [pc, #532]	; (8009180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	08db      	lsrs	r3, r3, #3
 8008f70:	f003 0303 	and.w	r3, r3, #3
 8008f74:	4a83      	ldr	r2, [pc, #524]	; (8009184 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008f76:	fa22 f303 	lsr.w	r3, r2, r3
 8008f7a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	ee07 3a90 	vmov	s15, r3
 8008f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	ee07 3a90 	vmov	s15, r3
 8008f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f94:	4b7a      	ldr	r3, [pc, #488]	; (8009180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f9c:	ee07 3a90 	vmov	s15, r3
 8008fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fa4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fa8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fc0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008fc4:	e087      	b.n	80090d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	ee07 3a90 	vmov	s15, r3
 8008fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800918c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008fd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fd8:	4b69      	ldr	r3, [pc, #420]	; (8009180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe0:	ee07 3a90 	vmov	s15, r3
 8008fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fe8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ff8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009004:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009008:	e065      	b.n	80090d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	ee07 3a90 	vmov	s15, r3
 8009010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009014:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009190 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800901c:	4b58      	ldr	r3, [pc, #352]	; (8009180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800901e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009024:	ee07 3a90 	vmov	s15, r3
 8009028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800902c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009030:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800903c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009048:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800904c:	e043      	b.n	80090d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	ee07 3a90 	vmov	s15, r3
 8009054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009058:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800905c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009060:	4b47      	ldr	r3, [pc, #284]	; (8009180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009068:	ee07 3a90 	vmov	s15, r3
 800906c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009070:	ed97 6a03 	vldr	s12, [r7, #12]
 8009074:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800907c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800908c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009090:	e021      	b.n	80090d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	ee07 3a90 	vmov	s15, r3
 8009098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800918c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80090a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a4:	4b36      	ldr	r3, [pc, #216]	; (8009180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ac:	ee07 3a90 	vmov	s15, r3
 80090b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80090b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80090d6:	4b2a      	ldr	r3, [pc, #168]	; (8009180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090da:	0a5b      	lsrs	r3, r3, #9
 80090dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e0:	ee07 3a90 	vmov	s15, r3
 80090e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80090f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090fc:	ee17 2a90 	vmov	r2, s15
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009104:	4b1e      	ldr	r3, [pc, #120]	; (8009180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009108:	0c1b      	lsrs	r3, r3, #16
 800910a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800911a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800911e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800912a:	ee17 2a90 	vmov	r2, s15
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009132:	4b13      	ldr	r3, [pc, #76]	; (8009180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009136:	0e1b      	lsrs	r3, r3, #24
 8009138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800913c:	ee07 3a90 	vmov	s15, r3
 8009140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009148:	ee37 7a87 	vadd.f32	s14, s15, s14
 800914c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009158:	ee17 2a90 	vmov	r2, s15
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009160:	e008      	b.n	8009174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	609a      	str	r2, [r3, #8]
}
 8009174:	bf00      	nop
 8009176:	3724      	adds	r7, #36	; 0x24
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	58024400 	.word	0x58024400
 8009184:	03d09000 	.word	0x03d09000
 8009188:	46000000 	.word	0x46000000
 800918c:	4c742400 	.word	0x4c742400
 8009190:	4a742400 	.word	0x4a742400
 8009194:	4bbebc20 	.word	0x4bbebc20

08009198 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091a6:	4b53      	ldr	r3, [pc, #332]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80091a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091aa:	f003 0303 	and.w	r3, r3, #3
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d101      	bne.n	80091b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e099      	b.n	80092ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80091b6:	4b4f      	ldr	r3, [pc, #316]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a4e      	ldr	r2, [pc, #312]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80091bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80091c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091c2:	f7fa f99f 	bl	8003504 <HAL_GetTick>
 80091c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091c8:	e008      	b.n	80091dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80091ca:	f7fa f99b 	bl	8003504 <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d901      	bls.n	80091dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e086      	b.n	80092ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091dc:	4b45      	ldr	r3, [pc, #276]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1f0      	bne.n	80091ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80091e8:	4b42      	ldr	r3, [pc, #264]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80091ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	031b      	lsls	r3, r3, #12
 80091f6:	493f      	ldr	r1, [pc, #252]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	628b      	str	r3, [r1, #40]	; 0x28
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	3b01      	subs	r3, #1
 8009202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	3b01      	subs	r3, #1
 800920c:	025b      	lsls	r3, r3, #9
 800920e:	b29b      	uxth	r3, r3
 8009210:	431a      	orrs	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	3b01      	subs	r3, #1
 8009218:	041b      	lsls	r3, r3, #16
 800921a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800921e:	431a      	orrs	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	3b01      	subs	r3, #1
 8009226:	061b      	lsls	r3, r3, #24
 8009228:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800922c:	4931      	ldr	r1, [pc, #196]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 800922e:	4313      	orrs	r3, r2
 8009230:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009232:	4b30      	ldr	r3, [pc, #192]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 8009234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009236:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	492d      	ldr	r1, [pc, #180]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 8009240:	4313      	orrs	r3, r2
 8009242:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009244:	4b2b      	ldr	r3, [pc, #172]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	f023 0220 	bic.w	r2, r3, #32
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	4928      	ldr	r1, [pc, #160]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 8009252:	4313      	orrs	r3, r2
 8009254:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009256:	4b27      	ldr	r3, [pc, #156]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 8009258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925a:	4a26      	ldr	r2, [pc, #152]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 800925c:	f023 0310 	bic.w	r3, r3, #16
 8009260:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009262:	4b24      	ldr	r3, [pc, #144]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 8009264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009266:	4b24      	ldr	r3, [pc, #144]	; (80092f8 <RCCEx_PLL2_Config+0x160>)
 8009268:	4013      	ands	r3, r2
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	69d2      	ldr	r2, [r2, #28]
 800926e:	00d2      	lsls	r2, r2, #3
 8009270:	4920      	ldr	r1, [pc, #128]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 8009272:	4313      	orrs	r3, r2
 8009274:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009276:	4b1f      	ldr	r3, [pc, #124]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 8009278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927a:	4a1e      	ldr	r2, [pc, #120]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 800927c:	f043 0310 	orr.w	r3, r3, #16
 8009280:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d106      	bne.n	8009296 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009288:	4b1a      	ldr	r3, [pc, #104]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 800928a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928c:	4a19      	ldr	r2, [pc, #100]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 800928e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009292:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009294:	e00f      	b.n	80092b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d106      	bne.n	80092aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800929c:	4b15      	ldr	r3, [pc, #84]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	4a14      	ldr	r2, [pc, #80]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80092a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092a8:	e005      	b.n	80092b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80092aa:	4b12      	ldr	r3, [pc, #72]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80092ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ae:	4a11      	ldr	r2, [pc, #68]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80092b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80092b6:	4b0f      	ldr	r3, [pc, #60]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a0e      	ldr	r2, [pc, #56]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80092bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092c2:	f7fa f91f 	bl	8003504 <HAL_GetTick>
 80092c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092c8:	e008      	b.n	80092dc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80092ca:	f7fa f91b 	bl	8003504 <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d901      	bls.n	80092dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e006      	b.n	80092ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092dc:	4b05      	ldr	r3, [pc, #20]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0f0      	beq.n	80092ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	58024400 	.word	0x58024400
 80092f8:	ffff0007 	.word	0xffff0007

080092fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800930a:	4b53      	ldr	r3, [pc, #332]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 800930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930e:	f003 0303 	and.w	r3, r3, #3
 8009312:	2b03      	cmp	r3, #3
 8009314:	d101      	bne.n	800931a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e099      	b.n	800944e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800931a:	4b4f      	ldr	r3, [pc, #316]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a4e      	ldr	r2, [pc, #312]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009326:	f7fa f8ed 	bl	8003504 <HAL_GetTick>
 800932a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800932c:	e008      	b.n	8009340 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800932e:	f7fa f8e9 	bl	8003504 <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	2b02      	cmp	r3, #2
 800933a:	d901      	bls.n	8009340 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800933c:	2303      	movs	r3, #3
 800933e:	e086      	b.n	800944e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009340:	4b45      	ldr	r3, [pc, #276]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1f0      	bne.n	800932e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800934c:	4b42      	ldr	r3, [pc, #264]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 800934e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009350:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	051b      	lsls	r3, r3, #20
 800935a:	493f      	ldr	r1, [pc, #252]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 800935c:	4313      	orrs	r3, r2
 800935e:	628b      	str	r3, [r1, #40]	; 0x28
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	3b01      	subs	r3, #1
 8009366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	3b01      	subs	r3, #1
 8009370:	025b      	lsls	r3, r3, #9
 8009372:	b29b      	uxth	r3, r3
 8009374:	431a      	orrs	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	3b01      	subs	r3, #1
 800937c:	041b      	lsls	r3, r3, #16
 800937e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	3b01      	subs	r3, #1
 800938a:	061b      	lsls	r3, r3, #24
 800938c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009390:	4931      	ldr	r1, [pc, #196]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009392:	4313      	orrs	r3, r2
 8009394:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009396:	4b30      	ldr	r3, [pc, #192]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	492d      	ldr	r1, [pc, #180]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093a4:	4313      	orrs	r3, r2
 80093a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80093a8:	4b2b      	ldr	r3, [pc, #172]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	4928      	ldr	r1, [pc, #160]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093b6:	4313      	orrs	r3, r2
 80093b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80093ba:	4b27      	ldr	r3, [pc, #156]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093be:	4a26      	ldr	r2, [pc, #152]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80093c6:	4b24      	ldr	r3, [pc, #144]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ca:	4b24      	ldr	r3, [pc, #144]	; (800945c <RCCEx_PLL3_Config+0x160>)
 80093cc:	4013      	ands	r3, r2
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	69d2      	ldr	r2, [r2, #28]
 80093d2:	00d2      	lsls	r2, r2, #3
 80093d4:	4920      	ldr	r1, [pc, #128]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80093da:	4b1f      	ldr	r3, [pc, #124]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093de:	4a1e      	ldr	r2, [pc, #120]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d106      	bne.n	80093fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80093ec:	4b1a      	ldr	r3, [pc, #104]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f0:	4a19      	ldr	r2, [pc, #100]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80093f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093f8:	e00f      	b.n	800941a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d106      	bne.n	800940e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009400:	4b15      	ldr	r3, [pc, #84]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009404:	4a14      	ldr	r2, [pc, #80]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009406:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800940a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800940c:	e005      	b.n	800941a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800940e:	4b12      	ldr	r3, [pc, #72]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009412:	4a11      	ldr	r2, [pc, #68]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009414:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009418:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800941a:	4b0f      	ldr	r3, [pc, #60]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a0e      	ldr	r2, [pc, #56]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009426:	f7fa f86d 	bl	8003504 <HAL_GetTick>
 800942a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800942c:	e008      	b.n	8009440 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800942e:	f7fa f869 	bl	8003504 <HAL_GetTick>
 8009432:	4602      	mov	r2, r0
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	2b02      	cmp	r3, #2
 800943a:	d901      	bls.n	8009440 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e006      	b.n	800944e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009440:	4b05      	ldr	r3, [pc, #20]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d0f0      	beq.n	800942e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800944c:	7bfb      	ldrb	r3, [r7, #15]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	58024400 	.word	0x58024400
 800945c:	ffff0007 	.word	0xffff0007

08009460 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e0f1      	b.n	8009656 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a78      	ldr	r2, [pc, #480]	; (8009660 <HAL_SPI_Init+0x200>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00f      	beq.n	80094a2 <HAL_SPI_Init+0x42>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a77      	ldr	r2, [pc, #476]	; (8009664 <HAL_SPI_Init+0x204>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d00a      	beq.n	80094a2 <HAL_SPI_Init+0x42>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a75      	ldr	r2, [pc, #468]	; (8009668 <HAL_SPI_Init+0x208>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d005      	beq.n	80094a2 <HAL_SPI_Init+0x42>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	2b0f      	cmp	r3, #15
 800949c:	d901      	bls.n	80094a2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e0d9      	b.n	8009656 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 ff66 	bl	800a374 <SPI_GetPacketSize>
 80094a8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a6c      	ldr	r2, [pc, #432]	; (8009660 <HAL_SPI_Init+0x200>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d00c      	beq.n	80094ce <HAL_SPI_Init+0x6e>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a6a      	ldr	r2, [pc, #424]	; (8009664 <HAL_SPI_Init+0x204>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d007      	beq.n	80094ce <HAL_SPI_Init+0x6e>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a69      	ldr	r2, [pc, #420]	; (8009668 <HAL_SPI_Init+0x208>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d002      	beq.n	80094ce <HAL_SPI_Init+0x6e>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2b08      	cmp	r3, #8
 80094cc:	d811      	bhi.n	80094f2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80094d2:	4a63      	ldr	r2, [pc, #396]	; (8009660 <HAL_SPI_Init+0x200>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d009      	beq.n	80094ec <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a61      	ldr	r2, [pc, #388]	; (8009664 <HAL_SPI_Init+0x204>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d004      	beq.n	80094ec <HAL_SPI_Init+0x8c>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a60      	ldr	r2, [pc, #384]	; (8009668 <HAL_SPI_Init+0x208>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d104      	bne.n	80094f6 <HAL_SPI_Init+0x96>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2b10      	cmp	r3, #16
 80094f0:	d901      	bls.n	80094f6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e0af      	b.n	8009656 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d106      	bne.n	8009510 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7f7 fbc0 	bl	8000c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2202      	movs	r2, #2
 8009514:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 0201 	bic.w	r2, r2, #1
 8009526:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009532:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800953c:	d119      	bne.n	8009572 <HAL_SPI_Init+0x112>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009546:	d103      	bne.n	8009550 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800954c:	2b00      	cmp	r3, #0
 800954e:	d008      	beq.n	8009562 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10c      	bne.n	8009572 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800955c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009560:	d107      	bne.n	8009572 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009570:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	69da      	ldr	r2, [r3, #28]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957a:	431a      	orrs	r2, r3
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	431a      	orrs	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009584:	ea42 0103 	orr.w	r1, r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	68da      	ldr	r2, [r3, #12]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959c:	431a      	orrs	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a2:	431a      	orrs	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	431a      	orrs	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	431a      	orrs	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	695b      	ldr	r3, [r3, #20]
 80095b4:	431a      	orrs	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	431a      	orrs	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	431a      	orrs	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095c6:	431a      	orrs	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	431a      	orrs	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095d2:	ea42 0103 	orr.w	r1, r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	430a      	orrs	r2, r1
 80095e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d113      	bne.n	8009612 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009610:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f022 0201 	bic.w	r2, r2, #1
 8009620:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00a      	beq.n	8009644 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	430a      	orrs	r2, r1
 8009642:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	40013000 	.word	0x40013000
 8009664:	40003800 	.word	0x40003800
 8009668:	40003c00 	.word	0x40003c00

0800966c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b08a      	sub	sp, #40	; 0x28
 8009670:	af02      	add	r7, sp, #8
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	603b      	str	r3, [r7, #0]
 8009678:	4613      	mov	r3, r2
 800967a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3320      	adds	r3, #32
 8009682:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800968e:	2b01      	cmp	r3, #1
 8009690:	d101      	bne.n	8009696 <HAL_SPI_Transmit+0x2a>
 8009692:	2302      	movs	r3, #2
 8009694:	e1d7      	b.n	8009a46 <HAL_SPI_Transmit+0x3da>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800969e:	f7f9 ff31 	bl	8003504 <HAL_GetTick>
 80096a2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d007      	beq.n	80096c0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80096b0:	2302      	movs	r3, #2
 80096b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80096bc:	7efb      	ldrb	r3, [r7, #27]
 80096be:	e1c2      	b.n	8009a46 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <HAL_SPI_Transmit+0x60>
 80096c6:	88fb      	ldrh	r3, [r7, #6]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d107      	bne.n	80096dc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80096d8:	7efb      	ldrb	r3, [r7, #27]
 80096da:	e1b4      	b.n	8009a46 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2203      	movs	r2, #3
 80096e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	88fa      	ldrh	r2, [r7, #6]
 80096f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	88fa      	ldrh	r2, [r7, #6]
 80096fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800972c:	d107      	bne.n	800973e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800973c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	685a      	ldr	r2, [r3, #4]
 8009744:	4b96      	ldr	r3, [pc, #600]	; (80099a0 <HAL_SPI_Transmit+0x334>)
 8009746:	4013      	ands	r3, r2
 8009748:	88f9      	ldrh	r1, [r7, #6]
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	6812      	ldr	r2, [r2, #0]
 800974e:	430b      	orrs	r3, r1
 8009750:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f042 0201 	orr.w	r2, r2, #1
 8009760:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800976a:	d107      	bne.n	800977c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800977a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	2b0f      	cmp	r3, #15
 8009782:	d947      	bls.n	8009814 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009784:	e03f      	b.n	8009806 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	f003 0302 	and.w	r3, r3, #2
 8009790:	2b02      	cmp	r3, #2
 8009792:	d114      	bne.n	80097be <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	6812      	ldr	r2, [r2, #0]
 800979e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097a4:	1d1a      	adds	r2, r3, #4
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	3b01      	subs	r3, #1
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80097bc:	e023      	b.n	8009806 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097be:	f7f9 fea1 	bl	8003504 <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d803      	bhi.n	80097d6 <HAL_SPI_Transmit+0x16a>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d102      	bne.n	80097dc <HAL_SPI_Transmit+0x170>
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d114      	bne.n	8009806 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f000 fcfb 	bl	800a1d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009802:	2303      	movs	r3, #3
 8009804:	e11f      	b.n	8009a46 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800980c:	b29b      	uxth	r3, r3
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1b9      	bne.n	8009786 <HAL_SPI_Transmit+0x11a>
 8009812:	e0f2      	b.n	80099fa <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	2b07      	cmp	r3, #7
 800981a:	f240 80e7 	bls.w	80099ec <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800981e:	e05d      	b.n	80098dc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	695b      	ldr	r3, [r3, #20]
 8009826:	f003 0302 	and.w	r3, r3, #2
 800982a:	2b02      	cmp	r3, #2
 800982c:	d132      	bne.n	8009894 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009834:	b29b      	uxth	r3, r3
 8009836:	2b01      	cmp	r3, #1
 8009838:	d918      	bls.n	800986c <HAL_SPI_Transmit+0x200>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800983e:	2b00      	cmp	r3, #0
 8009840:	d014      	beq.n	800986c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6812      	ldr	r2, [r2, #0]
 800984c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009852:	1d1a      	adds	r2, r3, #4
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800985e:	b29b      	uxth	r3, r3
 8009860:	3b02      	subs	r3, #2
 8009862:	b29a      	uxth	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800986a:	e037      	b.n	80098dc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009870:	881a      	ldrh	r2, [r3, #0]
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800987a:	1c9a      	adds	r2, r3, #2
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009886:	b29b      	uxth	r3, r3
 8009888:	3b01      	subs	r3, #1
 800988a:	b29a      	uxth	r2, r3
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009892:	e023      	b.n	80098dc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009894:	f7f9 fe36 	bl	8003504 <HAL_GetTick>
 8009898:	4602      	mov	r2, r0
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d803      	bhi.n	80098ac <HAL_SPI_Transmit+0x240>
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098aa:	d102      	bne.n	80098b2 <HAL_SPI_Transmit+0x246>
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d114      	bne.n	80098dc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f000 fc90 	bl	800a1d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e0b4      	b.n	8009a46 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d19b      	bne.n	8009820 <HAL_SPI_Transmit+0x1b4>
 80098e8:	e087      	b.n	80099fa <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	695b      	ldr	r3, [r3, #20]
 80098f0:	f003 0302 	and.w	r3, r3, #2
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d155      	bne.n	80099a4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80098fe:	b29b      	uxth	r3, r3
 8009900:	2b03      	cmp	r3, #3
 8009902:	d918      	bls.n	8009936 <HAL_SPI_Transmit+0x2ca>
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009908:	2b40      	cmp	r3, #64	; 0x40
 800990a:	d914      	bls.n	8009936 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	6812      	ldr	r2, [r2, #0]
 8009916:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800991c:	1d1a      	adds	r2, r3, #4
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009928:	b29b      	uxth	r3, r3
 800992a:	3b04      	subs	r3, #4
 800992c:	b29a      	uxth	r2, r3
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009934:	e05a      	b.n	80099ec <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800993c:	b29b      	uxth	r3, r3
 800993e:	2b01      	cmp	r3, #1
 8009940:	d917      	bls.n	8009972 <HAL_SPI_Transmit+0x306>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009946:	2b00      	cmp	r3, #0
 8009948:	d013      	beq.n	8009972 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800994e:	881a      	ldrh	r2, [r3, #0]
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009958:	1c9a      	adds	r2, r3, #2
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009964:	b29b      	uxth	r3, r3
 8009966:	3b02      	subs	r3, #2
 8009968:	b29a      	uxth	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009970:	e03c      	b.n	80099ec <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3320      	adds	r3, #32
 800997c:	7812      	ldrb	r2, [r2, #0]
 800997e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009984:	1c5a      	adds	r2, r3, #1
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009990:	b29b      	uxth	r3, r3
 8009992:	3b01      	subs	r3, #1
 8009994:	b29a      	uxth	r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800999c:	e026      	b.n	80099ec <HAL_SPI_Transmit+0x380>
 800999e:	bf00      	nop
 80099a0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099a4:	f7f9 fdae 	bl	8003504 <HAL_GetTick>
 80099a8:	4602      	mov	r2, r0
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d803      	bhi.n	80099bc <HAL_SPI_Transmit+0x350>
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ba:	d102      	bne.n	80099c2 <HAL_SPI_Transmit+0x356>
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d114      	bne.n	80099ec <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f000 fc08 	bl	800a1d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e02c      	b.n	8009a46 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f47f af78 	bne.w	80098ea <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2200      	movs	r2, #0
 8009a02:	2108      	movs	r1, #8
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f000 fc87 	bl	800a318 <SPI_WaitOnFlagUntilTimeout>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d007      	beq.n	8009a20 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a16:	f043 0220 	orr.w	r2, r3, #32
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f000 fbd9 	bl	800a1d8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2201      	movs	r2, #1
 8009a32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	e000      	b.n	8009a46 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8009a44:	7efb      	ldrb	r3, [r7, #27]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3720      	adds	r7, #32
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop

08009a50 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08a      	sub	sp, #40	; 0x28
 8009a54:	af02      	add	r7, sp, #8
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	603b      	str	r3, [r7, #0]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a60:	2300      	movs	r3, #0
 8009a62:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	3330      	adds	r3, #48	; 0x30
 8009a6a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a74:	d112      	bne.n	8009a9c <HAL_SPI_Receive+0x4c>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10e      	bne.n	8009a9c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2204      	movs	r2, #4
 8009a82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009a86:	88fa      	ldrh	r2, [r7, #6]
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	68b9      	ldr	r1, [r7, #8]
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 f978 	bl	8009d88 <HAL_SPI_TransmitReceive>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	e16f      	b.n	8009d7c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d101      	bne.n	8009aaa <HAL_SPI_Receive+0x5a>
 8009aa6:	2302      	movs	r3, #2
 8009aa8:	e168      	b.n	8009d7c <HAL_SPI_Receive+0x32c>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2201      	movs	r2, #1
 8009aae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ab2:	f7f9 fd27 	bl	8003504 <HAL_GetTick>
 8009ab6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d007      	beq.n	8009ad4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009ad0:	7ffb      	ldrb	r3, [r7, #31]
 8009ad2:	e153      	b.n	8009d7c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d002      	beq.n	8009ae0 <HAL_SPI_Receive+0x90>
 8009ada:	88fb      	ldrh	r3, [r7, #6]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d107      	bne.n	8009af0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009aec:	7ffb      	ldrb	r3, [r7, #31]
 8009aee:	e145      	b.n	8009d7c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2204      	movs	r2, #4
 8009af4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	88fa      	ldrh	r2, [r7, #6]
 8009b0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	88fa      	ldrh	r2, [r7, #6]
 8009b12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009b40:	d107      	bne.n	8009b52 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b50:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	685a      	ldr	r2, [r3, #4]
 8009b58:	4b8a      	ldr	r3, [pc, #552]	; (8009d84 <HAL_SPI_Receive+0x334>)
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	88f9      	ldrh	r1, [r7, #6]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	6812      	ldr	r2, [r2, #0]
 8009b62:	430b      	orrs	r3, r1
 8009b64:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f042 0201 	orr.w	r2, r2, #1
 8009b74:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b7e:	d107      	bne.n	8009b90 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b8e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	2b0f      	cmp	r3, #15
 8009b96:	d948      	bls.n	8009c2a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009b98:	e040      	b.n	8009c1c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	695a      	ldr	r2, [r3, #20]
 8009ba0:	f248 0308 	movw	r3, #32776	; 0x8008
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d014      	beq.n	8009bd4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bb2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009bb4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bba:	1d1a      	adds	r2, r3, #4
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009bd2:	e023      	b.n	8009c1c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bd4:	f7f9 fc96 	bl	8003504 <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	683a      	ldr	r2, [r7, #0]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d803      	bhi.n	8009bec <HAL_SPI_Receive+0x19c>
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bea:	d102      	bne.n	8009bf2 <HAL_SPI_Receive+0x1a2>
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d114      	bne.n	8009c1c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f000 faf0 	bl	800a1d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e0af      	b.n	8009d7c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1b8      	bne.n	8009b9a <HAL_SPI_Receive+0x14a>
 8009c28:	e095      	b.n	8009d56 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	2b07      	cmp	r3, #7
 8009c30:	f240 808b 	bls.w	8009d4a <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009c34:	e03f      	b.n	8009cb6 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	f003 0301 	and.w	r3, r3, #1
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d114      	bne.n	8009c6e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c48:	69ba      	ldr	r2, [r7, #24]
 8009c4a:	8812      	ldrh	r2, [r2, #0]
 8009c4c:	b292      	uxth	r2, r2
 8009c4e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c54:	1c9a      	adds	r2, r3, #2
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009c6c:	e023      	b.n	8009cb6 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c6e:	f7f9 fc49 	bl	8003504 <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	683a      	ldr	r2, [r7, #0]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d803      	bhi.n	8009c86 <HAL_SPI_Receive+0x236>
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c84:	d102      	bne.n	8009c8c <HAL_SPI_Receive+0x23c>
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d114      	bne.n	8009cb6 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 faa3 	bl	800a1d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ca0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e062      	b.n	8009d7c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1b9      	bne.n	8009c36 <HAL_SPI_Receive+0x1e6>
 8009cc2:	e048      	b.n	8009d56 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	f003 0301 	and.w	r3, r3, #1
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d117      	bne.n	8009d02 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cde:	7812      	ldrb	r2, [r2, #0]
 8009ce0:	b2d2      	uxtb	r2, r2
 8009ce2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ce8:	1c5a      	adds	r2, r3, #1
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009d00:	e023      	b.n	8009d4a <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d02:	f7f9 fbff 	bl	8003504 <HAL_GetTick>
 8009d06:	4602      	mov	r2, r0
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	1ad3      	subs	r3, r2, r3
 8009d0c:	683a      	ldr	r2, [r7, #0]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d803      	bhi.n	8009d1a <HAL_SPI_Receive+0x2ca>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d18:	d102      	bne.n	8009d20 <HAL_SPI_Receive+0x2d0>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d114      	bne.n	8009d4a <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f000 fa59 	bl	800a1d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e018      	b.n	8009d7c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1b6      	bne.n	8009cc4 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 fa3e 	bl	800a1d8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e000      	b.n	8009d7c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8009d7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3720      	adds	r7, #32
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	ffff0000 	.word	0xffff0000

08009d88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08e      	sub	sp, #56	; 0x38
 8009d8c:	af02      	add	r7, sp, #8
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
 8009d94:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	3320      	adds	r3, #32
 8009da2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3330      	adds	r3, #48	; 0x30
 8009daa:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d101      	bne.n	8009dba <HAL_SPI_TransmitReceive+0x32>
 8009db6:	2302      	movs	r3, #2
 8009db8:	e209      	b.n	800a1ce <HAL_SPI_TransmitReceive+0x446>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009dc2:	f7f9 fb9f 	bl	8003504 <HAL_GetTick>
 8009dc6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8009dc8:	887b      	ldrh	r3, [r7, #2]
 8009dca:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8009dcc:	887b      	ldrh	r3, [r7, #2]
 8009dce:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009dd6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009dde:	7efb      	ldrb	r3, [r7, #27]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d014      	beq.n	8009e0e <HAL_SPI_TransmitReceive+0x86>
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dea:	d106      	bne.n	8009dfa <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d102      	bne.n	8009dfa <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8009df4:	7efb      	ldrb	r3, [r7, #27]
 8009df6:	2b04      	cmp	r3, #4
 8009df8:	d009      	beq.n	8009e0e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009e08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e0c:	e1df      	b.n	800a1ce <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d005      	beq.n	8009e20 <HAL_SPI_TransmitReceive+0x98>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d002      	beq.n	8009e20 <HAL_SPI_TransmitReceive+0x98>
 8009e1a:	887b      	ldrh	r3, [r7, #2]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d109      	bne.n	8009e34 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009e2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e32:	e1cc      	b.n	800a1ce <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	2b04      	cmp	r3, #4
 8009e3e:	d003      	beq.n	8009e48 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2205      	movs	r2, #5
 8009e44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	887a      	ldrh	r2, [r7, #2]
 8009e5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	887a      	ldrh	r2, [r7, #2]
 8009e62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	887a      	ldrh	r2, [r7, #2]
 8009e70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	887a      	ldrh	r2, [r7, #2]
 8009e78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	685a      	ldr	r2, [r3, #4]
 8009e8e:	4b82      	ldr	r3, [pc, #520]	; (800a098 <HAL_SPI_TransmitReceive+0x310>)
 8009e90:	4013      	ands	r3, r2
 8009e92:	8879      	ldrh	r1, [r7, #2]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	6812      	ldr	r2, [r2, #0]
 8009e98:	430b      	orrs	r3, r1
 8009e9a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f042 0201 	orr.w	r2, r2, #1
 8009eaa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009eb4:	d107      	bne.n	8009ec6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ec4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	2b0f      	cmp	r3, #15
 8009ecc:	d970      	bls.n	8009fb0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009ece:	e068      	b.n	8009fa2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	695b      	ldr	r3, [r3, #20]
 8009ed6:	f003 0302 	and.w	r3, r3, #2
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d11a      	bne.n	8009f14 <HAL_SPI_TransmitReceive+0x18c>
 8009ede:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d017      	beq.n	8009f14 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6812      	ldr	r2, [r2, #0]
 8009eee:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ef4:	1d1a      	adds	r2, r3, #4
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	3b01      	subs	r3, #1
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009f12:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	695a      	ldr	r2, [r3, #20]
 8009f1a:	f248 0308 	movw	r3, #32776	; 0x8008
 8009f1e:	4013      	ands	r3, r2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d01a      	beq.n	8009f5a <HAL_SPI_TransmitReceive+0x1d2>
 8009f24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d017      	beq.n	8009f5a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009f34:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f3a:	1d1a      	adds	r2, r3, #4
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009f58:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f5a:	f7f9 fad3 	bl	8003504 <HAL_GetTick>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d803      	bhi.n	8009f72 <HAL_SPI_TransmitReceive+0x1ea>
 8009f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f70:	d102      	bne.n	8009f78 <HAL_SPI_TransmitReceive+0x1f0>
 8009f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d114      	bne.n	8009fa2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f000 f92d 	bl	800a1d8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e115      	b.n	800a1ce <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009fa2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d193      	bne.n	8009ed0 <HAL_SPI_TransmitReceive+0x148>
 8009fa8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d190      	bne.n	8009ed0 <HAL_SPI_TransmitReceive+0x148>
 8009fae:	e0e7      	b.n	800a180 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	2b07      	cmp	r3, #7
 8009fb6:	f240 80dd 	bls.w	800a174 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009fba:	e066      	b.n	800a08a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	695b      	ldr	r3, [r3, #20]
 8009fc2:	f003 0302 	and.w	r3, r3, #2
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d119      	bne.n	8009ffe <HAL_SPI_TransmitReceive+0x276>
 8009fca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d016      	beq.n	8009ffe <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fd4:	881a      	ldrh	r2, [r3, #0]
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fde:	1c9a      	adds	r2, r3, #2
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	3b01      	subs	r3, #1
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ffc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	695b      	ldr	r3, [r3, #20]
 800a004:	f003 0301 	and.w	r3, r3, #1
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d11a      	bne.n	800a042 <HAL_SPI_TransmitReceive+0x2ba>
 800a00c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d017      	beq.n	800a042 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a016:	6a3a      	ldr	r2, [r7, #32]
 800a018:	8812      	ldrh	r2, [r2, #0]
 800a01a:	b292      	uxth	r2, r2
 800a01c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a022:	1c9a      	adds	r2, r3, #2
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a02e:	b29b      	uxth	r3, r3
 800a030:	3b01      	subs	r3, #1
 800a032:	b29a      	uxth	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a040:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a042:	f7f9 fa5f 	bl	8003504 <HAL_GetTick>
 800a046:	4602      	mov	r2, r0
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a04e:	429a      	cmp	r2, r3
 800a050:	d803      	bhi.n	800a05a <HAL_SPI_TransmitReceive+0x2d2>
 800a052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a058:	d102      	bne.n	800a060 <HAL_SPI_TransmitReceive+0x2d8>
 800a05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d114      	bne.n	800a08a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f000 f8b9 	bl	800a1d8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a074:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	e0a1      	b.n	800a1ce <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a08a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d195      	bne.n	8009fbc <HAL_SPI_TransmitReceive+0x234>
 800a090:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a092:	2b00      	cmp	r3, #0
 800a094:	d192      	bne.n	8009fbc <HAL_SPI_TransmitReceive+0x234>
 800a096:	e073      	b.n	800a180 <HAL_SPI_TransmitReceive+0x3f8>
 800a098:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	f003 0302 	and.w	r3, r3, #2
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d11b      	bne.n	800a0e2 <HAL_SPI_TransmitReceive+0x35a>
 800a0aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d018      	beq.n	800a0e2 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	3320      	adds	r3, #32
 800a0ba:	7812      	ldrb	r2, [r2, #0]
 800a0bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0c2:	1c5a      	adds	r2, r3, #1
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	695b      	ldr	r3, [r3, #20]
 800a0e8:	f003 0301 	and.w	r3, r3, #1
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d11d      	bne.n	800a12c <HAL_SPI_TransmitReceive+0x3a4>
 800a0f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d01a      	beq.n	800a12c <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a102:	7812      	ldrb	r2, [r2, #0]
 800a104:	b2d2      	uxtb	r2, r2
 800a106:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a10c:	1c5a      	adds	r2, r3, #1
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a118:	b29b      	uxth	r3, r3
 800a11a:	3b01      	subs	r3, #1
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a12a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a12c:	f7f9 f9ea 	bl	8003504 <HAL_GetTick>
 800a130:	4602      	mov	r2, r0
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a138:	429a      	cmp	r2, r3
 800a13a:	d803      	bhi.n	800a144 <HAL_SPI_TransmitReceive+0x3bc>
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a142:	d102      	bne.n	800a14a <HAL_SPI_TransmitReceive+0x3c2>
 800a144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a146:	2b00      	cmp	r3, #0
 800a148:	d114      	bne.n	800a174 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f000 f844 	bl	800a1d8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a15e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e02c      	b.n	800a1ce <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a174:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a176:	2b00      	cmp	r3, #0
 800a178:	d190      	bne.n	800a09c <HAL_SPI_TransmitReceive+0x314>
 800a17a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d18d      	bne.n	800a09c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	2200      	movs	r2, #0
 800a188:	2108      	movs	r1, #8
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f000 f8c4 	bl	800a318 <SPI_WaitOnFlagUntilTimeout>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d007      	beq.n	800a1a6 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a19c:	f043 0220 	orr.w	r2, r3, #32
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f000 f816 	bl	800a1d8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d001      	beq.n	800a1ca <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e001      	b.n	800a1ce <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800a1ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3730      	adds	r7, #48	; 0x30
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop

0800a1d8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	699a      	ldr	r2, [r3, #24]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f042 0208 	orr.w	r2, r2, #8
 800a1f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	699a      	ldr	r2, [r3, #24]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f042 0210 	orr.w	r2, r2, #16
 800a206:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f022 0201 	bic.w	r2, r2, #1
 800a216:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	6919      	ldr	r1, [r3, #16]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	4b3c      	ldr	r3, [pc, #240]	; (800a314 <SPI_CloseTransfer+0x13c>)
 800a224:	400b      	ands	r3, r1
 800a226:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	689a      	ldr	r2, [r3, #8]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a236:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b04      	cmp	r3, #4
 800a242:	d014      	beq.n	800a26e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f003 0320 	and.w	r3, r3, #32
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00f      	beq.n	800a26e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a254:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	699a      	ldr	r2, [r3, #24]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f042 0220 	orr.w	r2, r2, #32
 800a26c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b03      	cmp	r3, #3
 800a278:	d014      	beq.n	800a2a4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00f      	beq.n	800a2a4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a28a:	f043 0204 	orr.w	r2, r3, #4
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	699a      	ldr	r2, [r3, #24]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2a2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00f      	beq.n	800a2ce <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2b4:	f043 0201 	orr.w	r2, r3, #1
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	699a      	ldr	r2, [r3, #24]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2cc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00f      	beq.n	800a2f8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2de:	f043 0208 	orr.w	r2, r3, #8
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	699a      	ldr	r2, [r3, #24]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2f6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a308:	bf00      	nop
 800a30a:	3714      	adds	r7, #20
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr
 800a314:	fffffc90 	.word	0xfffffc90

0800a318 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	4613      	mov	r3, r2
 800a326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a328:	e010      	b.n	800a34c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a32a:	f7f9 f8eb 	bl	8003504 <HAL_GetTick>
 800a32e:	4602      	mov	r2, r0
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	69ba      	ldr	r2, [r7, #24]
 800a336:	429a      	cmp	r2, r3
 800a338:	d803      	bhi.n	800a342 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a340:	d102      	bne.n	800a348 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d101      	bne.n	800a34c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a348:	2303      	movs	r3, #3
 800a34a:	e00f      	b.n	800a36c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	695a      	ldr	r2, [r3, #20]
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	4013      	ands	r3, r2
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	429a      	cmp	r2, r3
 800a35a:	bf0c      	ite	eq
 800a35c:	2301      	moveq	r3, #1
 800a35e:	2300      	movne	r3, #0
 800a360:	b2db      	uxtb	r3, r3
 800a362:	461a      	mov	r2, r3
 800a364:	79fb      	ldrb	r3, [r7, #7]
 800a366:	429a      	cmp	r2, r3
 800a368:	d0df      	beq.n	800a32a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a380:	095b      	lsrs	r3, r3, #5
 800a382:	3301      	adds	r3, #1
 800a384:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	3301      	adds	r3, #1
 800a38c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	3307      	adds	r3, #7
 800a392:	08db      	lsrs	r3, r3, #3
 800a394:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b082      	sub	sp, #8
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d101      	bne.n	800a3bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e049      	b.n	800a450 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d106      	bne.n	800a3d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f7f6 ff07 	bl	80011e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2202      	movs	r2, #2
 800a3da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	4610      	mov	r0, r2
 800a3ea:	f000 fbb1 	bl	800ab50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2201      	movs	r2, #1
 800a40a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2201      	movs	r2, #1
 800a42a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2201      	movs	r2, #1
 800a432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2201      	movs	r2, #1
 800a43a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2201      	movs	r2, #1
 800a442:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d101      	bne.n	800a46a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	e049      	b.n	800a4fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b00      	cmp	r3, #0
 800a474:	d106      	bne.n	800a484 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 f841 	bl	800a506 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2202      	movs	r2, #2
 800a488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	3304      	adds	r3, #4
 800a494:	4619      	mov	r1, r3
 800a496:	4610      	mov	r0, r2
 800a498:	f000 fb5a 	bl	800ab50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a506:	b480      	push	{r7}
 800a508:	b083      	sub	sp, #12
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a50e:	bf00      	nop
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
	...

0800a51c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d109      	bne.n	800a540 <HAL_TIM_PWM_Start+0x24>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a532:	b2db      	uxtb	r3, r3
 800a534:	2b01      	cmp	r3, #1
 800a536:	bf14      	ite	ne
 800a538:	2301      	movne	r3, #1
 800a53a:	2300      	moveq	r3, #0
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	e03c      	b.n	800a5ba <HAL_TIM_PWM_Start+0x9e>
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	2b04      	cmp	r3, #4
 800a544:	d109      	bne.n	800a55a <HAL_TIM_PWM_Start+0x3e>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	2b01      	cmp	r3, #1
 800a550:	bf14      	ite	ne
 800a552:	2301      	movne	r3, #1
 800a554:	2300      	moveq	r3, #0
 800a556:	b2db      	uxtb	r3, r3
 800a558:	e02f      	b.n	800a5ba <HAL_TIM_PWM_Start+0x9e>
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b08      	cmp	r3, #8
 800a55e:	d109      	bne.n	800a574 <HAL_TIM_PWM_Start+0x58>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a566:	b2db      	uxtb	r3, r3
 800a568:	2b01      	cmp	r3, #1
 800a56a:	bf14      	ite	ne
 800a56c:	2301      	movne	r3, #1
 800a56e:	2300      	moveq	r3, #0
 800a570:	b2db      	uxtb	r3, r3
 800a572:	e022      	b.n	800a5ba <HAL_TIM_PWM_Start+0x9e>
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	2b0c      	cmp	r3, #12
 800a578:	d109      	bne.n	800a58e <HAL_TIM_PWM_Start+0x72>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b01      	cmp	r3, #1
 800a584:	bf14      	ite	ne
 800a586:	2301      	movne	r3, #1
 800a588:	2300      	moveq	r3, #0
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	e015      	b.n	800a5ba <HAL_TIM_PWM_Start+0x9e>
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2b10      	cmp	r3, #16
 800a592:	d109      	bne.n	800a5a8 <HAL_TIM_PWM_Start+0x8c>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	bf14      	ite	ne
 800a5a0:	2301      	movne	r3, #1
 800a5a2:	2300      	moveq	r3, #0
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	e008      	b.n	800a5ba <HAL_TIM_PWM_Start+0x9e>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	bf14      	ite	ne
 800a5b4:	2301      	movne	r3, #1
 800a5b6:	2300      	moveq	r3, #0
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d001      	beq.n	800a5c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e0a1      	b.n	800a706 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d104      	bne.n	800a5d2 <HAL_TIM_PWM_Start+0xb6>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2202      	movs	r2, #2
 800a5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5d0:	e023      	b.n	800a61a <HAL_TIM_PWM_Start+0xfe>
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	2b04      	cmp	r3, #4
 800a5d6:	d104      	bne.n	800a5e2 <HAL_TIM_PWM_Start+0xc6>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2202      	movs	r2, #2
 800a5dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5e0:	e01b      	b.n	800a61a <HAL_TIM_PWM_Start+0xfe>
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	2b08      	cmp	r3, #8
 800a5e6:	d104      	bne.n	800a5f2 <HAL_TIM_PWM_Start+0xd6>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5f0:	e013      	b.n	800a61a <HAL_TIM_PWM_Start+0xfe>
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	2b0c      	cmp	r3, #12
 800a5f6:	d104      	bne.n	800a602 <HAL_TIM_PWM_Start+0xe6>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2202      	movs	r2, #2
 800a5fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a600:	e00b      	b.n	800a61a <HAL_TIM_PWM_Start+0xfe>
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b10      	cmp	r3, #16
 800a606:	d104      	bne.n	800a612 <HAL_TIM_PWM_Start+0xf6>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2202      	movs	r2, #2
 800a60c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a610:	e003      	b.n	800a61a <HAL_TIM_PWM_Start+0xfe>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2202      	movs	r2, #2
 800a616:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2201      	movs	r2, #1
 800a620:	6839      	ldr	r1, [r7, #0]
 800a622:	4618      	mov	r0, r3
 800a624:	f000 fea2 	bl	800b36c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a38      	ldr	r2, [pc, #224]	; (800a710 <HAL_TIM_PWM_Start+0x1f4>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d013      	beq.n	800a65a <HAL_TIM_PWM_Start+0x13e>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a37      	ldr	r2, [pc, #220]	; (800a714 <HAL_TIM_PWM_Start+0x1f8>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d00e      	beq.n	800a65a <HAL_TIM_PWM_Start+0x13e>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a35      	ldr	r2, [pc, #212]	; (800a718 <HAL_TIM_PWM_Start+0x1fc>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d009      	beq.n	800a65a <HAL_TIM_PWM_Start+0x13e>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a34      	ldr	r2, [pc, #208]	; (800a71c <HAL_TIM_PWM_Start+0x200>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d004      	beq.n	800a65a <HAL_TIM_PWM_Start+0x13e>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a32      	ldr	r2, [pc, #200]	; (800a720 <HAL_TIM_PWM_Start+0x204>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d101      	bne.n	800a65e <HAL_TIM_PWM_Start+0x142>
 800a65a:	2301      	movs	r3, #1
 800a65c:	e000      	b.n	800a660 <HAL_TIM_PWM_Start+0x144>
 800a65e:	2300      	movs	r3, #0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d007      	beq.n	800a674 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a672:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a25      	ldr	r2, [pc, #148]	; (800a710 <HAL_TIM_PWM_Start+0x1f4>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d022      	beq.n	800a6c4 <HAL_TIM_PWM_Start+0x1a8>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a686:	d01d      	beq.n	800a6c4 <HAL_TIM_PWM_Start+0x1a8>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a25      	ldr	r2, [pc, #148]	; (800a724 <HAL_TIM_PWM_Start+0x208>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d018      	beq.n	800a6c4 <HAL_TIM_PWM_Start+0x1a8>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a24      	ldr	r2, [pc, #144]	; (800a728 <HAL_TIM_PWM_Start+0x20c>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d013      	beq.n	800a6c4 <HAL_TIM_PWM_Start+0x1a8>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a22      	ldr	r2, [pc, #136]	; (800a72c <HAL_TIM_PWM_Start+0x210>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d00e      	beq.n	800a6c4 <HAL_TIM_PWM_Start+0x1a8>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a1a      	ldr	r2, [pc, #104]	; (800a714 <HAL_TIM_PWM_Start+0x1f8>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d009      	beq.n	800a6c4 <HAL_TIM_PWM_Start+0x1a8>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a1e      	ldr	r2, [pc, #120]	; (800a730 <HAL_TIM_PWM_Start+0x214>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d004      	beq.n	800a6c4 <HAL_TIM_PWM_Start+0x1a8>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a16      	ldr	r2, [pc, #88]	; (800a718 <HAL_TIM_PWM_Start+0x1fc>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d115      	bne.n	800a6f0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	4b1a      	ldr	r3, [pc, #104]	; (800a734 <HAL_TIM_PWM_Start+0x218>)
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2b06      	cmp	r3, #6
 800a6d4:	d015      	beq.n	800a702 <HAL_TIM_PWM_Start+0x1e6>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6dc:	d011      	beq.n	800a702 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f042 0201 	orr.w	r2, r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ee:	e008      	b.n	800a702 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f042 0201 	orr.w	r2, r2, #1
 800a6fe:	601a      	str	r2, [r3, #0]
 800a700:	e000      	b.n	800a704 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	40010000 	.word	0x40010000
 800a714:	40010400 	.word	0x40010400
 800a718:	40014000 	.word	0x40014000
 800a71c:	40014400 	.word	0x40014400
 800a720:	40014800 	.word	0x40014800
 800a724:	40000400 	.word	0x40000400
 800a728:	40000800 	.word	0x40000800
 800a72c:	40000c00 	.word	0x40000c00
 800a730:	40001800 	.word	0x40001800
 800a734:	00010007 	.word	0x00010007

0800a738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b086      	sub	sp, #24
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a744:	2300      	movs	r3, #0
 800a746:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d101      	bne.n	800a756 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a752:	2302      	movs	r3, #2
 800a754:	e0ff      	b.n	800a956 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2201      	movs	r2, #1
 800a75a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2b14      	cmp	r3, #20
 800a762:	f200 80f0 	bhi.w	800a946 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a766:	a201      	add	r2, pc, #4	; (adr r2, 800a76c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a76c:	0800a7c1 	.word	0x0800a7c1
 800a770:	0800a947 	.word	0x0800a947
 800a774:	0800a947 	.word	0x0800a947
 800a778:	0800a947 	.word	0x0800a947
 800a77c:	0800a801 	.word	0x0800a801
 800a780:	0800a947 	.word	0x0800a947
 800a784:	0800a947 	.word	0x0800a947
 800a788:	0800a947 	.word	0x0800a947
 800a78c:	0800a843 	.word	0x0800a843
 800a790:	0800a947 	.word	0x0800a947
 800a794:	0800a947 	.word	0x0800a947
 800a798:	0800a947 	.word	0x0800a947
 800a79c:	0800a883 	.word	0x0800a883
 800a7a0:	0800a947 	.word	0x0800a947
 800a7a4:	0800a947 	.word	0x0800a947
 800a7a8:	0800a947 	.word	0x0800a947
 800a7ac:	0800a8c5 	.word	0x0800a8c5
 800a7b0:	0800a947 	.word	0x0800a947
 800a7b4:	0800a947 	.word	0x0800a947
 800a7b8:	0800a947 	.word	0x0800a947
 800a7bc:	0800a905 	.word	0x0800a905
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68b9      	ldr	r1, [r7, #8]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 fa5c 	bl	800ac84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	699a      	ldr	r2, [r3, #24]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f042 0208 	orr.w	r2, r2, #8
 800a7da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	699a      	ldr	r2, [r3, #24]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f022 0204 	bic.w	r2, r2, #4
 800a7ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	6999      	ldr	r1, [r3, #24]
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	691a      	ldr	r2, [r3, #16]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	430a      	orrs	r2, r1
 800a7fc:	619a      	str	r2, [r3, #24]
      break;
 800a7fe:	e0a5      	b.n	800a94c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68b9      	ldr	r1, [r7, #8]
 800a806:	4618      	mov	r0, r3
 800a808:	f000 facc 	bl	800ada4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	699a      	ldr	r2, [r3, #24]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a81a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	699a      	ldr	r2, [r3, #24]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a82a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6999      	ldr	r1, [r3, #24]
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	021a      	lsls	r2, r3, #8
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	430a      	orrs	r2, r1
 800a83e:	619a      	str	r2, [r3, #24]
      break;
 800a840:	e084      	b.n	800a94c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68b9      	ldr	r1, [r7, #8]
 800a848:	4618      	mov	r0, r3
 800a84a:	f000 fb35 	bl	800aeb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	69da      	ldr	r2, [r3, #28]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f042 0208 	orr.w	r2, r2, #8
 800a85c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	69da      	ldr	r2, [r3, #28]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f022 0204 	bic.w	r2, r2, #4
 800a86c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	69d9      	ldr	r1, [r3, #28]
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	691a      	ldr	r2, [r3, #16]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	430a      	orrs	r2, r1
 800a87e:	61da      	str	r2, [r3, #28]
      break;
 800a880:	e064      	b.n	800a94c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	68b9      	ldr	r1, [r7, #8]
 800a888:	4618      	mov	r0, r3
 800a88a:	f000 fb9d 	bl	800afc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	69da      	ldr	r2, [r3, #28]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a89c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	69da      	ldr	r2, [r3, #28]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	69d9      	ldr	r1, [r3, #28]
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	021a      	lsls	r2, r3, #8
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	430a      	orrs	r2, r1
 800a8c0:	61da      	str	r2, [r3, #28]
      break;
 800a8c2:	e043      	b.n	800a94c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	68b9      	ldr	r1, [r7, #8]
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 fbe6 	bl	800b09c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f042 0208 	orr.w	r2, r2, #8
 800a8de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f022 0204 	bic.w	r2, r2, #4
 800a8ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	691a      	ldr	r2, [r3, #16]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	430a      	orrs	r2, r1
 800a900:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a902:	e023      	b.n	800a94c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68b9      	ldr	r1, [r7, #8]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 fc2a 	bl	800b164 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a91e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a92e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	021a      	lsls	r2, r3, #8
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	430a      	orrs	r2, r1
 800a942:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a944:	e002      	b.n	800a94c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	75fb      	strb	r3, [r7, #23]
      break;
 800a94a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2200      	movs	r2, #0
 800a950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a954:	7dfb      	ldrb	r3, [r7, #23]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3718      	adds	r7, #24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop

0800a960 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a974:	2b01      	cmp	r3, #1
 800a976:	d101      	bne.n	800a97c <HAL_TIM_ConfigClockSource+0x1c>
 800a978:	2302      	movs	r3, #2
 800a97a:	e0dc      	b.n	800ab36 <HAL_TIM_ConfigClockSource+0x1d6>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2202      	movs	r2, #2
 800a988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	4b6a      	ldr	r3, [pc, #424]	; (800ab40 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a998:	4013      	ands	r3, r2
 800a99a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a64      	ldr	r2, [pc, #400]	; (800ab44 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	f000 80a9 	beq.w	800ab0a <HAL_TIM_ConfigClockSource+0x1aa>
 800a9b8:	4a62      	ldr	r2, [pc, #392]	; (800ab44 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	f200 80ae 	bhi.w	800ab1c <HAL_TIM_ConfigClockSource+0x1bc>
 800a9c0:	4a61      	ldr	r2, [pc, #388]	; (800ab48 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	f000 80a1 	beq.w	800ab0a <HAL_TIM_ConfigClockSource+0x1aa>
 800a9c8:	4a5f      	ldr	r2, [pc, #380]	; (800ab48 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	f200 80a6 	bhi.w	800ab1c <HAL_TIM_ConfigClockSource+0x1bc>
 800a9d0:	4a5e      	ldr	r2, [pc, #376]	; (800ab4c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	f000 8099 	beq.w	800ab0a <HAL_TIM_ConfigClockSource+0x1aa>
 800a9d8:	4a5c      	ldr	r2, [pc, #368]	; (800ab4c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	f200 809e 	bhi.w	800ab1c <HAL_TIM_ConfigClockSource+0x1bc>
 800a9e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a9e4:	f000 8091 	beq.w	800ab0a <HAL_TIM_ConfigClockSource+0x1aa>
 800a9e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a9ec:	f200 8096 	bhi.w	800ab1c <HAL_TIM_ConfigClockSource+0x1bc>
 800a9f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9f4:	f000 8089 	beq.w	800ab0a <HAL_TIM_ConfigClockSource+0x1aa>
 800a9f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9fc:	f200 808e 	bhi.w	800ab1c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa04:	d03e      	beq.n	800aa84 <HAL_TIM_ConfigClockSource+0x124>
 800aa06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa0a:	f200 8087 	bhi.w	800ab1c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa12:	f000 8086 	beq.w	800ab22 <HAL_TIM_ConfigClockSource+0x1c2>
 800aa16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa1a:	d87f      	bhi.n	800ab1c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa1c:	2b70      	cmp	r3, #112	; 0x70
 800aa1e:	d01a      	beq.n	800aa56 <HAL_TIM_ConfigClockSource+0xf6>
 800aa20:	2b70      	cmp	r3, #112	; 0x70
 800aa22:	d87b      	bhi.n	800ab1c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa24:	2b60      	cmp	r3, #96	; 0x60
 800aa26:	d050      	beq.n	800aaca <HAL_TIM_ConfigClockSource+0x16a>
 800aa28:	2b60      	cmp	r3, #96	; 0x60
 800aa2a:	d877      	bhi.n	800ab1c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa2c:	2b50      	cmp	r3, #80	; 0x50
 800aa2e:	d03c      	beq.n	800aaaa <HAL_TIM_ConfigClockSource+0x14a>
 800aa30:	2b50      	cmp	r3, #80	; 0x50
 800aa32:	d873      	bhi.n	800ab1c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa34:	2b40      	cmp	r3, #64	; 0x40
 800aa36:	d058      	beq.n	800aaea <HAL_TIM_ConfigClockSource+0x18a>
 800aa38:	2b40      	cmp	r3, #64	; 0x40
 800aa3a:	d86f      	bhi.n	800ab1c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa3c:	2b30      	cmp	r3, #48	; 0x30
 800aa3e:	d064      	beq.n	800ab0a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa40:	2b30      	cmp	r3, #48	; 0x30
 800aa42:	d86b      	bhi.n	800ab1c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa44:	2b20      	cmp	r3, #32
 800aa46:	d060      	beq.n	800ab0a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa48:	2b20      	cmp	r3, #32
 800aa4a:	d867      	bhi.n	800ab1c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d05c      	beq.n	800ab0a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa50:	2b10      	cmp	r3, #16
 800aa52:	d05a      	beq.n	800ab0a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa54:	e062      	b.n	800ab1c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6818      	ldr	r0, [r3, #0]
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	6899      	ldr	r1, [r3, #8]
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	f000 fc61 	bl	800b32c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aa78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68ba      	ldr	r2, [r7, #8]
 800aa80:	609a      	str	r2, [r3, #8]
      break;
 800aa82:	e04f      	b.n	800ab24 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6818      	ldr	r0, [r3, #0]
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	6899      	ldr	r1, [r3, #8]
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	685a      	ldr	r2, [r3, #4]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	f000 fc4a 	bl	800b32c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	689a      	ldr	r2, [r3, #8]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aaa6:	609a      	str	r2, [r3, #8]
      break;
 800aaa8:	e03c      	b.n	800ab24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6818      	ldr	r0, [r3, #0]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	6859      	ldr	r1, [r3, #4]
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	461a      	mov	r2, r3
 800aab8:	f000 fbba 	bl	800b230 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2150      	movs	r1, #80	; 0x50
 800aac2:	4618      	mov	r0, r3
 800aac4:	f000 fc14 	bl	800b2f0 <TIM_ITRx_SetConfig>
      break;
 800aac8:	e02c      	b.n	800ab24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6818      	ldr	r0, [r3, #0]
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	6859      	ldr	r1, [r3, #4]
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	461a      	mov	r2, r3
 800aad8:	f000 fbd9 	bl	800b28e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2160      	movs	r1, #96	; 0x60
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 fc04 	bl	800b2f0 <TIM_ITRx_SetConfig>
      break;
 800aae8:	e01c      	b.n	800ab24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6818      	ldr	r0, [r3, #0]
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	6859      	ldr	r1, [r3, #4]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	f000 fb9a 	bl	800b230 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2140      	movs	r1, #64	; 0x40
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 fbf4 	bl	800b2f0 <TIM_ITRx_SetConfig>
      break;
 800ab08:	e00c      	b.n	800ab24 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4619      	mov	r1, r3
 800ab14:	4610      	mov	r0, r2
 800ab16:	f000 fbeb 	bl	800b2f0 <TIM_ITRx_SetConfig>
      break;
 800ab1a:	e003      	b.n	800ab24 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab20:	e000      	b.n	800ab24 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ab22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	ffceff88 	.word	0xffceff88
 800ab44:	00100040 	.word	0x00100040
 800ab48:	00100030 	.word	0x00100030
 800ab4c:	00100020 	.word	0x00100020

0800ab50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a40      	ldr	r2, [pc, #256]	; (800ac64 <TIM_Base_SetConfig+0x114>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d013      	beq.n	800ab90 <TIM_Base_SetConfig+0x40>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab6e:	d00f      	beq.n	800ab90 <TIM_Base_SetConfig+0x40>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a3d      	ldr	r2, [pc, #244]	; (800ac68 <TIM_Base_SetConfig+0x118>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d00b      	beq.n	800ab90 <TIM_Base_SetConfig+0x40>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a3c      	ldr	r2, [pc, #240]	; (800ac6c <TIM_Base_SetConfig+0x11c>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d007      	beq.n	800ab90 <TIM_Base_SetConfig+0x40>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a3b      	ldr	r2, [pc, #236]	; (800ac70 <TIM_Base_SetConfig+0x120>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d003      	beq.n	800ab90 <TIM_Base_SetConfig+0x40>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a3a      	ldr	r2, [pc, #232]	; (800ac74 <TIM_Base_SetConfig+0x124>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d108      	bne.n	800aba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a2f      	ldr	r2, [pc, #188]	; (800ac64 <TIM_Base_SetConfig+0x114>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d01f      	beq.n	800abea <TIM_Base_SetConfig+0x9a>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abb0:	d01b      	beq.n	800abea <TIM_Base_SetConfig+0x9a>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a2c      	ldr	r2, [pc, #176]	; (800ac68 <TIM_Base_SetConfig+0x118>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d017      	beq.n	800abea <TIM_Base_SetConfig+0x9a>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a2b      	ldr	r2, [pc, #172]	; (800ac6c <TIM_Base_SetConfig+0x11c>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d013      	beq.n	800abea <TIM_Base_SetConfig+0x9a>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a2a      	ldr	r2, [pc, #168]	; (800ac70 <TIM_Base_SetConfig+0x120>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d00f      	beq.n	800abea <TIM_Base_SetConfig+0x9a>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a29      	ldr	r2, [pc, #164]	; (800ac74 <TIM_Base_SetConfig+0x124>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d00b      	beq.n	800abea <TIM_Base_SetConfig+0x9a>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a28      	ldr	r2, [pc, #160]	; (800ac78 <TIM_Base_SetConfig+0x128>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d007      	beq.n	800abea <TIM_Base_SetConfig+0x9a>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a27      	ldr	r2, [pc, #156]	; (800ac7c <TIM_Base_SetConfig+0x12c>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d003      	beq.n	800abea <TIM_Base_SetConfig+0x9a>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a26      	ldr	r2, [pc, #152]	; (800ac80 <TIM_Base_SetConfig+0x130>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d108      	bne.n	800abfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	695b      	ldr	r3, [r3, #20]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	689a      	ldr	r2, [r3, #8]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a10      	ldr	r2, [pc, #64]	; (800ac64 <TIM_Base_SetConfig+0x114>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d00f      	beq.n	800ac48 <TIM_Base_SetConfig+0xf8>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4a12      	ldr	r2, [pc, #72]	; (800ac74 <TIM_Base_SetConfig+0x124>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d00b      	beq.n	800ac48 <TIM_Base_SetConfig+0xf8>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a11      	ldr	r2, [pc, #68]	; (800ac78 <TIM_Base_SetConfig+0x128>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d007      	beq.n	800ac48 <TIM_Base_SetConfig+0xf8>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a10      	ldr	r2, [pc, #64]	; (800ac7c <TIM_Base_SetConfig+0x12c>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d003      	beq.n	800ac48 <TIM_Base_SetConfig+0xf8>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a0f      	ldr	r2, [pc, #60]	; (800ac80 <TIM_Base_SetConfig+0x130>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d103      	bne.n	800ac50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	691a      	ldr	r2, [r3, #16]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	615a      	str	r2, [r3, #20]
}
 800ac56:	bf00      	nop
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	40010000 	.word	0x40010000
 800ac68:	40000400 	.word	0x40000400
 800ac6c:	40000800 	.word	0x40000800
 800ac70:	40000c00 	.word	0x40000c00
 800ac74:	40010400 	.word	0x40010400
 800ac78:	40014000 	.word	0x40014000
 800ac7c:	40014400 	.word	0x40014400
 800ac80:	40014800 	.word	0x40014800

0800ac84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b087      	sub	sp, #28
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a1b      	ldr	r3, [r3, #32]
 800ac92:	f023 0201 	bic.w	r2, r3, #1
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a1b      	ldr	r3, [r3, #32]
 800ac9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	4b37      	ldr	r3, [pc, #220]	; (800ad8c <TIM_OC1_SetConfig+0x108>)
 800acb0:	4013      	ands	r3, r2
 800acb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f023 0303 	bic.w	r3, r3, #3
 800acba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	f023 0302 	bic.w	r3, r3, #2
 800accc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	697a      	ldr	r2, [r7, #20]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4a2d      	ldr	r2, [pc, #180]	; (800ad90 <TIM_OC1_SetConfig+0x10c>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d00f      	beq.n	800ad00 <TIM_OC1_SetConfig+0x7c>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	4a2c      	ldr	r2, [pc, #176]	; (800ad94 <TIM_OC1_SetConfig+0x110>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d00b      	beq.n	800ad00 <TIM_OC1_SetConfig+0x7c>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4a2b      	ldr	r2, [pc, #172]	; (800ad98 <TIM_OC1_SetConfig+0x114>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d007      	beq.n	800ad00 <TIM_OC1_SetConfig+0x7c>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4a2a      	ldr	r2, [pc, #168]	; (800ad9c <TIM_OC1_SetConfig+0x118>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d003      	beq.n	800ad00 <TIM_OC1_SetConfig+0x7c>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a29      	ldr	r2, [pc, #164]	; (800ada0 <TIM_OC1_SetConfig+0x11c>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d10c      	bne.n	800ad1a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	f023 0308 	bic.w	r3, r3, #8
 800ad06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	697a      	ldr	r2, [r7, #20]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	f023 0304 	bic.w	r3, r3, #4
 800ad18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a1c      	ldr	r2, [pc, #112]	; (800ad90 <TIM_OC1_SetConfig+0x10c>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d00f      	beq.n	800ad42 <TIM_OC1_SetConfig+0xbe>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a1b      	ldr	r2, [pc, #108]	; (800ad94 <TIM_OC1_SetConfig+0x110>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d00b      	beq.n	800ad42 <TIM_OC1_SetConfig+0xbe>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4a1a      	ldr	r2, [pc, #104]	; (800ad98 <TIM_OC1_SetConfig+0x114>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d007      	beq.n	800ad42 <TIM_OC1_SetConfig+0xbe>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4a19      	ldr	r2, [pc, #100]	; (800ad9c <TIM_OC1_SetConfig+0x118>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d003      	beq.n	800ad42 <TIM_OC1_SetConfig+0xbe>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a18      	ldr	r2, [pc, #96]	; (800ada0 <TIM_OC1_SetConfig+0x11c>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d111      	bne.n	800ad66 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	693a      	ldr	r2, [r7, #16]
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	685a      	ldr	r2, [r3, #4]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	697a      	ldr	r2, [r7, #20]
 800ad7e:	621a      	str	r2, [r3, #32]
}
 800ad80:	bf00      	nop
 800ad82:	371c      	adds	r7, #28
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	fffeff8f 	.word	0xfffeff8f
 800ad90:	40010000 	.word	0x40010000
 800ad94:	40010400 	.word	0x40010400
 800ad98:	40014000 	.word	0x40014000
 800ad9c:	40014400 	.word	0x40014400
 800ada0:	40014800 	.word	0x40014800

0800ada4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b087      	sub	sp, #28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	f023 0210 	bic.w	r2, r3, #16
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	4b34      	ldr	r3, [pc, #208]	; (800aea0 <TIM_OC2_SetConfig+0xfc>)
 800add0:	4013      	ands	r3, r2
 800add2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	021b      	lsls	r3, r3, #8
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	4313      	orrs	r3, r2
 800ade6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	f023 0320 	bic.w	r3, r3, #32
 800adee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	011b      	lsls	r3, r3, #4
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a29      	ldr	r2, [pc, #164]	; (800aea4 <TIM_OC2_SetConfig+0x100>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d003      	beq.n	800ae0c <TIM_OC2_SetConfig+0x68>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a28      	ldr	r2, [pc, #160]	; (800aea8 <TIM_OC2_SetConfig+0x104>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d10d      	bne.n	800ae28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	011b      	lsls	r3, r3, #4
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a1e      	ldr	r2, [pc, #120]	; (800aea4 <TIM_OC2_SetConfig+0x100>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d00f      	beq.n	800ae50 <TIM_OC2_SetConfig+0xac>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a1d      	ldr	r2, [pc, #116]	; (800aea8 <TIM_OC2_SetConfig+0x104>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d00b      	beq.n	800ae50 <TIM_OC2_SetConfig+0xac>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a1c      	ldr	r2, [pc, #112]	; (800aeac <TIM_OC2_SetConfig+0x108>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d007      	beq.n	800ae50 <TIM_OC2_SetConfig+0xac>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a1b      	ldr	r2, [pc, #108]	; (800aeb0 <TIM_OC2_SetConfig+0x10c>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d003      	beq.n	800ae50 <TIM_OC2_SetConfig+0xac>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a1a      	ldr	r2, [pc, #104]	; (800aeb4 <TIM_OC2_SetConfig+0x110>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d113      	bne.n	800ae78 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	695b      	ldr	r3, [r3, #20]
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	699b      	ldr	r3, [r3, #24]
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	693a      	ldr	r2, [r7, #16]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	693a      	ldr	r2, [r7, #16]
 800ae7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	685a      	ldr	r2, [r3, #4]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	697a      	ldr	r2, [r7, #20]
 800ae90:	621a      	str	r2, [r3, #32]
}
 800ae92:	bf00      	nop
 800ae94:	371c      	adds	r7, #28
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	feff8fff 	.word	0xfeff8fff
 800aea4:	40010000 	.word	0x40010000
 800aea8:	40010400 	.word	0x40010400
 800aeac:	40014000 	.word	0x40014000
 800aeb0:	40014400 	.word	0x40014400
 800aeb4:	40014800 	.word	0x40014800

0800aeb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b087      	sub	sp, #28
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a1b      	ldr	r3, [r3, #32]
 800aed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	69db      	ldr	r3, [r3, #28]
 800aede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	4b33      	ldr	r3, [pc, #204]	; (800afb0 <TIM_OC3_SetConfig+0xf8>)
 800aee4:	4013      	ands	r3, r2
 800aee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f023 0303 	bic.w	r3, r3, #3
 800aeee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	021b      	lsls	r3, r3, #8
 800af08:	697a      	ldr	r2, [r7, #20]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a28      	ldr	r2, [pc, #160]	; (800afb4 <TIM_OC3_SetConfig+0xfc>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d003      	beq.n	800af1e <TIM_OC3_SetConfig+0x66>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a27      	ldr	r2, [pc, #156]	; (800afb8 <TIM_OC3_SetConfig+0x100>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d10d      	bne.n	800af3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	021b      	lsls	r3, r3, #8
 800af2c:	697a      	ldr	r2, [r7, #20]
 800af2e:	4313      	orrs	r3, r2
 800af30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4a1d      	ldr	r2, [pc, #116]	; (800afb4 <TIM_OC3_SetConfig+0xfc>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d00f      	beq.n	800af62 <TIM_OC3_SetConfig+0xaa>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	4a1c      	ldr	r2, [pc, #112]	; (800afb8 <TIM_OC3_SetConfig+0x100>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d00b      	beq.n	800af62 <TIM_OC3_SetConfig+0xaa>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	4a1b      	ldr	r2, [pc, #108]	; (800afbc <TIM_OC3_SetConfig+0x104>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d007      	beq.n	800af62 <TIM_OC3_SetConfig+0xaa>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a1a      	ldr	r2, [pc, #104]	; (800afc0 <TIM_OC3_SetConfig+0x108>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d003      	beq.n	800af62 <TIM_OC3_SetConfig+0xaa>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a19      	ldr	r2, [pc, #100]	; (800afc4 <TIM_OC3_SetConfig+0x10c>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d113      	bne.n	800af8a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	695b      	ldr	r3, [r3, #20]
 800af76:	011b      	lsls	r3, r3, #4
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	011b      	lsls	r3, r3, #4
 800af84:	693a      	ldr	r2, [r7, #16]
 800af86:	4313      	orrs	r3, r2
 800af88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	693a      	ldr	r2, [r7, #16]
 800af8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	685a      	ldr	r2, [r3, #4]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	697a      	ldr	r2, [r7, #20]
 800afa2:	621a      	str	r2, [r3, #32]
}
 800afa4:	bf00      	nop
 800afa6:	371c      	adds	r7, #28
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	fffeff8f 	.word	0xfffeff8f
 800afb4:	40010000 	.word	0x40010000
 800afb8:	40010400 	.word	0x40010400
 800afbc:	40014000 	.word	0x40014000
 800afc0:	40014400 	.word	0x40014400
 800afc4:	40014800 	.word	0x40014800

0800afc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afc8:	b480      	push	{r7}
 800afca:	b087      	sub	sp, #28
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a1b      	ldr	r3, [r3, #32]
 800afd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a1b      	ldr	r3, [r3, #32]
 800afe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	69db      	ldr	r3, [r3, #28]
 800afee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	4b24      	ldr	r3, [pc, #144]	; (800b084 <TIM_OC4_SetConfig+0xbc>)
 800aff4:	4013      	ands	r3, r2
 800aff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800affe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	021b      	lsls	r3, r3, #8
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	4313      	orrs	r3, r2
 800b00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	031b      	lsls	r3, r3, #12
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a19      	ldr	r2, [pc, #100]	; (800b088 <TIM_OC4_SetConfig+0xc0>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d00f      	beq.n	800b048 <TIM_OC4_SetConfig+0x80>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a18      	ldr	r2, [pc, #96]	; (800b08c <TIM_OC4_SetConfig+0xc4>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d00b      	beq.n	800b048 <TIM_OC4_SetConfig+0x80>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a17      	ldr	r2, [pc, #92]	; (800b090 <TIM_OC4_SetConfig+0xc8>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d007      	beq.n	800b048 <TIM_OC4_SetConfig+0x80>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a16      	ldr	r2, [pc, #88]	; (800b094 <TIM_OC4_SetConfig+0xcc>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d003      	beq.n	800b048 <TIM_OC4_SetConfig+0x80>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a15      	ldr	r2, [pc, #84]	; (800b098 <TIM_OC4_SetConfig+0xd0>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d109      	bne.n	800b05c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b04e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	695b      	ldr	r3, [r3, #20]
 800b054:	019b      	lsls	r3, r3, #6
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	4313      	orrs	r3, r2
 800b05a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	697a      	ldr	r2, [r7, #20]
 800b060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	685a      	ldr	r2, [r3, #4]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	693a      	ldr	r2, [r7, #16]
 800b074:	621a      	str	r2, [r3, #32]
}
 800b076:	bf00      	nop
 800b078:	371c      	adds	r7, #28
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	feff8fff 	.word	0xfeff8fff
 800b088:	40010000 	.word	0x40010000
 800b08c:	40010400 	.word	0x40010400
 800b090:	40014000 	.word	0x40014000
 800b094:	40014400 	.word	0x40014400
 800b098:	40014800 	.word	0x40014800

0800b09c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a1b      	ldr	r3, [r3, #32]
 800b0aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	4b21      	ldr	r3, [pc, #132]	; (800b14c <TIM_OC5_SetConfig+0xb0>)
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b0dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	041b      	lsls	r3, r3, #16
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a18      	ldr	r2, [pc, #96]	; (800b150 <TIM_OC5_SetConfig+0xb4>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d00f      	beq.n	800b112 <TIM_OC5_SetConfig+0x76>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a17      	ldr	r2, [pc, #92]	; (800b154 <TIM_OC5_SetConfig+0xb8>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d00b      	beq.n	800b112 <TIM_OC5_SetConfig+0x76>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a16      	ldr	r2, [pc, #88]	; (800b158 <TIM_OC5_SetConfig+0xbc>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d007      	beq.n	800b112 <TIM_OC5_SetConfig+0x76>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a15      	ldr	r2, [pc, #84]	; (800b15c <TIM_OC5_SetConfig+0xc0>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d003      	beq.n	800b112 <TIM_OC5_SetConfig+0x76>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a14      	ldr	r2, [pc, #80]	; (800b160 <TIM_OC5_SetConfig+0xc4>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d109      	bne.n	800b126 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b118:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	021b      	lsls	r3, r3, #8
 800b120:	697a      	ldr	r2, [r7, #20]
 800b122:	4313      	orrs	r3, r2
 800b124:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	697a      	ldr	r2, [r7, #20]
 800b12a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	685a      	ldr	r2, [r3, #4]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	621a      	str	r2, [r3, #32]
}
 800b140:	bf00      	nop
 800b142:	371c      	adds	r7, #28
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr
 800b14c:	fffeff8f 	.word	0xfffeff8f
 800b150:	40010000 	.word	0x40010000
 800b154:	40010400 	.word	0x40010400
 800b158:	40014000 	.word	0x40014000
 800b15c:	40014400 	.word	0x40014400
 800b160:	40014800 	.word	0x40014800

0800b164 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b164:	b480      	push	{r7}
 800b166:	b087      	sub	sp, #28
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a1b      	ldr	r3, [r3, #32]
 800b172:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a1b      	ldr	r3, [r3, #32]
 800b17e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	4b22      	ldr	r3, [pc, #136]	; (800b218 <TIM_OC6_SetConfig+0xb4>)
 800b190:	4013      	ands	r3, r2
 800b192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	021b      	lsls	r3, r3, #8
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b1a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	051b      	lsls	r3, r3, #20
 800b1ae:	693a      	ldr	r2, [r7, #16]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a19      	ldr	r2, [pc, #100]	; (800b21c <TIM_OC6_SetConfig+0xb8>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d00f      	beq.n	800b1dc <TIM_OC6_SetConfig+0x78>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a18      	ldr	r2, [pc, #96]	; (800b220 <TIM_OC6_SetConfig+0xbc>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d00b      	beq.n	800b1dc <TIM_OC6_SetConfig+0x78>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a17      	ldr	r2, [pc, #92]	; (800b224 <TIM_OC6_SetConfig+0xc0>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d007      	beq.n	800b1dc <TIM_OC6_SetConfig+0x78>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a16      	ldr	r2, [pc, #88]	; (800b228 <TIM_OC6_SetConfig+0xc4>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d003      	beq.n	800b1dc <TIM_OC6_SetConfig+0x78>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a15      	ldr	r2, [pc, #84]	; (800b22c <TIM_OC6_SetConfig+0xc8>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d109      	bne.n	800b1f0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	695b      	ldr	r3, [r3, #20]
 800b1e8:	029b      	lsls	r3, r3, #10
 800b1ea:	697a      	ldr	r2, [r7, #20]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	697a      	ldr	r2, [r7, #20]
 800b1f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	685a      	ldr	r2, [r3, #4]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	693a      	ldr	r2, [r7, #16]
 800b208:	621a      	str	r2, [r3, #32]
}
 800b20a:	bf00      	nop
 800b20c:	371c      	adds	r7, #28
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	feff8fff 	.word	0xfeff8fff
 800b21c:	40010000 	.word	0x40010000
 800b220:	40010400 	.word	0x40010400
 800b224:	40014000 	.word	0x40014000
 800b228:	40014400 	.word	0x40014400
 800b22c:	40014800 	.word	0x40014800

0800b230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b230:	b480      	push	{r7}
 800b232:	b087      	sub	sp, #28
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6a1b      	ldr	r3, [r3, #32]
 800b240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	f023 0201 	bic.w	r2, r3, #1
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	699b      	ldr	r3, [r3, #24]
 800b252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b25a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	011b      	lsls	r3, r3, #4
 800b260:	693a      	ldr	r2, [r7, #16]
 800b262:	4313      	orrs	r3, r2
 800b264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f023 030a 	bic.w	r3, r3, #10
 800b26c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	4313      	orrs	r3, r2
 800b274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	693a      	ldr	r2, [r7, #16]
 800b27a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	697a      	ldr	r2, [r7, #20]
 800b280:	621a      	str	r2, [r3, #32]
}
 800b282:	bf00      	nop
 800b284:	371c      	adds	r7, #28
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b28e:	b480      	push	{r7}
 800b290:	b087      	sub	sp, #28
 800b292:	af00      	add	r7, sp, #0
 800b294:	60f8      	str	r0, [r7, #12]
 800b296:	60b9      	str	r1, [r7, #8]
 800b298:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	6a1b      	ldr	r3, [r3, #32]
 800b29e:	f023 0210 	bic.w	r2, r3, #16
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6a1b      	ldr	r3, [r3, #32]
 800b2b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b2b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	031b      	lsls	r3, r3, #12
 800b2be:	697a      	ldr	r2, [r7, #20]
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b2ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	011b      	lsls	r3, r3, #4
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	693a      	ldr	r2, [r7, #16]
 800b2e0:	621a      	str	r2, [r3, #32]
}
 800b2e2:	bf00      	nop
 800b2e4:	371c      	adds	r7, #28
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr
	...

0800b2f0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	4b09      	ldr	r3, [pc, #36]	; (800b328 <TIM_ITRx_SetConfig+0x38>)
 800b304:	4013      	ands	r3, r2
 800b306:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b308:	683a      	ldr	r2, [r7, #0]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	f043 0307 	orr.w	r3, r3, #7
 800b312:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	609a      	str	r2, [r3, #8]
}
 800b31a:	bf00      	nop
 800b31c:	3714      	adds	r7, #20
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	ffcfff8f 	.word	0xffcfff8f

0800b32c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b087      	sub	sp, #28
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	607a      	str	r2, [r7, #4]
 800b338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	021a      	lsls	r2, r3, #8
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	431a      	orrs	r2, r3
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	4313      	orrs	r3, r2
 800b354:	697a      	ldr	r2, [r7, #20]
 800b356:	4313      	orrs	r3, r2
 800b358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	697a      	ldr	r2, [r7, #20]
 800b35e:	609a      	str	r2, [r3, #8]
}
 800b360:	bf00      	nop
 800b362:	371c      	adds	r7, #28
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b087      	sub	sp, #28
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	f003 031f 	and.w	r3, r3, #31
 800b37e:	2201      	movs	r2, #1
 800b380:	fa02 f303 	lsl.w	r3, r2, r3
 800b384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6a1a      	ldr	r2, [r3, #32]
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	43db      	mvns	r3, r3
 800b38e:	401a      	ands	r2, r3
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6a1a      	ldr	r2, [r3, #32]
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	f003 031f 	and.w	r3, r3, #31
 800b39e:	6879      	ldr	r1, [r7, #4]
 800b3a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b3a4:	431a      	orrs	r2, r3
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	621a      	str	r2, [r3, #32]
}
 800b3aa:	bf00      	nop
 800b3ac:	371c      	adds	r7, #28
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
	...

0800b3b8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d109      	bne.n	800b3dc <HAL_TIMEx_PWMN_Start+0x24>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	bf14      	ite	ne
 800b3d4:	2301      	movne	r3, #1
 800b3d6:	2300      	moveq	r3, #0
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	e022      	b.n	800b422 <HAL_TIMEx_PWMN_Start+0x6a>
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	2b04      	cmp	r3, #4
 800b3e0:	d109      	bne.n	800b3f6 <HAL_TIMEx_PWMN_Start+0x3e>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	bf14      	ite	ne
 800b3ee:	2301      	movne	r3, #1
 800b3f0:	2300      	moveq	r3, #0
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	e015      	b.n	800b422 <HAL_TIMEx_PWMN_Start+0x6a>
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	2b08      	cmp	r3, #8
 800b3fa:	d109      	bne.n	800b410 <HAL_TIMEx_PWMN_Start+0x58>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b402:	b2db      	uxtb	r3, r3
 800b404:	2b01      	cmp	r3, #1
 800b406:	bf14      	ite	ne
 800b408:	2301      	movne	r3, #1
 800b40a:	2300      	moveq	r3, #0
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	e008      	b.n	800b422 <HAL_TIMEx_PWMN_Start+0x6a>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b01      	cmp	r3, #1
 800b41a:	bf14      	ite	ne
 800b41c:	2301      	movne	r3, #1
 800b41e:	2300      	moveq	r3, #0
 800b420:	b2db      	uxtb	r3, r3
 800b422:	2b00      	cmp	r3, #0
 800b424:	d001      	beq.n	800b42a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e073      	b.n	800b512 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d104      	bne.n	800b43a <HAL_TIMEx_PWMN_Start+0x82>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2202      	movs	r2, #2
 800b434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b438:	e013      	b.n	800b462 <HAL_TIMEx_PWMN_Start+0xaa>
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2b04      	cmp	r3, #4
 800b43e:	d104      	bne.n	800b44a <HAL_TIMEx_PWMN_Start+0x92>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2202      	movs	r2, #2
 800b444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b448:	e00b      	b.n	800b462 <HAL_TIMEx_PWMN_Start+0xaa>
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	2b08      	cmp	r3, #8
 800b44e:	d104      	bne.n	800b45a <HAL_TIMEx_PWMN_Start+0xa2>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2202      	movs	r2, #2
 800b454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b458:	e003      	b.n	800b462 <HAL_TIMEx_PWMN_Start+0xaa>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2202      	movs	r2, #2
 800b45e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2204      	movs	r2, #4
 800b468:	6839      	ldr	r1, [r7, #0]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 f972 	bl	800b754 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b47e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a25      	ldr	r2, [pc, #148]	; (800b51c <HAL_TIMEx_PWMN_Start+0x164>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d022      	beq.n	800b4d0 <HAL_TIMEx_PWMN_Start+0x118>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b492:	d01d      	beq.n	800b4d0 <HAL_TIMEx_PWMN_Start+0x118>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a21      	ldr	r2, [pc, #132]	; (800b520 <HAL_TIMEx_PWMN_Start+0x168>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d018      	beq.n	800b4d0 <HAL_TIMEx_PWMN_Start+0x118>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a20      	ldr	r2, [pc, #128]	; (800b524 <HAL_TIMEx_PWMN_Start+0x16c>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d013      	beq.n	800b4d0 <HAL_TIMEx_PWMN_Start+0x118>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a1e      	ldr	r2, [pc, #120]	; (800b528 <HAL_TIMEx_PWMN_Start+0x170>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d00e      	beq.n	800b4d0 <HAL_TIMEx_PWMN_Start+0x118>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a1d      	ldr	r2, [pc, #116]	; (800b52c <HAL_TIMEx_PWMN_Start+0x174>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d009      	beq.n	800b4d0 <HAL_TIMEx_PWMN_Start+0x118>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a1b      	ldr	r2, [pc, #108]	; (800b530 <HAL_TIMEx_PWMN_Start+0x178>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d004      	beq.n	800b4d0 <HAL_TIMEx_PWMN_Start+0x118>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a1a      	ldr	r2, [pc, #104]	; (800b534 <HAL_TIMEx_PWMN_Start+0x17c>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d115      	bne.n	800b4fc <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	689a      	ldr	r2, [r3, #8]
 800b4d6:	4b18      	ldr	r3, [pc, #96]	; (800b538 <HAL_TIMEx_PWMN_Start+0x180>)
 800b4d8:	4013      	ands	r3, r2
 800b4da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2b06      	cmp	r3, #6
 800b4e0:	d015      	beq.n	800b50e <HAL_TIMEx_PWMN_Start+0x156>
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4e8:	d011      	beq.n	800b50e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f042 0201 	orr.w	r2, r2, #1
 800b4f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4fa:	e008      	b.n	800b50e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f042 0201 	orr.w	r2, r2, #1
 800b50a:	601a      	str	r2, [r3, #0]
 800b50c:	e000      	b.n	800b510 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b50e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	40010000 	.word	0x40010000
 800b520:	40000400 	.word	0x40000400
 800b524:	40000800 	.word	0x40000800
 800b528:	40000c00 	.word	0x40000c00
 800b52c:	40010400 	.word	0x40010400
 800b530:	40001800 	.word	0x40001800
 800b534:	40014000 	.word	0x40014000
 800b538:	00010007 	.word	0x00010007

0800b53c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d101      	bne.n	800b554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b550:	2302      	movs	r3, #2
 800b552:	e06d      	b.n	800b630 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2201      	movs	r2, #1
 800b558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2202      	movs	r2, #2
 800b560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a30      	ldr	r2, [pc, #192]	; (800b63c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d004      	beq.n	800b588 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a2f      	ldr	r2, [pc, #188]	; (800b640 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d108      	bne.n	800b59a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b58e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	4313      	orrs	r3, r2
 800b598:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a20      	ldr	r2, [pc, #128]	; (800b63c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d022      	beq.n	800b604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5c6:	d01d      	beq.n	800b604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a1d      	ldr	r2, [pc, #116]	; (800b644 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d018      	beq.n	800b604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4a1c      	ldr	r2, [pc, #112]	; (800b648 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d013      	beq.n	800b604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a1a      	ldr	r2, [pc, #104]	; (800b64c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d00e      	beq.n	800b604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a15      	ldr	r2, [pc, #84]	; (800b640 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d009      	beq.n	800b604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a16      	ldr	r2, [pc, #88]	; (800b650 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d004      	beq.n	800b604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a15      	ldr	r2, [pc, #84]	; (800b654 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d10c      	bne.n	800b61e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b60a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	4313      	orrs	r3, r2
 800b614:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3714      	adds	r7, #20
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	40010000 	.word	0x40010000
 800b640:	40010400 	.word	0x40010400
 800b644:	40000400 	.word	0x40000400
 800b648:	40000800 	.word	0x40000800
 800b64c:	40000c00 	.word	0x40000c00
 800b650:	40001800 	.word	0x40001800
 800b654:	40014000 	.word	0x40014000

0800b658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b662:	2300      	movs	r3, #0
 800b664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d101      	bne.n	800b674 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b670:	2302      	movs	r3, #2
 800b672:	e065      	b.n	800b740 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	4313      	orrs	r3, r2
 800b688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	4313      	orrs	r3, r2
 800b696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	695b      	ldr	r3, [r3, #20]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	699b      	ldr	r3, [r3, #24]
 800b6e8:	041b      	lsls	r3, r3, #16
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a16      	ldr	r2, [pc, #88]	; (800b74c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d004      	beq.n	800b702 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a14      	ldr	r2, [pc, #80]	; (800b750 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d115      	bne.n	800b72e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70c:	051b      	lsls	r3, r3, #20
 800b70e:	4313      	orrs	r3, r2
 800b710:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	69db      	ldr	r3, [r3, #28]
 800b71c:	4313      	orrs	r3, r2
 800b71e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3714      	adds	r7, #20
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr
 800b74c:	40010000 	.word	0x40010000
 800b750:	40010400 	.word	0x40010400

0800b754 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b754:	b480      	push	{r7}
 800b756:	b087      	sub	sp, #28
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	f003 031f 	and.w	r3, r3, #31
 800b766:	2204      	movs	r2, #4
 800b768:	fa02 f303 	lsl.w	r3, r2, r3
 800b76c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6a1a      	ldr	r2, [r3, #32]
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	43db      	mvns	r3, r3
 800b776:	401a      	ands	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6a1a      	ldr	r2, [r3, #32]
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	f003 031f 	and.w	r3, r3, #31
 800b786:	6879      	ldr	r1, [r7, #4]
 800b788:	fa01 f303 	lsl.w	r3, r1, r3
 800b78c:	431a      	orrs	r2, r3
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	621a      	str	r2, [r3, #32]
}
 800b792:	bf00      	nop
 800b794:	371c      	adds	r7, #28
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
	...

0800b7a0 <__errno>:
 800b7a0:	4b01      	ldr	r3, [pc, #4]	; (800b7a8 <__errno+0x8>)
 800b7a2:	6818      	ldr	r0, [r3, #0]
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	240000a0 	.word	0x240000a0

0800b7ac <__libc_init_array>:
 800b7ac:	b570      	push	{r4, r5, r6, lr}
 800b7ae:	4d0d      	ldr	r5, [pc, #52]	; (800b7e4 <__libc_init_array+0x38>)
 800b7b0:	4c0d      	ldr	r4, [pc, #52]	; (800b7e8 <__libc_init_array+0x3c>)
 800b7b2:	1b64      	subs	r4, r4, r5
 800b7b4:	10a4      	asrs	r4, r4, #2
 800b7b6:	2600      	movs	r6, #0
 800b7b8:	42a6      	cmp	r6, r4
 800b7ba:	d109      	bne.n	800b7d0 <__libc_init_array+0x24>
 800b7bc:	4d0b      	ldr	r5, [pc, #44]	; (800b7ec <__libc_init_array+0x40>)
 800b7be:	4c0c      	ldr	r4, [pc, #48]	; (800b7f0 <__libc_init_array+0x44>)
 800b7c0:	f000 fc8e 	bl	800c0e0 <_init>
 800b7c4:	1b64      	subs	r4, r4, r5
 800b7c6:	10a4      	asrs	r4, r4, #2
 800b7c8:	2600      	movs	r6, #0
 800b7ca:	42a6      	cmp	r6, r4
 800b7cc:	d105      	bne.n	800b7da <__libc_init_array+0x2e>
 800b7ce:	bd70      	pop	{r4, r5, r6, pc}
 800b7d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7d4:	4798      	blx	r3
 800b7d6:	3601      	adds	r6, #1
 800b7d8:	e7ee      	b.n	800b7b8 <__libc_init_array+0xc>
 800b7da:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7de:	4798      	blx	r3
 800b7e0:	3601      	adds	r6, #1
 800b7e2:	e7f2      	b.n	800b7ca <__libc_init_array+0x1e>
 800b7e4:	08013028 	.word	0x08013028
 800b7e8:	08013028 	.word	0x08013028
 800b7ec:	08013028 	.word	0x08013028
 800b7f0:	0801302c 	.word	0x0801302c

0800b7f4 <memset>:
 800b7f4:	4402      	add	r2, r0
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d100      	bne.n	800b7fe <memset+0xa>
 800b7fc:	4770      	bx	lr
 800b7fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b802:	e7f9      	b.n	800b7f8 <memset+0x4>

0800b804 <siprintf>:
 800b804:	b40e      	push	{r1, r2, r3}
 800b806:	b500      	push	{lr}
 800b808:	b09c      	sub	sp, #112	; 0x70
 800b80a:	ab1d      	add	r3, sp, #116	; 0x74
 800b80c:	9002      	str	r0, [sp, #8]
 800b80e:	9006      	str	r0, [sp, #24]
 800b810:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b814:	4809      	ldr	r0, [pc, #36]	; (800b83c <siprintf+0x38>)
 800b816:	9107      	str	r1, [sp, #28]
 800b818:	9104      	str	r1, [sp, #16]
 800b81a:	4909      	ldr	r1, [pc, #36]	; (800b840 <siprintf+0x3c>)
 800b81c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b820:	9105      	str	r1, [sp, #20]
 800b822:	6800      	ldr	r0, [r0, #0]
 800b824:	9301      	str	r3, [sp, #4]
 800b826:	a902      	add	r1, sp, #8
 800b828:	f000 f868 	bl	800b8fc <_svfiprintf_r>
 800b82c:	9b02      	ldr	r3, [sp, #8]
 800b82e:	2200      	movs	r2, #0
 800b830:	701a      	strb	r2, [r3, #0]
 800b832:	b01c      	add	sp, #112	; 0x70
 800b834:	f85d eb04 	ldr.w	lr, [sp], #4
 800b838:	b003      	add	sp, #12
 800b83a:	4770      	bx	lr
 800b83c:	240000a0 	.word	0x240000a0
 800b840:	ffff0208 	.word	0xffff0208

0800b844 <__ssputs_r>:
 800b844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b848:	688e      	ldr	r6, [r1, #8]
 800b84a:	429e      	cmp	r6, r3
 800b84c:	4682      	mov	sl, r0
 800b84e:	460c      	mov	r4, r1
 800b850:	4690      	mov	r8, r2
 800b852:	461f      	mov	r7, r3
 800b854:	d838      	bhi.n	800b8c8 <__ssputs_r+0x84>
 800b856:	898a      	ldrh	r2, [r1, #12]
 800b858:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b85c:	d032      	beq.n	800b8c4 <__ssputs_r+0x80>
 800b85e:	6825      	ldr	r5, [r4, #0]
 800b860:	6909      	ldr	r1, [r1, #16]
 800b862:	eba5 0901 	sub.w	r9, r5, r1
 800b866:	6965      	ldr	r5, [r4, #20]
 800b868:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b86c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b870:	3301      	adds	r3, #1
 800b872:	444b      	add	r3, r9
 800b874:	106d      	asrs	r5, r5, #1
 800b876:	429d      	cmp	r5, r3
 800b878:	bf38      	it	cc
 800b87a:	461d      	movcc	r5, r3
 800b87c:	0553      	lsls	r3, r2, #21
 800b87e:	d531      	bpl.n	800b8e4 <__ssputs_r+0xa0>
 800b880:	4629      	mov	r1, r5
 800b882:	f000 fb63 	bl	800bf4c <_malloc_r>
 800b886:	4606      	mov	r6, r0
 800b888:	b950      	cbnz	r0, 800b8a0 <__ssputs_r+0x5c>
 800b88a:	230c      	movs	r3, #12
 800b88c:	f8ca 3000 	str.w	r3, [sl]
 800b890:	89a3      	ldrh	r3, [r4, #12]
 800b892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b896:	81a3      	strh	r3, [r4, #12]
 800b898:	f04f 30ff 	mov.w	r0, #4294967295
 800b89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a0:	6921      	ldr	r1, [r4, #16]
 800b8a2:	464a      	mov	r2, r9
 800b8a4:	f000 fabe 	bl	800be24 <memcpy>
 800b8a8:	89a3      	ldrh	r3, [r4, #12]
 800b8aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8b2:	81a3      	strh	r3, [r4, #12]
 800b8b4:	6126      	str	r6, [r4, #16]
 800b8b6:	6165      	str	r5, [r4, #20]
 800b8b8:	444e      	add	r6, r9
 800b8ba:	eba5 0509 	sub.w	r5, r5, r9
 800b8be:	6026      	str	r6, [r4, #0]
 800b8c0:	60a5      	str	r5, [r4, #8]
 800b8c2:	463e      	mov	r6, r7
 800b8c4:	42be      	cmp	r6, r7
 800b8c6:	d900      	bls.n	800b8ca <__ssputs_r+0x86>
 800b8c8:	463e      	mov	r6, r7
 800b8ca:	6820      	ldr	r0, [r4, #0]
 800b8cc:	4632      	mov	r2, r6
 800b8ce:	4641      	mov	r1, r8
 800b8d0:	f000 fab6 	bl	800be40 <memmove>
 800b8d4:	68a3      	ldr	r3, [r4, #8]
 800b8d6:	1b9b      	subs	r3, r3, r6
 800b8d8:	60a3      	str	r3, [r4, #8]
 800b8da:	6823      	ldr	r3, [r4, #0]
 800b8dc:	4433      	add	r3, r6
 800b8de:	6023      	str	r3, [r4, #0]
 800b8e0:	2000      	movs	r0, #0
 800b8e2:	e7db      	b.n	800b89c <__ssputs_r+0x58>
 800b8e4:	462a      	mov	r2, r5
 800b8e6:	f000 fba5 	bl	800c034 <_realloc_r>
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d1e1      	bne.n	800b8b4 <__ssputs_r+0x70>
 800b8f0:	6921      	ldr	r1, [r4, #16]
 800b8f2:	4650      	mov	r0, sl
 800b8f4:	f000 fabe 	bl	800be74 <_free_r>
 800b8f8:	e7c7      	b.n	800b88a <__ssputs_r+0x46>
	...

0800b8fc <_svfiprintf_r>:
 800b8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b900:	4698      	mov	r8, r3
 800b902:	898b      	ldrh	r3, [r1, #12]
 800b904:	061b      	lsls	r3, r3, #24
 800b906:	b09d      	sub	sp, #116	; 0x74
 800b908:	4607      	mov	r7, r0
 800b90a:	460d      	mov	r5, r1
 800b90c:	4614      	mov	r4, r2
 800b90e:	d50e      	bpl.n	800b92e <_svfiprintf_r+0x32>
 800b910:	690b      	ldr	r3, [r1, #16]
 800b912:	b963      	cbnz	r3, 800b92e <_svfiprintf_r+0x32>
 800b914:	2140      	movs	r1, #64	; 0x40
 800b916:	f000 fb19 	bl	800bf4c <_malloc_r>
 800b91a:	6028      	str	r0, [r5, #0]
 800b91c:	6128      	str	r0, [r5, #16]
 800b91e:	b920      	cbnz	r0, 800b92a <_svfiprintf_r+0x2e>
 800b920:	230c      	movs	r3, #12
 800b922:	603b      	str	r3, [r7, #0]
 800b924:	f04f 30ff 	mov.w	r0, #4294967295
 800b928:	e0d1      	b.n	800bace <_svfiprintf_r+0x1d2>
 800b92a:	2340      	movs	r3, #64	; 0x40
 800b92c:	616b      	str	r3, [r5, #20]
 800b92e:	2300      	movs	r3, #0
 800b930:	9309      	str	r3, [sp, #36]	; 0x24
 800b932:	2320      	movs	r3, #32
 800b934:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b938:	f8cd 800c 	str.w	r8, [sp, #12]
 800b93c:	2330      	movs	r3, #48	; 0x30
 800b93e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bae8 <_svfiprintf_r+0x1ec>
 800b942:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b946:	f04f 0901 	mov.w	r9, #1
 800b94a:	4623      	mov	r3, r4
 800b94c:	469a      	mov	sl, r3
 800b94e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b952:	b10a      	cbz	r2, 800b958 <_svfiprintf_r+0x5c>
 800b954:	2a25      	cmp	r2, #37	; 0x25
 800b956:	d1f9      	bne.n	800b94c <_svfiprintf_r+0x50>
 800b958:	ebba 0b04 	subs.w	fp, sl, r4
 800b95c:	d00b      	beq.n	800b976 <_svfiprintf_r+0x7a>
 800b95e:	465b      	mov	r3, fp
 800b960:	4622      	mov	r2, r4
 800b962:	4629      	mov	r1, r5
 800b964:	4638      	mov	r0, r7
 800b966:	f7ff ff6d 	bl	800b844 <__ssputs_r>
 800b96a:	3001      	adds	r0, #1
 800b96c:	f000 80aa 	beq.w	800bac4 <_svfiprintf_r+0x1c8>
 800b970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b972:	445a      	add	r2, fp
 800b974:	9209      	str	r2, [sp, #36]	; 0x24
 800b976:	f89a 3000 	ldrb.w	r3, [sl]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	f000 80a2 	beq.w	800bac4 <_svfiprintf_r+0x1c8>
 800b980:	2300      	movs	r3, #0
 800b982:	f04f 32ff 	mov.w	r2, #4294967295
 800b986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b98a:	f10a 0a01 	add.w	sl, sl, #1
 800b98e:	9304      	str	r3, [sp, #16]
 800b990:	9307      	str	r3, [sp, #28]
 800b992:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b996:	931a      	str	r3, [sp, #104]	; 0x68
 800b998:	4654      	mov	r4, sl
 800b99a:	2205      	movs	r2, #5
 800b99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9a0:	4851      	ldr	r0, [pc, #324]	; (800bae8 <_svfiprintf_r+0x1ec>)
 800b9a2:	f7f4 fc9d 	bl	80002e0 <memchr>
 800b9a6:	9a04      	ldr	r2, [sp, #16]
 800b9a8:	b9d8      	cbnz	r0, 800b9e2 <_svfiprintf_r+0xe6>
 800b9aa:	06d0      	lsls	r0, r2, #27
 800b9ac:	bf44      	itt	mi
 800b9ae:	2320      	movmi	r3, #32
 800b9b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9b4:	0711      	lsls	r1, r2, #28
 800b9b6:	bf44      	itt	mi
 800b9b8:	232b      	movmi	r3, #43	; 0x2b
 800b9ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9be:	f89a 3000 	ldrb.w	r3, [sl]
 800b9c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b9c4:	d015      	beq.n	800b9f2 <_svfiprintf_r+0xf6>
 800b9c6:	9a07      	ldr	r2, [sp, #28]
 800b9c8:	4654      	mov	r4, sl
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	f04f 0c0a 	mov.w	ip, #10
 800b9d0:	4621      	mov	r1, r4
 800b9d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9d6:	3b30      	subs	r3, #48	; 0x30
 800b9d8:	2b09      	cmp	r3, #9
 800b9da:	d94e      	bls.n	800ba7a <_svfiprintf_r+0x17e>
 800b9dc:	b1b0      	cbz	r0, 800ba0c <_svfiprintf_r+0x110>
 800b9de:	9207      	str	r2, [sp, #28]
 800b9e0:	e014      	b.n	800ba0c <_svfiprintf_r+0x110>
 800b9e2:	eba0 0308 	sub.w	r3, r0, r8
 800b9e6:	fa09 f303 	lsl.w	r3, r9, r3
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	9304      	str	r3, [sp, #16]
 800b9ee:	46a2      	mov	sl, r4
 800b9f0:	e7d2      	b.n	800b998 <_svfiprintf_r+0x9c>
 800b9f2:	9b03      	ldr	r3, [sp, #12]
 800b9f4:	1d19      	adds	r1, r3, #4
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	9103      	str	r1, [sp, #12]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	bfbb      	ittet	lt
 800b9fe:	425b      	neglt	r3, r3
 800ba00:	f042 0202 	orrlt.w	r2, r2, #2
 800ba04:	9307      	strge	r3, [sp, #28]
 800ba06:	9307      	strlt	r3, [sp, #28]
 800ba08:	bfb8      	it	lt
 800ba0a:	9204      	strlt	r2, [sp, #16]
 800ba0c:	7823      	ldrb	r3, [r4, #0]
 800ba0e:	2b2e      	cmp	r3, #46	; 0x2e
 800ba10:	d10c      	bne.n	800ba2c <_svfiprintf_r+0x130>
 800ba12:	7863      	ldrb	r3, [r4, #1]
 800ba14:	2b2a      	cmp	r3, #42	; 0x2a
 800ba16:	d135      	bne.n	800ba84 <_svfiprintf_r+0x188>
 800ba18:	9b03      	ldr	r3, [sp, #12]
 800ba1a:	1d1a      	adds	r2, r3, #4
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	9203      	str	r2, [sp, #12]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	bfb8      	it	lt
 800ba24:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba28:	3402      	adds	r4, #2
 800ba2a:	9305      	str	r3, [sp, #20]
 800ba2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800baf8 <_svfiprintf_r+0x1fc>
 800ba30:	7821      	ldrb	r1, [r4, #0]
 800ba32:	2203      	movs	r2, #3
 800ba34:	4650      	mov	r0, sl
 800ba36:	f7f4 fc53 	bl	80002e0 <memchr>
 800ba3a:	b140      	cbz	r0, 800ba4e <_svfiprintf_r+0x152>
 800ba3c:	2340      	movs	r3, #64	; 0x40
 800ba3e:	eba0 000a 	sub.w	r0, r0, sl
 800ba42:	fa03 f000 	lsl.w	r0, r3, r0
 800ba46:	9b04      	ldr	r3, [sp, #16]
 800ba48:	4303      	orrs	r3, r0
 800ba4a:	3401      	adds	r4, #1
 800ba4c:	9304      	str	r3, [sp, #16]
 800ba4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba52:	4826      	ldr	r0, [pc, #152]	; (800baec <_svfiprintf_r+0x1f0>)
 800ba54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba58:	2206      	movs	r2, #6
 800ba5a:	f7f4 fc41 	bl	80002e0 <memchr>
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	d038      	beq.n	800bad4 <_svfiprintf_r+0x1d8>
 800ba62:	4b23      	ldr	r3, [pc, #140]	; (800baf0 <_svfiprintf_r+0x1f4>)
 800ba64:	bb1b      	cbnz	r3, 800baae <_svfiprintf_r+0x1b2>
 800ba66:	9b03      	ldr	r3, [sp, #12]
 800ba68:	3307      	adds	r3, #7
 800ba6a:	f023 0307 	bic.w	r3, r3, #7
 800ba6e:	3308      	adds	r3, #8
 800ba70:	9303      	str	r3, [sp, #12]
 800ba72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba74:	4433      	add	r3, r6
 800ba76:	9309      	str	r3, [sp, #36]	; 0x24
 800ba78:	e767      	b.n	800b94a <_svfiprintf_r+0x4e>
 800ba7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba7e:	460c      	mov	r4, r1
 800ba80:	2001      	movs	r0, #1
 800ba82:	e7a5      	b.n	800b9d0 <_svfiprintf_r+0xd4>
 800ba84:	2300      	movs	r3, #0
 800ba86:	3401      	adds	r4, #1
 800ba88:	9305      	str	r3, [sp, #20]
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	f04f 0c0a 	mov.w	ip, #10
 800ba90:	4620      	mov	r0, r4
 800ba92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba96:	3a30      	subs	r2, #48	; 0x30
 800ba98:	2a09      	cmp	r2, #9
 800ba9a:	d903      	bls.n	800baa4 <_svfiprintf_r+0x1a8>
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d0c5      	beq.n	800ba2c <_svfiprintf_r+0x130>
 800baa0:	9105      	str	r1, [sp, #20]
 800baa2:	e7c3      	b.n	800ba2c <_svfiprintf_r+0x130>
 800baa4:	fb0c 2101 	mla	r1, ip, r1, r2
 800baa8:	4604      	mov	r4, r0
 800baaa:	2301      	movs	r3, #1
 800baac:	e7f0      	b.n	800ba90 <_svfiprintf_r+0x194>
 800baae:	ab03      	add	r3, sp, #12
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	462a      	mov	r2, r5
 800bab4:	4b0f      	ldr	r3, [pc, #60]	; (800baf4 <_svfiprintf_r+0x1f8>)
 800bab6:	a904      	add	r1, sp, #16
 800bab8:	4638      	mov	r0, r7
 800baba:	f3af 8000 	nop.w
 800babe:	1c42      	adds	r2, r0, #1
 800bac0:	4606      	mov	r6, r0
 800bac2:	d1d6      	bne.n	800ba72 <_svfiprintf_r+0x176>
 800bac4:	89ab      	ldrh	r3, [r5, #12]
 800bac6:	065b      	lsls	r3, r3, #25
 800bac8:	f53f af2c 	bmi.w	800b924 <_svfiprintf_r+0x28>
 800bacc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bace:	b01d      	add	sp, #116	; 0x74
 800bad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad4:	ab03      	add	r3, sp, #12
 800bad6:	9300      	str	r3, [sp, #0]
 800bad8:	462a      	mov	r2, r5
 800bada:	4b06      	ldr	r3, [pc, #24]	; (800baf4 <_svfiprintf_r+0x1f8>)
 800badc:	a904      	add	r1, sp, #16
 800bade:	4638      	mov	r0, r7
 800bae0:	f000 f87a 	bl	800bbd8 <_printf_i>
 800bae4:	e7eb      	b.n	800babe <_svfiprintf_r+0x1c2>
 800bae6:	bf00      	nop
 800bae8:	08012ff4 	.word	0x08012ff4
 800baec:	08012ffe 	.word	0x08012ffe
 800baf0:	00000000 	.word	0x00000000
 800baf4:	0800b845 	.word	0x0800b845
 800baf8:	08012ffa 	.word	0x08012ffa

0800bafc <_printf_common>:
 800bafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb00:	4616      	mov	r6, r2
 800bb02:	4699      	mov	r9, r3
 800bb04:	688a      	ldr	r2, [r1, #8]
 800bb06:	690b      	ldr	r3, [r1, #16]
 800bb08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	bfb8      	it	lt
 800bb10:	4613      	movlt	r3, r2
 800bb12:	6033      	str	r3, [r6, #0]
 800bb14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb18:	4607      	mov	r7, r0
 800bb1a:	460c      	mov	r4, r1
 800bb1c:	b10a      	cbz	r2, 800bb22 <_printf_common+0x26>
 800bb1e:	3301      	adds	r3, #1
 800bb20:	6033      	str	r3, [r6, #0]
 800bb22:	6823      	ldr	r3, [r4, #0]
 800bb24:	0699      	lsls	r1, r3, #26
 800bb26:	bf42      	ittt	mi
 800bb28:	6833      	ldrmi	r3, [r6, #0]
 800bb2a:	3302      	addmi	r3, #2
 800bb2c:	6033      	strmi	r3, [r6, #0]
 800bb2e:	6825      	ldr	r5, [r4, #0]
 800bb30:	f015 0506 	ands.w	r5, r5, #6
 800bb34:	d106      	bne.n	800bb44 <_printf_common+0x48>
 800bb36:	f104 0a19 	add.w	sl, r4, #25
 800bb3a:	68e3      	ldr	r3, [r4, #12]
 800bb3c:	6832      	ldr	r2, [r6, #0]
 800bb3e:	1a9b      	subs	r3, r3, r2
 800bb40:	42ab      	cmp	r3, r5
 800bb42:	dc26      	bgt.n	800bb92 <_printf_common+0x96>
 800bb44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb48:	1e13      	subs	r3, r2, #0
 800bb4a:	6822      	ldr	r2, [r4, #0]
 800bb4c:	bf18      	it	ne
 800bb4e:	2301      	movne	r3, #1
 800bb50:	0692      	lsls	r2, r2, #26
 800bb52:	d42b      	bmi.n	800bbac <_printf_common+0xb0>
 800bb54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb58:	4649      	mov	r1, r9
 800bb5a:	4638      	mov	r0, r7
 800bb5c:	47c0      	blx	r8
 800bb5e:	3001      	adds	r0, #1
 800bb60:	d01e      	beq.n	800bba0 <_printf_common+0xa4>
 800bb62:	6823      	ldr	r3, [r4, #0]
 800bb64:	68e5      	ldr	r5, [r4, #12]
 800bb66:	6832      	ldr	r2, [r6, #0]
 800bb68:	f003 0306 	and.w	r3, r3, #6
 800bb6c:	2b04      	cmp	r3, #4
 800bb6e:	bf08      	it	eq
 800bb70:	1aad      	subeq	r5, r5, r2
 800bb72:	68a3      	ldr	r3, [r4, #8]
 800bb74:	6922      	ldr	r2, [r4, #16]
 800bb76:	bf0c      	ite	eq
 800bb78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb7c:	2500      	movne	r5, #0
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	bfc4      	itt	gt
 800bb82:	1a9b      	subgt	r3, r3, r2
 800bb84:	18ed      	addgt	r5, r5, r3
 800bb86:	2600      	movs	r6, #0
 800bb88:	341a      	adds	r4, #26
 800bb8a:	42b5      	cmp	r5, r6
 800bb8c:	d11a      	bne.n	800bbc4 <_printf_common+0xc8>
 800bb8e:	2000      	movs	r0, #0
 800bb90:	e008      	b.n	800bba4 <_printf_common+0xa8>
 800bb92:	2301      	movs	r3, #1
 800bb94:	4652      	mov	r2, sl
 800bb96:	4649      	mov	r1, r9
 800bb98:	4638      	mov	r0, r7
 800bb9a:	47c0      	blx	r8
 800bb9c:	3001      	adds	r0, #1
 800bb9e:	d103      	bne.n	800bba8 <_printf_common+0xac>
 800bba0:	f04f 30ff 	mov.w	r0, #4294967295
 800bba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bba8:	3501      	adds	r5, #1
 800bbaa:	e7c6      	b.n	800bb3a <_printf_common+0x3e>
 800bbac:	18e1      	adds	r1, r4, r3
 800bbae:	1c5a      	adds	r2, r3, #1
 800bbb0:	2030      	movs	r0, #48	; 0x30
 800bbb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbb6:	4422      	add	r2, r4
 800bbb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbc0:	3302      	adds	r3, #2
 800bbc2:	e7c7      	b.n	800bb54 <_printf_common+0x58>
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	4622      	mov	r2, r4
 800bbc8:	4649      	mov	r1, r9
 800bbca:	4638      	mov	r0, r7
 800bbcc:	47c0      	blx	r8
 800bbce:	3001      	adds	r0, #1
 800bbd0:	d0e6      	beq.n	800bba0 <_printf_common+0xa4>
 800bbd2:	3601      	adds	r6, #1
 800bbd4:	e7d9      	b.n	800bb8a <_printf_common+0x8e>
	...

0800bbd8 <_printf_i>:
 800bbd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbdc:	7e0f      	ldrb	r7, [r1, #24]
 800bbde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bbe0:	2f78      	cmp	r7, #120	; 0x78
 800bbe2:	4691      	mov	r9, r2
 800bbe4:	4680      	mov	r8, r0
 800bbe6:	460c      	mov	r4, r1
 800bbe8:	469a      	mov	sl, r3
 800bbea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bbee:	d807      	bhi.n	800bc00 <_printf_i+0x28>
 800bbf0:	2f62      	cmp	r7, #98	; 0x62
 800bbf2:	d80a      	bhi.n	800bc0a <_printf_i+0x32>
 800bbf4:	2f00      	cmp	r7, #0
 800bbf6:	f000 80d8 	beq.w	800bdaa <_printf_i+0x1d2>
 800bbfa:	2f58      	cmp	r7, #88	; 0x58
 800bbfc:	f000 80a3 	beq.w	800bd46 <_printf_i+0x16e>
 800bc00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc08:	e03a      	b.n	800bc80 <_printf_i+0xa8>
 800bc0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc0e:	2b15      	cmp	r3, #21
 800bc10:	d8f6      	bhi.n	800bc00 <_printf_i+0x28>
 800bc12:	a101      	add	r1, pc, #4	; (adr r1, 800bc18 <_printf_i+0x40>)
 800bc14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc18:	0800bc71 	.word	0x0800bc71
 800bc1c:	0800bc85 	.word	0x0800bc85
 800bc20:	0800bc01 	.word	0x0800bc01
 800bc24:	0800bc01 	.word	0x0800bc01
 800bc28:	0800bc01 	.word	0x0800bc01
 800bc2c:	0800bc01 	.word	0x0800bc01
 800bc30:	0800bc85 	.word	0x0800bc85
 800bc34:	0800bc01 	.word	0x0800bc01
 800bc38:	0800bc01 	.word	0x0800bc01
 800bc3c:	0800bc01 	.word	0x0800bc01
 800bc40:	0800bc01 	.word	0x0800bc01
 800bc44:	0800bd91 	.word	0x0800bd91
 800bc48:	0800bcb5 	.word	0x0800bcb5
 800bc4c:	0800bd73 	.word	0x0800bd73
 800bc50:	0800bc01 	.word	0x0800bc01
 800bc54:	0800bc01 	.word	0x0800bc01
 800bc58:	0800bdb3 	.word	0x0800bdb3
 800bc5c:	0800bc01 	.word	0x0800bc01
 800bc60:	0800bcb5 	.word	0x0800bcb5
 800bc64:	0800bc01 	.word	0x0800bc01
 800bc68:	0800bc01 	.word	0x0800bc01
 800bc6c:	0800bd7b 	.word	0x0800bd7b
 800bc70:	682b      	ldr	r3, [r5, #0]
 800bc72:	1d1a      	adds	r2, r3, #4
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	602a      	str	r2, [r5, #0]
 800bc78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc80:	2301      	movs	r3, #1
 800bc82:	e0a3      	b.n	800bdcc <_printf_i+0x1f4>
 800bc84:	6820      	ldr	r0, [r4, #0]
 800bc86:	6829      	ldr	r1, [r5, #0]
 800bc88:	0606      	lsls	r6, r0, #24
 800bc8a:	f101 0304 	add.w	r3, r1, #4
 800bc8e:	d50a      	bpl.n	800bca6 <_printf_i+0xce>
 800bc90:	680e      	ldr	r6, [r1, #0]
 800bc92:	602b      	str	r3, [r5, #0]
 800bc94:	2e00      	cmp	r6, #0
 800bc96:	da03      	bge.n	800bca0 <_printf_i+0xc8>
 800bc98:	232d      	movs	r3, #45	; 0x2d
 800bc9a:	4276      	negs	r6, r6
 800bc9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bca0:	485e      	ldr	r0, [pc, #376]	; (800be1c <_printf_i+0x244>)
 800bca2:	230a      	movs	r3, #10
 800bca4:	e019      	b.n	800bcda <_printf_i+0x102>
 800bca6:	680e      	ldr	r6, [r1, #0]
 800bca8:	602b      	str	r3, [r5, #0]
 800bcaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bcae:	bf18      	it	ne
 800bcb0:	b236      	sxthne	r6, r6
 800bcb2:	e7ef      	b.n	800bc94 <_printf_i+0xbc>
 800bcb4:	682b      	ldr	r3, [r5, #0]
 800bcb6:	6820      	ldr	r0, [r4, #0]
 800bcb8:	1d19      	adds	r1, r3, #4
 800bcba:	6029      	str	r1, [r5, #0]
 800bcbc:	0601      	lsls	r1, r0, #24
 800bcbe:	d501      	bpl.n	800bcc4 <_printf_i+0xec>
 800bcc0:	681e      	ldr	r6, [r3, #0]
 800bcc2:	e002      	b.n	800bcca <_printf_i+0xf2>
 800bcc4:	0646      	lsls	r6, r0, #25
 800bcc6:	d5fb      	bpl.n	800bcc0 <_printf_i+0xe8>
 800bcc8:	881e      	ldrh	r6, [r3, #0]
 800bcca:	4854      	ldr	r0, [pc, #336]	; (800be1c <_printf_i+0x244>)
 800bccc:	2f6f      	cmp	r7, #111	; 0x6f
 800bcce:	bf0c      	ite	eq
 800bcd0:	2308      	moveq	r3, #8
 800bcd2:	230a      	movne	r3, #10
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcda:	6865      	ldr	r5, [r4, #4]
 800bcdc:	60a5      	str	r5, [r4, #8]
 800bcde:	2d00      	cmp	r5, #0
 800bce0:	bfa2      	ittt	ge
 800bce2:	6821      	ldrge	r1, [r4, #0]
 800bce4:	f021 0104 	bicge.w	r1, r1, #4
 800bce8:	6021      	strge	r1, [r4, #0]
 800bcea:	b90e      	cbnz	r6, 800bcf0 <_printf_i+0x118>
 800bcec:	2d00      	cmp	r5, #0
 800bcee:	d04d      	beq.n	800bd8c <_printf_i+0x1b4>
 800bcf0:	4615      	mov	r5, r2
 800bcf2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bcf6:	fb03 6711 	mls	r7, r3, r1, r6
 800bcfa:	5dc7      	ldrb	r7, [r0, r7]
 800bcfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd00:	4637      	mov	r7, r6
 800bd02:	42bb      	cmp	r3, r7
 800bd04:	460e      	mov	r6, r1
 800bd06:	d9f4      	bls.n	800bcf2 <_printf_i+0x11a>
 800bd08:	2b08      	cmp	r3, #8
 800bd0a:	d10b      	bne.n	800bd24 <_printf_i+0x14c>
 800bd0c:	6823      	ldr	r3, [r4, #0]
 800bd0e:	07de      	lsls	r6, r3, #31
 800bd10:	d508      	bpl.n	800bd24 <_printf_i+0x14c>
 800bd12:	6923      	ldr	r3, [r4, #16]
 800bd14:	6861      	ldr	r1, [r4, #4]
 800bd16:	4299      	cmp	r1, r3
 800bd18:	bfde      	ittt	le
 800bd1a:	2330      	movle	r3, #48	; 0x30
 800bd1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd20:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd24:	1b52      	subs	r2, r2, r5
 800bd26:	6122      	str	r2, [r4, #16]
 800bd28:	f8cd a000 	str.w	sl, [sp]
 800bd2c:	464b      	mov	r3, r9
 800bd2e:	aa03      	add	r2, sp, #12
 800bd30:	4621      	mov	r1, r4
 800bd32:	4640      	mov	r0, r8
 800bd34:	f7ff fee2 	bl	800bafc <_printf_common>
 800bd38:	3001      	adds	r0, #1
 800bd3a:	d14c      	bne.n	800bdd6 <_printf_i+0x1fe>
 800bd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd40:	b004      	add	sp, #16
 800bd42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd46:	4835      	ldr	r0, [pc, #212]	; (800be1c <_printf_i+0x244>)
 800bd48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bd4c:	6829      	ldr	r1, [r5, #0]
 800bd4e:	6823      	ldr	r3, [r4, #0]
 800bd50:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd54:	6029      	str	r1, [r5, #0]
 800bd56:	061d      	lsls	r5, r3, #24
 800bd58:	d514      	bpl.n	800bd84 <_printf_i+0x1ac>
 800bd5a:	07df      	lsls	r7, r3, #31
 800bd5c:	bf44      	itt	mi
 800bd5e:	f043 0320 	orrmi.w	r3, r3, #32
 800bd62:	6023      	strmi	r3, [r4, #0]
 800bd64:	b91e      	cbnz	r6, 800bd6e <_printf_i+0x196>
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	f023 0320 	bic.w	r3, r3, #32
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	2310      	movs	r3, #16
 800bd70:	e7b0      	b.n	800bcd4 <_printf_i+0xfc>
 800bd72:	6823      	ldr	r3, [r4, #0]
 800bd74:	f043 0320 	orr.w	r3, r3, #32
 800bd78:	6023      	str	r3, [r4, #0]
 800bd7a:	2378      	movs	r3, #120	; 0x78
 800bd7c:	4828      	ldr	r0, [pc, #160]	; (800be20 <_printf_i+0x248>)
 800bd7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd82:	e7e3      	b.n	800bd4c <_printf_i+0x174>
 800bd84:	0659      	lsls	r1, r3, #25
 800bd86:	bf48      	it	mi
 800bd88:	b2b6      	uxthmi	r6, r6
 800bd8a:	e7e6      	b.n	800bd5a <_printf_i+0x182>
 800bd8c:	4615      	mov	r5, r2
 800bd8e:	e7bb      	b.n	800bd08 <_printf_i+0x130>
 800bd90:	682b      	ldr	r3, [r5, #0]
 800bd92:	6826      	ldr	r6, [r4, #0]
 800bd94:	6961      	ldr	r1, [r4, #20]
 800bd96:	1d18      	adds	r0, r3, #4
 800bd98:	6028      	str	r0, [r5, #0]
 800bd9a:	0635      	lsls	r5, r6, #24
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	d501      	bpl.n	800bda4 <_printf_i+0x1cc>
 800bda0:	6019      	str	r1, [r3, #0]
 800bda2:	e002      	b.n	800bdaa <_printf_i+0x1d2>
 800bda4:	0670      	lsls	r0, r6, #25
 800bda6:	d5fb      	bpl.n	800bda0 <_printf_i+0x1c8>
 800bda8:	8019      	strh	r1, [r3, #0]
 800bdaa:	2300      	movs	r3, #0
 800bdac:	6123      	str	r3, [r4, #16]
 800bdae:	4615      	mov	r5, r2
 800bdb0:	e7ba      	b.n	800bd28 <_printf_i+0x150>
 800bdb2:	682b      	ldr	r3, [r5, #0]
 800bdb4:	1d1a      	adds	r2, r3, #4
 800bdb6:	602a      	str	r2, [r5, #0]
 800bdb8:	681d      	ldr	r5, [r3, #0]
 800bdba:	6862      	ldr	r2, [r4, #4]
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	f7f4 fa8e 	bl	80002e0 <memchr>
 800bdc4:	b108      	cbz	r0, 800bdca <_printf_i+0x1f2>
 800bdc6:	1b40      	subs	r0, r0, r5
 800bdc8:	6060      	str	r0, [r4, #4]
 800bdca:	6863      	ldr	r3, [r4, #4]
 800bdcc:	6123      	str	r3, [r4, #16]
 800bdce:	2300      	movs	r3, #0
 800bdd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdd4:	e7a8      	b.n	800bd28 <_printf_i+0x150>
 800bdd6:	6923      	ldr	r3, [r4, #16]
 800bdd8:	462a      	mov	r2, r5
 800bdda:	4649      	mov	r1, r9
 800bddc:	4640      	mov	r0, r8
 800bdde:	47d0      	blx	sl
 800bde0:	3001      	adds	r0, #1
 800bde2:	d0ab      	beq.n	800bd3c <_printf_i+0x164>
 800bde4:	6823      	ldr	r3, [r4, #0]
 800bde6:	079b      	lsls	r3, r3, #30
 800bde8:	d413      	bmi.n	800be12 <_printf_i+0x23a>
 800bdea:	68e0      	ldr	r0, [r4, #12]
 800bdec:	9b03      	ldr	r3, [sp, #12]
 800bdee:	4298      	cmp	r0, r3
 800bdf0:	bfb8      	it	lt
 800bdf2:	4618      	movlt	r0, r3
 800bdf4:	e7a4      	b.n	800bd40 <_printf_i+0x168>
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	4632      	mov	r2, r6
 800bdfa:	4649      	mov	r1, r9
 800bdfc:	4640      	mov	r0, r8
 800bdfe:	47d0      	blx	sl
 800be00:	3001      	adds	r0, #1
 800be02:	d09b      	beq.n	800bd3c <_printf_i+0x164>
 800be04:	3501      	adds	r5, #1
 800be06:	68e3      	ldr	r3, [r4, #12]
 800be08:	9903      	ldr	r1, [sp, #12]
 800be0a:	1a5b      	subs	r3, r3, r1
 800be0c:	42ab      	cmp	r3, r5
 800be0e:	dcf2      	bgt.n	800bdf6 <_printf_i+0x21e>
 800be10:	e7eb      	b.n	800bdea <_printf_i+0x212>
 800be12:	2500      	movs	r5, #0
 800be14:	f104 0619 	add.w	r6, r4, #25
 800be18:	e7f5      	b.n	800be06 <_printf_i+0x22e>
 800be1a:	bf00      	nop
 800be1c:	08013005 	.word	0x08013005
 800be20:	08013016 	.word	0x08013016

0800be24 <memcpy>:
 800be24:	440a      	add	r2, r1
 800be26:	4291      	cmp	r1, r2
 800be28:	f100 33ff 	add.w	r3, r0, #4294967295
 800be2c:	d100      	bne.n	800be30 <memcpy+0xc>
 800be2e:	4770      	bx	lr
 800be30:	b510      	push	{r4, lr}
 800be32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be3a:	4291      	cmp	r1, r2
 800be3c:	d1f9      	bne.n	800be32 <memcpy+0xe>
 800be3e:	bd10      	pop	{r4, pc}

0800be40 <memmove>:
 800be40:	4288      	cmp	r0, r1
 800be42:	b510      	push	{r4, lr}
 800be44:	eb01 0402 	add.w	r4, r1, r2
 800be48:	d902      	bls.n	800be50 <memmove+0x10>
 800be4a:	4284      	cmp	r4, r0
 800be4c:	4623      	mov	r3, r4
 800be4e:	d807      	bhi.n	800be60 <memmove+0x20>
 800be50:	1e43      	subs	r3, r0, #1
 800be52:	42a1      	cmp	r1, r4
 800be54:	d008      	beq.n	800be68 <memmove+0x28>
 800be56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be5e:	e7f8      	b.n	800be52 <memmove+0x12>
 800be60:	4402      	add	r2, r0
 800be62:	4601      	mov	r1, r0
 800be64:	428a      	cmp	r2, r1
 800be66:	d100      	bne.n	800be6a <memmove+0x2a>
 800be68:	bd10      	pop	{r4, pc}
 800be6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be72:	e7f7      	b.n	800be64 <memmove+0x24>

0800be74 <_free_r>:
 800be74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be76:	2900      	cmp	r1, #0
 800be78:	d044      	beq.n	800bf04 <_free_r+0x90>
 800be7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be7e:	9001      	str	r0, [sp, #4]
 800be80:	2b00      	cmp	r3, #0
 800be82:	f1a1 0404 	sub.w	r4, r1, #4
 800be86:	bfb8      	it	lt
 800be88:	18e4      	addlt	r4, r4, r3
 800be8a:	f000 f913 	bl	800c0b4 <__malloc_lock>
 800be8e:	4a1e      	ldr	r2, [pc, #120]	; (800bf08 <_free_r+0x94>)
 800be90:	9801      	ldr	r0, [sp, #4]
 800be92:	6813      	ldr	r3, [r2, #0]
 800be94:	b933      	cbnz	r3, 800bea4 <_free_r+0x30>
 800be96:	6063      	str	r3, [r4, #4]
 800be98:	6014      	str	r4, [r2, #0]
 800be9a:	b003      	add	sp, #12
 800be9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bea0:	f000 b90e 	b.w	800c0c0 <__malloc_unlock>
 800bea4:	42a3      	cmp	r3, r4
 800bea6:	d908      	bls.n	800beba <_free_r+0x46>
 800bea8:	6825      	ldr	r5, [r4, #0]
 800beaa:	1961      	adds	r1, r4, r5
 800beac:	428b      	cmp	r3, r1
 800beae:	bf01      	itttt	eq
 800beb0:	6819      	ldreq	r1, [r3, #0]
 800beb2:	685b      	ldreq	r3, [r3, #4]
 800beb4:	1949      	addeq	r1, r1, r5
 800beb6:	6021      	streq	r1, [r4, #0]
 800beb8:	e7ed      	b.n	800be96 <_free_r+0x22>
 800beba:	461a      	mov	r2, r3
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	b10b      	cbz	r3, 800bec4 <_free_r+0x50>
 800bec0:	42a3      	cmp	r3, r4
 800bec2:	d9fa      	bls.n	800beba <_free_r+0x46>
 800bec4:	6811      	ldr	r1, [r2, #0]
 800bec6:	1855      	adds	r5, r2, r1
 800bec8:	42a5      	cmp	r5, r4
 800beca:	d10b      	bne.n	800bee4 <_free_r+0x70>
 800becc:	6824      	ldr	r4, [r4, #0]
 800bece:	4421      	add	r1, r4
 800bed0:	1854      	adds	r4, r2, r1
 800bed2:	42a3      	cmp	r3, r4
 800bed4:	6011      	str	r1, [r2, #0]
 800bed6:	d1e0      	bne.n	800be9a <_free_r+0x26>
 800bed8:	681c      	ldr	r4, [r3, #0]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	6053      	str	r3, [r2, #4]
 800bede:	4421      	add	r1, r4
 800bee0:	6011      	str	r1, [r2, #0]
 800bee2:	e7da      	b.n	800be9a <_free_r+0x26>
 800bee4:	d902      	bls.n	800beec <_free_r+0x78>
 800bee6:	230c      	movs	r3, #12
 800bee8:	6003      	str	r3, [r0, #0]
 800beea:	e7d6      	b.n	800be9a <_free_r+0x26>
 800beec:	6825      	ldr	r5, [r4, #0]
 800beee:	1961      	adds	r1, r4, r5
 800bef0:	428b      	cmp	r3, r1
 800bef2:	bf04      	itt	eq
 800bef4:	6819      	ldreq	r1, [r3, #0]
 800bef6:	685b      	ldreq	r3, [r3, #4]
 800bef8:	6063      	str	r3, [r4, #4]
 800befa:	bf04      	itt	eq
 800befc:	1949      	addeq	r1, r1, r5
 800befe:	6021      	streq	r1, [r4, #0]
 800bf00:	6054      	str	r4, [r2, #4]
 800bf02:	e7ca      	b.n	800be9a <_free_r+0x26>
 800bf04:	b003      	add	sp, #12
 800bf06:	bd30      	pop	{r4, r5, pc}
 800bf08:	240009fc 	.word	0x240009fc

0800bf0c <sbrk_aligned>:
 800bf0c:	b570      	push	{r4, r5, r6, lr}
 800bf0e:	4e0e      	ldr	r6, [pc, #56]	; (800bf48 <sbrk_aligned+0x3c>)
 800bf10:	460c      	mov	r4, r1
 800bf12:	6831      	ldr	r1, [r6, #0]
 800bf14:	4605      	mov	r5, r0
 800bf16:	b911      	cbnz	r1, 800bf1e <sbrk_aligned+0x12>
 800bf18:	f000 f8bc 	bl	800c094 <_sbrk_r>
 800bf1c:	6030      	str	r0, [r6, #0]
 800bf1e:	4621      	mov	r1, r4
 800bf20:	4628      	mov	r0, r5
 800bf22:	f000 f8b7 	bl	800c094 <_sbrk_r>
 800bf26:	1c43      	adds	r3, r0, #1
 800bf28:	d00a      	beq.n	800bf40 <sbrk_aligned+0x34>
 800bf2a:	1cc4      	adds	r4, r0, #3
 800bf2c:	f024 0403 	bic.w	r4, r4, #3
 800bf30:	42a0      	cmp	r0, r4
 800bf32:	d007      	beq.n	800bf44 <sbrk_aligned+0x38>
 800bf34:	1a21      	subs	r1, r4, r0
 800bf36:	4628      	mov	r0, r5
 800bf38:	f000 f8ac 	bl	800c094 <_sbrk_r>
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	d101      	bne.n	800bf44 <sbrk_aligned+0x38>
 800bf40:	f04f 34ff 	mov.w	r4, #4294967295
 800bf44:	4620      	mov	r0, r4
 800bf46:	bd70      	pop	{r4, r5, r6, pc}
 800bf48:	24000a00 	.word	0x24000a00

0800bf4c <_malloc_r>:
 800bf4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf50:	1ccd      	adds	r5, r1, #3
 800bf52:	f025 0503 	bic.w	r5, r5, #3
 800bf56:	3508      	adds	r5, #8
 800bf58:	2d0c      	cmp	r5, #12
 800bf5a:	bf38      	it	cc
 800bf5c:	250c      	movcc	r5, #12
 800bf5e:	2d00      	cmp	r5, #0
 800bf60:	4607      	mov	r7, r0
 800bf62:	db01      	blt.n	800bf68 <_malloc_r+0x1c>
 800bf64:	42a9      	cmp	r1, r5
 800bf66:	d905      	bls.n	800bf74 <_malloc_r+0x28>
 800bf68:	230c      	movs	r3, #12
 800bf6a:	603b      	str	r3, [r7, #0]
 800bf6c:	2600      	movs	r6, #0
 800bf6e:	4630      	mov	r0, r6
 800bf70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf74:	4e2e      	ldr	r6, [pc, #184]	; (800c030 <_malloc_r+0xe4>)
 800bf76:	f000 f89d 	bl	800c0b4 <__malloc_lock>
 800bf7a:	6833      	ldr	r3, [r6, #0]
 800bf7c:	461c      	mov	r4, r3
 800bf7e:	bb34      	cbnz	r4, 800bfce <_malloc_r+0x82>
 800bf80:	4629      	mov	r1, r5
 800bf82:	4638      	mov	r0, r7
 800bf84:	f7ff ffc2 	bl	800bf0c <sbrk_aligned>
 800bf88:	1c43      	adds	r3, r0, #1
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	d14d      	bne.n	800c02a <_malloc_r+0xde>
 800bf8e:	6834      	ldr	r4, [r6, #0]
 800bf90:	4626      	mov	r6, r4
 800bf92:	2e00      	cmp	r6, #0
 800bf94:	d140      	bne.n	800c018 <_malloc_r+0xcc>
 800bf96:	6823      	ldr	r3, [r4, #0]
 800bf98:	4631      	mov	r1, r6
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	eb04 0803 	add.w	r8, r4, r3
 800bfa0:	f000 f878 	bl	800c094 <_sbrk_r>
 800bfa4:	4580      	cmp	r8, r0
 800bfa6:	d13a      	bne.n	800c01e <_malloc_r+0xd2>
 800bfa8:	6821      	ldr	r1, [r4, #0]
 800bfaa:	3503      	adds	r5, #3
 800bfac:	1a6d      	subs	r5, r5, r1
 800bfae:	f025 0503 	bic.w	r5, r5, #3
 800bfb2:	3508      	adds	r5, #8
 800bfb4:	2d0c      	cmp	r5, #12
 800bfb6:	bf38      	it	cc
 800bfb8:	250c      	movcc	r5, #12
 800bfba:	4629      	mov	r1, r5
 800bfbc:	4638      	mov	r0, r7
 800bfbe:	f7ff ffa5 	bl	800bf0c <sbrk_aligned>
 800bfc2:	3001      	adds	r0, #1
 800bfc4:	d02b      	beq.n	800c01e <_malloc_r+0xd2>
 800bfc6:	6823      	ldr	r3, [r4, #0]
 800bfc8:	442b      	add	r3, r5
 800bfca:	6023      	str	r3, [r4, #0]
 800bfcc:	e00e      	b.n	800bfec <_malloc_r+0xa0>
 800bfce:	6822      	ldr	r2, [r4, #0]
 800bfd0:	1b52      	subs	r2, r2, r5
 800bfd2:	d41e      	bmi.n	800c012 <_malloc_r+0xc6>
 800bfd4:	2a0b      	cmp	r2, #11
 800bfd6:	d916      	bls.n	800c006 <_malloc_r+0xba>
 800bfd8:	1961      	adds	r1, r4, r5
 800bfda:	42a3      	cmp	r3, r4
 800bfdc:	6025      	str	r5, [r4, #0]
 800bfde:	bf18      	it	ne
 800bfe0:	6059      	strne	r1, [r3, #4]
 800bfe2:	6863      	ldr	r3, [r4, #4]
 800bfe4:	bf08      	it	eq
 800bfe6:	6031      	streq	r1, [r6, #0]
 800bfe8:	5162      	str	r2, [r4, r5]
 800bfea:	604b      	str	r3, [r1, #4]
 800bfec:	4638      	mov	r0, r7
 800bfee:	f104 060b 	add.w	r6, r4, #11
 800bff2:	f000 f865 	bl	800c0c0 <__malloc_unlock>
 800bff6:	f026 0607 	bic.w	r6, r6, #7
 800bffa:	1d23      	adds	r3, r4, #4
 800bffc:	1af2      	subs	r2, r6, r3
 800bffe:	d0b6      	beq.n	800bf6e <_malloc_r+0x22>
 800c000:	1b9b      	subs	r3, r3, r6
 800c002:	50a3      	str	r3, [r4, r2]
 800c004:	e7b3      	b.n	800bf6e <_malloc_r+0x22>
 800c006:	6862      	ldr	r2, [r4, #4]
 800c008:	42a3      	cmp	r3, r4
 800c00a:	bf0c      	ite	eq
 800c00c:	6032      	streq	r2, [r6, #0]
 800c00e:	605a      	strne	r2, [r3, #4]
 800c010:	e7ec      	b.n	800bfec <_malloc_r+0xa0>
 800c012:	4623      	mov	r3, r4
 800c014:	6864      	ldr	r4, [r4, #4]
 800c016:	e7b2      	b.n	800bf7e <_malloc_r+0x32>
 800c018:	4634      	mov	r4, r6
 800c01a:	6876      	ldr	r6, [r6, #4]
 800c01c:	e7b9      	b.n	800bf92 <_malloc_r+0x46>
 800c01e:	230c      	movs	r3, #12
 800c020:	603b      	str	r3, [r7, #0]
 800c022:	4638      	mov	r0, r7
 800c024:	f000 f84c 	bl	800c0c0 <__malloc_unlock>
 800c028:	e7a1      	b.n	800bf6e <_malloc_r+0x22>
 800c02a:	6025      	str	r5, [r4, #0]
 800c02c:	e7de      	b.n	800bfec <_malloc_r+0xa0>
 800c02e:	bf00      	nop
 800c030:	240009fc 	.word	0x240009fc

0800c034 <_realloc_r>:
 800c034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c038:	4680      	mov	r8, r0
 800c03a:	4614      	mov	r4, r2
 800c03c:	460e      	mov	r6, r1
 800c03e:	b921      	cbnz	r1, 800c04a <_realloc_r+0x16>
 800c040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c044:	4611      	mov	r1, r2
 800c046:	f7ff bf81 	b.w	800bf4c <_malloc_r>
 800c04a:	b92a      	cbnz	r2, 800c058 <_realloc_r+0x24>
 800c04c:	f7ff ff12 	bl	800be74 <_free_r>
 800c050:	4625      	mov	r5, r4
 800c052:	4628      	mov	r0, r5
 800c054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c058:	f000 f838 	bl	800c0cc <_malloc_usable_size_r>
 800c05c:	4284      	cmp	r4, r0
 800c05e:	4607      	mov	r7, r0
 800c060:	d802      	bhi.n	800c068 <_realloc_r+0x34>
 800c062:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c066:	d812      	bhi.n	800c08e <_realloc_r+0x5a>
 800c068:	4621      	mov	r1, r4
 800c06a:	4640      	mov	r0, r8
 800c06c:	f7ff ff6e 	bl	800bf4c <_malloc_r>
 800c070:	4605      	mov	r5, r0
 800c072:	2800      	cmp	r0, #0
 800c074:	d0ed      	beq.n	800c052 <_realloc_r+0x1e>
 800c076:	42bc      	cmp	r4, r7
 800c078:	4622      	mov	r2, r4
 800c07a:	4631      	mov	r1, r6
 800c07c:	bf28      	it	cs
 800c07e:	463a      	movcs	r2, r7
 800c080:	f7ff fed0 	bl	800be24 <memcpy>
 800c084:	4631      	mov	r1, r6
 800c086:	4640      	mov	r0, r8
 800c088:	f7ff fef4 	bl	800be74 <_free_r>
 800c08c:	e7e1      	b.n	800c052 <_realloc_r+0x1e>
 800c08e:	4635      	mov	r5, r6
 800c090:	e7df      	b.n	800c052 <_realloc_r+0x1e>
	...

0800c094 <_sbrk_r>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	4d06      	ldr	r5, [pc, #24]	; (800c0b0 <_sbrk_r+0x1c>)
 800c098:	2300      	movs	r3, #0
 800c09a:	4604      	mov	r4, r0
 800c09c:	4608      	mov	r0, r1
 800c09e:	602b      	str	r3, [r5, #0]
 800c0a0:	f7f4 febe 	bl	8000e20 <_sbrk>
 800c0a4:	1c43      	adds	r3, r0, #1
 800c0a6:	d102      	bne.n	800c0ae <_sbrk_r+0x1a>
 800c0a8:	682b      	ldr	r3, [r5, #0]
 800c0aa:	b103      	cbz	r3, 800c0ae <_sbrk_r+0x1a>
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	bd38      	pop	{r3, r4, r5, pc}
 800c0b0:	24000a04 	.word	0x24000a04

0800c0b4 <__malloc_lock>:
 800c0b4:	4801      	ldr	r0, [pc, #4]	; (800c0bc <__malloc_lock+0x8>)
 800c0b6:	f000 b811 	b.w	800c0dc <__retarget_lock_acquire_recursive>
 800c0ba:	bf00      	nop
 800c0bc:	24000a08 	.word	0x24000a08

0800c0c0 <__malloc_unlock>:
 800c0c0:	4801      	ldr	r0, [pc, #4]	; (800c0c8 <__malloc_unlock+0x8>)
 800c0c2:	f000 b80c 	b.w	800c0de <__retarget_lock_release_recursive>
 800c0c6:	bf00      	nop
 800c0c8:	24000a08 	.word	0x24000a08

0800c0cc <_malloc_usable_size_r>:
 800c0cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0d0:	1f18      	subs	r0, r3, #4
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	bfbc      	itt	lt
 800c0d6:	580b      	ldrlt	r3, [r1, r0]
 800c0d8:	18c0      	addlt	r0, r0, r3
 800c0da:	4770      	bx	lr

0800c0dc <__retarget_lock_acquire_recursive>:
 800c0dc:	4770      	bx	lr

0800c0de <__retarget_lock_release_recursive>:
 800c0de:	4770      	bx	lr

0800c0e0 <_init>:
 800c0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e2:	bf00      	nop
 800c0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0e6:	bc08      	pop	{r3}
 800c0e8:	469e      	mov	lr, r3
 800c0ea:	4770      	bx	lr

0800c0ec <_fini>:
 800c0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ee:	bf00      	nop
 800c0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0f2:	bc08      	pop	{r3}
 800c0f4:	469e      	mov	lr, r3
 800c0f6:	4770      	bx	lr
